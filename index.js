// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    this['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (vararg) return 8;
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func) {
    var table = FUNCTION_TABLE;
    var ret = table.length;
    assert(ret % 2 === 0);
    table.push(func);
    for (var i = 0; i < 2-1; i++) table.push(0);
    return ret;
  },
  removeFunction: function (index) {
    var table = FUNCTION_TABLE;
    table[index] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    code = Pointer_stringify(code);
    if (code[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (code.indexOf('"', 1) === code.length-1) {
        code = code.substr(1, code.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + code + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    return Runtime.asmConstCache[code] = eval('(function(' + args.join(',') + '){ ' + code + ' })'); // new Function does not allow upvars in node
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((low>>>0)+((high>>>0)*4294967296)) : ((low>>>0)+((high|0)*4294967296))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    return rawList ? list : ret + flushList();
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;


// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    Module.printErr('Exiting runtime. Any attempt to access the compiled C code may fail from now. If you want to keep the runtime alive, set Module["noExitRuntime"] = true or build with -s NO_EXIT_RUNTIME=1');
  }
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 14112;



var _stdout;
var _stdout=_stdout=allocate(1, "i32*", ALLOC_STATIC);
var _stdin;
var _stdin=_stdin=allocate(1, "i32*", ALLOC_STATIC);
var _stderr;
var _stderr=_stderr=allocate(1, "i32*", ALLOC_STATIC);

/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } },{ func: function() { __GLOBAL__I_a() } });





























































































































































































































var ___dso_handle;
var ___dso_handle=___dso_handle=allocate(1, "i32*", ALLOC_STATIC);








































































































































var __ZTVN10__cxxabiv120__si_class_type_infoE;
__ZTVN10__cxxabiv120__si_class_type_infoE=allocate([0,0,0,0,224,37,0,0,220,2,0,0,80,1,0,0,164,0,0,0,128,1,0,0,206,0,0,0,104,0,0,0,244,0,0,0,22,1,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;
var __ZTVN10__cxxabiv117__class_type_infoE;
__ZTVN10__cxxabiv117__class_type_infoE=allocate([0,0,0,0,240,37,0,0,220,2,0,0,212,2,0,0,164,0,0,0,128,1,0,0,206,0,0,0,34,2,0,0,14,1,0,0,142,1,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;
































































































































































var __ZTISt9exception;
var __ZTISt9exception=__ZTISt9exception=allocate([allocate([1,0,0,0,0,0,0], "i8", ALLOC_STATIC)+8, 0], "i32", ALLOC_STATIC);






































































































































































































































































































var __ZNSt13runtime_errorC1EPKc;
var __ZNSt13runtime_errorD1Ev;
var __ZNSt12length_errorD1Ev;
var __ZNSt3__16localeC1Ev;
var __ZNSt3__16localeC1ERKS0_;
var __ZNSt3__16localeD1Ev;
var __ZNSt8bad_castC1Ev;
var __ZNSt8bad_castD1Ev;
/* memory initializer */ allocate([0,0,0,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,68,101,99,0,0,0,0,0,78,111,118,0,0,0,0,0,79,99,116,0,0,0,0,0,83,101,112,0,0,0,0,0,67,0,0,0,0,0,0,0,65,117,103,0,0,0,0,0,74,117,108,0,0,0,0,0,74,117,110,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,65,112,114,0,0,0,0,0,77,97,114,0,0,0,0,0,70,101,98,0,0,0,0,0,74,97,110,0,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,79,99,116,111,98,101,114,0,118,101,99,116,111,114,0,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,65,117,103,117,115,116,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,74,117,108,121,0,0,0,0,74,117,110,101,0,0,0,0,77,97,121,0,0,0,0,0,65,112,114,105,108,0,0,0,77,97,114,99,104,0,0,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,74,97,110,117,97,114,121,0,37,46,48,76,102,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,37,76,102,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,80,77,0,0,0,0,0,0,65,77,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,112,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,0,0,0,0,58,32,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,37,109,47,37,100,47,37,121,0,0,0,0,0,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,116,114,117,101,0,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,83,97,116,0,0,0,0,0,70,114,105,0,0,0,0,0,84,104,117,0,0,0,0,0,87,101,100,0,0,0,0,0,84,117,101,0,0,0,0,0,77,111,110,0,0,0,0,0,83,117,110,0,0,0,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,117,101,115,100,97,121,0,77,111,110,100,97,121,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,83,117,110,100,97,121,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,72,58,37,77,58,37,83,37,72,58,37,77,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,89,45,37,109,45,37,100,37,109,47,37,100,47,37,121,37,72,58,37,77,58,37,83,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,248,31,0,0,68,0,0,0,64,1,0,0,134,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,32,0,0,10,2,0,0,158,1,0,0,208,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,32,0,0,190,0,0,0,246,2,0,0,220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,32,0,0,0,1,0,0,16,0,0,0,86,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,32,0,0,0,1,0,0,38,0,0,0,86,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,32,0,0,166,1,0,0,224,0,0,0,120,0,0,0,206,1,0,0,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,32,0,0,232,2,0,0,218,1,0,0,120,0,0,0,194,2,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,32,0,0,156,1,0,0,222,1,0,0,120,0,0,0,208,1,0,0,216,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,32,0,0,238,2,0,0,112,1,0,0,120,0,0,0,192,1,0,0,22,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,33,0,0,226,2,0,0,252,0,0,0,120,0,0,0,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,33,0,0,152,1,0,0,48,1,0,0,120,0,0,0,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,33,0,0,90,0,0,0,50,1,0,0,120,0,0,0,136,2,0,0,20,0,0,0,224,1,0,0,28,0,0,0,204,0,0,0,138,2,0,0,232,0,0,0,248,255,255,255,144,33,0,0,116,0,0,0,48,0,0,0,182,0,0,0,78,0,0,0,8,0,0,0,168,0,0,0,168,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,33,0,0,210,2,0,0,148,2,0,0,120,0,0,0,112,0,0,0,130,0,0,0,170,2,0,0,124,1,0,0,166,0,0,0,14,0,0,0,112,2,0,0,248,255,255,255,184,33,0,0,98,1,0,0,58,2,0,0,114,2,0,0,156,2,0,0,20,2,0,0,246,0,0,0,32,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,33,0,0,214,0,0,0,228,1,0,0,120,0,0,0,10,1,0,0,228,0,0,0,118,0,0,0,102,1,0,0,176,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,33,0,0,160,0,0,0,178,0,0,0,120,0,0,0,238,0,0,0,214,1,0,0,162,0,0,0,200,1,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,0,0,214,2,0,0,2,0,0,0,120,0,0,0,132,1,0,0,228,2,0,0,40,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,34,0,0,114,0,0,0,108,2,0,0,120,0,0,0,146,2,0,0,212,0,0,0,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,34,0,0,126,2,0,0,58,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,34,0,0,64,0,0,0,110,1,0,0,220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,34,0,0,12,0,0,0,170,1,0,0,120,0,0,0,102,0,0,0,88,0,0,0,82,0,0,0,86,0,0,0,80,0,0,0,98,0,0,0,96,0,0,0,156,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,34,0,0,8,1,0,0,36,0,0,0,120,0,0,0,4,2,0,0,8,2,0,0,252,1,0,0,6,2,0,0,6,1,0,0,0,2,0,0,254,1,0,0,174,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,34,0,0,92,0,0,0,50,0,0,0,120,0,0,0,72,2,0,0,66,2,0,0,56,2,0,0,60,2,0,0,212,1,0,0,64,2,0,0,54,2,0,0,78,2,0,0,76,2,0,0,74,2,0,0,86,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,34,0,0,134,0,0,0,4,0,0,0,120,0,0,0,206,2,0,0,192,2,0,0,186,2,0,0,188,2,0,0,164,2,0,0,190,2,0,0,184,2,0,0,162,1,0,0,198,2,0,0,196,2,0,0,62,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,34,0,0,202,0,0,0,248,0,0,0,120,0,0,0,82,1,0,0,248,1,0,0,52,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,34,0,0,62,0,0,0,178,1,0,0,120,0,0,0,240,1,0,0,98,2,0,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,34,0,0,24,0,0,0,210,1,0,0,120,0,0,0,76,0,0,0,202,1,0,0,196,1,0,0,134,2,0,0,44,2,0,0,124,2,0,0,104,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,35,0,0,186,1,0,0,94,1,0,0,120,0,0,0,174,2,0,0,230,2,0,0,14,2,0,0,18,1,0,0,46,0,0,0,18,2,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,35,0,0,186,1,0,0,40,0,0,0,120,0,0,0,254,0,0,0,110,0,0,0,236,0,0,0,36,2,0,0,60,1,0,0,148,1,0,0,202,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,35,0,0,186,1,0,0,26,1,0,0,120,0,0,0,250,1,0,0,172,1,0,0,96,2,0,0,158,0,0,0,126,1,0,0,108,1,0,0,236,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,35,0,0,186,1,0,0,74,0,0,0,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,35,0,0,148,0,0,0,140,1,0,0,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,35,0,0,186,1,0,0,218,0,0,0,120,0,0,0,116,1,0,0,188,0,0,0,72,1,0,0,222,2,0,0,192,0,0,0,24,2,0,0,232,1,0,0,58,0,0,0,122,0,0,0,118,2,0,0,36,1,0,0,194,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,35,0,0,244,2,0,0,84,0,0,0,120,0,0,0,152,0,0,0,54,0,0,0,88,1,0,0,110,2,0,0,142,0,0,0,92,1,0,0,160,1,0,0,74,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,35,0,0,16,1,0,0,140,2,0,0,144,1,0,0,32,2,0,0,68,1,0,0,82,2,0,0,88,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,35,0,0,186,1,0,0,226,0,0,0,120,0,0,0,250,1,0,0,172,1,0,0,96,2,0,0,158,0,0,0,126,1,0,0,108,1,0,0,236,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,36,0,0,186,1,0,0,200,2,0,0,120,0,0,0,250,1,0,0,172,1,0,0,96,2,0,0,158,0,0,0,126,1,0,0,108,1,0,0,236,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,36,0,0,78,1,0,0,176,2,0,0,196,0,0,0,130,1,0,0,2,1,0,0,30,2,0,0,234,1,0,0,48,2,0,0,100,2,0,0,150,0,0,0,136,0,0,0,128,0,0,0,240,2,0,0,226,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,36,0,0,18,0,0,0,66,1,0,0,230,1,0,0,158,2,0,0,154,2,0,0,244,1,0,0,12,1,0,0,220,1,0,0,84,1,0,0,32,0,0,0,60,0,0,0,178,2,0,0,70,1,0,0,194,1,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,80,36,0,0,108,0,0,0,92,2,0,0,252,255,255,255,252,255,255,255,80,36,0,0,120,1,0,0,76,1,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,104,36,0,0,128,2,0,0,180,2,0,0,252,255,255,255,252,255,255,255,104,36,0,0,46,1,0,0,26,2,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,128,36,0,0,234,0,0,0,248,2,0,0,248,255,255,255,248,255,255,255,128,36,0,0,188,1,0,0,172,2,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,152,36,0,0,44,1,0,0,52,2,0,0,248,255,255,255,248,255,255,255,152,36,0,0,104,1,0,0,132,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,36,0,0,42,2,0,0,190,1,0,0,220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,36,0,0,70,2,0,0,152,2,0,0,184,0,0,0,130,1,0,0,2,1,0,0,30,2,0,0,40,1,0,0,48,2,0,0,100,2,0,0,150,0,0,0,136,0,0,0,128,0,0,0,68,2,0,0,182,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,36,0,0,240,0,0,0,184,1,0,0,54,1,0,0,158,2,0,0,154,2,0,0,244,1,0,0,236,1,0,0,220,1,0,0,84,1,0,0,32,0,0,0,60,0,0,0,178,2,0,0,204,2,0,0,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,37,0,0,142,2,0,0,118,1,0,0,120,0,0,0,96,1,0,0,120,2,0,0,150,1,0,0,224,2,0,0,56,0,0,0,28,1,0,0,24,1,0,0,216,0,0,0,90,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,37,0,0,42,1,0,0,144,0,0,0,120,0,0,0,94,2,0,0,10,0,0,0,46,2,0,0,144,2,0,0,162,2,0,0,242,0,0,0,106,2,0,0,180,1,0,0,138,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,37,0,0,150,2,0,0,62,1,0,0,120,0,0,0,100,0,0,0,56,1,0,0,70,0,0,0,136,1,0,0,234,2,0,0,182,1,0,0,16,2,0,0,204,1,0,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,37,0,0,210,0,0,0,168,1,0,0,120,0,0,0,50,2,0,0,80,2,0,0,20,1,0,0,116,2,0,0,250,0,0,0,200,0,0,0,146,1,0,0,90,2,0,0,84,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,37,0,0,70,2,0,0,34,0,0,0,216,1,0,0,130,1,0,0,2,1,0,0,30,2,0,0,234,1,0,0,48,2,0,0,100,2,0,0,106,1,0,0,198,1,0,0,172,0,0,0,240,2,0,0,226,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,37,0,0,240,0,0,0,130,2,0,0,246,1,0,0,158,2,0,0,154,2,0,0,244,1,0,0,12,1,0,0,220,1,0,0,84,1,0,0,28,2,0,0,126,0,0,0,30,0,0,0,70,1,0,0,194,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,37,0,0,220,2,0,0,12,2,0,0,164,0,0,0,128,1,0,0,206,0,0,0,66,0,0,0,122,2,0,0,30,1,0,0,0,0,0,0,0,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,0,0,0,0,88,20,0,0,0,0,0,0,104,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,20,0,0,56,32,0,0,0,0,0,0,0,0,0,0,184,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,20,0,0,48,20,0,0,224,20,0,0,0,0,0,0,2,0,0,0,120,35,0,0,2,0,0,0,248,36,0,0,0,0,0,0,48,20,0,0,40,21,0,0,0,0,0,0,2,0,0,0,120,35,0,0,2,0,0,0,0,37,0,0,0,0,0,0,48,20,0,0,112,21,0,0,0,0,0,0,2,0,0,0,120,35,0,0,2,0,0,0,8,37,0,0,0,0,0,0,48,20,0,0,184,21,0,0,0,0,0,0,2,0,0,0,120,35,0,0,2,0,0,0,16,37,0,0,0,0,0,0,0,0,0,0,0,22,0,0,64,34,0,0,0,0,0,0,0,0,0,0,48,22,0,0,64,34,0,0,0,0,0,0,48,20,0,0,96,22,0,0,0,0,0,0,1,0,0,0,56,36,0,0,0,0,0,0,48,20,0,0,120,22,0,0,0,0,0,0,1,0,0,0,56,36,0,0,0,0,0,0,48,20,0,0,144,22,0,0,0,0,0,0,1,0,0,0,64,36,0,0,0,0,0,0,48,20,0,0,168,22,0,0,0,0,0,0,1,0,0,0,64,36,0,0,0,0,0,0,48,20,0,0,192,22,0,0,0,0,0,0,2,0,0,0,120,35,0,0,2,0,0,0,168,37,0,0,0,8,0,0,48,20,0,0,8,23,0,0,0,0,0,0,2,0,0,0,120,35,0,0,2,0,0,0,168,37,0,0,0,8,0,0,48,20,0,0,80,23,0,0,0,0,0,0,3,0,0,0,120,35,0,0,2,0,0,0,72,32,0,0,2,0,0,0,216,35,0,0,0,8,0,0,48,20,0,0,152,23,0,0,0,0,0,0,3,0,0,0,120,35,0,0,2,0,0,0,72,32,0,0,2,0,0,0,224,35,0,0,0,8,0,0,0,0,0,0,224,23,0,0,120,35,0,0,0,0,0,0,0,0,0,0,248,23,0,0,120,35,0,0,0,0,0,0,48,20,0,0,16,24,0,0,0,0,0,0,2,0,0,0,120,35,0,0,2,0,0,0,72,36,0,0,2,0,0,0,48,20,0,0,40,24,0,0,0,0,0,0,2,0,0,0,120,35,0,0,2,0,0,0,72,36,0,0,2,0,0,0,0,0,0,0,64,24,0,0,0,0,0,0,88,24,0,0,176,36,0,0,0,0,0,0,48,20,0,0,120,24,0,0,0,0,0,0,2,0,0,0,120,35,0,0,2,0,0,0,240,32,0,0,0,0,0,0,48,20,0,0,192,24,0,0,0,0,0,0,2,0,0,0,120,35,0,0,2,0,0,0,8,33,0,0,0,0,0,0,48,20,0,0,8,25,0,0,0,0,0,0,2,0,0,0,120,35,0,0,2,0,0,0,32,33,0,0,0,0,0,0,48,20,0,0,80,25,0,0,0,0,0,0,2,0,0,0,120,35,0,0,2,0,0,0,56,33,0,0,0,0,0,0,0,0,0,0,152,25,0,0,120,35,0,0,0,0,0,0,0,0,0,0,176,25,0,0,120,35,0,0,0,0,0,0,48,20,0,0,200,25,0,0,0,0,0,0,2,0,0,0,120,35,0,0,2,0,0,0,192,36,0,0,2,0,0,0,48,20,0,0,240,25,0,0,0,0,0,0,2,0,0,0,120,35,0,0,2,0,0,0,192,36,0,0,2,0,0,0,48,20,0,0,24,26,0,0,0,0,0,0,2,0,0,0,120,35,0,0,2,0,0,0,192,36,0,0,2,0,0,0,48,20,0,0,64,26,0,0,0,0,0,0,2,0,0,0,120,35,0,0,2,0,0,0,192,36,0,0,2,0,0,0,0,0,0,0,104,26,0,0,48,36,0,0,0,0,0,0,0,0,0,0,128,26,0,0,120,35,0,0,0,0,0,0,48,20,0,0,152,26,0,0,0,0,0,0,2,0,0,0,120,35,0,0,2,0,0,0,160,37,0,0,2,0,0,0,48,20,0,0,176,26,0,0,0,0,0,0,2,0,0,0,120,35,0,0,2,0,0,0,160,37,0,0,2,0,0,0,0,0,0,0,200,26,0,0,0,0,0,0,240,26,0,0,0,0,0,0,24,27,0,0,200,36,0,0,0,0,0,0,0,0,0,0,56,27,0,0,88,35,0,0,0,0,0,0,0,0,0,0,96,27,0,0,88,35,0,0,0,0,0,0,0,0,0,0,136,27,0,0,0,0,0,0,192,27,0,0,0,0,0,0,248,27,0,0,0,0,0,0,24,28,0,0,0,0,0,0,56,28,0,0,0,0,0,0,88,28,0,0,0,0,0,0,120,28,0,0,48,20,0,0,144,28,0,0,0,0,0,0,1,0,0,0,208,32,0,0,3,244,255,255,48,20,0,0,192,28,0,0,0,0,0,0,1,0,0,0,224,32,0,0,3,244,255,255,48,20,0,0,240,28,0,0,0,0,0,0,1,0,0,0,208,32,0,0,3,244,255,255,48,20,0,0,32,29,0,0,0,0,0,0,1,0,0,0,224,32,0,0,3,244,255,255,0,0,0,0,80,29,0,0,24,32,0,0,0,0,0,0,0,0,0,0,104,29,0,0,0,0,0,0,128,29,0,0,40,36,0,0,0,0,0,0,0,0,0,0,152,29,0,0,24,36,0,0,0,0,0,0,0,0,0,0,184,29,0,0,32,36,0,0,0,0,0,0,0,0,0,0,216,29,0,0,0,0,0,0,248,29,0,0,0,0,0,0,24,30,0,0,0,0,0,0,56,30,0,0,48,20,0,0,88,30,0,0,0,0,0,0,2,0,0,0,120,35,0,0,2,0,0,0,152,37,0,0,2,0,0,0,48,20,0,0,120,30,0,0,0,0,0,0,2,0,0,0,120,35,0,0,2,0,0,0,152,37,0,0,2,0,0,0,48,20,0,0,152,30,0,0,0,0,0,0,2,0,0,0,120,35,0,0,2,0,0,0,152,37,0,0,2,0,0,0,48,20,0,0,184,30,0,0,0,0,0,0,2,0,0,0,120,35,0,0,2,0,0,0,152,37,0,0,2,0,0,0,0,0,0,0,216,30,0,0,0,0,0,0,240,30,0,0,0,0,0,0,8,31,0,0,0,0,0,0,32,31,0,0,24,36,0,0,0,0,0,0,0,0,0,0,56,31,0,0,32,36,0,0,0,0,0,0,0,0,0,0,80,31,0,0,240,37,0,0,0,0,0,0,0,0,0,0,120,31,0,0,240,37,0,0,0,0,0,0,0,0,0,0,160,31,0,0,0,38,0,0,0,0,0,0,0,0,0,0,200,31,0,0,240,31,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
function runPostSets() {

HEAP32[((8176 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((8184 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((8192 )>>2)]=__ZTISt9exception;
HEAP32[((8200 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((8208 )>>2)]=__ZTISt9exception;
HEAP32[((8216 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((8224 )>>2)]=__ZTISt9exception;
HEAP32[((8232 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((8248 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((8256 )>>2)]=__ZTISt9exception;
HEAP32[((8264 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((8400 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((8416 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((8672 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((8688 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((8768 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((8776 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((8920 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((8936 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9080 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9096 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9176 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9184 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9192 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9208 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9224 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9240 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9248 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9256 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9264 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9272 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9280 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9288 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9392 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9408 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9416 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9432 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9448 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9464 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9472 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9480 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9488 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9624 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9632 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9640 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9648 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9664 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9680 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9696 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9712 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9728 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
}

var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  function _rand_r(seedp) {
      seedp = seedp|0; 
      var val = 0;
      val = ((Math_imul(HEAP32[((seedp)>>2)], 31010991)|0) + 0x676e6177 ) & 2147483647; // assumes RAND_MAX is in bit mask form (power of 2 minus 1)
      HEAP32[((seedp)>>2)]=val;
      return val|0;
    }
  
  var ___rand_seed=allocate([0x0273459b, 0, 0, 0], "i32", ALLOC_STATIC);function _rand() {
      return _rand_r(___rand_seed)|0;
    }

  
  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    }function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            assert(buffer.length);
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        if (stream.__proto__) {
          // reuse the object
          stream.__proto__ = FS.FSStream.prototype;
        } else {
          var newStream = new FS.FSStream();
          for (var p in stream) {
            newStream[p] = stream[p];
          }
          stream = newStream;
        }
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
  
              if (!hasByteServing) chunkSize = datalength;
  
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
  
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
  
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
  
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
  
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
  
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        return Math.max(-1, Math.min(1, event.type === 'DOMMouseScroll' ? event.detail : -event.wheelDelta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x, y;
          
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
          if (event.type == 'touchstart' ||
              event.type == 'touchend' ||
              event.type == 'touchmove') {
            var t = event.touches.item(0);
            if (t) {
              x = t.pageX - (scrollX + rect.left);
              y = t.pageY - (scrollY + rect.top);
            } else {
              return;
            }
          } else {
            x = event.pageX - (scrollX + rect.left);
            y = event.pageY - (scrollY + rect.top);
          }
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      }};var SDL={defaults:{width:320,height:200,copyOnLock:true},version:null,surfaces:{},canvasPool:[],events:[],fonts:[null],audios:[null],rwops:[null],music:{audio:null,volume:1},mixerFrequency:22050,mixerFormat:32784,mixerNumChannels:2,mixerChunkSize:1024,channelMinimumNumber:0,GL:false,glAttributes:{0:3,1:3,2:2,3:0,4:0,5:1,6:16,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:1,16:0,17:0,18:0},keyboardState:null,keyboardMap:{},canRequestFullscreen:false,isRequestingFullscreen:false,textInput:false,startTime:null,initFlags:0,buttonState:0,modState:0,DOMButtons:[0,0,0],DOMEventToSDLEvent:{},keyCodes:{16:1249,17:1248,18:1250,33:1099,34:1102,37:1104,38:1106,39:1103,40:1105,46:127,96:1112,97:1113,98:1114,99:1115,100:1116,101:1117,102:1118,103:1119,104:1120,105:1121,112:1082,113:1083,114:1084,115:1085,116:1086,117:1087,118:1088,119:1089,120:1090,121:1091,122:1092,123:1093,173:45,188:44,190:46,191:47,192:96},scanCodes:{8:42,9:43,13:40,27:41,32:44,44:54,46:55,47:56,48:39,49:30,50:31,51:32,52:33,53:34,54:35,55:36,56:37,57:38,59:51,61:46,91:47,92:49,93:48,96:52,97:4,98:5,99:6,100:7,101:8,102:9,103:10,104:11,105:12,106:13,107:14,108:15,109:16,110:17,111:18,112:19,113:20,114:21,115:22,116:23,117:24,118:25,119:26,120:27,121:28,122:29,305:224,308:226},loadRect:function (rect) {
        return {
          x: HEAP32[((rect + 0)>>2)],
          y: HEAP32[((rect + 4)>>2)],
          w: HEAP32[((rect + 8)>>2)],
          h: HEAP32[((rect + 12)>>2)]
        };
      },loadColorToCSSRGB:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgb(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ')';
      },loadColorToCSSRGBA:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgba(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ',' + (((rgba >> 24)&255)/255) + ')';
      },translateColorToCSSRGBA:function (rgba) {
        return 'rgba(' + (rgba&0xff) + ',' + (rgba>>8 & 0xff) + ',' + (rgba>>16 & 0xff) + ',' + (rgba>>>24)/0xff + ')';
      },translateRGBAToCSSRGBA:function (r, g, b, a) {
        return 'rgba(' + (r&0xff) + ',' + (g&0xff) + ',' + (b&0xff) + ',' + (a&0xff)/255 + ')';
      },translateRGBAToColor:function (r, g, b, a) {
        return r | g << 8 | b << 16 | a << 24;
      },makeSurface:function (width, height, flags, usePageCanvas, source, rmask, gmask, bmask, amask) {
        flags = flags || 0;
        var is_SDL_HWSURFACE = flags & 0x00000001;
        var is_SDL_HWPALETTE = flags & 0x00200000;
        var is_SDL_OPENGL = flags & 0x04000000;
  
        var surf = _malloc(60);
        var pixelFormat = _malloc(44);
        //surface with SDL_HWPALETTE flag is 8bpp surface (1 byte)
        var bpp = is_SDL_HWPALETTE ? 1 : 4;
        var buffer = 0;
  
        // preemptively initialize this for software surfaces,
        // otherwise it will be lazily initialized inside of SDL_LockSurface
        if (!is_SDL_HWSURFACE && !is_SDL_OPENGL) {
          buffer = _malloc(width * height * 4);
        }
  
        HEAP32[((surf)>>2)]=flags;
        HEAP32[(((surf)+(4))>>2)]=pixelFormat;
        HEAP32[(((surf)+(8))>>2)]=width;
        HEAP32[(((surf)+(12))>>2)]=height;
        HEAP32[(((surf)+(16))>>2)]=width * bpp;  // assuming RGBA or indexed for now,
                                                                                          // since that is what ImageData gives us in browsers
        HEAP32[(((surf)+(20))>>2)]=buffer;
        HEAP32[(((surf)+(36))>>2)]=0;
        HEAP32[(((surf)+(56))>>2)]=1;
  
        HEAP32[((pixelFormat)>>2)]=0 /* XXX missing C define SDL_PIXELFORMAT_RGBA8888 */;
        HEAP32[(((pixelFormat)+(4))>>2)]=0;// TODO
        HEAP8[(((pixelFormat)+(8))|0)]=bpp * 8;
        HEAP8[(((pixelFormat)+(9))|0)]=bpp;
  
        HEAP32[(((pixelFormat)+(12))>>2)]=rmask || 0x000000ff;
        HEAP32[(((pixelFormat)+(16))>>2)]=gmask || 0x0000ff00;
        HEAP32[(((pixelFormat)+(20))>>2)]=bmask || 0x00ff0000;
        HEAP32[(((pixelFormat)+(24))>>2)]=amask || 0xff000000;
  
        // Decide if we want to use WebGL or not
        SDL.GL = SDL.GL || is_SDL_OPENGL;
        var canvas;
        if (!usePageCanvas) {
          if (SDL.canvasPool.length > 0) {
            canvas = SDL.canvasPool.pop();
          } else {
            canvas = document.createElement('canvas');
          }
          canvas.width = width;
          canvas.height = height;
        } else {
          canvas = Module['canvas'];
        }
  
        var webGLContextAttributes = {
          antialias: ((SDL.glAttributes[13 /*SDL_GL_MULTISAMPLEBUFFERS*/] != 0) && (SDL.glAttributes[14 /*SDL_GL_MULTISAMPLESAMPLES*/] > 1)),
          depth: (SDL.glAttributes[6 /*SDL_GL_DEPTH_SIZE*/] > 0),
          stencil: (SDL.glAttributes[7 /*SDL_GL_STENCIL_SIZE*/] > 0)
        };
        
        var ctx = Browser.createContext(canvas, is_SDL_OPENGL, usePageCanvas, webGLContextAttributes);
              
        SDL.surfaces[surf] = {
          width: width,
          height: height,
          canvas: canvas,
          ctx: ctx,
          surf: surf,
          buffer: buffer,
          pixelFormat: pixelFormat,
          alpha: 255,
          flags: flags,
          locked: 0,
          usePageCanvas: usePageCanvas,
          source: source,
  
          isFlagSet: function(flag) {
            return flags & flag;
          }
        };
  
        return surf;
      },copyIndexedColorData:function (surfData, rX, rY, rW, rH) {
        // HWPALETTE works with palette
        // setted by SDL_SetColors
        if (!surfData.colors) {
          return;
        }
        
        var fullWidth  = Module['canvas'].width;
        var fullHeight = Module['canvas'].height;
  
        var startX  = rX || 0;
        var startY  = rY || 0;
        var endX    = (rW || (fullWidth - startX)) + startX;
        var endY    = (rH || (fullHeight - startY)) + startY;
        
        var buffer  = surfData.buffer;
        var data    = surfData.image.data;
        var colors  = surfData.colors;
  
        for (var y = startY; y < endY; ++y) {
          var indexBase = y * fullWidth;
          var colorBase = indexBase * 4;
          for (var x = startX; x < endX; ++x) {
            // HWPALETTE have only 256 colors (not rgba)
            var index = HEAPU8[((buffer + indexBase + x)|0)] * 3;
            var colorOffset = colorBase + x * 4;
  
            data[colorOffset   ] = colors[index   ];
            data[colorOffset +1] = colors[index +1];
            data[colorOffset +2] = colors[index +2];
            //unused: data[colorOffset +3] = color[index +3];
          }
        }
      },freeSurface:function (surf) {
        var refcountPointer = surf + 56;
        var refcount = HEAP32[((refcountPointer)>>2)];
        if (refcount > 1) {
          HEAP32[((refcountPointer)>>2)]=refcount - 1;
          return;
        }
  
        var info = SDL.surfaces[surf];
        if (!info.usePageCanvas && info.canvas) SDL.canvasPool.push(info.canvas);
        if (info.buffer) _free(info.buffer);
        _free(info.pixelFormat);
        _free(surf);
        SDL.surfaces[surf] = null;
      },touchX:0,touchY:0,savedKeydown:null,receiveEvent:function (event) {
        switch(event.type) {
          case 'touchstart':
            event.preventDefault();
            var touch = event.touches[0];
            touchX = touch.pageX;
            touchY = touch.pageY;
            var event = {
              type: 'mousedown',
              button: 0,
              pageX: touchX,
              pageY: touchY
            };
            SDL.DOMButtons[0] = 1;
            SDL.events.push(event);
            break;
          case 'touchmove':
            event.preventDefault();
            var touch = event.touches[0];
            touchX = touch.pageX;
            touchY = touch.pageY;
            event = {
              type: 'mousemove',
              button: 0,
              pageX: touchX,
              pageY: touchY
            };
            SDL.events.push(event);
            break;
          case 'touchend':
            event.preventDefault();
            event = {
              type: 'mouseup',
              button: 0,
              pageX: touchX,
              pageY: touchY
            };
            SDL.DOMButtons[0] = 0;
            SDL.events.push(event);
            break;
          case 'mousemove':
            if (Browser.pointerLock) {
              // workaround for firefox bug 750111
              if ('mozMovementX' in event) {
                event['movementX'] = event['mozMovementX'];
                event['movementY'] = event['mozMovementY'];
              }
              // workaround for Firefox bug 782777
              if (event['movementX'] == 0 && event['movementY'] == 0) {
                // ignore a mousemove event if it doesn't contain any movement info
                // (without pointer lock, we infer movement from pageX/pageY, so this check is unnecessary)
                event.preventDefault();
                return;
              }
            }
            // fall through
          case 'keydown': case 'keyup': case 'keypress': case 'mousedown': case 'mouseup': case 'DOMMouseScroll': case 'mousewheel':
            // If we preventDefault on keydown events, the subsequent keypress events
            // won't fire. However, it's fine (and in some cases necessary) to
            // preventDefault for keys that don't generate a character. Otherwise,
            // preventDefault is the right thing to do in general.
            if (event.type !== 'keydown' || (!SDL.unicode && !SDL.textInput) || (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */)) {
              event.preventDefault();
            }
  
            if (event.type == 'DOMMouseScroll' || event.type == 'mousewheel') {
              var button = Browser.getMouseWheelDelta(event) > 0 ? 4 : 3;
              var event2 = {
                type: 'mousedown',
                button: button,
                pageX: event.pageX,
                pageY: event.pageY
              };
              SDL.events.push(event2);
              event = {
                type: 'mouseup',
                button: button,
                pageX: event.pageX,
                pageY: event.pageY
              };
            } else if (event.type == 'mousedown') {
              SDL.DOMButtons[event.button] = 1;
            } else if (event.type == 'mouseup') {
              // ignore extra ups, can happen if we leave the canvas while pressing down, then return,
              // since we add a mouseup in that case
              if (!SDL.DOMButtons[event.button]) {
                return;
              }
  
              SDL.DOMButtons[event.button] = 0;
            }
  
            // We can only request fullscreen as the result of user input.
            // Due to this limitation, we toggle a boolean on keydown which
            // SDL_WM_ToggleFullScreen will check and subsequently set another
            // flag indicating for us to request fullscreen on the following
            // keyup. This isn't perfect, but it enables SDL_WM_ToggleFullScreen
            // to work as the result of a keypress (which is an extremely
            // common use case).
            if (event.type === 'keydown') {
              SDL.canRequestFullscreen = true;
            } else if (event.type === 'keyup') {
              if (SDL.isRequestingFullscreen) {
                Module['requestFullScreen'](true, true);
                SDL.isRequestingFullscreen = false;
              }
              SDL.canRequestFullscreen = false;
            }
  
            // SDL expects a unicode character to be passed to its keydown events.
            // Unfortunately, the browser APIs only provide a charCode property on
            // keypress events, so we must backfill in keydown events with their
            // subsequent keypress event's charCode.
            if (event.type === 'keypress' && SDL.savedKeydown) {
              // charCode is read-only
              SDL.savedKeydown.keypressCharCode = event.charCode;
              SDL.savedKeydown = null;
            } else if (event.type === 'keydown') {
              SDL.savedKeydown = event;
            }
  
            // Don't push keypress events unless SDL_StartTextInput has been called.
            if (event.type !== 'keypress' || SDL.textInput) {
              SDL.events.push(event);
            }
            break;
          case 'mouseout':
            // Un-press all pressed mouse buttons, because we might miss the release outside of the canvas
            for (var i = 0; i < 3; i++) {
              if (SDL.DOMButtons[i]) {
                SDL.events.push({
                  type: 'mouseup',
                  button: i,
                  pageX: event.pageX,
                  pageY: event.pageY
                });
                SDL.DOMButtons[i] = 0;
              }
            }
            event.preventDefault();
            break;
          case 'blur':
          case 'visibilitychange': {
            // Un-press all pressed keys: TODO
            for (var code in SDL.keyboardMap) {
              SDL.events.push({
                type: 'keyup',
                keyCode: SDL.keyboardMap[code]
              });
            }
            event.preventDefault();
            break;
          }
          case 'unload':
            if (Browser.mainLoop.runner) {
              SDL.events.push(event);
              // Force-run a main event loop, since otherwise this event will never be caught!
              Browser.mainLoop.runner();
            }
            return;
          case 'resize':
            SDL.events.push(event);
            // manually triggered resize event doesn't have a preventDefault member
            if (event.preventDefault) {
              event.preventDefault();
            }
            break;
        }
        if (SDL.events.length >= 10000) {
          Module.printErr('SDL event queue full, dropping events');
          SDL.events = SDL.events.slice(0, 10000);
        }
        return;
      },handleEvent:function (event) {
        if (event.handled) return;
        event.handled = true;
  
        switch (event.type) {
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            var code = event.keyCode;
            if (code >= 65 && code <= 90) {
              code += 32; // make lowercase for SDL
            } else {
              code = SDL.keyCodes[event.keyCode] || event.keyCode;
            }
  
            HEAP8[(((SDL.keyboardState)+(code))|0)]=down;
            // TODO: lmeta, rmeta, numlock, capslock, KMOD_MODE, KMOD_RESERVED
            SDL.modState = (HEAP8[(((SDL.keyboardState)+(1248))|0)] ? 0x0040 | 0x0080 : 0) | // KMOD_LCTRL & KMOD_RCTRL
              (HEAP8[(((SDL.keyboardState)+(1249))|0)] ? 0x0001 | 0x0002 : 0) | // KMOD_LSHIFT & KMOD_RSHIFT
              (HEAP8[(((SDL.keyboardState)+(1250))|0)] ? 0x0100 | 0x0200 : 0); // KMOD_LALT & KMOD_RALT
  
            if (down) {
              SDL.keyboardMap[code] = event.keyCode; // save the DOM input, which we can use to unpress it during blur
            } else {
              delete SDL.keyboardMap[code];
            }
  
            break;
          }
          case 'mousedown': case 'mouseup':
            if (event.type == 'mousedown') {
              // SDL_BUTTON(x) is defined as (1 << ((x)-1)).  SDL buttons are 1-3,
              // and DOM buttons are 0-2, so this means that the below formula is
              // correct.
              SDL.buttonState |= 1 << event.button;
            } else if (event.type == 'mouseup') {
              SDL.buttonState &= ~(1 << event.button);
            }
            // fall through
          case 'mousemove': {
            Browser.calculateMouseEvent(event);
            break;
          }
        }
      },makeCEvent:function (event, ptr) {
        if (typeof event === 'number') {
          // This is a pointer to a native C event that was SDL_PushEvent'ed
          _memcpy(ptr, event, 28); // XXX
          return;
        }
  
        SDL.handleEvent(event);
  
        switch (event.type) {
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            //Module.print('Received key event: ' + event.keyCode);
            var key = event.keyCode;
            if (key >= 65 && key <= 90) {
              key += 32; // make lowercase for SDL
            } else {
              key = SDL.keyCodes[event.keyCode] || event.keyCode;
            }
            var scan;
            if (key >= 1024) {
              scan = key - 1024;
            } else {
              scan = SDL.scanCodes[key] || key;
            }
  
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(8))|0)]=down ? 1 : 0;
            HEAP8[(((ptr)+(9))|0)]=0; // TODO
            HEAP32[(((ptr)+(12))>>2)]=scan;
            HEAP32[(((ptr)+(16))>>2)]=key;
            HEAP16[(((ptr)+(20))>>1)]=SDL.modState;
            // some non-character keys (e.g. backspace and tab) won't have keypressCharCode set, fill in with the keyCode.
            HEAP32[(((ptr)+(24))>>2)]=event.keypressCharCode || key;
  
            break;
          }
          case 'keypress': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            // Not filling in windowID for now
            var cStr = intArrayFromString(String.fromCharCode(event.charCode));
            for (var i = 0; i < cStr.length; ++i) {
              HEAP8[(((ptr)+(8 + i))|0)]=cStr[i];
            }
            break;
          }
          case 'mousedown': case 'mouseup': case 'mousemove': {
            if (event.type != 'mousemove') {
              var down = event.type === 'mousedown';
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP8[(((ptr)+(8))|0)]=event.button+1; // DOM buttons are 0-2, SDL 1-3
              HEAP8[(((ptr)+(9))|0)]=down ? 1 : 0;
              HEAP32[(((ptr)+(12))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(16))>>2)]=Browser.mouseY;
            } else {
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP8[(((ptr)+(8))|0)]=SDL.buttonState;
              HEAP32[(((ptr)+(12))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(16))>>2)]=Browser.mouseY;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseMovementX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseMovementY;
            }
            break;
          }
          case 'unload': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            break;
          }
          case 'resize': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=event.w;
            HEAP32[(((ptr)+(8))>>2)]=event.h;
            break;
          }
          case 'joystick_button_up': case 'joystick_button_down': {
            var state = event.type === 'joystick_button_up' ? 0 : 1;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))|0)]=event.index;
            HEAP8[(((ptr)+(5))|0)]=event.button;
            HEAP8[(((ptr)+(6))|0)]=state;
            break;
          }
          case 'joystick_axis_motion': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))|0)]=event.index;
            HEAP8[(((ptr)+(5))|0)]=event.axis;
            HEAP32[(((ptr)+(8))>>2)]=SDL.joystickAxisValueConversion(event.value);
            break;
          }
          default: throw 'Unhandled SDL event: ' + event.type;
        }
      },estimateTextWidth:function (fontData, text) {
        var h = fontData.size;
        var fontString = h + 'px ' + fontData.name;
        var tempCtx = SDL.ttfContext;
        assert(tempCtx, 'TTF_Init must have been called');
        tempCtx.save();
        tempCtx.font = fontString;
        var ret = tempCtx.measureText(text).width | 0;
        tempCtx.restore();
        return ret;
      },allocateChannels:function (num) { // called from Mix_AllocateChannels and init
        if (SDL.numChannels && SDL.numChannels >= num && num != 0) return;
        SDL.numChannels = num;
        SDL.channels = [];
        for (var i = 0; i < num; i++) {
          SDL.channels[i] = {
            audio: null,
            volume: 1.0
          };
        }
      },setGetVolume:function (info, volume) {
        if (!info) return 0;
        var ret = info.volume * 128; // MIX_MAX_VOLUME
        if (volume != -1) {
          info.volume = volume / 128;
          if (info.audio) info.audio.volume = info.volume;
        }
        return ret;
      },fillWebAudioBufferFromHeap:function (heapPtr, sizeSamplesPerChannel, dstAudioBuffer) {
        // The input audio data is interleaved across the channels, i.e. [L, R, L, R, L, R, ...] and is either 8-bit or 16-bit as
        // supported by the SDL API. The output audio wave data for Web Audio API must be in planar buffers of [-1,1]-normalized Float32 data,
        // so perform a buffer conversion for the data.
        var numChannels = SDL.audio.channels;
        for(var c = 0; c < numChannels; ++c) {
          var channelData = dstAudioBuffer['getChannelData'](c);
          if (channelData.length != sizeSamplesPerChannel) {
            throw 'Web Audio output buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + sizeSamplesPerChannel + ' samples!';
          }
          if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              channelData[j] = (HEAP16[(((heapPtr)+((j*numChannels + c)*2))>>1)]) / 0x8000;
            }
          } else if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              var v = (HEAP8[(((heapPtr)+(j*numChannels + c))|0)]);
              channelData[j] = ((v >= 0) ? v-128 : v+128) /128;
            }
          }
        }
      },debugSurface:function (surfData) {
        console.log('dumping surface ' + [surfData.surf, surfData.source, surfData.width, surfData.height]);
        var image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
        var data = image.data;
        var num = Math.min(surfData.width, surfData.height);
        for (var i = 0; i < num; i++) {
          console.log('   diagonal ' + i + ':' + [data[i*surfData.width*4 + i*4 + 0], data[i*surfData.width*4 + i*4 + 1], data[i*surfData.width*4 + i*4 + 2], data[i*surfData.width*4 + i*4 + 3]]);
        }
      },joystickEventState:1,lastJoystickState:{},joystickNamePool:{},recordJoystickState:function (joystick, state) {
        // Standardize button state.
        var buttons = new Array(state.buttons.length);
        for (var i = 0; i < state.buttons.length; i++) {
          buttons[i] = SDL.getJoystickButtonState(state.buttons[i]);
        }
  
        SDL.lastJoystickState[joystick] = {
          buttons: buttons,
          axes: state.axes.slice(0),
          timestamp: state.timestamp,
          index: state.index,
          id: state.id
        };
      },getJoystickButtonState:function (button) {
        if (typeof button === 'object') {
          // Current gamepad API editor's draft (Firefox Nightly)
          // https://dvcs.w3.org/hg/gamepad/raw-file/default/gamepad.html#idl-def-GamepadButton
          return button.pressed;
        } else {
          // Current gamepad API working draft (Firefox / Chrome Stable)
          // http://www.w3.org/TR/2012/WD-gamepad-20120529/#gamepad-interface
          return button > 0;
        }
      },queryJoysticks:function () {
        for (var joystick in SDL.lastJoystickState) {
          var state = SDL.getGamepad(joystick - 1);
          var prevState = SDL.lastJoystickState[joystick];
          // Check only if the timestamp has differed.
          // NOTE: Timestamp is not available in Firefox.
          if (typeof state.timestamp !== 'number' || state.timestamp !== prevState.timestamp) {
            var i;
            for (i = 0; i < state.buttons.length; i++) {
              var buttonState = SDL.getJoystickButtonState(state.buttons[i]);
              // NOTE: The previous state already has a boolean representation of
              //       its button, so no need to standardize its button state here.
              if (buttonState !== prevState.buttons[i]) {
                // Insert button-press event.
                SDL.events.push({
                  type: buttonState ? 'joystick_button_down' : 'joystick_button_up',
                  joystick: joystick,
                  index: joystick - 1,
                  button: i
                });
              }
            }
            for (i = 0; i < state.axes.length; i++) {
              if (state.axes[i] !== prevState.axes[i]) {
                // Insert axes-change event.
                SDL.events.push({
                  type: 'joystick_axis_motion',
                  joystick: joystick,
                  index: joystick - 1,
                  axis: i,
                  value: state.axes[i]
                });
              }
            }
  
            SDL.recordJoystickState(joystick, state);
          }
        }
      },joystickAxisValueConversion:function (value) {
        // Ensures that 0 is 0, 1 is 32767, and -1 is 32768.
        return Math.ceil(((value+1) * 32767.5) - 32768);
      },getGamepads:function () {
        var fcn = navigator.getGamepads || navigator.webkitGamepads || navigator.mozGamepads || navigator.gamepads || navigator.webkitGetGamepads;
        if (fcn !== undefined) {
          // The function must be applied on the navigator object.
          return fcn.apply(navigator);
        } else {
          return [];
        }
      },getGamepad:function (deviceIndex) {
        var gamepads = SDL.getGamepads();
        if (gamepads.length > deviceIndex && deviceIndex >= 0) {
          return gamepads[deviceIndex];
        }
        return null;
      }};function _SDL_MapRGBA(fmt, r, g, b, a) {
      // Canvas screens are always RGBA. We assume the machine is little-endian.
      return r&0xff|(g&0xff)<<8|(b&0xff)<<16|(a&0xff)<<24;
    }

  function _SDL_PumpEvents(){
      SDL.events.forEach(function(event) {
        SDL.handleEvent(event);
      });
    }

  function _SDL_LockSurface(surf) {
      var surfData = SDL.surfaces[surf];
  
      surfData.locked++;
      if (surfData.locked > 1) return 0;
  
      if (!surfData.buffer) {
        surfData.buffer = _malloc(surfData.width * surfData.height * 4);
        HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
      }
  
      // Mark in C/C++-accessible SDL structure
      // SDL_Surface has the following fields: Uint32 flags, SDL_PixelFormat *format; int w, h; Uint16 pitch; void *pixels; ...
      // So we have fields all of the same size, and 5 of them before us.
      // TODO: Use macros like in library.js
      HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
  
      if (surf == SDL.screen && Module.screenIsReadOnly && surfData.image) return 0;
  
      surfData.image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
      if (surf == SDL.screen) {
        var data = surfData.image.data;
        var num = data.length;
        for (var i = 0; i < num/4; i++) {
          data[i*4+3] = 255; // opacity, as canvases blend alpha
        }
      }
  
      if (SDL.defaults.copyOnLock) {
        // Copy pixel data to somewhere accessible to 'C/C++'
        if (surfData.isFlagSet(0x00200000 /* SDL_HWPALETTE */)) {
          // If this is neaded then
          // we should compact the data from 32bpp to 8bpp index.
          // I think best way to implement this is use
          // additional colorMap hash (color->index).
          // Something like this:
          //
          // var size = surfData.width * surfData.height;
          // var data = '';
          // for (var i = 0; i<size; i++) {
          //   var color = SDL.translateRGBAToColor(
          //     surfData.image.data[i*4   ], 
          //     surfData.image.data[i*4 +1], 
          //     surfData.image.data[i*4 +2], 
          //     255);
          //   var index = surfData.colorMap[color];
          //   HEAP8[(((surfData.buffer)+(i))|0)]=index;
          // }
          throw 'CopyOnLock is not supported for SDL_LockSurface with SDL_HWPALETTE flag set' + new Error().stack;
        } else {
        HEAPU8.set(surfData.image.data, surfData.buffer);
        }
      }
  
      return 0;
    }

  function _SDL_GetMouseState(x, y) {
      if (x) HEAP32[((x)>>2)]=Browser.mouseX;
      if (y) HEAP32[((y)>>2)]=Browser.mouseY;
      return SDL.buttonState;
    }

  function _SDL_UnlockSurface(surf) {
      assert(!SDL.GL); // in GL mode we do not keep around 2D canvases and contexts
  
      var surfData = SDL.surfaces[surf];
  
      if (!surfData.locked || --surfData.locked > 0) {
        return;
      }
  
      // Copy pixel data to image
      if (surfData.isFlagSet(0x00200000 /* SDL_HWPALETTE */)) {
        SDL.copyIndexedColorData(surfData);
      } else if (!surfData.colors) {
        var data = surfData.image.data;
        var buffer = surfData.buffer;
        assert(buffer % 4 == 0, 'Invalid buffer offset: ' + buffer);
        var src = buffer >> 2;
        var dst = 0;
        var isScreen = surf == SDL.screen;
        var num;
        if (typeof CanvasPixelArray !== 'undefined' && data instanceof CanvasPixelArray) {
          // IE10/IE11: ImageData objects are backed by the deprecated CanvasPixelArray,
          // not UInt8ClampedArray. These don't have buffers, so we need to revert
          // to copying a byte at a time. We do the undefined check because modern
          // browsers do not define CanvasPixelArray anymore.
          num = data.length;
          while (dst < num) {
            var val = HEAP32[src]; // This is optimized. Instead, we could do HEAP32[(((buffer)+(dst))>>2)];
            data[dst  ] = val & 0xff;
            data[dst+1] = (val >> 8) & 0xff;
            data[dst+2] = (val >> 16) & 0xff;
            data[dst+3] = isScreen ? 0xff : ((val >> 24) & 0xff);
            src++;
            dst += 4;
          }
        } else {
          var data32 = new Uint32Array(data.buffer);
          num = data32.length;
          if (isScreen) {
            while (dst < num) {
              // HEAP32[src++] is an optimization. Instead, we could do HEAP32[(((buffer)+(dst))>>2)];
              data32[dst++] = HEAP32[src++] | 0xff000000;
            }
          } else {
            while (dst < num) {
              data32[dst++] = HEAP32[src++];
            }
          }
        }
      } else {
        var width = Module['canvas'].width;
        var height = Module['canvas'].height;
        var s = surfData.buffer;
        var data = surfData.image.data;
        var colors = surfData.colors;
        for (var y = 0; y < height; y++) {
          var base = y*width*4;
          for (var x = 0; x < width; x++) {
            // See comment above about signs
            var val = HEAPU8[((s++)|0)] * 3;
            var start = base + x*4;
            data[start]   = colors[val];
            data[start+1] = colors[val+1];
            data[start+2] = colors[val+2];
          }
          s += width*3;
        }
      }
      // Copy to canvas
      surfData.ctx.putImageData(surfData.image, 0, 0);
      // Note that we save the image, so future writes are fast. But, memory is not yet released
    }

  function _SDL_Flip(surf) {
      // We actually do this in Unlock, since the screen surface has as its canvas
      // backing the page canvas element
    }

  function _SDL_Init(initFlags) {
      SDL.startTime = Date.now();
      SDL.initFlags = initFlags;
  
      // capture all key events. we just keep down and up, but also capture press to prevent default actions
      if (!Module['doNotCaptureKeyboard']) {
        document.addEventListener("keydown", SDL.receiveEvent);
        document.addEventListener("keyup", SDL.receiveEvent);
        document.addEventListener("keypress", SDL.receiveEvent);
        window.addEventListener("blur", SDL.receiveEvent);
        document.addEventListener("visibilitychange", SDL.receiveEvent);
      }
  
      if (initFlags & 0x200) {
        // SDL_INIT_JOYSTICK
        // Firefox will not give us Joystick data unless we register this NOP
        // callback.
        // https://bugzilla.mozilla.org/show_bug.cgi?id=936104
        addEventListener("gamepadconnected", function() {});
      }
  
      window.addEventListener("unload", SDL.receiveEvent);
      SDL.keyboardState = _malloc(0x10000); // Our SDL needs 512, but 64K is safe for older SDLs
      _memset(SDL.keyboardState, 0, 0x10000);
      // Initialize this structure carefully for closure
      SDL.DOMEventToSDLEvent['keydown'] = 0x300 /* SDL_KEYDOWN */;
      SDL.DOMEventToSDLEvent['keyup'] = 0x301 /* SDL_KEYUP */;
      SDL.DOMEventToSDLEvent['keypress'] = 0x303 /* SDL_TEXTINPUT */;
      SDL.DOMEventToSDLEvent['mousedown'] = 0x401 /* SDL_MOUSEBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['mouseup'] = 0x402 /* SDL_MOUSEBUTTONUP */;
      SDL.DOMEventToSDLEvent['mousemove'] = 0x400 /* SDL_MOUSEMOTION */;
      SDL.DOMEventToSDLEvent['unload'] = 0x100 /* SDL_QUIT */;
      SDL.DOMEventToSDLEvent['resize'] = 0x7001 /* SDL_VIDEORESIZE/SDL_EVENT_COMPAT2 */;
      // These are not technically DOM events; the HTML gamepad API is poll-based.
      // However, we define them here, as the rest of the SDL code assumes that
      // all SDL events originate as DOM events.
      SDL.DOMEventToSDLEvent['joystick_axis_motion'] = 0x600 /* SDL_JOYAXISMOTION */;
      SDL.DOMEventToSDLEvent['joystick_button_down'] = 0x603 /* SDL_JOYBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['joystick_button_up'] = 0x604 /* SDL_JOYBUTTONUP */;
      return 0; // success
    }

  function _SDL_SetVideoMode(width, height, depth, flags) {
      ['mousedown', 'mouseup', 'mousemove', 'DOMMouseScroll', 'mousewheel', 'mouseout'].forEach(function(event) {
        Module['canvas'].addEventListener(event, SDL.receiveEvent, true);
      });
  
      // (0,0) means 'use fullscreen' in native; in Emscripten, use the current canvas size.
      if (width == 0 && height == 0) {
        var canvas = Module['canvas'];
        width = canvas.width;
        height = canvas.height;
      }
  
      Browser.setCanvasSize(width, height, true);
      // Free the old surface first.
      if (SDL.screen) {
        SDL.freeSurface(SDL.screen);
        SDL.screen = null;
      }
      SDL.screen = SDL.makeSurface(width, height, flags, true, 'screen');
      if (!SDL.addedResizeListener) {
        SDL.addedResizeListener = true;
        Browser.resizeListeners.push(function(w, h) {
          SDL.receiveEvent({
            type: 'resize',
            w: w,
            h: h
          });
        });
      }
      return SDL.screen;
    }

  function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg) {
      Module['noExitRuntime'] = true;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
        if (Browser.mainLoop.shouldPause) {
          // catch pauses from non-main loop sources
          Browser.mainLoop.paused = true;
          Browser.mainLoop.shouldPause = false;
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        if (Module['preMainLoop']) {
          Module['preMainLoop']();
        }
  
        try {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        } catch (e) {
          if (e instanceof ExitStatus) {
            return;
          } else {
            if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
            throw e;
          }
        }
  
        if (Module['postMainLoop']) {
          Module['postMainLoop']();
        }
  
        if (Browser.mainLoop.shouldPause) {
          // catch pauses from the main loop itself
          Browser.mainLoop.paused = true;
          Browser.mainLoop.shouldPause = false;
          return;
        }
        Browser.mainLoop.scheduler();
      }
      if (fps && fps > 0) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, 1000/fps); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      Browser.mainLoop.scheduler();
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }

  var _abs=Math_abs;

  
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
      return (ptr-num)|0;
    }var _llvm_memset_p0i8_i32=_memset;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  
  
  
  var ___cxa_last_thrown_exception=0;function ___resumeException(ptr) {
      if (!___cxa_last_thrown_exception) { ___cxa_last_thrown_exception = ptr; }
      throw ptr;
    }
  
  var ___cxa_exception_header_size=8;function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = ___cxa_last_thrown_exception;
      header = thrown - ___cxa_exception_header_size;
      if (throwntype == -1) throwntype = HEAP32[((header)>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
  
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return tempRet0 = typeArray[i],thrown;
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return tempRet0 = throwntype,thrown;
    }function ___gxx_personality_v0() {
    }

  function ___cxa_allocate_exception(size) {
      var ptr = _malloc(size + ___cxa_exception_header_size);
      return ptr + ___cxa_exception_header_size;
    }

  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr - ___cxa_exception_header_size);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }

  function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      var header = ptr - ___cxa_exception_header_size;
      HEAP32[((header)>>2)]=type;
      HEAP32[(((header)+(4))>>2)]=destructor;
      ___cxa_last_thrown_exception = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  
  var ___cxa_caught_exceptions=[];function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      ___cxa_caught_exceptions.push(___cxa_last_thrown_exception);
      return ptr;
    }

  
  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }function __ZSt9terminatev() {
      _exit(-1234);
    }

  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }

  
  function _memmove(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
        // Unlikely case: Copy backwards in a safe manner
        ret = dest;
        src = (src + num)|0;
        dest = (dest + num)|0;
        while ((num|0) > 0) {
          dest = (dest - 1)|0;
          src = (src - 1)|0;
          num = (num - 1)|0;
          HEAP8[(dest)]=HEAP8[(src)];
        }
        dest = ret;
      } else {
        _memcpy(dest, src, num) | 0;
      }
      return dest | 0;
    }var _llvm_memmove_p0i8_p0i8_i32=_memmove;

  function _pthread_mutex_lock() {}

  function _pthread_mutex_unlock() {}

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[(variable)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[(variable)]=1;
        return 1;
      }
      return 0;
    }

  function ___cxa_guard_release() {}

  function _pthread_cond_broadcast() {
      return 0;
    }

  function _pthread_cond_wait() {
      return 0;
    }

  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }var ___cxa_atexit=_atexit;

  function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      __THREW__ = 0;
      // Call destructor if one is registered then clear it.
      var ptr = ___cxa_caught_exceptions.pop();
      if (ptr) {
        header = ptr - ___cxa_exception_header_size;
        var destructor = HEAP32[(((header)+(4))>>2)];
        if (destructor) {
          Runtime.dynCall('vi', destructor, [ptr]);
          HEAP32[(((header)+(4))>>2)]=0;
        }
        ___cxa_free_exception(ptr);
        ___cxa_last_thrown_exception = 0;
      }
    }

  var _llvm_memset_p0i8_i64=_memset;

  function _llvm_lifetime_start() {}

  function _llvm_lifetime_end() {}


  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              var url = 'ws://' + addr + ':' + port;
              // the node ws library API is slightly different than the browser's
              var opts = ENVIRONMENT_IS_NODE ? {headers: {'websocket-protocol': ['binary']}} : ['binary'];
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      return FS.getStreamFromPtr(stream).fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }


  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }

  
  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }var _getc=_fgetc;

  function __ZNSt9exceptionD2Ev() {}

  function ___errno_location() {
      return ___errno_state;
    }

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function _abort() {
      Module['abort']();
    }

  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = ___cxa_caught_exceptions.pop();
      throw ptr;
    }

  
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function ___cxa_guard_abort() {}

  
  function _isxdigit(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 102) ||
             (chr >= 65 && chr <= 70);
    }function _isxdigit_l(chr) {
      return _isxdigit(chr); // no locale support yet
    }

  
  function _isdigit(chr) {
      return chr >= 48 && chr <= 57;
    }function _isdigit_l(chr) {
      return _isdigit(chr); // no locale support yet
    }

  
  
  function __getFloat(text) {
      return /^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?/.exec(text);
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function get() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function unget() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
  
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
  
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)|0)]=next;
                if (next === 0) return i > 0 ? fields : fields-1; // we failed to read the full length of this field
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
  
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
  
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
  
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
  
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              }
            }
  
            // write out null-terminating character
            HEAP8[((argPtr++)|0)]=0;
            formatIndex += match[0].length;
            
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
  
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            next = get();
            while (next > 0 && (!(next in __scanString.whiteSpace)))  {
              buffer.push(String.fromCharCode(next));
              next = get();
            }
            var m = __getFloat(buffer.join(''));
            var last = m ? m[0].length : 0;
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
  
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if (longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,(tempDouble=parseInt(text, 10),Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'X':
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16);
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text);
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text);
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j];
              }
              break;
          }
          fields++;
        } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      function get() { return HEAP8[(((s)+(index++))|0)]; };
      function unget() { index--; };
      return __scanString(format, get, unget, varargs);
    }

  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }

  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  function _newlocale(mask, locale, base) {
      return _malloc(4);
    }

  function _freelocale(locale) {
      _free(locale);
    }

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)]
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls(Math.floor(year/100),2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ),
          // or by no characters if no timezone is determinable. 
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich). 
          // If tm_isdst is zero, the standard time offset is used. 
          // If tm_isdst is greater than zero, the daylight savings time offset is used. 
          // If tm_isdst is negative, no characters are returned. 
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%Z': function(date) {
          // Replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists. [ tm_isdst]
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  
  
  
  function _isspace(chr) {
      return (chr == 32) || (chr >= 9 && chr <= 13);
    }
  function __parseInt64(str, endptr, base, min, max, unsign) {
      var isNegative = false;
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      if (HEAP8[(str)] == 45) {
        str++;
        isNegative = true;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
  
      // Find base.
      var ok = false;
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            ok = true; // we saw an initial zero, perhaps the entire thing is just "0"
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      var start = str;
  
      // Get digits.
      var chr;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          str++;
          ok = true;
        }
      }
  
      if (!ok) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return tempRet0 = 0,0;
      }
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str;
      }
  
      try {
        var numberString = isNegative ? '-'+Pointer_stringify(start, str - start) : Pointer_stringify(start, str - start);
        i64Math.fromString(numberString, finalBase, min, max, unsign);
      } catch(e) {
        ___setErrNo(ERRNO_CODES.ERANGE); // not quite correct
      }
  
      return tempRet0 = HEAP32[(((tempDoublePtr)+(4))>>2)],HEAP32[((tempDoublePtr)>>2)];
    }function _strtoull(str, endptr, base) {
      return __parseInt64(str, endptr, base, 0, '18446744073709551615', true);  // ULONG_MAX.
    }function _strtoull_l(str, endptr, base) {
      return _strtoull(str, endptr, base); // no locale support yet
    }

  
  function _strtoll(str, endptr, base) {
      return __parseInt64(str, endptr, base, '-9223372036854775808', '9223372036854775807');  // LLONG_MIN, LLONG_MAX.
    }function _strtoll_l(str, endptr, base) {
      return _strtoll(str, endptr, base); // no locale support yet
    }

  function _uselocale(locale) {
      return 0;
    }

  var _llvm_va_start=undefined;

  
  
  function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }function _asprintf(s, format, varargs) {
      return _sprintf(-s, format, varargs);
    }function _vasprintf(s, format, va_arg) {
      return _asprintf(s, format, HEAP32[((va_arg)>>2)]);
    }

  function _llvm_va_end() {}

  function _vsnprintf(s, n, format, va_arg) {
      return _snprintf(s, n, format, HEAP32[((va_arg)>>2)]);
    }

  function _vsscanf(s, format, va_arg) {
      return _sscanf(s, format, HEAP32[((va_arg)>>2)]);
    }


  var _fabs=Math_abs;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }

  
  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }var _copysignl=_copysign;

  
  function _fmod(x, y) {
      return x % y;
    }var _fmodl=_fmod;






FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



var FUNCTION_TABLE = [0,0,__ZNSt3__18messagesIwED0Ev,0,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNKSt3__18numpunctIcE12do_falsenameEv,0,__ZNKSt3__120__time_get_c_storageIwE3__rEv,0,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,0,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt12length_errorD0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,0,___cxx_global_array_dtor73,0,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,0,__ZNSt3__16locale2id6__initEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__110__stdinbufIcE9pbackfailEi,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,0,__ZNSt3__110__stdinbufIwED0Ev,0,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt11logic_errorD0Ev,0,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,0,__ZNSt13runtime_errorD2Ev,0,__ZNKSt3__17collateIcE7do_hashEPKcS3_,0,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,0,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,0,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,0,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,0,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,0,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,0,__ZNSt3__17collateIcED1Ev,0,__ZNSt3__18ios_base7failureD2Ev,0,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNSt9bad_allocD2Ev,0,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,0,__ZNSt11logic_errorD2Ev,0,__ZNSt3__16locale5facetD0Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,0,__ZNKSt3__120__time_get_c_storageIwE3__cEv,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,0,__ZNSt3__15ctypeIcED0Ev,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,0,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt8bad_castC2Ev,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,0,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,0,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,0,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,0,__ZNSt3__18messagesIcED1Ev,0,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,0,__ZNKSt3__18numpunctIwE11do_groupingEv,0,__ZNSt3__16locale5facet16__on_zero_sharedEv,0,__ZNKSt3__15ctypeIwE8do_widenEc,0,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,0,__ZNSt3__110__stdinbufIcE5uflowEv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,0,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,0,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,0,___cxx_global_array_dtor48,0,__ZNKSt3__15ctypeIcE8do_widenEc,0,__ZNSt3__110moneypunctIwLb0EED0Ev,0,___cxx_global_array_dtor45,0,__ZNSt3__16locale5__impD2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,0,__ZNKSt3__15ctypeIcE10do_toupperEc,0,__Z12fire_updaterP7sandbox8particleii,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,0,__ZNSt3__18numpunctIcED2Ev,0,__ZNKSt3__18numpunctIcE11do_groupingEv,0,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,0,__ZNKSt3__120__time_get_c_storageIwE3__xEv,0,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,0,__ZNSt3__110__stdinbufIwE9pbackfailEj,0,__Z12lava_updaterP7sandbox8particleii,0,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,0,__ZNSt3__18numpunctIcED0Ev,0,__ZNSt3__111__stdoutbufIcE8overflowEi,0,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,0,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,0,__ZNKSt3__18messagesIcE8do_closeEi,0,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,0,__ZNSt13runtime_errorD2Ev,0,__ZNKSt3__15ctypeIwE10do_toupperEw,0,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,0,___cxx_global_array_dtor112,0,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,0,__ZNSt3__17collateIwED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZNKSt8bad_cast4whatEv,0,__ZNSt3__110moneypunctIcLb0EED1Ev,0,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,0,__ZNSt3__18numpunctIwED2Ev,0,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,0,__ZNSt3__15ctypeIwED0Ev,0,__ZNKSt13runtime_error4whatEv,0,_free,0,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,0,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,0,__Z13laser_updaterP7sandbox8particleii,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,0,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev,0,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,0,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNKSt3__120__time_get_c_storageIcE3__xEv,0,__ZNSt3__17collateIwED0Ev,0,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,0,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,0,__ZNSt11logic_errorD2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,0,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,0,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNSt3__114error_categoryD2Ev,0,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,0,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,0,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,0,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,0,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,0,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__120__time_get_c_storageIcE3__XEv,0,__ZNSt3__16localeC2ERKS0_,0,__ZNKSt3__15ctypeIwE9do_narrowEwc,0,__Z13alpha_updaterP7sandbox8particleii,0,__ZNSt3__111__stdoutbufIwE4syncEv,0,__ZNSt3__110moneypunctIwLb0EED1Ev,0,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,0,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__17collateIwE7do_hashEPKwS3_,0,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,0,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,0,__ZNSt3__18ios_baseD0Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,0,__ZNSt3__110moneypunctIcLb1EED0Ev,0,__ZNSt9bad_allocD0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,0,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,0,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,0,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,0,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,0,__ZN10__cxxabiv120__si_class_type_infoD0Ev,0,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,0,__ZNKSt3__15ctypeIcE10do_tolowerEc,0,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,0,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,0,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,0,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,0,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,0,__ZNSt8bad_castD2Ev,0,__ZNKSt3__18numpunctIwE11do_truenameEv,0,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__110__stdinbufIwE9underflowEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNSt3__18ios_base7failureD0Ev,0,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__18ios_base4InitD2Ev,0,__ZNKSt3__15ctypeIwE5do_isEtw,0,__ZNSt3__110moneypunctIwLb1EED0Ev,0,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,0,__ZNSt3__16localeD2Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,0,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,0,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,0,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,0,__ZNKSt9bad_alloc4whatEv,0,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,0,__ZNSt13runtime_errorC2EPKc,0,__ZNSt3__16locale5__impD0Ev,0,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__119__iostream_category4nameEv,0,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,0,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__Z12snow_updaterP7sandbox8particleii,0,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt8bad_castD0Ev,0,__ZNKSt3__15ctypeIcE9do_narrowEcc,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,0,__ZNSt3__112__do_nothingEPv,0,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt3__110moneypunctIcLb0EED0Ev,0,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,0,__ZNKSt3__18numpunctIwE12do_falsenameEv,0,__ZNSt3__17collateIcED0Ev,0,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,0,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,0,__ZNSt3__111__stdoutbufIcED0Ev,0,__ZNSt3__16locale5facetD2Ev,0,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,0,__ZNSt3__112system_errorD0Ev,0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,0,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNSt3__110__stdinbufIwE5uflowEv,0,__ZNKSt3__18numpunctIcE11do_truenameEv,0,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,0,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,0,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,0,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,0,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,0,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,0,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,0,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,0,__ZNSt3__18numpunctIwED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,0,__ZNKSt3__15ctypeIwE10do_tolowerEw,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,0,__ZNSt3__111__stdoutbufIcE4syncEv,0,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,0,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,0,__Z13gamma_updaterP7sandbox8particleii,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,0,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,0,__ZNKSt3__17collateIwE12do_transformEPKwS3_,0,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,0,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,0,__ZNSt8bad_castD2Ev,0,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,0,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,0,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNKSt3__120__time_get_c_storageIcE3__rEv,0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,0,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,0,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__110__stdinbufIcE9underflowEv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,0,__ZNKSt3__114error_category23default_error_conditionEi,0,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,0,__Z13delta_updaterP7sandbox8particleii,0,__ZNKSt3__18messagesIwE8do_closeEi,0,__ZNSt3__112system_errorD2Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,0,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,0,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,0,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,0,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,0,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,0,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,0,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,0,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,0,__ZNKSt11logic_error4whatEv,0,__ZNKSt3__119__iostream_category7messageEi,0,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,0,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,0,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNKSt3__17collateIcE12do_transformEPKcS3_,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,0,__Z12twig_updaterP7sandbox8particleii,0,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,0,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,0,__ZNSt3__18messagesIcED0Ev,0,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,0,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,0,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,0,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,0,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,0,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNSt3__18ios_baseD2Ev,0,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__110__stdinbufIcED0Ev,0,__ZNSt3__16localeC2Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__119__iostream_categoryD0Ev,0,__ZNSt3__110moneypunctIwLb1EED1Ev,0,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,0,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,0,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__110moneypunctIcLb1EED1Ev,0,__ZNSt3__111__stdoutbufIwED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZNKSt3__120__time_get_c_storageIcE3__cEv,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,0,___cxx_global_array_dtor97,0,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,0,__Z15epsilon_updaterP7sandbox8particleii,0,__ZNKSt3__120__time_get_c_storageIwE3__XEv,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,0,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,0,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,0,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__111__stdoutbufIwE8overflowEj,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,0,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,0,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,0,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,0,___cxx_global_array_dtor,0,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZN10__cxxabiv117__class_type_infoD0Ev,0,__ZNSt3__18messagesIwED1Ev,0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,0,__Z4loopv,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,0,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,0,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,0,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,0,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,0,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,0,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,0,__ZNSt3__15ctypeIcED2Ev,0,__ZNSt13runtime_errorD0Ev,0,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,0];

// EMSCRIPTEN_START_FUNCS

function __Z12fire_updaterP7sandbox8particleii($sandbox,$particle,$i,$j){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $particle; $particle=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($particle)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($particle)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($particle)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $ii;
 var $jj;
 var $c;
 var $max;
 var $particles=sp;
 var $5=(sp)+(32);
 var $r;
 var $6=(sp)+(48);
 var $7=(sp)+(64);
 var $8=(sp)+(80);
 var $9=(sp)+(96);
 $2=$sandbox;
 $3=$i;
 $4=$j;
 var $10=_rand();
 var $11=(((($10|0))%(20))&-1);
 var $12=($11|0)==0;
 if($12){label=2;break;}else{label=6;break;}
 case 2: 
 var $14=_rand();
 var $15=(((($14|0))%(4))&-1);
 var $16=($15|0)==0;
 if($16){label=3;break;}else{label=4;break;}
 case 3: 
 var $18=$2;
 var $19=$3;
 var $20=$4;
 var $21=__Z24sandbox_get_particle_refP7sandboxii($18,$19,$20);
 var $22=(($21)|0);
 HEAP32[(($22)>>2)]=20;
 label=5;break;
 case 4: 
 var $24=$2;
 var $25=$3;
 var $26=$4;
 var $27=__Z24sandbox_get_particle_refP7sandboxii($24,$25,$26);
 var $28=(($27)|0);
 HEAP32[(($28)>>2)]=0;
 label=5;break;
 case 5: 
 $1=1;
 label=43;break;
 case 6: 
 var $31=_rand();
 var $32=$2;
 var $33=$3;
 var $34=$4;
 var $35=__Z24sandbox_get_particle_refP7sandboxii($32,$33,$34);
 var $36=(($35+8)|0);
 HEAP32[(($36)>>2)]=$31;
 $c=0;
 $ii=-1;
 label=7;break;
 case 7: 
 var $38=$ii;
 var $39=($38|0)<=1;
 if($39){label=8;break;}else{label=19;break;}
 case 8: 
 $jj=-1;
 label=9;break;
 case 9: 
 var $42=$jj;
 var $43=($42|0)<=1;
 if($43){label=10;break;}else{label=17;break;}
 case 10: 
 var $45=$ii;
 var $46=($45|0)==0;
 if($46){label=11;break;}else{label=13;break;}
 case 11: 
 var $48=$jj;
 var $49=($48|0)==0;
 if($49){label=12;break;}else{label=13;break;}
 case 12: 
 label=16;break;
 case 13: 
 var $52=$2;
 var $53=$3;
 var $54=$ii;
 var $55=((($53)+($54))|0);
 var $56=$4;
 var $57=$jj;
 var $58=((($56)+($57))|0);
 var $59=__Z24sandbox_get_particle_refP7sandboxii($52,$55,$58);
 var $60=$c;
 var $61=(($particles+($60<<2))|0);
 HEAP32[(($61)>>2)]=$59;
 var $62=$c;
 var $63=(($particles+($62<<2))|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=($64|0)==0;
 if($65){label=14;break;}else{label=15;break;}
 case 14: 
 label=16;break;
 case 15: 
 var $68=$c;
 var $69=((($68)+(1))|0);
 $c=$69;
 label=16;break;
 case 16: 
 var $71=$jj;
 var $72=((($71)+(1))|0);
 $jj=$72;
 label=9;break;
 case 17: 
 label=18;break;
 case 18: 
 var $75=$ii;
 var $76=((($75)+(1))|0);
 $ii=$76;
 label=7;break;
 case 19: 
 var $78=$c;
 $max=$78;
 $c=0;
 label=20;break;
 case 20: 
 var $80=$c;
 var $81=$max;
 var $82=($80|0)<($81|0);
 if($82){label=21;break;}else{label=40;break;}
 case 21: 
 var $84=$c;
 var $85=(($particles+($84<<2))|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=(($86)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=($88|0)==12;
 if($89){label=23;break;}else{label=22;break;}
 case 22: 
 var $91=$c;
 var $92=(($particles+($91<<2))|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(($93)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==13;
 if($96){label=23;break;}else{label=24;break;}
 case 23: 
 var $98=$c;
 var $99=(($particles+($98<<2))|0);
 var $100=HEAP32[(($99)>>2)];
 __Z16sandbox_particlei($5,19);
 var $101=$100;
 var $102=$5;
 assert(12 % 1 === 0);HEAP32[(($101)>>2)]=HEAP32[(($102)>>2)];HEAP32[((($101)+(4))>>2)]=HEAP32[((($102)+(4))>>2)];HEAP32[((($101)+(8))>>2)]=HEAP32[((($102)+(8))>>2)];
 var $103=$2;
 var $104=(($103+16)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=$c;
 var $107=(($particles+($106<<2))|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(($108+4)|0);
 HEAP32[(($109)>>2)]=$105;
 label=38;break;
 case 24: 
 var $111=$c;
 var $112=(($particles+($111<<2))|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=(($113)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=($115|0)==10;
 if($116){label=25;break;}else{label=31;break;}
 case 25: 
 var $118=_rand();
 var $119=(((($118|0))%(50))&-1);
 $r=$119;
 var $120=$r;
 var $121=($120|0)==0;
 if($121){label=26;break;}else{label=27;break;}
 case 26: 
 var $123=$c;
 var $124=(($particles+($123<<2))|0);
 var $125=HEAP32[(($124)>>2)];
 __Z16sandbox_particlei($6,21);
 var $126=$125;
 var $127=$6;
 assert(12 % 1 === 0);HEAP32[(($126)>>2)]=HEAP32[(($127)>>2)];HEAP32[((($126)+(4))>>2)]=HEAP32[((($127)+(4))>>2)];HEAP32[((($126)+(8))>>2)]=HEAP32[((($127)+(8))>>2)];
 var $128=$2;
 var $129=(($128+16)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=$c;
 var $132=(($particles+($131<<2))|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=(($133+4)|0);
 HEAP32[(($134)>>2)]=$130;
 label=30;break;
 case 27: 
 var $136=$r;
 var $137=($136|0)<10;
 if($137){label=28;break;}else{label=29;break;}
 case 28: 
 var $139=$c;
 var $140=(($particles+($139<<2))|0);
 var $141=HEAP32[(($140)>>2)];
 __Z16sandbox_particlei($7,19);
 var $142=$141;
 var $143=$7;
 assert(12 % 1 === 0);HEAP32[(($142)>>2)]=HEAP32[(($143)>>2)];HEAP32[((($142)+(4))>>2)]=HEAP32[((($143)+(4))>>2)];HEAP32[((($142)+(8))>>2)]=HEAP32[((($143)+(8))>>2)];
 var $144=$2;
 var $145=(($144+16)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=$c;
 var $148=(($particles+($147<<2))|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=(($149+4)|0);
 HEAP32[(($150)>>2)]=$146;
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 label=37;break;
 case 31: 
 var $154=$c;
 var $155=(($particles+($154<<2))|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=(($156)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=($158|0)==1;
 if($159){label=32;break;}else{label=33;break;}
 case 32: 
 var $161=$c;
 var $162=(($particles+($161<<2))|0);
 var $163=HEAP32[(($162)>>2)];
 __Z16sandbox_particlei($8,3);
 var $164=$163;
 var $165=$8;
 assert(12 % 1 === 0);HEAP32[(($164)>>2)]=HEAP32[(($165)>>2)];HEAP32[((($164)+(4))>>2)]=HEAP32[((($165)+(4))>>2)];HEAP32[((($164)+(8))>>2)]=HEAP32[((($165)+(8))>>2)];
 var $166=$2;
 var $167=$3;
 var $168=$4;
 var $169=__Z24sandbox_get_particle_refP7sandboxii($166,$167,$168);
 var $170=(($169)|0);
 HEAP32[(($170)>>2)]=20;
 var $171=$2;
 var $172=(($171+16)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=$c;
 var $175=(($particles+($174<<2))|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=(($176+4)|0);
 HEAP32[(($177)>>2)]=$173;
 $1=1;
 label=43;break;
 case 33: 
 var $179=$c;
 var $180=(($particles+($179<<2))|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($181)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($183|0)==15;
 if($184){label=34;break;}else{label=35;break;}
 case 34: 
 var $186=$c;
 var $187=(($particles+($186<<2))|0);
 var $188=HEAP32[(($187)>>2)];
 __Z16sandbox_particlei($9,19);
 var $189=$188;
 var $190=$9;
 assert(12 % 1 === 0);HEAP32[(($189)>>2)]=HEAP32[(($190)>>2)];HEAP32[((($189)+(4))>>2)]=HEAP32[((($190)+(4))>>2)];HEAP32[((($189)+(8))>>2)]=HEAP32[((($190)+(8))>>2)];
 var $191=$2;
 var $192=(($191+16)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=$c;
 var $195=(($particles+($194<<2))|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=(($196+4)|0);
 HEAP32[(($197)>>2)]=$193;
 label=35;break;
 case 35: 
 label=36;break;
 case 36: 
 label=37;break;
 case 37: 
 label=38;break;
 case 38: 
 label=39;break;
 case 39: 
 var $203=$c;
 var $204=((($203)+(1))|0);
 $c=$204;
 label=20;break;
 case 40: 
 var $206=_rand();
 var $207=(((($206|0))%(2))&-1);
 var $208=($207|0)==0;
 if($208){label=41;break;}else{label=42;break;}
 case 41: 
 $1=1;
 label=43;break;
 case 42: 
 $1=0;
 label=43;break;
 case 43: 
 var $212=$1;
 STACKTOP=sp;return $212;
  default: assert(0, "bad label: " + label);
 }

}


function __Z12twig_updaterP7sandbox8particleii($sandbox,$particle,$i,$j){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $particle; $particle=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($particle)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($particle)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($particle)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $2=$sandbox;
 $3=$i;
 $4=$j;
 var $6=_rand();
 var $7=(((($6|0))%(100))&-1);
 var $8=($7|0)==0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$2;
 var $11=$3;
 var $12=$4;
 var $13=__Z24sandbox_get_particle_refP7sandboxii($10,$11,$12);
 __Z16sandbox_particlei($5,14);
 var $14=$13;
 var $15=$5;
 assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
 $1=1;
 label=4;break;
 case 3: 
 $1=0;
 label=4;break;
 case 4: 
 var $18=$1;
 STACKTOP=sp;return $18;
  default: assert(0, "bad label: " + label);
 }

}


function __Z12snow_updaterP7sandbox8particleii($sandbox,$particle,$i,$j){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $particle; $particle=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($particle)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($particle)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($particle)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $ii;
 var $covered;
 var $p=sp;
 var $4=(sp)+(16);
 $1=$sandbox;
 $2=$i;
 $3=$j;
 var $5=_rand();
 var $6=(((($5|0))%(64))&-1);
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=11;break;}
 case 2: 
 $covered=1;
 $ii=0;
 label=3;break;
 case 3: 
 var $10=$ii;
 var $11=($10|0)<10;
 if($11){label=4;break;}else{label=8;break;}
 case 4: 
 var $13=$1;
 var $14=$2;
 var $15=$3;
 var $16=$ii;
 var $17=((($15)-($16))|0);
 var $18=((($17)-(1))|0);
 __Z20sandbox_get_particleP7sandboxii($p,$13,$14,$18);
 var $19=(($p)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==0;
 if($21){label=5;break;}else{label=6;break;}
 case 5: 
 $covered=0;
 label=8;break;
 case 6: 
 label=7;break;
 case 7: 
 var $25=$ii;
 var $26=((($25)+(1))|0);
 $ii=$26;
 label=3;break;
 case 8: 
 var $28=$covered;
 var $29=($28|0)!=0;
 if($29){label=9;break;}else{label=10;break;}
 case 9: 
 var $31=$1;
 var $32=$2;
 var $33=$3;
 var $34=__Z24sandbox_get_particle_refP7sandboxii($31,$32,$33);
 __Z16sandbox_particlei($4,18);
 var $35=$34;
 var $36=$4;
 assert(12 % 1 === 0);HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[((($35)+(4))>>2)]=HEAP32[((($36)+(4))>>2)];HEAP32[((($35)+(8))>>2)]=HEAP32[((($36)+(8))>>2)];
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $39=_rand();
 var $40=(((($39|0))%(2))&-1);
 var $41=($40|0)==0;
 var $42=($41&1);
 STACKTOP=sp;return $42;
  default: assert(0, "bad label: " + label);
 }

}


function __Z12lava_updaterP7sandbox8particleii($sandbox,$self,$i,$j){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $ii;
 var $jj;
 var $particle;
 var $5=sp;
 $2=$sandbox;
 $3=$i;
 $4=$j;
 $ii=-1;
 label=2;break;
 case 2: 
 var $7=$ii;
 var $8=($7|0)<=1;
 if($8){label=3;break;}else{label=21;break;}
 case 3: 
 $jj=-1;
 label=4;break;
 case 4: 
 var $11=$jj;
 var $12=($11|0)<=1;
 if($12){label=5;break;}else{label=19;break;}
 case 5: 
 var $14=$ii;
 var $15=($14|0)==0;
 if($15){label=6;break;}else{label=8;break;}
 case 6: 
 var $17=$jj;
 var $18=($17|0)==0;
 if($18){label=7;break;}else{label=8;break;}
 case 7: 
 label=18;break;
 case 8: 
 var $21=$2;
 var $22=$3;
 var $23=$ii;
 var $24=((($22)+($23))|0);
 var $25=$4;
 var $26=$jj;
 var $27=((($25)+($26))|0);
 var $28=__Z24sandbox_get_particle_refP7sandboxii($21,$24,$27);
 $particle=$28;
 var $29=$particle;
 var $30=($29|0)==0;
 if($30){label=9;break;}else{label=10;break;}
 case 9: 
 label=18;break;
 case 10: 
 var $33=$ii;
 var $34=($33|0)==0;
 if($34){label=11;break;}else{label=15;break;}
 case 11: 
 var $36=$jj;
 var $37=($36|0)==-1;
 if($37){label=12;break;}else{label=15;break;}
 case 12: 
 var $39=$particle;
 var $40=(($39)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)==0;
 if($42){label=13;break;}else{label=15;break;}
 case 13: 
 var $44=_rand();
 var $45=(((($44|0))%(5))&-1);
 var $46=($45|0)==0;
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $48=$2;
 __Z16sandbox_particlei($5,19);
 var $49=$3;
 var $50=$ii;
 var $51=((($49)+($50))|0);
 var $52=$4;
 var $53=$jj;
 var $54=((($52)+($53))|0);
 __Z20sandbox_set_particleP7sandbox8particleii($48,$5,$51,$54);
 label=15;break;
 case 15: 
 var $56=$particle;
 var $57=(($56)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=($58|0)!=2;
 if($59){label=16;break;}else{label=17;break;}
 case 16: 
 label=22;break;
 case 17: 
 label=18;break;
 case 18: 
 var $63=$jj;
 var $64=((($63)+(1))|0);
 $jj=$64;
 label=4;break;
 case 19: 
 label=20;break;
 case 20: 
 var $67=$ii;
 var $68=((($67)+(1))|0);
 $ii=$68;
 label=2;break;
 case 21: 
 $1=1;
 label=23;break;
 case 22: 
 var $71=_rand();
 var $72=(((($71|0))%(3))&-1);
 var $73=($72|0)!=0;
 var $74=($73&1);
 $1=$74;
 label=23;break;
 case 23: 
 var $76=$1;
 STACKTOP=sp;return $76;
  default: assert(0, "bad label: " + label);
 }

}


function __Z13laser_updaterP7sandbox8particleii($sandbox,$self,$i,$j){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 var $6=(sp)+(16);
 var $7=(sp)+(32);
 $2=$sandbox;
 $3=$i;
 $4=$j;
 var $8=_rand();
 var $9=(((($8|0))%(2))&-1);
 var $10=($9|0)!=0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 var $12=$2;
 __Z16sandbox_particlei($5,0);
 var $13=$3;
 var $14=$4;
 __Z20sandbox_set_particleP7sandbox8particleii($12,$5,$13,$14);
 $1=1;
 label=8;break;
 case 3: 
 var $16=_rand();
 var $17=(((($16|0))%(2))&-1);
 var $18=($17|0)!=0;
 if($18){label=4;break;}else{label=5;break;}
 case 4: 
 var $20=$2;
 __Z16sandbox_particlei($6,20);
 var $21=$3;
 var $22=$4;
 __Z20sandbox_set_particleP7sandbox8particleii($20,$6,$21,$22);
 $1=1;
 label=8;break;
 case 5: 
 var $24=_rand();
 var $25=(((($24|0))%(2))&-1);
 var $26=($25|0)!=0;
 if($26){label=6;break;}else{label=7;break;}
 case 6: 
 var $28=$2;
 __Z16sandbox_particlei($7,19);
 var $29=$3;
 var $30=$4;
 __Z20sandbox_set_particleP7sandbox8particleii($28,$7,$29,$30);
 $1=1;
 label=8;break;
 case 7: 
 $1=0;
 label=8;break;
 case 8: 
 var $33=$1;
 STACKTOP=sp;return $33;
  default: assert(0, "bad label: " + label);
 }

}


function __Z13alpha_updaterP7sandbox8particleii($sandbox,$self,$i,$j){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $ii;
 var $jj;
 var $particle;
 var $5=sp;
 var $6=(sp)+(16);
 $2=$sandbox;
 $3=$i;
 $4=$j;
 $ii=-1;
 label=2;break;
 case 2: 
 var $8=$ii;
 var $9=($8|0)<=1;
 if($9){label=3;break;}else{label=15;break;}
 case 3: 
 $jj=-1;
 label=4;break;
 case 4: 
 var $12=$jj;
 var $13=($12|0)<=1;
 if($13){label=5;break;}else{label=13;break;}
 case 5: 
 var $15=$2;
 var $16=$3;
 var $17=$ii;
 var $18=((($16)+($17))|0);
 var $19=$4;
 var $20=$jj;
 var $21=((($19)+($20))|0);
 var $22=__Z24sandbox_get_particle_refP7sandboxii($15,$18,$21);
 $particle=$22;
 var $23=$ii;
 var $24=($23|0)==0;
 if($24){label=6;break;}else{label=7;break;}
 case 6: 
 var $26=$jj;
 var $27=($26|0)==0;
 if($27){label=8;break;}else{label=7;break;}
 case 7: 
 var $29=$particle;
 var $30=($29|0)==0;
 if($30){label=8;break;}else{label=9;break;}
 case 8: 
 label=12;break;
 case 9: 
 var $33=$particle;
 var $34=(($33)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==30;
 if($36){label=10;break;}else{label=11;break;}
 case 10: 
 var $38=$2;
 __Z16sandbox_particlei($5,19);
 var $39=$3;
 var $40=$ii;
 var $41=((($39)+($40))|0);
 var $42=$4;
 var $43=$jj;
 var $44=((($42)+($43))|0);
 __Z20sandbox_set_particleP7sandbox8particleii($38,$5,$41,$44);
 var $45=$2;
 __Z16sandbox_particlei($6,19);
 var $46=$3;
 var $47=$4;
 __Z20sandbox_set_particleP7sandbox8particleii($45,$6,$46,$47);
 $1=1;
 label=16;break;
 case 11: 
 label=12;break;
 case 12: 
 var $50=$jj;
 var $51=((($50)+(1))|0);
 $jj=$51;
 label=4;break;
 case 13: 
 label=14;break;
 case 14: 
 var $54=$ii;
 var $55=((($54)+(1))|0);
 $ii=$55;
 label=2;break;
 case 15: 
 $1=0;
 label=16;break;
 case 16: 
 var $58=$1;
 STACKTOP=sp;return $58;
  default: assert(0, "bad label: " + label);
 }

}


function __Z13gamma_updaterP7sandbox8particleii($sandbox,$self,$i,$j){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $ii;
 var $jj;
 var $particle;
 var $5=sp;
 var $6=(sp)+(16);
 $2=$sandbox;
 $3=$i;
 $4=$j;
 $ii=-1;
 label=2;break;
 case 2: 
 var $8=$ii;
 var $9=($8|0)<=1;
 if($9){label=3;break;}else{label=15;break;}
 case 3: 
 $jj=-1;
 label=4;break;
 case 4: 
 var $12=$jj;
 var $13=($12|0)<=1;
 if($13){label=5;break;}else{label=13;break;}
 case 5: 
 var $15=$2;
 var $16=$3;
 var $17=$ii;
 var $18=((($16)+($17))|0);
 var $19=$4;
 var $20=$jj;
 var $21=((($19)+($20))|0);
 var $22=__Z24sandbox_get_particle_refP7sandboxii($15,$18,$21);
 $particle=$22;
 var $23=$ii;
 var $24=($23|0)==0;
 if($24){label=6;break;}else{label=7;break;}
 case 6: 
 var $26=$jj;
 var $27=($26|0)==0;
 if($27){label=8;break;}else{label=7;break;}
 case 7: 
 var $29=$particle;
 var $30=($29|0)==0;
 if($30){label=8;break;}else{label=9;break;}
 case 8: 
 label=12;break;
 case 9: 
 var $33=$particle;
 var $34=(($33)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==29;
 if($36){label=10;break;}else{label=11;break;}
 case 10: 
 var $38=$2;
 __Z16sandbox_particlei($5,32);
 var $39=$3;
 var $40=$ii;
 var $41=((($39)+($40))|0);
 var $42=$4;
 var $43=$jj;
 var $44=((($42)+($43))|0);
 __Z20sandbox_set_particleP7sandbox8particleii($38,$5,$41,$44);
 var $45=$2;
 __Z16sandbox_particlei($6,32);
 var $46=$3;
 var $47=$4;
 __Z20sandbox_set_particleP7sandbox8particleii($45,$6,$46,$47);
 $1=1;
 label=16;break;
 case 11: 
 label=12;break;
 case 12: 
 var $50=$jj;
 var $51=((($50)+(1))|0);
 $jj=$51;
 label=4;break;
 case 13: 
 label=14;break;
 case 14: 
 var $54=$ii;
 var $55=((($54)+(1))|0);
 $ii=$55;
 label=2;break;
 case 15: 
 $1=0;
 label=16;break;
 case 16: 
 var $58=$1;
 STACKTOP=sp;return $58;
  default: assert(0, "bad label: " + label);
 }

}


function __Z13delta_updaterP7sandbox8particleii($sandbox,$self,$i,$j){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $ii;
 var $jj;
 var $particle;
 var $5=sp;
 var $6=(sp)+(16);
 $2=$sandbox;
 $3=$i;
 $4=$j;
 $ii=-1;
 label=2;break;
 case 2: 
 var $8=$ii;
 var $9=($8|0)<=1;
 if($9){label=3;break;}else{label=21;break;}
 case 3: 
 $jj=-1;
 label=4;break;
 case 4: 
 var $12=$jj;
 var $13=($12|0)<=1;
 if($13){label=5;break;}else{label=19;break;}
 case 5: 
 var $15=$2;
 var $16=$3;
 var $17=$ii;
 var $18=((($16)+($17))|0);
 var $19=$4;
 var $20=$jj;
 var $21=((($19)+($20))|0);
 var $22=__Z24sandbox_get_particle_refP7sandboxii($15,$18,$21);
 $particle=$22;
 var $23=$ii;
 var $24=($23|0)==0;
 if($24){label=6;break;}else{label=7;break;}
 case 6: 
 var $26=$jj;
 var $27=($26|0)==0;
 if($27){label=8;break;}else{label=7;break;}
 case 7: 
 var $29=$particle;
 var $30=($29|0)==0;
 if($30){label=8;break;}else{label=9;break;}
 case 8: 
 label=18;break;
 case 9: 
 var $33=$particle;
 var $34=(($33)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==1;
 if($36){label=10;break;}else{label=11;break;}
 case 10: 
 $1=1;
 label=22;break;
 case 11: 
 var $39=$particle;
 var $40=(($39)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)==30;
 if($42){label=12;break;}else{label=16;break;}
 case 12: 
 var $44=$2;
 __Z16sandbox_particlei($5,0);
 var $45=$3;
 var $46=$ii;
 var $47=((($45)+($46))|0);
 var $48=$4;
 var $49=$jj;
 var $50=((($48)+($49))|0);
 __Z20sandbox_set_particleP7sandbox8particleii($44,$5,$47,$50);
 var $51=$2;
 var $52=_rand();
 var $53=(((($52|0))%(4))&-1);
 var $54=($53|0)!=0;
 if($54){label=13;break;}else{label=14;break;}
 case 13: 
 __Z16sandbox_particlei($6,0);
 label=15;break;
 case 14: 
 __Z16sandbox_particlei($6,33);
 label=15;break;
 case 15: 
 var $58=$3;
 var $59=$4;
 __Z20sandbox_set_particleP7sandbox8particleii($51,$6,$58,$59);
 $1=1;
 label=22;break;
 case 16: 
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 var $63=$jj;
 var $64=((($63)+(1))|0);
 $jj=$64;
 label=4;break;
 case 19: 
 label=20;break;
 case 20: 
 var $67=$ii;
 var $68=((($67)+(1))|0);
 $ii=$68;
 label=2;break;
 case 21: 
 $1=0;
 label=22;break;
 case 22: 
 var $71=$1;
 STACKTOP=sp;return $71;
  default: assert(0, "bad label: " + label);
 }

}


function __Z15epsilon_updaterP7sandbox8particleii($sandbox,$self,$i,$j){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $ii;
 var $jj;
 var $particle;
 var $5=sp;
 $2=$sandbox;
 $3=$i;
 $4=$j;
 $ii=-1;
 label=2;break;
 case 2: 
 var $7=$ii;
 var $8=($7|0)<=1;
 if($8){label=3;break;}else{label=15;break;}
 case 3: 
 $jj=-1;
 label=4;break;
 case 4: 
 var $11=$jj;
 var $12=($11|0)<=1;
 if($12){label=5;break;}else{label=13;break;}
 case 5: 
 var $14=$2;
 var $15=$3;
 var $16=$ii;
 var $17=((($15)+($16))|0);
 var $18=$4;
 var $19=$jj;
 var $20=((($18)+($19))|0);
 var $21=__Z24sandbox_get_particle_refP7sandboxii($14,$17,$20);
 $particle=$21;
 var $22=$ii;
 var $23=($22|0)==0;
 if($23){label=6;break;}else{label=7;break;}
 case 6: 
 var $25=$jj;
 var $26=($25|0)==0;
 if($26){label=8;break;}else{label=7;break;}
 case 7: 
 var $28=$particle;
 var $29=($28|0)==0;
 if($29){label=8;break;}else{label=9;break;}
 case 8: 
 label=12;break;
 case 9: 
 var $32=$particle;
 var $33=(($32)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=($34|0)==1;
 if($35){label=10;break;}else{label=11;break;}
 case 10: 
 var $37=$2;
 __Z16sandbox_particlei($5,0);
 var $38=$3;
 var $39=$4;
 __Z20sandbox_set_particleP7sandbox8particleii($37,$5,$38,$39);
 $1=1;
 label=16;break;
 case 11: 
 label=12;break;
 case 12: 
 var $42=$jj;
 var $43=((($42)+(1))|0);
 $jj=$43;
 label=4;break;
 case 13: 
 label=14;break;
 case 14: 
 var $46=$ii;
 var $47=((($46)+(1))|0);
 $ii=$47;
 label=2;break;
 case 15: 
 $1=0;
 label=16;break;
 case 16: 
 var $50=$1;
 STACKTOP=sp;return $50;
  default: assert(0, "bad label: " + label);
 }

}


function __Z12init_sandboxii($w,$h){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+528)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3=sp;
 var $4=(sp)+(16);
 var $5=(sp)+(32);
 var $6=(sp)+(48);
 var $7=(sp)+(64);
 var $8=(sp)+(80);
 var $9=(sp)+(96);
 var $10=(sp)+(112);
 var $11=(sp)+(128);
 var $12=(sp)+(144);
 var $13=(sp)+(160);
 var $14=(sp)+(176);
 var $15=(sp)+(192);
 var $16=(sp)+(208);
 var $17=(sp)+(224);
 var $18=(sp)+(240);
 var $19=(sp)+(256);
 var $20=(sp)+(272);
 var $21=(sp)+(288);
 var $22=(sp)+(304);
 var $23=(sp)+(320);
 var $24=(sp)+(336);
 var $25=(sp)+(352);
 var $26=(sp)+(368);
 var $27=(sp)+(384);
 var $28=(sp)+(400);
 var $29=(sp)+(416);
 var $30=(sp)+(432);
 var $31=(sp)+(448);
 var $32=(sp)+(464);
 var $33=(sp)+(480);
 var $34=(sp)+(496);
 var $35=(sp)+(512);
 $1=$w;
 $2=$h;
 var $36=$1;
 var $37=$1;
 __Z12sandbox_initP7sandboxii(9800,$36,$37);
 __Z17sandbox_init_ruleP7sandboxiiii(9800,34,1,5,0);
 __Z21sandbox_particle_rule5statei($3,2,99);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,5,$3);
 __Z21sandbox_particle_rule5statei($4,2,99);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,6,$4);
 __Z21sandbox_particle_rule5statei($5,1,30);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,9,$5);
 __Z21sandbox_particle_rule5statei($6,2,99);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,7,$6);
 __Z21sandbox_particle_rule5statei($7,1,30);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,8,$7);
 __Z21sandbox_particle_rule5statei($8,2,99);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,25,$8);
 __Z21sandbox_particle_rule5statei($9,1,30);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,26,$9);
 __Z21sandbox_particle_rule5statei($10,1,30);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,4,$10);
 __Z21sandbox_particle_rule5statei($11,0,10);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,1,$11);
 __Z21sandbox_particle_rule5statei($12,3,1);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,3,$12);
 __Z21sandbox_particle_rule5statei($13,2,99);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,24,$13);
 __Z30sandbox_advanced_particle_rule5stateiPFiP7sandbox8particleiiE($14,0,30,174);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,2,$14);
 __Z21sandbox_particle_rule5statei($15,2,99);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,10,$15);
 __Z21sandbox_particle_rule5statei($16,2,99);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,12,$16);
 __Z21sandbox_particle_rule5statei($17,2,99);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,13,$17);
 __Z30sandbox_advanced_particle_rule5stateiPFiP7sandbox8particleiiE($18,1,30,614);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,16,$18);
 __Z21sandbox_particle_rule5statei($19,1,30);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,11,$19);
 __Z21sandbox_particle_rule5statei($20,4,30);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,14,$20);
 __Z21sandbox_particle_rule5statei($21,4,30);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,15,$21);
 __Z21sandbox_particle_rule5statei($22,2,99);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,18,$22);
 __Z30sandbox_advanced_particle_rule5stateiPFiP7sandbox8particleiiE($23,1,30,410);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,17,$23);
 __Z30sandbox_advanced_particle_rule5stateiPFiP7sandbox8particleiiE($24,3,1,154);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,19,$24);
 __Z21sandbox_particle_rule5statei($25,3,1);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,20,$25);
 __Z21sandbox_particle_rule5statei($26,1,30);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,21,$26);
 __Z21sandbox_particle_rule5statei($27,1,30);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,27,$27);
 __Z30sandbox_advanced_particle_rule5stateiPFiP7sandbox8particleiiE($28,0,10,294);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,29,$28);
 __Z21sandbox_particle_rule5statei($29,0,10);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,30,$29);
 __Z30sandbox_advanced_particle_rule5stateiPFiP7sandbox8particleiiE($30,0,10,498);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,31,$30);
 __Z30sandbox_advanced_particle_rule5stateiPFiP7sandbox8particleiiE($31,0,10,550);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,32,$31);
 __Z30sandbox_advanced_particle_rule5stateiPFiP7sandbox8particleiiE($32,0,10,678);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,33,$32);
 __Z30sandbox_advanced_particle_rule5stateiPFiP7sandbox8particleiiE($33,0,10,230);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,28,$33);
 __Z21sandbox_particle_rule5statei($34,2,99);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,22,$34);
 __Z21sandbox_particle_rule5statei($35,1,30);
 __Z16sandbox_set_ruleP7sandboxi13particle_rule(9800,23,$35);
 HEAP32[((9832)>>2)]=5;
 HEAP32[((9828)>>2)]=0;
 STACKTOP=sp;return;
}


function __Z11write_pixeliij($i,$j,$color){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$i;
 $2=$j;
 $3=$color;
 var $4=$3;
 var $5=HEAP32[((9792)>>2)];
 var $6=(($5+20)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 var $9=$2;
 var $10=($9<<8);
 var $11=(($8+($10<<2))|0);
 var $12=$1;
 var $13=(($11+($12<<2))|0);
 HEAP32[(($13)>>2)]=$4;
 STACKTOP=sp;return;
}


function __Z14write_particleiij($i,$j,$color){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $ii;
 var $jj;
 $1=$i;
 $2=$j;
 $3=$color;
 $ii=0;
 label=2;break;
 case 2: 
 var $5=$ii;
 var $6=($5|0)<4;
 if($6){label=3;break;}else{label=9;break;}
 case 3: 
 $jj=0;
 label=4;break;
 case 4: 
 var $9=$jj;
 var $10=($9|0)<4;
 if($10){label=5;break;}else{label=7;break;}
 case 5: 
 var $12=$1;
 var $13=($12<<2);
 var $14=$ii;
 var $15=((($13)+($14))|0);
 var $16=$2;
 var $17=($16<<2);
 var $18=$jj;
 var $19=((($17)+($18))|0);
 var $20=$3;
 __Z11write_pixeliij($15,$19,$20);
 label=6;break;
 case 6: 
 var $22=$jj;
 var $23=((($22)+(1))|0);
 $jj=$23;
 label=4;break;
 case 7: 
 label=8;break;
 case 8: 
 var $26=$ii;
 var $27=((($26)+(1))|0);
 $ii=$27;
 label=2;break;
 case 9: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __Z17get_particle_infoiiPjPi($i,$j,$color,$border){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $p=sp;
 var $p1=(sp)+(16);
 var $p2=(sp)+(32);
 var $p3=(sp)+(48);
 var $p4=(sp)+(64);
 var $b;
 $1=$i;
 $2=$j;
 $3=$color;
 $4=$border;
 var $5=$1;
 var $6=$2;
 __Z20sandbox_get_particleP7sandboxii($p,9800,$5,$6);
 var $7=$1;
 var $8=((($7)+(1))|0);
 var $9=$2;
 __Z20sandbox_get_particleP7sandboxii($p1,9800,$8,$9);
 var $10=$1;
 var $11=((($10)-(1))|0);
 var $12=$2;
 __Z20sandbox_get_particleP7sandboxii($p2,9800,$11,$12);
 var $13=$1;
 var $14=$2;
 var $15=((($14)+(1))|0);
 __Z20sandbox_get_particleP7sandboxii($p3,9800,$13,$15);
 var $16=$1;
 var $17=$2;
 var $18=((($17)-(1))|0);
 __Z20sandbox_get_particleP7sandboxii($p4,9800,$16,$18);
 var $19=(($p1)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($p)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($20|0)==($22|0);
 if($23){label=2;break;}else{label=6;break;}
 case 2: 
 var $25=(($p2)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($p)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($26|0)==($28|0);
 if($29){label=3;break;}else{label=6;break;}
 case 3: 
 var $31=(($p3)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($p)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=($32|0)==($34|0);
 if($35){label=4;break;}else{label=6;break;}
 case 4: 
 var $37=(($p4)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($p)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=($38|0)==($40|0);
 if($41){label=5;break;}else{label=6;break;}
 case 5: 
 var $43=$4;
 HEAP32[(($43)>>2)]=0;
 label=7;break;
 case 6: 
 var $45=$4;
 HEAP32[(($45)>>2)]=1;
 label=7;break;
 case 7: 
 var $47=$4;
 var $48=HEAP32[(($47)>>2)];
 var $49=($48|0)!=0;
 var $50=($49?(0.9):1);
 var $51=$50;
 $b=$51;
 var $52=(($p)|0);
 var $53=HEAP32[(($52)>>2)];
 if(($53|0)==4){ label=8;break;}else if(($53|0)==1){ label=9;break;}else{label=10;break;}
 case 8: 
 var $55=HEAP32[((9792)>>2)];
 var $56=(($55+4)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=$b;
 var $59=($58)*(255);
 var $60=($59>=0 ? Math_floor($59) : Math_ceil($59));
 var $61=$b;
 var $62=($61)*(255);
 var $63=($62>=0 ? Math_floor($62) : Math_ceil($62));
 var $64=_SDL_MapRGBA($57,$60,$63,0,0);
 var $65=$3;
 HEAP32[(($65)>>2)]=$64;
 label=11;break;
 case 9: 
 var $67=HEAP32[((9792)>>2)];
 var $68=(($67+4)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=$b;
 var $71=($70)*(255);
 var $72=($71>=0 ? Math_floor($71) : Math_ceil($71));
 var $73=_SDL_MapRGBA($69,0,0,$72,0);
 var $74=$3;
 HEAP32[(($74)>>2)]=$73;
 label=11;break;
 case 10: 
 var $76=HEAP32[((9792)>>2)];
 var $77=(($76+4)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=_SDL_MapRGBA($78,0,0,0,0);
 var $80=$3;
 HEAP32[(($80)>>2)]=$79;
 label=11;break;
 case 11: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __Z12handle_mouseiih($i,$j,$button){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4=sp;
 var $5=(sp)+(8);
 $1=$i;
 $2=$j;
 $3=$button;
 var $6=$3;
 var $7=($6&255);
 var $8=$7&1;
 var $9=($8|0)!=0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=$1;
 var $12=$2;
 ___Z10shape_fillIZ12handle_mouseiihE3$_0EviiiiT_i_(1,$11,$12,4,$4,0);
 label=6;break;
 case 3: 
 var $14=$3;
 var $15=($14&255);
 var $16=$15&4;
 var $17=($16|0)!=0;
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $19=$1;
 var $20=$2;
 ___Z10shape_fillIZ12handle_mouseiihE3$_1EviiiiT_i_(1,$19,$20,4,$5,0);
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function ___Z10shape_fillIZ12handle_mouseiihE3$_0EviiiiT_i_($shape,$x,$y,$size,$f,$dir){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $f; $f=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);;;HEAP8[($f)]=HEAP8[(tempParam)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $i=sp;
 var $j=(sp)+(8);
 var $k;
 var $l;
 var $down;
 var $up;
 var $left;
 var $right;
 $1=$shape;
 $2=$x;
 $3=$y;
 $4=$size;
 $5=$dir;
 var $6=$4;
 var $7=(((-$6))|0);
 $k=$7;
 label=2;break;
 case 2: 
 var $9=$k;
 var $10=$4;
 var $11=($9|0)<=($10|0);
 if($11){label=3;break;}else{label=24;break;}
 case 3: 
 var $13=$4;
 var $14=(((-$13))|0);
 $l=$14;
 label=4;break;
 case 4: 
 var $16=$l;
 var $17=$4;
 var $18=($16|0)<=($17|0);
 if($18){label=5;break;}else{label=22;break;}
 case 5: 
 var $20=$k;
 var $21=$5;
 var $22=(((($21|0))/(2))&-1);
 var $23=($22|0)!=0;
 if($23){label=6;break;}else{label=7;break;}
 case 6: 
 var $27=$i;label=8;break;
 case 7: 
 var $27=$j;label=8;break;
 case 8: 
 var $27;
 HEAP32[(($27)>>2)]=$20;
 var $28=$5;
 var $29=(((($28|0))%(2))&-1);
 var $30=($29|0)!=0;
 if($30){label=9;break;}else{label=10;break;}
 case 9: 
 var $32=$l;
 var $33=(((-$32))|0);
 var $37=$33;label=11;break;
 case 10: 
 var $35=$l;
 var $37=$35;label=11;break;
 case 11: 
 var $37;
 var $38=$5;
 var $39=(((($38|0))/(2))&-1);
 var $40=($39|0)!=0;
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $44=$j;label=14;break;
 case 13: 
 var $44=$i;label=14;break;
 case 14: 
 var $44;
 HEAP32[(($44)>>2)]=$37;
 var $45=$1;
 var $46=$4;
 var $47=HEAP32[(($i)>>2)];
 var $48=HEAP32[(($j)>>2)];
 var $49=((($48)+(1))|0);
 var $50=__Z12shape_insideiiii($45,$46,$47,$49);
 var $51=($50&1);
 $down=$51;
 var $52=$1;
 var $53=$4;
 var $54=HEAP32[(($i)>>2)];
 var $55=HEAP32[(($j)>>2)];
 var $56=((($55)-(1))|0);
 var $57=__Z12shape_insideiiii($52,$53,$54,$56);
 var $58=($57&1);
 $up=$58;
 var $59=$1;
 var $60=$4;
 var $61=HEAP32[(($i)>>2)];
 var $62=((($61)+(1))|0);
 var $63=HEAP32[(($j)>>2)];
 var $64=__Z12shape_insideiiii($59,$60,$62,$63);
 var $65=($64&1);
 $right=$65;
 var $66=$1;
 var $67=$4;
 var $68=HEAP32[(($i)>>2)];
 var $69=((($68)-(1))|0);
 var $70=HEAP32[(($j)>>2)];
 var $71=__Z12shape_insideiiii($66,$67,$69,$70);
 var $72=($71&1);
 $left=$72;
 var $73=$1;
 var $74=$4;
 var $75=HEAP32[(($i)>>2)];
 var $76=HEAP32[(($j)>>2)];
 var $77=__Z12shape_insideiiii($73,$74,$75,$76);
 if($77){label=15;break;}else{label=20;break;}
 case 15: 
 var $79=$2;
 var $80=HEAP32[(($i)>>2)];
 var $81=((($79)+($80))|0);
 var $82=$3;
 var $83=HEAP32[(($j)>>2)];
 var $84=((($82)+($83))|0);
 var $85=$down;
 var $86=(($85)&1);
 if($86){label=16;break;}else{var $97=0;label=19;break;}
 case 16: 
 var $88=$up;
 var $89=(($88)&1);
 if($89){label=17;break;}else{var $97=0;label=19;break;}
 case 17: 
 var $91=$left;
 var $92=(($91)&1);
 if($92){label=18;break;}else{var $97=0;label=19;break;}
 case 18: 
 var $94=$right;
 var $95=(($94)&1);
 var $97=$95;label=19;break;
 case 19: 
 var $97;
 var $98=$97^1;
 var $99=($98&1);
 ___ZZ12handle_mouseiihENK3$_0clEiii_($f,$81,$84,$99);
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 var $102=$l;
 var $103=((($102)+(1))|0);
 $l=$103;
 label=4;break;
 case 22: 
 label=23;break;
 case 23: 
 var $106=$k;
 var $107=((($106)+(1))|0);
 $k=$107;
 label=2;break;
 case 24: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function ___Z10shape_fillIZ12handle_mouseiihE3$_1EviiiiT_i_($shape,$x,$y,$size,$f,$dir){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $f; $f=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);;;HEAP8[($f)]=HEAP8[(tempParam)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $i=sp;
 var $j=(sp)+(8);
 var $k;
 var $l;
 var $down;
 var $up;
 var $left;
 var $right;
 $1=$shape;
 $2=$x;
 $3=$y;
 $4=$size;
 $5=$dir;
 var $6=$4;
 var $7=(((-$6))|0);
 $k=$7;
 label=2;break;
 case 2: 
 var $9=$k;
 var $10=$4;
 var $11=($9|0)<=($10|0);
 if($11){label=3;break;}else{label=24;break;}
 case 3: 
 var $13=$4;
 var $14=(((-$13))|0);
 $l=$14;
 label=4;break;
 case 4: 
 var $16=$l;
 var $17=$4;
 var $18=($16|0)<=($17|0);
 if($18){label=5;break;}else{label=22;break;}
 case 5: 
 var $20=$k;
 var $21=$5;
 var $22=(((($21|0))/(2))&-1);
 var $23=($22|0)!=0;
 if($23){label=6;break;}else{label=7;break;}
 case 6: 
 var $27=$i;label=8;break;
 case 7: 
 var $27=$j;label=8;break;
 case 8: 
 var $27;
 HEAP32[(($27)>>2)]=$20;
 var $28=$5;
 var $29=(((($28|0))%(2))&-1);
 var $30=($29|0)!=0;
 if($30){label=9;break;}else{label=10;break;}
 case 9: 
 var $32=$l;
 var $33=(((-$32))|0);
 var $37=$33;label=11;break;
 case 10: 
 var $35=$l;
 var $37=$35;label=11;break;
 case 11: 
 var $37;
 var $38=$5;
 var $39=(((($38|0))/(2))&-1);
 var $40=($39|0)!=0;
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $44=$j;label=14;break;
 case 13: 
 var $44=$i;label=14;break;
 case 14: 
 var $44;
 HEAP32[(($44)>>2)]=$37;
 var $45=$1;
 var $46=$4;
 var $47=HEAP32[(($i)>>2)];
 var $48=HEAP32[(($j)>>2)];
 var $49=((($48)+(1))|0);
 var $50=__Z12shape_insideiiii($45,$46,$47,$49);
 var $51=($50&1);
 $down=$51;
 var $52=$1;
 var $53=$4;
 var $54=HEAP32[(($i)>>2)];
 var $55=HEAP32[(($j)>>2)];
 var $56=((($55)-(1))|0);
 var $57=__Z12shape_insideiiii($52,$53,$54,$56);
 var $58=($57&1);
 $up=$58;
 var $59=$1;
 var $60=$4;
 var $61=HEAP32[(($i)>>2)];
 var $62=((($61)+(1))|0);
 var $63=HEAP32[(($j)>>2)];
 var $64=__Z12shape_insideiiii($59,$60,$62,$63);
 var $65=($64&1);
 $right=$65;
 var $66=$1;
 var $67=$4;
 var $68=HEAP32[(($i)>>2)];
 var $69=((($68)-(1))|0);
 var $70=HEAP32[(($j)>>2)];
 var $71=__Z12shape_insideiiii($66,$67,$69,$70);
 var $72=($71&1);
 $left=$72;
 var $73=$1;
 var $74=$4;
 var $75=HEAP32[(($i)>>2)];
 var $76=HEAP32[(($j)>>2)];
 var $77=__Z12shape_insideiiii($73,$74,$75,$76);
 if($77){label=15;break;}else{label=20;break;}
 case 15: 
 var $79=$2;
 var $80=HEAP32[(($i)>>2)];
 var $81=((($79)+($80))|0);
 var $82=$3;
 var $83=HEAP32[(($j)>>2)];
 var $84=((($82)+($83))|0);
 var $85=$down;
 var $86=(($85)&1);
 if($86){label=16;break;}else{var $97=0;label=19;break;}
 case 16: 
 var $88=$up;
 var $89=(($88)&1);
 if($89){label=17;break;}else{var $97=0;label=19;break;}
 case 17: 
 var $91=$left;
 var $92=(($91)&1);
 if($92){label=18;break;}else{var $97=0;label=19;break;}
 case 18: 
 var $94=$right;
 var $95=(($94)&1);
 var $97=$95;label=19;break;
 case 19: 
 var $97;
 var $98=$97^1;
 var $99=($98&1);
 ___ZZ12handle_mouseiihENK3$_1clEiii_($f,$81,$84,$99);
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 var $102=$l;
 var $103=((($102)+(1))|0);
 $l=$103;
 label=4;break;
 case 22: 
 label=23;break;
 case 23: 
 var $106=$k;
 var $107=((($106)+(1))|0);
 $k=$107;
 label=2;break;
 case 24: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __Z4loopv(){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $i;
 var $j;
 var $state;
 var $border=sp;
 var $color=(sp)+(8);
 _SDL_PumpEvents();
 var $1=HEAP32[((9792)>>2)];
 var $2=_SDL_LockSurface($1);
 $i=0;
 label=2;break;
 case 2: 
 var $4=$i;
 var $5=($4|0)<2;
 if($5){label=3;break;}else{label=5;break;}
 case 3: 
 var $7=_SDL_GetMouseState(9872,9864);
 $state=$7;
 var $8=HEAP32[((9872)>>2)];
 var $9=(((($8|0))/(4))&-1);
 var $10=HEAP32[((9864)>>2)];
 var $11=(((($10|0))/(4))&-1);
 var $12=$state;
 __Z12handle_mouseiih($9,$11,$12);
 var $13=HEAP32[((9800)>>2)];
 var $14=HEAP32[((9804)>>2)];
 __Z21sandbox_update_regionP7sandboxiiii(9800,0,0,$13,$14);
 label=4;break;
 case 4: 
 var $16=$i;
 var $17=((($16)+(1))|0);
 $i=$17;
 label=2;break;
 case 5: 
 $i=0;
 label=6;break;
 case 6: 
 var $20=$i;
 var $21=HEAP32[((9800)>>2)];
 var $22=($20|0)<($21|0);
 if($22){label=7;break;}else{label=13;break;}
 case 7: 
 $j=0;
 label=8;break;
 case 8: 
 var $25=$j;
 var $26=HEAP32[((9804)>>2)];
 var $27=($25|0)<($26|0);
 if($27){label=9;break;}else{label=11;break;}
 case 9: 
 var $29=$i;
 var $30=$j;
 __Z17get_particle_infoiiPjPi($29,$30,$color,$border);
 var $31=$i;
 var $32=$j;
 var $33=HEAP32[(($color)>>2)];
 __Z14write_particleiij($31,$32,$33);
 label=10;break;
 case 10: 
 var $35=$j;
 var $36=((($35)+(1))|0);
 $j=$36;
 label=8;break;
 case 11: 
 label=12;break;
 case 12: 
 var $39=$i;
 var $40=((($39)+(1))|0);
 $i=$40;
 label=6;break;
 case 13: 
 var $42=HEAP32[((9792)>>2)];
 _SDL_UnlockSurface($42);
 var $43=HEAP32[((9792)>>2)];
 var $44=_SDL_Flip($43);
 var $45=HEAPF32[((8)>>2)];
 var $46=$45;
 var $47=($46)+((0.1));
 var $48=$47;
 HEAPF32[((8)>>2)]=$48;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _main($argc,$argv){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=0;
 $2=$argc;
 $3=$argv;
 var $4=_SDL_Init(32);
 var $5=_SDL_SetVideoMode(256,256,32,0);
 HEAP32[((9792)>>2)]=$5;
 __Z12init_sandboxii(64,64);
 _emscripten_set_main_loop(730,30,1);
 STACKTOP=sp;return 0;
}
Module["_main"] = _main;

function ___ZZ12handle_mouseiihENK3$_1clEiii_($this,$ii,$jj,$border){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$this;
 $2=$ii;
 $3=$jj;
 $4=$border;
 var $6=$1;
 __Z16sandbox_particlei($5,0);
 var $7=$2;
 var $8=$3;
 __Z20sandbox_set_particleP7sandbox8particleii(9800,$5,$7,$8);
 STACKTOP=sp;return;
}


function ___ZZ12handle_mouseiihENK3$_0clEiii_($this,$ii,$jj,$border){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$this;
 $2=$ii;
 $3=$jj;
 $4=$border;
 var $6=$1;
 __Z16sandbox_particlei($5,4);
 var $7=$2;
 var $8=$3;
 __Z20sandbox_set_particleP7sandbox8particleii(9800,$5,$7,$8);
 STACKTOP=sp;return;
}


function __Z16sandbox_particlei($agg_result,$id){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$id;
 var $2=$1;
 var $3=(($agg_result)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=_rand();
 var $5=(($agg_result+8)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($agg_result+4)|0);
 HEAP32[(($6)>>2)]=0;
 STACKTOP=sp;return;
}


function __Z20sandbox_get_particleP7sandboxii($agg_result,$sandbox,$i,$j){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$sandbox;
 $2=$i;
 $3=$j;
 var $4=$1;
 var $5=(($4+20)|0);
 var $6=(($5+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)!=0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$1;
 var $11=$2;
 var $12=__ZL13wrap_verticalP7sandboxi($10,$11);
 $2=$12;
 label=3;break;
 case 3: 
 var $14=$3;
 var $15=($14|0)<0;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 __Z16sandbox_particlei($agg_result,0);
 label=11;break;
 case 5: 
 var $18=$2;
 var $19=($18|0)<0;
 if($19){label=9;break;}else{label=6;break;}
 case 6: 
 var $21=$3;
 var $22=($21|0)<0;
 if($22){label=9;break;}else{label=7;break;}
 case 7: 
 var $24=$2;
 var $25=$1;
 var $26=(($25)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($24|0)>=($27|0);
 if($28){label=9;break;}else{label=8;break;}
 case 8: 
 var $30=$3;
 var $31=$1;
 var $32=(($31+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($30|0)>=($33|0);
 if($34){label=9;break;}else{label=10;break;}
 case 9: 
 var $36=$1;
 var $37=(($36+20)|0);
 var $38=(($37+12)|0);
 var $39=HEAP32[(($38)>>2)];
 __Z16sandbox_particlei($agg_result,$39);
 label=11;break;
 case 10: 
 var $41=$2;
 var $42=$1;
 var $43=(($42)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=$3;
 var $46=(Math_imul($44,$45)|0);
 var $47=((($41)+($46))|0);
 var $48=$1;
 var $49=(($48+8)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+((($47)*(12))&-1))|0);
 var $52=$agg_result;
 var $53=$51;
 assert(12 % 1 === 0);HEAP32[(($52)>>2)]=HEAP32[(($53)>>2)];HEAP32[((($52)+(4))>>2)]=HEAP32[((($53)+(4))>>2)];HEAP32[((($52)+(8))>>2)]=HEAP32[((($53)+(8))>>2)];
 label=11;break;
 case 11: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __Z24sandbox_get_particle_refP7sandboxii($sandbox,$i,$j){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$sandbox;
 $3=$i;
 $4=$j;
 var $5=$2;
 var $6=(($5+20)|0);
 var $7=(($6+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)!=0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=$2;
 var $12=$3;
 var $13=__ZL13wrap_verticalP7sandboxi($11,$12);
 $3=$13;
 label=3;break;
 case 3: 
 var $15=$3;
 var $16=($15|0)<0;
 if($16){label=7;break;}else{label=4;break;}
 case 4: 
 var $18=$4;
 var $19=($18|0)<0;
 if($19){label=7;break;}else{label=5;break;}
 case 5: 
 var $21=$3;
 var $22=$2;
 var $23=(($22)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($21|0)>=($24|0);
 if($25){label=7;break;}else{label=6;break;}
 case 6: 
 var $27=$4;
 var $28=$2;
 var $29=(($28+4)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($27|0)>=($30|0);
 if($31){label=7;break;}else{label=8;break;}
 case 7: 
 $1=0;
 label=9;break;
 case 8: 
 var $34=$3;
 var $35=$2;
 var $36=(($35)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=$4;
 var $39=(Math_imul($37,$38)|0);
 var $40=((($34)+($39))|0);
 var $41=$2;
 var $42=(($41+8)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+((($40)*(12))&-1))|0);
 $1=$44;
 label=9;break;
 case 9: 
 var $46=$1;
 STACKTOP=sp;return $46;
  default: assert(0, "bad label: " + label);
 }

}


function __Z20sandbox_set_particleP7sandbox8particleii($sandbox,$particle,$i,$j){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $particle; $particle=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($particle)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($particle)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($particle)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$sandbox;
 $2=$i;
 $3=$j;
 var $4=$1;
 var $5=(($4+20)|0);
 var $6=(($5+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)!=0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$1;
 var $11=$2;
 var $12=__ZL13wrap_verticalP7sandboxi($10,$11);
 $2=$12;
 label=3;break;
 case 3: 
 var $14=$2;
 var $15=($14|0)<0;
 if($15){label=7;break;}else{label=4;break;}
 case 4: 
 var $17=$3;
 var $18=($17|0)<0;
 if($18){label=7;break;}else{label=5;break;}
 case 5: 
 var $20=$2;
 var $21=$1;
 var $22=(($21)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($20|0)>=($23|0);
 if($24){label=7;break;}else{label=6;break;}
 case 6: 
 var $26=$3;
 var $27=$1;
 var $28=(($27+4)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($26|0)>=($29|0);
 if($30){label=7;break;}else{label=8;break;}
 case 7: 
 label=9;break;
 case 8: 
 var $33=$2;
 var $34=$1;
 var $35=(($34)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=$3;
 var $38=(Math_imul($36,$37)|0);
 var $39=((($33)+($38))|0);
 var $40=$1;
 var $41=(($40+8)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+((($39)*(12))&-1))|0);
 var $44=$43;
 var $45=$particle;
 assert(12 % 1 === 0);HEAP32[(($44)>>2)]=HEAP32[(($45)>>2)];HEAP32[((($44)+(4))>>2)]=HEAP32[((($45)+(4))>>2)];HEAP32[((($44)+(8))>>2)]=HEAP32[((($45)+(8))>>2)];
 var $46=$1;
 var $47=(($46+16)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=$2;
 var $50=$1;
 var $51=(($50)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=$3;
 var $54=(Math_imul($52,$53)|0);
 var $55=((($49)+($54))|0);
 var $56=$1;
 var $57=(($56+8)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(($58+((($55)*(12))&-1))|0);
 var $60=(($59+4)|0);
 HEAP32[(($60)>>2)]=$48;
 label=9;break;
 case 9: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __Z12sandbox_initP7sandboxii($sandbox,$w,$h){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$sandbox;
 $2=$w;
 $3=$h;
 var $4=$2;
 var $5=$1;
 var $6=(($5)|0);
 HEAP32[(($6)>>2)]=$4;
 var $7=$3;
 var $8=$1;
 var $9=(($8+4)|0);
 HEAP32[(($9)>>2)]=$7;
 var $10=$2;
 var $11=$3;
 var $12=(Math_imul($10,$11)|0);
 var $13=((($12)*(12))&-1);
 var $14=_malloc($13);
 var $15=$14;
 var $16=$1;
 var $17=(($16+8)|0);
 HEAP32[(($17)>>2)]=$15;
 var $18=$2;
 var $19=$3;
 var $20=(Math_imul($18,$19)|0);
 var $21=($20<<3);
 var $22=_malloc($21);
 var $23=$22;
 var $24=$1;
 var $25=(($24+12)|0);
 HEAP32[(($25)>>2)]=$23;
 var $26=$1;
 var $27=(($26+8)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$28;
 var $30=$2;
 var $31=$3;
 var $32=(Math_imul($30,$31)|0);
 var $33=((($32)*(12))&-1);
 _memset($29, 0, $33)|0;
 var $34=$1;
 var $35=(($34+12)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=$36;
 var $38=$2;
 var $39=$3;
 var $40=(Math_imul($38,$39)|0);
 var $41=($40<<3);
 _memset($37, 0, $41)|0;
 var $42=$1;
 var $43=(($42+16)|0);
 HEAP32[(($43)>>2)]=0;
 STACKTOP=sp;return;
}


function __Z17sandbox_init_ruleP7sandboxiiii($sandbox,$rulecount,$vertical_wrap,$border_id,$top_id){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $1=$sandbox;
 $2=$rulecount;
 $3=$vertical_wrap;
 $4=$border_id;
 $5=$top_id;
 var $6=$2;
 var $7=$1;
 var $8=(($7+20)|0);
 var $9=(($8)|0);
 HEAP32[(($9)>>2)]=$6;
 var $10=$2;
 var $11=((($10)*(12))&-1);
 var $12=_malloc($11);
 var $13=$12;
 var $14=$1;
 var $15=(($14+20)|0);
 var $16=(($15+4)|0);
 HEAP32[(($16)>>2)]=$13;
 var $17=$1;
 var $18=(($17+20)|0);
 var $19=(($18+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$20;
 var $22=$2;
 var $23=((($22)*(12))&-1);
 _memset($21, 0, $23)|0;
 var $24=$3;
 var $25=$1;
 var $26=(($25+20)|0);
 var $27=(($26+8)|0);
 HEAP32[(($27)>>2)]=$24;
 var $28=$4;
 var $29=$1;
 var $30=(($29+20)|0);
 var $31=(($30+12)|0);
 HEAP32[(($31)>>2)]=$28;
 var $32=$5;
 var $33=$1;
 var $34=(($33+20)|0);
 var $35=(($34+16)|0);
 HEAP32[(($35)>>2)]=$32;
 STACKTOP=sp;return;
}


function __Z16sandbox_set_ruleP7sandboxi13particle_rule($sandbox,$id,$rule){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $rule; $rule=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($rule)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($rule)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($rule)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];

 var $1;
 var $2;
 $1=$sandbox;
 $2=$id;
 var $3=$2;
 var $4=$1;
 var $5=(($4+20)|0);
 var $6=(($5+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+((($3)*(12))&-1))|0);
 var $9=$8;
 var $10=$rule;
 assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
 STACKTOP=sp;return;
}


function __Z21sandbox_particle_rule5statei($agg_result,$state,$density){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$state;
 $2=$density;
 var $3=$1;
 var $4=$2;
 __Z30sandbox_advanced_particle_rule5stateiPFiP7sandbox8particleiiE($agg_result,$3,$4,0);
 STACKTOP=sp;return;
}


function __Z30sandbox_advanced_particle_rule5stateiPFiP7sandbox8particleiiE($agg_result,$state,$density,$particle_updater){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$state;
 $2=$density;
 $3=$particle_updater;
 var $4=$1;
 var $5=(($agg_result)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=$2;
 var $7=(($agg_result+4)|0);
 HEAP32[(($7)>>2)]=$6;
 var $8=$3;
 var $9=(($agg_result+8)|0);
 HEAP32[(($9)>>2)]=$8;
 STACKTOP=sp;return;
}


function __Z15sandbox_densityP7sandboxi($sandbox,$id){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$sandbox;
 $2=$id;
 var $3=$2;
 var $4=$1;
 var $5=(($4+20)|0);
 var $6=(($5+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+((($3)*(12))&-1))|0);
 var $9=(($8+4)|0);
 var $10=HEAP32[(($9)>>2)];
 STACKTOP=sp;return $10;
}


function __Z4hashv(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $a;
 var $1=HEAP32[((9784)>>2)];
 $a=$1;
 var $2=$a;
 var $3=$2^61;
 var $4=$a;
 var $5=$4>>>16;
 var $6=$3^$5;
 $a=$6;
 var $7=$a;
 var $8=$a;
 var $9=$8<<3;
 var $10=((($7)+($9))|0);
 $a=$10;
 var $11=$a;
 var $12=$a;
 var $13=$12>>>4;
 var $14=$11^$13;
 $a=$14;
 var $15=$a;
 var $16=(Math_imul($15,668265261)|0);
 $a=$16;
 var $17=$a;
 var $18=$a;
 var $19=$18>>>15;
 var $20=$17^$19;
 $a=$20;
 var $21=HEAP32[((9784)>>2)];
 var $22=((($21)+(1))|0);
 HEAP32[((9784)>>2)]=$22;
 var $23=$a;
 STACKTOP=sp;return $23;
}


function __Z15update_particleP7sandbox8particleiiP13particle_rule($sandbox,$self,$i,$j,$rule){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+608)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $r;
 var $r2;
 var $density;
 var $dir;
 var $down=sp;
 var $5=(sp)+(16);
 var $6=(sp)+(32);
 var $7=(sp)+(48);
 var $ldown=(sp)+(64);
 var $rdown=(sp)+(80);
 var $lswitch;
 var $rswitch;
 var $8=(sp)+(96);
 var $9=(sp)+(112);
 var $10=(sp)+(128);
 var $11=(sp)+(144);
 var $12=(sp)+(160);
 var $13=(sp)+(176);
 var $14=(sp)+(192);
 var $15=(sp)+(208);
 var $16=(sp)+(224);
 var $17=(sp)+(240);
 var $18=(sp)+(256);
 var $19=(sp)+(272);
 var $20=(sp)+(288);
 var $21=(sp)+(304);
 var $left=(sp)+(320);
 var $right=(sp)+(336);
 var $22=(sp)+(352);
 var $23=(sp)+(368);
 var $24=(sp)+(384);
 var $25=(sp)+(400);
 var $26=(sp)+(416);
 var $27=(sp)+(432);
 var $28=(sp)+(448);
 var $29=(sp)+(464);
 var $30=(sp)+(480);
 var $31=(sp)+(496);
 var $32=(sp)+(512);
 var $33=(sp)+(528);
 var $34=(sp)+(544);
 var $35=(sp)+(560);
 var $36=(sp)+(576);
 var $37=(sp)+(592);
 $1=$sandbox;
 $2=$i;
 $3=$j;
 $4=$rule;
 var $38=$4;
 var $39=(($38)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=($40|0)==3;
 var $42=($41?-1:1);
 $dir=$42;
 var $43=$4;
 var $44=(($43)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($45|0)==2;
 if($46){label=2;break;}else{label=3;break;}
 case 2: 
 label=49;break;
 case 3: 
 var $49=$1;
 var $50=(($self)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=__Z15sandbox_densityP7sandboxi($49,$51);
 $density=$52;
 var $53=__Z4hashv();
 var $54=(((($53>>>0))%(2))&-1);
 $r=$54;
 var $55=__Z4hashv();
 var $56=(((($55>>>0))%(2))&-1);
 $r2=$56;
 var $57=$4;
 var $58=(($57)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=($59|0)==1;
 if($60){label=7;break;}else{label=4;break;}
 case 4: 
 var $62=$4;
 var $63=(($62)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=($64|0)==0;
 if($65){label=7;break;}else{label=5;break;}
 case 5: 
 var $67=$4;
 var $68=(($67)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=($69|0)==3;
 if($70){label=7;break;}else{label=6;break;}
 case 6: 
 var $72=$4;
 var $73=(($72)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=($74|0)==4;
 if($75){label=7;break;}else{label=10;break;}
 case 7: 
 var $77=$1;
 var $78=$2;
 var $79=$3;
 var $80=$dir;
 var $81=((($79)+($80))|0);
 __Z20sandbox_get_particleP7sandboxii($down,$77,$78,$81);
 var $82=$1;
 var $83=$density;
 var $84=$5;
 var $85=$down;
 assert(12 % 1 === 0);HEAP32[(($84)>>2)]=HEAP32[(($85)>>2)];HEAP32[((($84)+(4))>>2)]=HEAP32[((($85)+(4))>>2)];HEAP32[((($84)+(8))>>2)]=HEAP32[((($85)+(8))>>2)];
 var $86=__ZL10switchableP7sandboxi8particle($82,$83,$5);
 var $87=($86|0)!=0;
 if($87){label=8;break;}else{label=9;break;}
 case 8: 
 var $89=$1;
 var $90=$6;
 var $91=$self;
 assert(12 % 1 === 0);HEAP32[(($90)>>2)]=HEAP32[(($91)>>2)];HEAP32[((($90)+(4))>>2)]=HEAP32[((($91)+(4))>>2)];HEAP32[((($90)+(8))>>2)]=HEAP32[((($91)+(8))>>2)];
 var $92=$7;
 var $93=$down;
 assert(12 % 1 === 0);HEAP32[(($92)>>2)]=HEAP32[(($93)>>2)];HEAP32[((($92)+(4))>>2)]=HEAP32[((($93)+(4))>>2)];HEAP32[((($92)+(8))>>2)]=HEAP32[((($93)+(8))>>2)];
 var $94=$2;
 var $95=$3;
 var $96=$2;
 var $97=$3;
 var $98=$dir;
 var $99=((($97)+($98))|0);
 __ZL15switch_particleP7sandbox8particleS1_iiii($89,$6,$7,$94,$95,$96,$99);
 label=49;break;
 case 9: 
 label=10;break;
 case 10: 
 var $102=$4;
 var $103=(($102)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=($104|0)==1;
 if($105){label=13;break;}else{label=11;break;}
 case 11: 
 var $107=$4;
 var $108=(($107)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=($109|0)==0;
 if($110){label=13;break;}else{label=12;break;}
 case 12: 
 var $112=$4;
 var $113=(($112)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=($114|0)==3;
 if($115){label=13;break;}else{label=26;break;}
 case 13: 
 var $117=$1;
 var $118=$2;
 var $119=((($118)-(1))|0);
 var $120=$3;
 var $121=$dir;
 var $122=((($120)+($121))|0);
 __Z20sandbox_get_particleP7sandboxii($8,$117,$119,$122);
 var $123=$ldown;
 var $124=$8;
 assert(12 % 1 === 0);HEAP32[(($123)>>2)]=HEAP32[(($124)>>2)];HEAP32[((($123)+(4))>>2)]=HEAP32[((($124)+(4))>>2)];HEAP32[((($123)+(8))>>2)]=HEAP32[((($124)+(8))>>2)];
 var $125=$1;
 var $126=$2;
 var $127=((($126)+(1))|0);
 var $128=$3;
 var $129=$dir;
 var $130=((($128)+($129))|0);
 __Z20sandbox_get_particleP7sandboxii($9,$125,$127,$130);
 var $131=$rdown;
 var $132=$9;
 assert(12 % 1 === 0);HEAP32[(($131)>>2)]=HEAP32[(($132)>>2)];HEAP32[((($131)+(4))>>2)]=HEAP32[((($132)+(4))>>2)];HEAP32[((($131)+(8))>>2)]=HEAP32[((($132)+(8))>>2)];
 var $133=$1;
 var $134=$density;
 var $135=$10;
 var $136=$ldown;
 assert(12 % 1 === 0);HEAP32[(($135)>>2)]=HEAP32[(($136)>>2)];HEAP32[((($135)+(4))>>2)]=HEAP32[((($136)+(4))>>2)];HEAP32[((($135)+(8))>>2)]=HEAP32[((($136)+(8))>>2)];
 var $137=__ZL10switchableP7sandboxi8particle($133,$134,$10);
 $lswitch=$137;
 var $138=$1;
 var $139=$density;
 var $140=$11;
 var $141=$rdown;
 assert(12 % 1 === 0);HEAP32[(($140)>>2)]=HEAP32[(($141)>>2)];HEAP32[((($140)+(4))>>2)]=HEAP32[((($141)+(4))>>2)];HEAP32[((($140)+(8))>>2)]=HEAP32[((($141)+(8))>>2)];
 var $142=__ZL10switchableP7sandboxi8particle($138,$139,$11);
 $rswitch=$142;
 var $143=$lswitch;
 var $144=($143|0)!=0;
 if($144){label=14;break;}else{label=19;break;}
 case 14: 
 var $146=$rswitch;
 var $147=($146|0)!=0;
 if($147){label=15;break;}else{label=19;break;}
 case 15: 
 var $149=$r;
 var $150=($149|0)==0;
 if($150){label=16;break;}else{label=17;break;}
 case 16: 
 var $152=$1;
 var $153=$12;
 var $154=$self;
 assert(12 % 1 === 0);HEAP32[(($153)>>2)]=HEAP32[(($154)>>2)];HEAP32[((($153)+(4))>>2)]=HEAP32[((($154)+(4))>>2)];HEAP32[((($153)+(8))>>2)]=HEAP32[((($154)+(8))>>2)];
 var $155=$13;
 var $156=$ldown;
 assert(12 % 1 === 0);HEAP32[(($155)>>2)]=HEAP32[(($156)>>2)];HEAP32[((($155)+(4))>>2)]=HEAP32[((($156)+(4))>>2)];HEAP32[((($155)+(8))>>2)]=HEAP32[((($156)+(8))>>2)];
 var $157=$2;
 var $158=$3;
 var $159=$2;
 var $160=((($159)-(1))|0);
 var $161=$3;
 var $162=$dir;
 var $163=((($161)+($162))|0);
 __ZL15switch_particleP7sandbox8particleS1_iiii($152,$12,$13,$157,$158,$160,$163);
 label=18;break;
 case 17: 
 var $165=$1;
 var $166=$14;
 var $167=$self;
 assert(12 % 1 === 0);HEAP32[(($166)>>2)]=HEAP32[(($167)>>2)];HEAP32[((($166)+(4))>>2)]=HEAP32[((($167)+(4))>>2)];HEAP32[((($166)+(8))>>2)]=HEAP32[((($167)+(8))>>2)];
 var $168=$15;
 var $169=$ldown;
 assert(12 % 1 === 0);HEAP32[(($168)>>2)]=HEAP32[(($169)>>2)];HEAP32[((($168)+(4))>>2)]=HEAP32[((($169)+(4))>>2)];HEAP32[((($168)+(8))>>2)]=HEAP32[((($169)+(8))>>2)];
 var $170=$2;
 var $171=$3;
 var $172=$2;
 var $173=((($172)+(1))|0);
 var $174=$3;
 var $175=$dir;
 var $176=((($174)+($175))|0);
 __ZL15switch_particleP7sandbox8particleS1_iiii($165,$14,$15,$170,$171,$173,$176);
 label=18;break;
 case 18: 
 label=49;break;
 case 19: 
 var $179=$1;
 var $180=$density;
 var $181=$16;
 var $182=$ldown;
 assert(12 % 1 === 0);HEAP32[(($181)>>2)]=HEAP32[(($182)>>2)];HEAP32[((($181)+(4))>>2)]=HEAP32[((($182)+(4))>>2)];HEAP32[((($181)+(8))>>2)]=HEAP32[((($182)+(8))>>2)];
 var $183=__ZL10switchableP7sandboxi8particle($179,$180,$16);
 var $184=($183|0)!=0;
 if($184){label=20;break;}else{label=21;break;}
 case 20: 
 var $186=$1;
 var $187=$17;
 var $188=$self;
 assert(12 % 1 === 0);HEAP32[(($187)>>2)]=HEAP32[(($188)>>2)];HEAP32[((($187)+(4))>>2)]=HEAP32[((($188)+(4))>>2)];HEAP32[((($187)+(8))>>2)]=HEAP32[((($188)+(8))>>2)];
 var $189=$18;
 var $190=$ldown;
 assert(12 % 1 === 0);HEAP32[(($189)>>2)]=HEAP32[(($190)>>2)];HEAP32[((($189)+(4))>>2)]=HEAP32[((($190)+(4))>>2)];HEAP32[((($189)+(8))>>2)]=HEAP32[((($190)+(8))>>2)];
 var $191=$2;
 var $192=$3;
 var $193=$2;
 var $194=((($193)-(1))|0);
 var $195=$3;
 var $196=$dir;
 var $197=((($195)+($196))|0);
 __ZL15switch_particleP7sandbox8particleS1_iiii($186,$17,$18,$191,$192,$194,$197);
 label=49;break;
 case 21: 
 var $199=$1;
 var $200=$density;
 var $201=$19;
 var $202=$rdown;
 assert(12 % 1 === 0);HEAP32[(($201)>>2)]=HEAP32[(($202)>>2)];HEAP32[((($201)+(4))>>2)]=HEAP32[((($202)+(4))>>2)];HEAP32[((($201)+(8))>>2)]=HEAP32[((($202)+(8))>>2)];
 var $203=__ZL10switchableP7sandboxi8particle($199,$200,$19);
 var $204=($203|0)!=0;
 if($204){label=22;break;}else{label=23;break;}
 case 22: 
 var $206=$1;
 var $207=$20;
 var $208=$self;
 assert(12 % 1 === 0);HEAP32[(($207)>>2)]=HEAP32[(($208)>>2)];HEAP32[((($207)+(4))>>2)]=HEAP32[((($208)+(4))>>2)];HEAP32[((($207)+(8))>>2)]=HEAP32[((($208)+(8))>>2)];
 var $209=$21;
 var $210=$rdown;
 assert(12 % 1 === 0);HEAP32[(($209)>>2)]=HEAP32[(($210)>>2)];HEAP32[((($209)+(4))>>2)]=HEAP32[((($210)+(4))>>2)];HEAP32[((($209)+(8))>>2)]=HEAP32[((($210)+(8))>>2)];
 var $211=$2;
 var $212=$3;
 var $213=$2;
 var $214=((($213)+(1))|0);
 var $215=$3;
 var $216=$dir;
 var $217=((($215)+($216))|0);
 __ZL15switch_particleP7sandbox8particleS1_iiii($206,$20,$21,$211,$212,$214,$217);
 label=49;break;
 case 23: 
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 var $222=$4;
 var $223=(($222)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=($224|0)==0;
 if($225){label=28;break;}else{label=27;break;}
 case 27: 
 var $227=$4;
 var $228=(($227)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=($229|0)==3;
 if($230){label=28;break;}else{label=49;break;}
 case 28: 
 var $232=$1;
 var $233=$2;
 var $234=((($233)-(1))|0);
 var $235=$3;
 __Z20sandbox_get_particleP7sandboxii($left,$232,$234,$235);
 var $236=$1;
 var $237=$2;
 var $238=((($237)+(1))|0);
 var $239=$3;
 __Z20sandbox_get_particleP7sandboxii($right,$236,$238,$239);
 var $240=$r;
 var $241=($240|0)==0;
 if($241){label=29;break;}else{label=41;break;}
 case 29: 
 var $243=$1;
 var $244=(($left)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=__Z15sandbox_densityP7sandboxi($243,$245);
 var $247=$density;
 var $248=($246|0)<($247|0);
 if($248){label=30;break;}else{label=34;break;}
 case 30: 
 var $250=$1;
 var $251=(($right)|0);
 var $252=HEAP32[(($251)>>2)];
 var $253=__Z15sandbox_densityP7sandboxi($250,$252);
 var $254=$density;
 var $255=($253|0)<($254|0);
 if($255){label=31;break;}else{label=34;break;}
 case 31: 
 var $257=$r2;
 var $258=($257|0)==0;
 if($258){label=32;break;}else{label=33;break;}
 case 32: 
 var $260=$1;
 var $261=$22;
 var $262=$self;
 assert(12 % 1 === 0);HEAP32[(($261)>>2)]=HEAP32[(($262)>>2)];HEAP32[((($261)+(4))>>2)]=HEAP32[((($262)+(4))>>2)];HEAP32[((($261)+(8))>>2)]=HEAP32[((($262)+(8))>>2)];
 var $263=$2;
 var $264=((($263)-(1))|0);
 var $265=$3;
 __Z20sandbox_set_particleP7sandbox8particleii($260,$22,$264,$265);
 var $266=$1;
 var $267=$23;
 var $268=$left;
 assert(12 % 1 === 0);HEAP32[(($267)>>2)]=HEAP32[(($268)>>2)];HEAP32[((($267)+(4))>>2)]=HEAP32[((($268)+(4))>>2)];HEAP32[((($267)+(8))>>2)]=HEAP32[((($268)+(8))>>2)];
 var $269=$2;
 var $270=$3;
 __Z20sandbox_set_particleP7sandbox8particleii($266,$23,$269,$270);
 label=49;break;
 case 33: 
 var $272=$1;
 var $273=$24;
 var $274=$self;
 assert(12 % 1 === 0);HEAP32[(($273)>>2)]=HEAP32[(($274)>>2)];HEAP32[((($273)+(4))>>2)]=HEAP32[((($274)+(4))>>2)];HEAP32[((($273)+(8))>>2)]=HEAP32[((($274)+(8))>>2)];
 var $275=$2;
 var $276=((($275)+(1))|0);
 var $277=$3;
 __Z20sandbox_set_particleP7sandbox8particleii($272,$24,$276,$277);
 var $278=$1;
 var $279=$25;
 var $280=$right;
 assert(12 % 1 === 0);HEAP32[(($279)>>2)]=HEAP32[(($280)>>2)];HEAP32[((($279)+(4))>>2)]=HEAP32[((($280)+(4))>>2)];HEAP32[((($279)+(8))>>2)]=HEAP32[((($280)+(8))>>2)];
 var $281=$2;
 var $282=$3;
 __Z20sandbox_set_particleP7sandbox8particleii($278,$25,$281,$282);
 label=49;break;
 case 34: 
 var $284=$1;
 var $285=(($left)|0);
 var $286=HEAP32[(($285)>>2)];
 var $287=__Z15sandbox_densityP7sandboxi($284,$286);
 var $288=$density;
 var $289=($287|0)<($288|0);
 if($289){label=35;break;}else{label=36;break;}
 case 35: 
 var $291=$1;
 var $292=$26;
 var $293=$self;
 assert(12 % 1 === 0);HEAP32[(($292)>>2)]=HEAP32[(($293)>>2)];HEAP32[((($292)+(4))>>2)]=HEAP32[((($293)+(4))>>2)];HEAP32[((($292)+(8))>>2)]=HEAP32[((($293)+(8))>>2)];
 var $294=$2;
 var $295=((($294)-(1))|0);
 var $296=$3;
 __Z20sandbox_set_particleP7sandbox8particleii($291,$26,$295,$296);
 var $297=$1;
 var $298=$27;
 var $299=$left;
 assert(12 % 1 === 0);HEAP32[(($298)>>2)]=HEAP32[(($299)>>2)];HEAP32[((($298)+(4))>>2)]=HEAP32[((($299)+(4))>>2)];HEAP32[((($298)+(8))>>2)]=HEAP32[((($299)+(8))>>2)];
 var $300=$2;
 var $301=$3;
 __Z20sandbox_set_particleP7sandbox8particleii($297,$27,$300,$301);
 label=49;break;
 case 36: 
 var $303=$1;
 var $304=(($right)|0);
 var $305=HEAP32[(($304)>>2)];
 var $306=__Z15sandbox_densityP7sandboxi($303,$305);
 var $307=$density;
 var $308=($306|0)<($307|0);
 if($308){label=37;break;}else{label=38;break;}
 case 37: 
 var $310=$1;
 var $311=$28;
 var $312=$self;
 assert(12 % 1 === 0);HEAP32[(($311)>>2)]=HEAP32[(($312)>>2)];HEAP32[((($311)+(4))>>2)]=HEAP32[((($312)+(4))>>2)];HEAP32[((($311)+(8))>>2)]=HEAP32[((($312)+(8))>>2)];
 var $313=$2;
 var $314=((($313)+(1))|0);
 var $315=$3;
 __Z20sandbox_set_particleP7sandbox8particleii($310,$28,$314,$315);
 var $316=$1;
 var $317=$29;
 var $318=$right;
 assert(12 % 1 === 0);HEAP32[(($317)>>2)]=HEAP32[(($318)>>2)];HEAP32[((($317)+(4))>>2)]=HEAP32[((($318)+(4))>>2)];HEAP32[((($317)+(8))>>2)]=HEAP32[((($318)+(8))>>2)];
 var $319=$2;
 var $320=$3;
 __Z20sandbox_set_particleP7sandbox8particleii($316,$29,$319,$320);
 label=49;break;
 case 38: 
 label=39;break;
 case 39: 
 label=40;break;
 case 40: 
 label=41;break;
 case 41: 
 var $325=$1;
 var $326=$density;
 var $327=$30;
 var $328=$left;
 assert(12 % 1 === 0);HEAP32[(($327)>>2)]=HEAP32[(($328)>>2)];HEAP32[((($327)+(4))>>2)]=HEAP32[((($328)+(4))>>2)];HEAP32[((($327)+(8))>>2)]=HEAP32[((($328)+(8))>>2)];
 var $329=__ZL10switchableP7sandboxi8particle($325,$326,$30);
 var $330=($329|0)!=0;
 if($330){label=42;break;}else{label=44;break;}
 case 42: 
 var $332=$1;
 var $333=$density;
 var $334=$31;
 var $335=$right;
 assert(12 % 1 === 0);HEAP32[(($334)>>2)]=HEAP32[(($335)>>2)];HEAP32[((($334)+(4))>>2)]=HEAP32[((($335)+(4))>>2)];HEAP32[((($334)+(8))>>2)]=HEAP32[((($335)+(8))>>2)];
 var $336=__ZL10switchableP7sandboxi8particle($332,$333,$31);
 var $337=($336|0)!=0;
 if($337){label=44;break;}else{label=43;break;}
 case 43: 
 var $339=$1;
 var $340=$32;
 var $341=$self;
 assert(12 % 1 === 0);HEAP32[(($340)>>2)]=HEAP32[(($341)>>2)];HEAP32[((($340)+(4))>>2)]=HEAP32[((($341)+(4))>>2)];HEAP32[((($340)+(8))>>2)]=HEAP32[((($341)+(8))>>2)];
 var $342=$33;
 var $343=$left;
 assert(12 % 1 === 0);HEAP32[(($342)>>2)]=HEAP32[(($343)>>2)];HEAP32[((($342)+(4))>>2)]=HEAP32[((($343)+(4))>>2)];HEAP32[((($342)+(8))>>2)]=HEAP32[((($343)+(8))>>2)];
 var $344=$2;
 var $345=$3;
 var $346=$2;
 var $347=((($346)-(1))|0);
 var $348=$3;
 __ZL15switch_particleP7sandbox8particleS1_iiii($339,$32,$33,$344,$345,$347,$348);
 label=48;break;
 case 44: 
 var $350=$1;
 var $351=$density;
 var $352=$34;
 var $353=$right;
 assert(12 % 1 === 0);HEAP32[(($352)>>2)]=HEAP32[(($353)>>2)];HEAP32[((($352)+(4))>>2)]=HEAP32[((($353)+(4))>>2)];HEAP32[((($352)+(8))>>2)]=HEAP32[((($353)+(8))>>2)];
 var $354=__ZL10switchableP7sandboxi8particle($350,$351,$34);
 var $355=($354|0)!=0;
 if($355){label=45;break;}else{label=47;break;}
 case 45: 
 var $357=$1;
 var $358=$density;
 var $359=$35;
 var $360=$left;
 assert(12 % 1 === 0);HEAP32[(($359)>>2)]=HEAP32[(($360)>>2)];HEAP32[((($359)+(4))>>2)]=HEAP32[((($360)+(4))>>2)];HEAP32[((($359)+(8))>>2)]=HEAP32[((($360)+(8))>>2)];
 var $361=__ZL10switchableP7sandboxi8particle($357,$358,$35);
 var $362=($361|0)!=0;
 if($362){label=47;break;}else{label=46;break;}
 case 46: 
 var $364=$1;
 var $365=$36;
 var $366=$self;
 assert(12 % 1 === 0);HEAP32[(($365)>>2)]=HEAP32[(($366)>>2)];HEAP32[((($365)+(4))>>2)]=HEAP32[((($366)+(4))>>2)];HEAP32[((($365)+(8))>>2)]=HEAP32[((($366)+(8))>>2)];
 var $367=$37;
 var $368=$right;
 assert(12 % 1 === 0);HEAP32[(($367)>>2)]=HEAP32[(($368)>>2)];HEAP32[((($367)+(4))>>2)]=HEAP32[((($368)+(4))>>2)];HEAP32[((($367)+(8))>>2)]=HEAP32[((($368)+(8))>>2)];
 var $369=$2;
 var $370=$3;
 var $371=$2;
 var $372=((($371)+(1))|0);
 var $373=$3;
 __ZL15switch_particleP7sandbox8particleS1_iiii($364,$36,$37,$369,$370,$372,$373);
 label=47;break;
 case 47: 
 label=48;break;
 case 48: 
 label=49;break;
 case 49: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __Z21sandbox_update_regionP7sandboxiiii($sandbox,$x,$y,$w,$h){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $i=sp;
 var $j=(sp)+(8);
 var $jdir;
 var $idir;
 var $self=(sp)+(16);
 var $6=(sp)+(32);
 var $7=(sp)+(48);
 $1=$sandbox;
 $2=$x;
 $3=$y;
 $4=$w;
 $5=$h;
 var $8=$1;
 var $9=(($8+16)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=((($10)+(1))|0);
 HEAP32[(($9)>>2)]=$11;
 var $12=_rand();
 var $13=(((($12|0))%(2))&-1);
 $jdir=$13;
 var $14=$jdir;
 var $15=($14|0)!=0;
 if($15){label=2;break;}else{label=3;break;}
 case 2: 
 var $17=$3;
 HEAP32[(($j)>>2)]=$17;
 var $24=$j;label=4;break;
 case 3: 
 var $19=$3;
 var $20=$5;
 var $21=((($19)+($20))|0);
 var $22=((($21)-(1))|0);
 HEAP32[(($j)>>2)]=$22;
 var $24=$j;label=4;break;
 case 4: 
 var $24;
 label=5;break;
 case 5: 
 var $26=$jdir;
 var $27=($26|0)!=0;
 if($27){label=6;break;}else{label=7;break;}
 case 6: 
 var $29=HEAP32[(($j)>>2)];
 var $30=$3;
 var $31=$5;
 var $32=((($30)+($31))|0);
 var $33=($29|0)<($32|0);
 if($33){label=8;break;}else{label=34;break;}
 case 7: 
 var $35=HEAP32[(($j)>>2)];
 var $36=$3;
 var $37=($35|0)>=($36|0);
 if($37){label=8;break;}else{label=34;break;}
 case 8: 
 var $39=_rand();
 var $40=(((($39|0))%(2))&-1);
 $idir=$40;
 var $41=$idir;
 var $42=($41|0)!=0;
 if($42){label=9;break;}else{label=10;break;}
 case 9: 
 var $44=$2;
 HEAP32[(($i)>>2)]=$44;
 var $51=$i;label=11;break;
 case 10: 
 var $46=$2;
 var $47=$4;
 var $48=((($46)+($47))|0);
 var $49=((($48)-(1))|0);
 HEAP32[(($i)>>2)]=$49;
 var $51=$i;label=11;break;
 case 11: 
 var $51;
 label=12;break;
 case 12: 
 var $53=$idir;
 var $54=($53|0)!=0;
 if($54){label=13;break;}else{label=14;break;}
 case 13: 
 var $56=HEAP32[(($i)>>2)];
 var $57=$2;
 var $58=$4;
 var $59=((($57)+($58))|0);
 var $60=($56|0)<($59|0);
 if($60){label=15;break;}else{label=29;break;}
 case 14: 
 var $62=HEAP32[(($i)>>2)];
 var $63=$2;
 var $64=($62|0)>=($63|0);
 if($64){label=15;break;}else{label=29;break;}
 case 15: 
 var $66=$1;
 var $67=HEAP32[(($i)>>2)];
 var $68=HEAP32[(($j)>>2)];
 __Z20sandbox_get_particleP7sandboxii($self,$66,$67,$68);
 var $69=(($self)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=($70|0)==0;
 if($71){label=17;break;}else{label=16;break;}
 case 16: 
 var $73=(($self+4)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=$1;
 var $76=(($75+16)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=($74|0)==($77|0);
 if($78){label=17;break;}else{label=18;break;}
 case 17: 
 label=25;break;
 case 18: 
 var $81=(($self)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=$1;
 var $84=(($83+20)|0);
 var $85=(($84+4)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=(($86+((($82)*(12))&-1))|0);
 var $88=(($87+8)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($89|0)!=0;
 if($90){label=19;break;}else{label=22;break;}
 case 19: 
 var $92=(($self)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=$1;
 var $95=(($94+20)|0);
 var $96=(($95+4)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=(($97+((($93)*(12))&-1))|0);
 var $99=(($98+8)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=$1;
 var $102=$6;
 var $103=$self;
 assert(12 % 1 === 0);HEAP32[(($102)>>2)]=HEAP32[(($103)>>2)];HEAP32[((($102)+(4))>>2)]=HEAP32[((($103)+(4))>>2)];HEAP32[((($102)+(8))>>2)]=HEAP32[((($103)+(8))>>2)];
 var $104=HEAP32[(($i)>>2)];
 var $105=HEAP32[(($j)>>2)];
 var $106=FUNCTION_TABLE[$100]($101,$6,$104,$105);
 var $107=($106|0)!=0;
 if($107){label=20;break;}else{label=21;break;}
 case 20: 
 label=25;break;
 case 21: 
 label=22;break;
 case 22: 
 var $111=(($self)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=$1;
 var $114=(($113+20)|0);
 var $115=(($114+4)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=(($116+((($112)*(12))&-1))|0);
 var $118=(($117)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=($119|0)!=5;
 if($120){label=23;break;}else{label=24;break;}
 case 23: 
 var $122=$1;
 var $123=$7;
 var $124=$self;
 assert(12 % 1 === 0);HEAP32[(($123)>>2)]=HEAP32[(($124)>>2)];HEAP32[((($123)+(4))>>2)]=HEAP32[((($124)+(4))>>2)];HEAP32[((($123)+(8))>>2)]=HEAP32[((($124)+(8))>>2)];
 var $125=HEAP32[(($i)>>2)];
 var $126=HEAP32[(($j)>>2)];
 var $127=(($self)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=$1;
 var $130=(($129+20)|0);
 var $131=(($130+4)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=(($132+((($128)*(12))&-1))|0);
 __Z15update_particleP7sandbox8particleiiP13particle_rule($122,$7,$125,$126,$133);
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 var $136=$idir;
 var $137=($136|0)!=0;
 if($137){label=26;break;}else{label=27;break;}
 case 26: 
 var $139=HEAP32[(($i)>>2)];
 var $140=((($139)+(1))|0);
 HEAP32[(($i)>>2)]=$140;
 var $145=$139;label=28;break;
 case 27: 
 var $142=HEAP32[(($i)>>2)];
 var $143=((($142)-(1))|0);
 HEAP32[(($i)>>2)]=$143;
 var $145=$142;label=28;break;
 case 28: 
 var $145;
 label=12;break;
 case 29: 
 label=30;break;
 case 30: 
 var $148=$jdir;
 var $149=($148|0)!=0;
 if($149){label=31;break;}else{label=32;break;}
 case 31: 
 var $151=HEAP32[(($j)>>2)];
 var $152=((($151)+(1))|0);
 HEAP32[(($j)>>2)]=$152;
 var $157=$151;label=33;break;
 case 32: 
 var $154=HEAP32[(($j)>>2)];
 var $155=((($154)-(1))|0);
 HEAP32[(($j)>>2)]=$155;
 var $157=$154;label=33;break;
 case 33: 
 var $157;
 label=5;break;
 case 34: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZL13wrap_verticalP7sandboxi($sandbox,$i){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$sandbox;
 $2=$i;
 var $3=$1;
 var $4=(($3+20)|0);
 var $5=(($4+8)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)!=0;
 if($7){label=2;break;}else{label=9;break;}
 case 2: 
 label=3;break;
 case 3: 
 var $10=$2;
 var $11=($10|0)<0;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 var $13=$1;
 var $14=(($13)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$2;
 var $17=((($16)+($15))|0);
 $2=$17;
 label=3;break;
 case 5: 
 label=6;break;
 case 6: 
 var $20=$2;
 var $21=$1;
 var $22=(($21)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($20|0)>=($23|0);
 if($24){label=7;break;}else{label=8;break;}
 case 7: 
 var $26=$1;
 var $27=(($26)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$2;
 var $30=((($29)-($28))|0);
 $2=$30;
 label=6;break;
 case 8: 
 label=9;break;
 case 9: 
 var $33=$2;
 STACKTOP=sp;return $33;
  default: assert(0, "bad label: " + label);
 }

}


function __ZL10switchableP7sandboxi8particle($sandbox,$density,$other){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $other; $other=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($other)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($other)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($other)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];

 var $1;
 var $2;
 $1=$sandbox;
 $2=$density;
 var $3=$1;
 var $4=(($other)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=__Z15sandbox_densityP7sandboxi($3,$5);
 var $7=$2;
 var $8=($6|0)<($7|0);
 var $9=($8&1);
 STACKTOP=sp;return $9;
}


function __ZL15switch_particleP7sandbox8particleS1_iiii($sandbox,$self,$other,$pi,$pj,$ni,$nj){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $other; $other=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($other)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($other)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($other)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];

 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6=sp;
 var $7=(sp)+(16);
 $1=$sandbox;
 $2=$pi;
 $3=$pj;
 $4=$ni;
 $5=$nj;
 var $8=$1;
 var $9=$6;
 var $10=$self;
 assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
 var $11=$4;
 var $12=$5;
 __Z20sandbox_set_particleP7sandbox8particleii($8,$6,$11,$12);
 var $13=$1;
 var $14=$7;
 var $15=$other;
 assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
 var $16=$2;
 var $17=$3;
 __Z20sandbox_set_particleP7sandbox8particleii($13,$7,$16,$17);
 STACKTOP=sp;return;
}


function __Z12shape_insideiiii($shape,$size,$i,$j){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $2=$shape;
 $3=$size;
 $4=$i;
 $5=$j;
 var $6=$4;
 var $7=$3;
 var $8=(((-$7))|0);
 var $9=($6|0)<($8|0);
 if($9){label=5;break;}else{label=2;break;}
 case 2: 
 var $11=$5;
 var $12=$3;
 var $13=(((-$12))|0);
 var $14=($11|0)<($13|0);
 if($14){label=5;break;}else{label=3;break;}
 case 3: 
 var $16=$4;
 var $17=$3;
 var $18=($16|0)>($17|0);
 if($18){label=5;break;}else{label=4;break;}
 case 4: 
 var $20=$5;
 var $21=$3;
 var $22=($20|0)>($21|0);
 if($22){label=5;break;}else{label=6;break;}
 case 5: 
 $1=0;
 label=17;break;
 case 6: 
 var $25=$2;
 var $26=($25|0)==0;
 if($26){label=7;break;}else{label=8;break;}
 case 7: 
 $1=1;
 label=17;break;
 case 8: 
 var $29=$2;
 var $30=($29|0)==1;
 if($30){label=9;break;}else{label=11;break;}
 case 9: 
 var $32=$4;
 var $33=$4;
 var $34=(Math_imul($32,$33)|0);
 var $35=$5;
 var $36=$5;
 var $37=(Math_imul($35,$36)|0);
 var $38=((($34)+($37))|0);
 var $39=$3;
 var $40=$3;
 var $41=(Math_imul($39,$40)|0);
 var $42=($38|0)<=($41|0);
 if($42){label=10;break;}else{label=11;break;}
 case 10: 
 $1=1;
 label=17;break;
 case 11: 
 var $45=$2;
 var $46=($45|0)==2;
 if($46){label=12;break;}else{label=14;break;}
 case 12: 
 var $48=$4;
 var $49=Math_abs($48);
 var $50=($49|0);
 var $51=$5;
 var $52=($51|0);
 var $53=($52)/(2);
 var $54=$3;
 var $55=($54|0);
 var $56=($55)/(2);
 var $57=($53)+($56);
 var $58=$50<$57;
 if($58){label=13;break;}else{label=14;break;}
 case 13: 
 $1=1;
 label=17;break;
 case 14: 
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 $1=0;
 label=17;break;
 case 17: 
 var $64=$1;
 STACKTOP=sp;return $64;
  default: assert(0, "bad label: " + label);
 }

}


function ___clang_call_terminate($0){
 var label=0;


 var $2=___cxa_begin_catch($0);
 __ZSt9terminatev();
 throw "Reached an unreachable!";
}


function __ZNSt3__18ios_base4InitC2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[((_stdin)>>2)];
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(12800,$1,12928);
 HEAP32[((13792)>>2)]=4548;
 HEAP32[((13800)>>2)]=4568;
 HEAP32[((13796)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(13800,12800) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=2;break; }
 case 2: 
 var $3$0 = ___cxa_find_matching_catch(-1, -1); var $3$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(13800);
 ___resumeException($3$0)
 case 3: 
 HEAP32[((13872)>>2)]=0;
 HEAP32[((13876)>>2)]=-1;
 var $4=HEAP32[((_stdout)>>2)];
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(12704,$4,12936);
 HEAP32[((13528)>>2)]=4452;
 HEAP32[((13532)>>2)]=4472;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(13532,12704) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1); var $6$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(13532);
 ___resumeException($6$0)
 case 5: 
 HEAP32[((13604)>>2)]=0;
 HEAP32[((13608)>>2)]=-1;
 var $7=HEAP32[((_stderr)>>2)];
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(12752,$7,12944);
 HEAP32[((13704)>>2)]=4452;
 HEAP32[((13708)>>2)]=4472;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(13708,12752) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=6;break; }
 case 6: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1); var $9$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(13708);
 ___resumeException($9$0)
 case 7: 
 HEAP32[((13780)>>2)]=0;
 HEAP32[((13784)>>2)]=-1;
 var $10=HEAP32[((13704)>>2)];
 var $11=((($10)-(12))|0);
 var $12=$11;
 var $13=HEAP32[(($12)>>2)];
 var $_sum=((($13)+(24))|0);
 var $14=((13704+$_sum)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 HEAP32[((13616)>>2)]=4452;
 HEAP32[((13620)>>2)]=4472;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(13620,$16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(13620);
 ___resumeException($18$0)
 case 9: 
 HEAP32[((13692)>>2)]=0;
 HEAP32[((13696)>>2)]=-1;
 var $19=HEAP32[((13792)>>2)];
 var $20=((($19)-(12))|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $_sum5=((($22)+(72))|0);
 var $23=((13792+$_sum5)|0);
 var $24=$23;
 HEAP32[(($24)>>2)]=13528;
 var $25=HEAP32[((13704)>>2)];
 var $26=((($25)-(12))|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $_sum6=((($28)+(4))|0);
 var $29=((13704+$_sum6)|0);
 var $30=$29;
 var $31=HEAP32[(($30)>>2)];
 var $32=$31|8192;
 HEAP32[(($30)>>2)]=$32;
 var $33=HEAP32[((13704)>>2)];
 var $34=((($33)-(12))|0);
 var $35=$34;
 var $36=HEAP32[(($35)>>2)];
 var $_sum7=((($36)+(72))|0);
 var $37=((13704+$_sum7)|0);
 var $38=$37;
 HEAP32[(($38)>>2)]=13528;
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(12648,$1,12952);
 HEAP32[((13440)>>2)]=4500;
 HEAP32[((13448)>>2)]=4520;
 HEAP32[((13444)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(13448,12648) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=10;break; }
 case 10: 
 var $40$0 = ___cxa_find_matching_catch(-1, -1); var $40$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(13448);
 ___resumeException($40$0)
 case 11: 
 HEAP32[((13520)>>2)]=0;
 HEAP32[((13524)>>2)]=-1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(12552,$4,12960);
 HEAP32[((13160)>>2)]=4404;
 HEAP32[((13164)>>2)]=4424;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(13164,12552) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=12;break; }
 case 12: 
 var $42$0 = ___cxa_find_matching_catch(-1, -1); var $42$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(13164);
 ___resumeException($42$0)
 case 13: 
 HEAP32[((13236)>>2)]=0;
 HEAP32[((13240)>>2)]=-1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(12600,$7,12968);
 HEAP32[((13336)>>2)]=4404;
 HEAP32[((13340)>>2)]=4424;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(13340,12600) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=14;break; }
 case 14: 
 var $44$0 = ___cxa_find_matching_catch(-1, -1); var $44$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(13340);
 ___resumeException($44$0)
 case 15: 
 HEAP32[((13412)>>2)]=0;
 HEAP32[((13416)>>2)]=-1;
 var $45=HEAP32[((13336)>>2)];
 var $46=((($45)-(12))|0);
 var $47=$46;
 var $48=HEAP32[(($47)>>2)];
 var $_sum8=((($48)+(24))|0);
 var $49=((13336+$_sum8)|0);
 var $50=$49;
 var $51=HEAP32[(($50)>>2)];
 HEAP32[((13248)>>2)]=4404;
 HEAP32[((13252)>>2)]=4424;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(13252,$51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=16;break; }
 case 16: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(13252);
 ___resumeException($53$0)
 case 17: 
 HEAP32[((13324)>>2)]=0;
 HEAP32[((13328)>>2)]=-1;
 var $54=HEAP32[((13440)>>2)];
 var $55=((($54)-(12))|0);
 var $56=$55;
 var $57=HEAP32[(($56)>>2)];
 var $_sum9=((($57)+(72))|0);
 var $58=((13440+$_sum9)|0);
 var $59=$58;
 HEAP32[(($59)>>2)]=13160;
 var $60=HEAP32[((13336)>>2)];
 var $61=((($60)-(12))|0);
 var $62=$61;
 var $63=HEAP32[(($62)>>2)];
 var $_sum10=((($63)+(4))|0);
 var $64=((13336+$_sum10)|0);
 var $65=$64;
 var $66=HEAP32[(($65)>>2)];
 var $67=$66|8192;
 HEAP32[(($65)>>2)]=$67;
 var $68=HEAP32[((13336)>>2)];
 var $69=((($68)-(12))|0);
 var $70=$69;
 var $71=HEAP32[(($70)>>2)];
 var $_sum11=((($71)+(72))|0);
 var $72=((13336+$_sum11)|0);
 var $73=$72;
 HEAP32[(($73)>>2)]=13160;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18ios_base4InitD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(13528) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $3=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(13616) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $5=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(13160) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $7=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(13248) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 return;
 case 6: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1,0); var $10$1 = tempRet0;
 var $11=$10$0;
 ___clang_call_terminate($11);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__114__shared_countD2Ev($this){
 var label=0;


 return;
}


function __ZNSt3__114__shared_count12__add_sharedEv($this){
 var label=0;


 var $1=(($this+4)|0);
 var $2=(tempValue=HEAP32[(($1)>>2)],HEAP32[(($1)>>2)]=tempValue+1,tempValue);
 return;
}


function __ZNSt3__114__shared_count16__release_sharedEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=(tempValue=HEAP32[(($1)>>2)],HEAP32[(($1)>>2)]=tempValue+-1,tempValue);
 var $3=($2|0)==0;
 if($3){label=2;break;}else{var $_0=0;label=3;break;}
 case 2: 
 var $5=$this;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($6+8)|0);
 var $8=HEAP32[(($7)>>2)];
 FUNCTION_TABLE[$8]($this);
 var $_0=1;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt11logic_errorC2EPKc($this,$msg){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=2632;
 var $2=_strlen($msg);
 var $3=((($2)+(13))|0);
 var $4=(function() { try { __THREW__ = 0; return __Znaj($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $6=(($this+4)|0);
 var $7=((($2)+(1))|0);
 var $8=$4;
 var $9=(($4+4)|0);
 var $10=$9;
 HEAP32[(($10)>>2)]=$2;
 HEAP32[(($8)>>2)]=$2;
 var $11=(($4+12)|0);
 HEAP32[(($6)>>2)]=$11;
 var $12=(($4+8)|0);
 var $13=$12;
 HEAP32[(($13)>>2)]=0;
 assert($7 % 1 === 0);(_memcpy($11, $msg, $7)|0);
 return;
 case 3: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1); var $15$1 = tempRet0;
 var $16=(($this)|0);

 ___resumeException($15$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt11logic_errorD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=2632;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 __ZdaPv($10);
 label=3;break;
 case 3: 
 var $11=(($this)|0);

 var $12=$this;
 __ZdlPv($12);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt11logic_errorD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=2632;
 var $2=(($this+4)|0);
 var $this_idx_val_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 __ZdaPv($10);
 label=3;break;
 case 3: 
 var $11=(($this)|0);

 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt11logic_error4whatEv($this){
 var label=0;


 var $1=(($this+4)|0);
 var $_idx_val=HEAP32[(($1)>>2)];
 return $_idx_val;
}


function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$msg){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($this)|0);
 HEAP32[(($2)>>2)]=2568;
 var $3=(($this+4)|0);
 var $4=$msg;
 var $5=HEAP8[($4)];
 var $6=$5&1;
 var $7=(($6<<24)>>24)==0;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($msg+8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $14=$10;label=4;break;
 case 3: 
 var $12=$msg;
 var $13=(($12+1)|0);
 var $14=$13;label=4;break;
 case 4: 
 var $14;
 var $15=_strlen($14);
 var $16=((($15)+(13))|0);
 var $17=(function() { try { __THREW__ = 0; return __Znaj($16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 var $19=((($15)+(1))|0);
 var $20=$17;
 var $21=(($17+4)|0);
 var $22=$21;
 HEAP32[(($22)>>2)]=$15;
 HEAP32[(($20)>>2)]=$15;
 var $23=(($17+12)|0);
 HEAP32[(($3)>>2)]=$23;
 var $24=(($17+8)|0);
 var $25=$24;
 HEAP32[(($25)>>2)]=0;
 assert($19 % 1 === 0);(_memcpy($23, $14, $19)|0);
 return;
 case 6: 
 var $27$0 = ___cxa_find_matching_catch(-1, -1); var $27$1 = tempRet0;

 ___resumeException($27$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt13runtime_errorC2EPKc($this,$msg){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=2568;
 var $2=_strlen($msg);
 var $3=((($2)+(13))|0);
 var $4=(function() { try { __THREW__ = 0; return __Znaj($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $6=(($this+4)|0);
 var $7=((($2)+(1))|0);
 var $8=$4;
 var $9=(($4+4)|0);
 var $10=$9;
 HEAP32[(($10)>>2)]=$2;
 HEAP32[(($8)>>2)]=$2;
 var $11=(($4+12)|0);
 HEAP32[(($6)>>2)]=$11;
 var $12=(($4+8)|0);
 var $13=$12;
 HEAP32[(($13)>>2)]=0;
 assert($7 % 1 === 0);(_memcpy($11, $msg, $7)|0);
 return;
 case 3: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1); var $15$1 = tempRet0;
 var $16=(($this)|0);

 ___resumeException($15$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt13runtime_errorD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=2568;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 __ZdaPv($10);
 label=3;break;
 case 3: 
 var $11=(($this)|0);

 var $12=$this;
 __ZdlPv($12);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt13runtime_errorD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=2568;
 var $2=(($this+4)|0);
 var $this_idx_val_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 __ZdaPv($10);
 label=3;break;
 case 3: 
 var $11=(($this)|0);

 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt13runtime_error4whatEv($this){
 var label=0;


 var $1=(($this+4)|0);
 var $_idx_val=HEAP32[(($1)>>2)];
 return $_idx_val;
}


function __ZNSt12length_errorD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=2632;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 __ZdaPv($10);
 label=3;break;
 case 3: 
 var $11=(($this)|0);

 var $12=$this;
 __ZdlPv($12);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__114error_category23default_error_conditionEi($agg_result,$this,$ev){
 var label=0;


 var $1=(($agg_result)|0);
 HEAP32[(($1)>>2)]=$ev;
 var $2=(($agg_result+4)|0);
 HEAP32[(($2)>>2)]=$this;
 return;
}


function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+12)|0);
 var $5=HEAP32[(($4)>>2)];
 FUNCTION_TABLE[$5]($1,$this,$code);
 var $6=(($1+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($condition+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($7|0)==($9|0);
 if($10){label=2;break;}else{var $17=0;label=3;break;}
 case 2: 
 var $12=(($1)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($condition)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($13|0)==($15|0);
 var $17=$16;label=3;break;
 case 3: 
 var $17;
 STACKTOP=sp;return $17;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($code+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{var $9=0;label=3;break;}
 case 2: 
 var $5=(($code)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==($condition|0);
 var $9=$7;label=3;break;
 case 3: 
 var $9;
 return $9;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__112__do_message7messageEi($agg_result,$this,$ev){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_strerror($ev);
 var $2=_strlen($1);
 var $3=($2>>>0)>4294967279;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=$agg_result;
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($5);
 throw "Reached an unreachable!";
 case 3: 
 var $7=($2>>>0)<11;
 if($7){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=$2<<1;
 var $10=(($9)&255);
 var $11=$agg_result;
 HEAP8[($11)]=$10;
 var $12=$agg_result;
 var $13=(($12+1)|0);
 var $__p_0_i_i=$13;label=6;break;
 case 5: 
 var $14=((($2)+(16))|0);
 var $15=$14&-16;
 var $16=__Znwj($15);
 var $17=(($agg_result+8)|0);
 HEAP32[(($17)>>2)]=$16;
 var $18=$15|1;
 var $19=(($agg_result)|0);
 HEAP32[(($19)>>2)]=$18;
 var $20=(($agg_result+4)|0);
 HEAP32[(($20)>>2)]=$2;
 var $__p_0_i_i=$16;label=6;break;
 case 6: 
 var $__p_0_i_i;
 assert($2 % 1 === 0);(_memcpy($__p_0_i_i, $1, $2)|0);
 var $21=(($__p_0_i_i+$2)|0);
 HEAP8[($21)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg_result,$ec,$what_arg){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($ec)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 var $_pre2=$what_arg;
 if($4){label=30;break;}else{label=2;break;}
 case 2: 
 var $6=HEAP8[($_pre2)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=3;break;}
 case 3: 
 var $10=(($what_arg+4)|0);
 var $11=HEAP32[(($10)>>2)];
 var $15=$11;label=5;break;
 case 4: 
 var $13=($6&255);
 var $14=$13>>>1;
 var $15=$14;label=5;break;
 case 5: 
 var $15;
 var $16=($15|0)==0;
 if($16){var $20=$3;label=7;break;}else{label=6;break;}
 case 6: 
 var $18=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($what_arg,1344);
 var $_pre=HEAP32[(($2)>>2)];
 var $20=$_pre;label=7;break;
 case 7: 
 var $20;
 var $21=(($ec+4)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=$22;
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+24)|0);
 var $26=HEAP32[(($25)>>2)];
 FUNCTION_TABLE[$26]($1,$22,$20);
 var $27=$1;
 var $28=HEAP8[($27)];
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=9;break;}else{label=8;break;}
 case 8: 
 var $32=(($1+8)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($1+4)|0);
 var $35=HEAP32[(($34)>>2)];
 var $42=$35;var $41=$33;label=10;break;
 case 9: 
 var $37=$1;
 var $38=(($37+1)|0);
 var $39=($28&255);
 var $40=$39>>>1;
 var $42=$40;var $41=$38;label=10;break;
 case 10: 
 var $41;
 var $42;
 var $43=HEAP8[($_pre2)];
 var $44=$43&1;
 var $45=(($44<<24)>>24)==0;
 if($45){var $52=10;var $51=$43;label=12;break;}else{label=11;break;}
 case 11: 
 var $47=(($what_arg)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=$48&-2;
 var $phitmp_i_i_i_i=((($49)-(1))|0);
 var $50=(($48)&255);
 var $52=$phitmp_i_i_i_i;var $51=$50;label=12;break;
 case 12: 
 var $51;
 var $52;
 var $53=$51&1;
 var $54=(($53<<24)>>24)==0;
 if($54){label=14;break;}else{label=13;break;}
 case 13: 
 var $56=(($what_arg+4)|0);
 var $57=HEAP32[(($56)>>2)];
 var $61=$57;label=15;break;
 case 14: 
 var $59=($51&255);
 var $60=$59>>>1;
 var $61=$60;label=15;break;
 case 15: 
 var $61;
 var $62=((($52)-($61))|0);
 var $63=($62>>>0)<($42>>>0);
 if($63){label=24;break;}else{label=16;break;}
 case 16: 
 var $65=($42|0)==0;
 if($65){label=25;break;}else{label=17;break;}
 case 17: 
 if($54){label=19;break;}else{label=18;break;}
 case 18: 
 var $68=(($what_arg+8)|0);
 var $69=HEAP32[(($68)>>2)];
 var $73=$69;label=20;break;
 case 19: 
 var $71=$what_arg;
 var $72=(($71+1)|0);
 var $73=$72;label=20;break;
 case 20: 
 var $73;
 var $74=(($73+$61)|0);
 assert($42 % 1 === 0);(_memcpy($74, $41, $42)|0);
 var $75=((($61)+($42))|0);
 var $76=HEAP8[($_pre2)];
 var $77=$76&1;
 var $78=(($77<<24)>>24)==0;
 if($78){label=22;break;}else{label=21;break;}
 case 21: 
 var $80=(($what_arg+4)|0);
 HEAP32[(($80)>>2)]=$75;
 label=23;break;
 case 22: 
 var $82=$75<<1;
 var $83=(($82)&255);
 HEAP8[($_pre2)]=$83;
 label=23;break;
 case 23: 
 var $84=(($73+$75)|0);
 HEAP8[($84)]=0;
 label=25;break;
 case 24: 
 var $86=((($42)-($52))|0);
 var $87=((($86)+($61))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($what_arg,$52,$87,$61,$61,0,$42,$41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=27;break; }
 case 25: 
 var $88=HEAP8[($27)];
 var $89=$88&1;
 var $90=(($89<<24)>>24)==0;
 if($90){label=30;break;}else{label=26;break;}
 case 26: 
 var $92=(($1+8)|0);
 var $93=HEAP32[(($92)>>2)];
 __ZdlPv($93);
 label=30;break;
 case 27: 
 var $95$0 = ___cxa_find_matching_catch(-1, -1); var $95$1 = tempRet0;
 var $96=HEAP8[($27)];
 var $97=$96&1;
 var $98=(($97<<24)>>24)==0;
 if($98){label=29;break;}else{label=28;break;}
 case 28: 
 var $100=(($1+8)|0);
 var $101=HEAP32[(($100)>>2)];
 __ZdlPv($101);
 label=29;break;
 case 29: 
 ___resumeException($95$0)
 case 30: 
 var $102=$agg_result;
 assert(12 % 1 === 0);HEAP32[(($102)>>2)]=HEAP32[(($_pre2)>>2)];HEAP32[((($102)+(4))>>2)]=HEAP32[((($_pre2)+(4))>>2)];HEAP32[((($102)+(8))>>2)]=HEAP32[((($_pre2)+(8))>>2)];
 HEAP32[(($_pre2)>>2)]=0; HEAP32[((($_pre2)+(4))>>2)]=0; HEAP32[((($_pre2)+(8))>>2)]=0;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$ec,$what_arg){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ec; $ec=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ec)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ec)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 var $3=_strlen($what_arg);
 var $4=($3>>>0)>4294967279;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$2;
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($6);
 throw "Reached an unreachable!";
 case 3: 
 var $8=($3>>>0)<11;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=$3<<1;
 var $11=(($10)&255);
 var $12=$2;
 HEAP8[($12)]=$11;
 var $13=$2;
 var $14=(($13+1)|0);
 var $__p_0_i_i=$14;label=6;break;
 case 5: 
 var $15=((($3)+(16))|0);
 var $16=$15&-16;
 var $17=__Znwj($16);
 var $18=(($2+8)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=$16|1;
 var $20=(($2)|0);
 HEAP32[(($20)>>2)]=$19;
 var $21=(($2+4)|0);
 HEAP32[(($21)>>2)]=$3;
 var $__p_0_i_i=$17;label=6;break;
 case 6: 
 var $__p_0_i_i;
 assert($3 % 1 === 0);(_memcpy($__p_0_i_i, $what_arg, $3)|0);
 var $22=(($__p_0_i_i+$3)|0);
 HEAP8[($22)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($1,$ec,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=13;break; }
 case 7: 
 var $24=(($this)|0);
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($24,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=14;break; }
 case 8: 
 var $26=$1;
 var $27=HEAP8[($26)];
 var $28=$27&1;
 var $29=(($28<<24)>>24)==0;
 if($29){label=10;break;}else{label=9;break;}
 case 9: 
 var $31=(($1+8)|0);
 var $32=HEAP32[(($31)>>2)];
 __ZdlPv($32);
 label=10;break;
 case 10: 
 var $33=$2;
 var $34=HEAP8[($33)];
 var $35=$34&1;
 var $36=(($35<<24)>>24)==0;
 if($36){label=12;break;}else{label=11;break;}
 case 11: 
 var $38=(($2+8)|0);
 var $39=HEAP32[(($38)>>2)];
 __ZdlPv($39);
 label=12;break;
 case 12: 
 var $40=(($this)|0);
 HEAP32[(($40)>>2)]=4592;
 var $41=(($this+8)|0);
 var $42=$ec;
 var $43=$41;
 var $ld$0$0=(($42)|0);
 var $44$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($42+4)|0);
 var $44$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($43)|0);
 HEAP32[(($st$2$0)>>2)]=$44$0;
 var $st$3$1=(($43+4)|0);
 HEAP32[(($st$3$1)>>2)]=$44$1;
 STACKTOP=sp;return;
 case 13: 
 var $46$0 = ___cxa_find_matching_catch(-1, -1); var $46$1 = tempRet0;
 var $47=$46$0;
 var $48=$46$1;
 var $_0=$48;var $_01=$47;label=16;break;
 case 14: 
 var $50$0 = ___cxa_find_matching_catch(-1, -1); var $50$1 = tempRet0;
 var $51=$50$0;
 var $52=$50$1;
 var $53=$1;
 var $54=HEAP8[($53)];
 var $55=$54&1;
 var $56=(($55<<24)>>24)==0;
 if($56){var $_0=$52;var $_01=$51;label=16;break;}else{label=15;break;}
 case 15: 
 var $58=(($1+8)|0);
 var $59=HEAP32[(($58)>>2)];
 __ZdlPv($59);
 var $_0=$52;var $_01=$51;label=16;break;
 case 16: 
 var $_01;
 var $_0;
 var $60=$2;
 var $61=HEAP8[($60)];
 var $62=$61&1;
 var $63=(($62<<24)>>24)==0;
 if($63){label=18;break;}else{label=17;break;}
 case 17: 
 var $65=(($2+8)|0);
 var $66=HEAP32[(($65)>>2)];
 __ZdlPv($66);
 label=18;break;
 case 18: 
 var $67$0=$_01;
 var $67$1=0;
 var $68$0=$67$0;
 var $68$1=$_0;
 ___resumeException($68$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112system_errorD0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt13runtime_errorD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__112system_errorD2Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt13runtime_errorD2Ev($1);
 return;
}


function __ZNSt3__114error_categoryD2Ev($this){
 var label=0;


 return;
}


function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag,$arg,$func){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=HEAP32[(($flag)>>2)];
 var $3=($2|0)==1;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=_pthread_cond_wait(12880,12856);
 var $5=HEAP32[(($flag)>>2)];
 var $6=($5|0)==1;
 if($6){label=2;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP32[(($flag)>>2)];
 var $8=($7|0)==0;
 if($8){label=4;break;}else{label=14;break;}
 case 4: 
 HEAP32[(($flag)>>2)]=1;
 var $10=(function() { try { __THREW__ = 0; return _pthread_mutex_unlock(12856) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=9;break; }
 case 5: 
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$func]($arg) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 6: 
 var $13=(function() { try { __THREW__ = 0; return _pthread_mutex_lock(12856) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=9;break; }
 case 7: 
 HEAP32[(($flag)>>2)]=-1;
 var $15=(function() { try { __THREW__ = 0; return _pthread_mutex_unlock(12856) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=9;break; }
 case 8: 
 var $17=(function() { try { __THREW__ = 0; return _pthread_cond_broadcast(12880) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=9;break; }
 case 9: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1,0); var $19$1 = tempRet0;
 var $20=$19$0;
 var $21=___cxa_begin_catch($20);
 var $22=(function() { try { __THREW__ = 0; return _pthread_mutex_lock(12856) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 10: 
 HEAP32[(($flag)>>2)]=0;
 var $24=(function() { try { __THREW__ = 0; return _pthread_mutex_unlock(12856) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=13;break; }
 case 11: 
 var $26=(function() { try { __THREW__ = 0; return _pthread_cond_broadcast(12880) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=13;break; }
 case 12: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=13;break; }
 case 13: 
 var $29$0 = ___cxa_find_matching_catch(-1, -1); var $29$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=17;break; }
 case 14: 
 var $31;
 label=15;break;
 case 15: 
 return;
 case 16: 
 ___resumeException($29$0)
 case 17: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1,0); var $35$1 = tempRet0;
 var $36=$35$0;
 ___clang_call_terminate($36);
 throw "Reached an unreachable!";
 case 18: 
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=___cxa_allocate_exception(8);
 var $2=$1;
 (function() { try { __THREW__ = 0; return __ZNSt11logic_errorC2EPKc($2,328) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $4=$1;
 HEAP32[(($4)>>2)]=2600;
 ___cxa_throw($1,8232,(72));
 throw "Reached an unreachable!";
 case 3: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1); var $6$1 = tempRet0;
 ___cxa_free_exception($1);
 ___resumeException($6$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($this,$__str){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__str;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$this;
 assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
 label=9;break;
 case 3: 
 var $8=(($__str+8)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($__str+4)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=($11>>>0)>4294967279;
 if($12){label=4;break;}else{label=5;break;}
 case 4: 
 var $14=$this;
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($14);
 throw "Reached an unreachable!";
 case 5: 
 var $16=($11>>>0)<11;
 if($16){label=6;break;}else{label=7;break;}
 case 6: 
 var $18=$11<<1;
 var $19=(($18)&255);
 var $20=$this;
 HEAP8[($20)]=$19;
 var $21=$this;
 var $22=(($21+1)|0);
 var $__p_0_i_i=$22;label=8;break;
 case 7: 
 var $23=((($11)+(16))|0);
 var $24=$23&-16;
 var $25=__Znwj($24);
 var $26=(($this+8)|0);
 HEAP32[(($26)>>2)]=$25;
 var $27=$24|1;
 var $28=(($this)|0);
 HEAP32[(($28)>>2)]=$27;
 var $29=(($this+4)|0);
 HEAP32[(($29)>>2)]=$11;
 var $__p_0_i_i=$25;label=8;break;
 case 8: 
 var $__p_0_i_i;
 assert($11 % 1 === 0);(_memcpy($__p_0_i_i, $9, $11)|0);
 var $30=(($__p_0_i_i+$11)|0);
 HEAP8[($30)]=0;
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__sz>>>0)>4294967279;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 var $3=$this;
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($3);
 throw "Reached an unreachable!";
 case 3: 
 var $5=($__sz>>>0)<11;
 if($5){label=4;break;}else{label=5;break;}
 case 4: 
 var $7=$__sz<<1;
 var $8=(($7)&255);
 var $9=$this;
 HEAP8[($9)]=$8;
 var $10=$this;
 var $11=(($10+1)|0);
 var $__p_0=$11;label=6;break;
 case 5: 
 var $12=((($__sz)+(16))|0);
 var $13=$12&-16;
 var $14=__Znwj($13);
 var $15=(($this+8)|0);
 HEAP32[(($15)>>2)]=$14;
 var $16=$13|1;
 var $17=(($this)|0);
 HEAP32[(($17)>>2)]=$16;
 var $18=(($this+4)|0);
 HEAP32[(($18)>>2)]=$__sz;
 var $__p_0=$14;label=6;break;
 case 6: 
 var $__p_0;
 assert($__sz % 1 === 0);(_memcpy($__p_0, $__s, $__sz)|0);
 var $20=(($__p_0+$__sz)|0);
 HEAP8[($20)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this,$__n,$__c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__n>>>0)>4294967279;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 var $3=$this;
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($3);
 throw "Reached an unreachable!";
 case 3: 
 var $5=($__n>>>0)<11;
 if($5){label=4;break;}else{label=5;break;}
 case 4: 
 var $7=$__n<<1;
 var $8=(($7)&255);
 var $9=$this;
 HEAP8[($9)]=$8;
 var $10=$this;
 var $11=(($10+1)|0);
 var $__p_0=$11;label=6;break;
 case 5: 
 var $12=((($__n)+(16))|0);
 var $13=$12&-16;
 var $14=__Znwj($13);
 var $15=(($this+8)|0);
 HEAP32[(($15)>>2)]=$14;
 var $16=$13|1;
 var $17=(($this)|0);
 HEAP32[(($17)>>2)]=$16;
 var $18=(($this+4)|0);
 HEAP32[(($18)>>2)]=$__n;
 var $__p_0=$14;label=6;break;
 case 6: 
 var $__p_0;
 _memset($__p_0, $__c, $__n)|0;
 var $20=(($__p_0+$__n)|0);
 HEAP8[($20)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+8)|0);
 var $7=HEAP32[(($6)>>2)];
 __ZdlPv($7);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s){
 var label=0;


 var $1=_strlen($__s);
 var $2=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$1);
 return $2;
}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){var $11=10;var $10=$2;label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&-2;
 var $phitmp_i=((($8)-(1))|0);
 var $9=(($7)&255);
 var $11=$phitmp_i;var $10=$9;label=3;break;
 case 3: 
 var $10;
 var $11;
 var $12=($11>>>0)<($__n>>>0);
 if($12){label=10;break;}else{label=4;break;}
 case 4: 
 var $14=$10&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=6;break;}else{label=5;break;}
 case 5: 
 var $17=(($this+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $22=$18;label=7;break;
 case 6: 
 var $20=$this;
 var $21=(($20+1)|0);
 var $22=$21;label=7;break;
 case 7: 
 var $22;
 _memmove($22,$__s,$__n,1,0);
 var $23=(($22+$__n)|0);
 HEAP8[($23)]=0;
 var $24=HEAP8[($1)];
 var $25=$24&1;
 var $26=(($25<<24)>>24)==0;
 if($26){label=9;break;}else{label=8;break;}
 case 8: 
 var $28=(($this+4)|0);
 HEAP32[(($28)>>2)]=$__n;
 label=23;break;
 case 9: 
 var $30=$__n<<1;
 var $31=(($30)&255);
 HEAP8[($1)]=$31;
 label=23;break;
 case 10: 
 var $33=((($__n)-($11))|0);
 var $34=(((-18)-($11))|0);
 var $35=($34>>>0)<($33>>>0);
 if($35){label=11;break;}else{label=12;break;}
 case 11: 
 var $37=$this;
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($37);
 throw "Reached an unreachable!";
 case 12: 
 var $39=$10&1;
 var $40=(($39<<24)>>24)==0;
 if($40){label=14;break;}else{label=13;break;}
 case 13: 
 var $42=(($this+8)|0);
 var $43=HEAP32[(($42)>>2)];
 var $47=$43;label=15;break;
 case 14: 
 var $45=$this;
 var $46=(($45+1)|0);
 var $47=$46;label=15;break;
 case 15: 
 var $47;
 var $48=($11>>>0)<2147483623;
 if($48){label=16;break;}else{var $57=-17;label=18;break;}
 case 16: 
 var $50=$11<<1;
 var $51=($50>>>0)>($__n>>>0);
 var $52=($51?$50:$__n);
 var $53=($52>>>0)<11;
 if($53){var $57=11;label=18;break;}else{label=17;break;}
 case 17: 
 var $55=((($52)+(16))|0);
 var $56=$55&-16;
 var $57=$56;label=18;break;
 case 18: 
 var $57;
 var $58=__Znwj($57);
 var $59=($__n|0)==0;
 if($59){label=20;break;}else{label=19;break;}
 case 19: 
 assert($__n % 1 === 0);(_memcpy($58, $__s, $__n)|0);
 label=20;break;
 case 20: 
 var $62=($11|0)==10;
 if($62){label=22;break;}else{label=21;break;}
 case 21: 
 __ZdlPv($47);
 label=22;break;
 case 22: 
 var $64=(($this+8)|0);
 HEAP32[(($64)>>2)]=$58;
 var $65=$57|1;
 var $66=(($this)|0);
 HEAP32[(($66)>>2)]=$65;
 var $67=(($this+4)|0);
 HEAP32[(($67)>>2)]=$__n;
 var $68=(($58+$__n)|0);
 HEAP8[($68)]=0;
 label=23;break;
 case 23: 
 return $this;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n,$__c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $11=$7;label=4;break;
 case 3: 
 var $9=($2&255);
 var $10=$9>>>1;
 var $11=$10;label=4;break;
 case 4: 
 var $11;
 var $12=($11>>>0)<($__n>>>0);
 if($12){label=5;break;}else{label=6;break;}
 case 5: 
 var $14=((($__n)-($11))|0);
 var $15=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$14,$__c);
 label=9;break;
 case 6: 
 if($4){label=8;break;}else{label=7;break;}
 case 7: 
 var $18=(($this+8)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($19+$__n)|0);
 HEAP8[($20)]=0;
 var $21=(($this+4)|0);
 HEAP32[(($21)>>2)]=$__n;
 label=9;break;
 case 8: 
 var $23=$this;
 var $24=(($23+1+$__n)|0);
 HEAP8[($24)]=0;
 var $25=$__n<<1;
 var $26=(($25)&255);
 HEAP8[($1)]=$26;
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__n|0)==0;
 if($1){label=28;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 var $4=HEAP8[($3)];
 var $5=$4&1;
 var $6=(($5<<24)>>24)==0;
 if($6){var $13=10;var $12=$4;label=4;break;}else{label=3;break;}
 case 3: 
 var $8=(($this)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$9&-2;
 var $phitmp_i=((($10)-(1))|0);
 var $11=(($9)&255);
 var $13=$phitmp_i;var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13;
 var $14=$12&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=6;break;}else{label=5;break;}
 case 5: 
 var $17=(($this+4)|0);
 var $18=HEAP32[(($17)>>2)];
 var $22=$18;label=7;break;
 case 6: 
 var $20=($12&255);
 var $21=$20>>>1;
 var $22=$21;label=7;break;
 case 7: 
 var $22;
 var $23=((($13)-($22))|0);
 var $24=($23>>>0)<($__n>>>0);
 if($24){label=8;break;}else{var $63=$12;label=21;break;}
 case 8: 
 var $26=((($22)+($__n))|0);
 var $27=((($26)-($13))|0);
 var $28=(((-17)-($13))|0);
 var $29=($28>>>0)<($27>>>0);
 if($29){label=9;break;}else{label=10;break;}
 case 9: 
 var $31=$this;
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($31);
 throw "Reached an unreachable!";
 case 10: 
 var $33=$12&1;
 var $34=(($33<<24)>>24)==0;
 if($34){label=12;break;}else{label=11;break;}
 case 11: 
 var $36=(($this+8)|0);
 var $37=HEAP32[(($36)>>2)];
 var $41=$37;label=13;break;
 case 12: 
 var $39=$this;
 var $40=(($39+1)|0);
 var $41=$40;label=13;break;
 case 13: 
 var $41;
 var $42=($13>>>0)<2147483623;
 if($42){label=14;break;}else{var $51=-17;label=16;break;}
 case 14: 
 var $44=$13<<1;
 var $45=($26>>>0)<($44>>>0);
 var $46=($45?$44:$26);
 var $47=($46>>>0)<11;
 if($47){var $51=11;label=16;break;}else{label=15;break;}
 case 15: 
 var $49=((($46)+(16))|0);
 var $50=$49&-16;
 var $51=$50;label=16;break;
 case 16: 
 var $51;
 var $52=__Znwj($51);
 var $53=($22|0)==0;
 if($53){label=18;break;}else{label=17;break;}
 case 17: 
 assert($22 % 1 === 0);(_memcpy($52, $41, $22)|0);
 label=18;break;
 case 18: 
 var $56=($13|0)==10;
 if($56){label=20;break;}else{label=19;break;}
 case 19: 
 __ZdlPv($41);
 label=20;break;
 case 20: 
 var $58=(($this+8)|0);
 HEAP32[(($58)>>2)]=$52;
 var $59=$51|1;
 var $60=(($this)|0);
 HEAP32[(($60)>>2)]=$59;
 var $61=(($59)&255);
 var $63=$61;label=21;break;
 case 21: 
 var $63;
 var $64=$63&1;
 var $65=(($64<<24)>>24)==0;
 if($65){label=23;break;}else{label=22;break;}
 case 22: 
 var $67=(($this+8)|0);
 var $68=HEAP32[(($67)>>2)];
 var $72=$68;label=24;break;
 case 23: 
 var $70=$this;
 var $71=(($70+1)|0);
 var $72=$71;label=24;break;
 case 24: 
 var $72;
 var $73=(($72+$22)|0);
 _memset($73, $__c, $__n)|0;
 var $74=((($22)+($__n))|0);
 var $75=HEAP8[($3)];
 var $76=$75&1;
 var $77=(($76<<24)>>24)==0;
 if($77){label=26;break;}else{label=25;break;}
 case 25: 
 var $79=(($this+4)|0);
 HEAP32[(($79)>>2)]=$74;
 label=27;break;
 case 26: 
 var $81=$74<<1;
 var $82=(($81)&255);
 HEAP8[($3)]=$82;
 label=27;break;
 case 27: 
 var $83=(($72+$74)|0);
 HEAP8[($83)]=0;
 label=28;break;
 case 28: 
 return $this;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__res_arg>>>0)>4294967279;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 var $3=$this;
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($3);
 throw "Reached an unreachable!";
 case 3: 
 var $5=$this;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){var $15=10;var $14=$6;label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$11&-2;
 var $phitmp_i=((($12)-(1))|0);
 var $13=(($11)&255);
 var $15=$phitmp_i;var $14=$13;label=5;break;
 case 5: 
 var $14;
 var $15;
 var $16=$14&1;
 var $17=(($16<<24)>>24)==0;
 if($17){label=7;break;}else{label=6;break;}
 case 6: 
 var $19=(($this+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $24=$20;label=8;break;
 case 7: 
 var $22=($14&255);
 var $23=$22>>>1;
 var $24=$23;label=8;break;
 case 8: 
 var $24;
 var $25=($24>>>0)>($__res_arg>>>0);
 var $26=($25?$24:$__res_arg);
 var $27=($26>>>0)<11;
 if($27){var $31=10;label=10;break;}else{label=9;break;}
 case 9: 
 var $29=((($26)+(16))|0);
 var $30=$29&-16;
 var $phitmp_i2=((($30)-(1))|0);
 var $31=$phitmp_i2;label=10;break;
 case 10: 
 var $31;
 var $32=($31|0)==($15|0);
 if($32){label=28;break;}else{label=11;break;}
 case 11: 
 var $34=($31|0)==10;
 if($34){label=12;break;}else{label=13;break;}
 case 12: 
 var $36=$this;
 var $37=(($36+1)|0);
 var $38=(($this+8)|0);
 var $39=HEAP32[(($38)>>2)];
 var $__new_data_1=$37;var $__p_0=$39;var $__was_long_0_off0=1;var $__now_long_0_off0=0;var $60=$14;label=20;break;
 case 13: 
 var $41=($31>>>0)>($15>>>0);
 var $42=((($31)+(1))|0);
 if($41){label=14;break;}else{label=15;break;}
 case 14: 
 var $44=__Znwj($42);
 var $__new_data_0=$44;label=17;break;
 case 15: 
 var $46=(function() { try { __THREW__ = 0; return __Znwj($42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__new_data_0=$46;label=17;break; } else { label=16;break; }
 case 16: 
 var $48$0 = ___cxa_find_matching_catch(-1, -1,0); var $48$1 = tempRet0;
 var $49=$48$0;
 var $50=___cxa_begin_catch($49);
 ___cxa_end_catch();
 label=28;break;
 case 17: 
 var $__new_data_0;
 var $51=HEAP8[($5)];
 var $52=$51&1;
 var $53=(($52<<24)>>24)==0;
 if($53){label=19;break;}else{label=18;break;}
 case 18: 
 var $55=(($this+8)|0);
 var $56=HEAP32[(($55)>>2)];
 var $__new_data_1=$__new_data_0;var $__p_0=$56;var $__was_long_0_off0=1;var $__now_long_0_off0=1;var $60=$51;label=20;break;
 case 19: 
 var $58=$this;
 var $59=(($58+1)|0);
 var $__new_data_1=$__new_data_0;var $__p_0=$59;var $__was_long_0_off0=0;var $__now_long_0_off0=1;var $60=$51;label=20;break;
 case 20: 
 var $60;
 var $__now_long_0_off0;
 var $__was_long_0_off0;
 var $__p_0;
 var $__new_data_1;
 var $61=$60&1;
 var $62=(($61<<24)>>24)==0;
 if($62){label=22;break;}else{label=21;break;}
 case 21: 
 var $64=(($this+4)|0);
 var $65=HEAP32[(($64)>>2)];
 var $69=$65;label=23;break;
 case 22: 
 var $67=($60&255);
 var $68=$67>>>1;
 var $69=$68;label=23;break;
 case 23: 
 var $69;
 var $70=((($69)+(1))|0);
 assert($70 % 1 === 0);(_memcpy($__new_data_1, $__p_0, $70)|0);
 if($__was_long_0_off0){label=24;break;}else{label=25;break;}
 case 24: 
 __ZdlPv($__p_0);
 label=25;break;
 case 25: 
 if($__now_long_0_off0){label=26;break;}else{label=27;break;}
 case 26: 
 var $74=((($31)+(1))|0);
 var $75=$74|1;
 var $76=(($this)|0);
 HEAP32[(($76)>>2)]=$75;
 var $77=(($this+4)|0);
 HEAP32[(($77)>>2)]=$24;
 var $78=(($this+8)|0);
 HEAP32[(($78)>>2)]=$__new_data_1;
 label=28;break;
 case 27: 
 var $80=$24<<1;
 var $81=(($80)&255);
 HEAP8[($5)]=$81;
 label=28;break;
 case 28: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($this,$__s){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_strlen($__s);
 var $2=$this;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){var $12=10;var $11=$3;label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($this)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8&-2;
 var $phitmp_i_i=((($9)-(1))|0);
 var $10=(($8)&255);
 var $12=$phitmp_i_i;var $11=$10;label=3;break;
 case 3: 
 var $11;
 var $12;
 var $13=$11&1;
 var $14=(($13<<24)>>24)==0;
 if($14){label=5;break;}else{label=4;break;}
 case 4: 
 var $16=(($this+4)|0);
 var $17=HEAP32[(($16)>>2)];
 var $21=$17;label=6;break;
 case 5: 
 var $19=($11&255);
 var $20=$19>>>1;
 var $21=$20;label=6;break;
 case 6: 
 var $21;
 var $22=((($12)-($21))|0);
 var $23=($22>>>0)<($1>>>0);
 if($23){label=15;break;}else{label=7;break;}
 case 7: 
 var $25=($1|0)==0;
 if($25){label=16;break;}else{label=8;break;}
 case 8: 
 if($14){label=10;break;}else{label=9;break;}
 case 9: 
 var $28=(($this+8)|0);
 var $29=HEAP32[(($28)>>2)];
 var $33=$29;label=11;break;
 case 10: 
 var $31=$this;
 var $32=(($31+1)|0);
 var $33=$32;label=11;break;
 case 11: 
 var $33;
 var $34=(($33+$21)|0);
 assert($1 % 1 === 0);(_memcpy($34, $__s, $1)|0);
 var $35=((($21)+($1))|0);
 var $36=HEAP8[($2)];
 var $37=$36&1;
 var $38=(($37<<24)>>24)==0;
 if($38){label=13;break;}else{label=12;break;}
 case 12: 
 var $40=(($this+4)|0);
 HEAP32[(($40)>>2)]=$35;
 label=14;break;
 case 13: 
 var $42=$35<<1;
 var $43=(($42)&255);
 HEAP8[($2)]=$43;
 label=14;break;
 case 14: 
 var $44=(($33+$35)|0);
 HEAP8[($44)]=0;
 label=16;break;
 case 15: 
 var $46=((($1)-($12))|0);
 var $47=((($46)+($21))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$12,$47,$21,$21,0,$1,$__s);
 label=16;break;
 case 16: 
 return $this;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)!=0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=($2&255);
 var $7=$6>>>1;
 var $__sz_0=$7;var $__cap_0=10;var $17=$2;label=4;break;
 case 3: 
 var $9=(($this)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&-2;
 var $12=((($11)-(1))|0);
 var $13=(($this+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($10)&255);
 var $__sz_0=$14;var $__cap_0=$12;var $17=$15;label=4;break;
 case 4: 
 var $17;
 var $__cap_0;
 var $__sz_0;
 var $18=($__sz_0|0)==($__cap_0|0);
 if($18){label=5;break;}else{label=16;break;}
 case 5: 
 var $20=($__cap_0|0)==-17;
 if($20){label=6;break;}else{label=7;break;}
 case 6: 
 var $22=$this;
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($22);
 throw "Reached an unreachable!";
 case 7: 
 var $24=$17&1;
 var $25=(($24<<24)>>24)==0;
 if($25){label=9;break;}else{label=8;break;}
 case 8: 
 var $27=(($this+8)|0);
 var $28=HEAP32[(($27)>>2)];
 var $32=$28;label=10;break;
 case 9: 
 var $30=$this;
 var $31=(($30+1)|0);
 var $32=$31;label=10;break;
 case 10: 
 var $32;
 var $33=($__cap_0>>>0)<2147483623;
 if($33){label=11;break;}else{var $44=-17;label=13;break;}
 case 11: 
 var $35=((($__cap_0)+(1))|0);
 var $36=$__cap_0<<1;
 var $37=($35>>>0)<($36>>>0);
 var $38=($37?$36:$35);
 var $39=($38>>>0)<11;
 if($39){var $44=11;label=13;break;}else{label=12;break;}
 case 12: 
 var $41=((($38)+(16))|0);
 var $42=$41&-16;
 var $44=$42;label=13;break;
 case 13: 
 var $44;
 var $45=__Znwj($44);
 assert($__cap_0 % 1 === 0);(_memcpy($45, $32, $__cap_0)|0);
 var $46=($__cap_0|0)==10;
 if($46){label=15;break;}else{label=14;break;}
 case 14: 
 __ZdlPv($32);
 label=15;break;
 case 15: 
 var $48=(($this+8)|0);
 HEAP32[(($48)>>2)]=$45;
 var $49=$44|1;
 var $50=(($this)|0);
 HEAP32[(($50)>>2)]=$49;
 var $59=$45;label=19;break;
 case 16: 
 if($4){label=17;break;}else{label=18;break;}
 case 17: 
 var $_phi_trans_insert=(($this+8)|0);
 var $_pre=HEAP32[(($_phi_trans_insert)>>2)];
 var $59=$_pre;label=19;break;
 case 18: 
 var $53=$this;
 var $54=(($53+1)|0);
 var $55=$__sz_0<<1;
 var $56=((($55)+(2))|0);
 var $57=(($56)&255);
 HEAP8[($1)]=$57;
 var $__p_0_sum_pre=((($__sz_0)+(1))|0);
 var $_pn=$54;var $__p_0_sum_pre_phi=$__p_0_sum_pre;label=20;break;
 case 19: 
 var $59;
 var $60=((($__sz_0)+(1))|0);
 var $61=(($this+4)|0);
 HEAP32[(($61)>>2)]=$60;
 var $_pn=$59;var $__p_0_sum_pre_phi=$60;label=20;break;
 case 20: 
 var $__p_0_sum_pre_phi;
 var $_pn;
 var $__p_0=(($_pn+$__sz_0)|0);
 HEAP8[($__p_0)]=$__c;
 var $63=(($_pn+$__p_0_sum_pre_phi)|0);
 HEAP8[($63)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((-18)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=$this;
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($4);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$this;
 var $7=HEAP8[($6)];
 var $8=$7&1;
 var $9=(($8<<24)>>24)==0;
 if($9){label=5;break;}else{label=4;break;}
 case 4: 
 var $11=(($this+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $16=$12;label=6;break;
 case 5: 
 var $14=$this;
 var $15=(($14+1)|0);
 var $16=$15;label=6;break;
 case 6: 
 var $16;
 var $17=($__old_cap>>>0)<2147483623;
 if($17){label=7;break;}else{var $27=-17;label=9;break;}
 case 7: 
 var $19=((($__delta_cap)+($__old_cap))|0);
 var $20=$__old_cap<<1;
 var $21=($19>>>0)<($20>>>0);
 var $22=($21?$20:$19);
 var $23=($22>>>0)<11;
 if($23){var $27=11;label=9;break;}else{label=8;break;}
 case 8: 
 var $25=((($22)+(16))|0);
 var $26=$25&-16;
 var $27=$26;label=9;break;
 case 9: 
 var $27;
 var $28=__Znwj($27);
 var $29=($__n_copy|0)==0;
 if($29){label=11;break;}else{label=10;break;}
 case 10: 
 assert($__n_copy % 1 === 0);(_memcpy($28, $16, $__n_copy)|0);
 label=11;break;
 case 11: 
 var $32=($__n_add|0)==0;
 if($32){label=13;break;}else{label=12;break;}
 case 12: 
 var $34=(($28+$__n_copy)|0);
 assert($__n_add % 1 === 0);(_memcpy($34, $__p_new_stuff, $__n_add)|0);
 label=13;break;
 case 13: 
 var $36=((($__old_sz)-($__n_del))|0);
 var $37=($36|0)==($__n_copy|0);
 if($37){label=15;break;}else{label=14;break;}
 case 14: 
 var $39=((($36)-($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $40=(($28+$_sum)|0);
 var $_sum1=((($__n_del)+($__n_copy))|0);
 var $41=(($16+$_sum1)|0);
 assert($39 % 1 === 0);(_memcpy($40, $41, $39)|0);
 label=15;break;
 case 15: 
 var $43=($__old_cap|0)==10;
 if($43){label=17;break;}else{label=16;break;}
 case 16: 
 __ZdlPv($16);
 label=17;break;
 case 17: 
 var $46=(($this+8)|0);
 HEAP32[(($46)>>2)]=$28;
 var $47=$27|1;
 var $48=(($this)|0);
 HEAP32[(($48)>>2)]=$47;
 var $49=((($36)+($__n_add))|0);
 var $50=(($this+4)|0);
 HEAP32[(($50)>>2)]=$49;
 var $51=(($28+$49)|0);
 HEAP8[($51)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((-17)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=$this;
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($4);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$this;
 var $7=HEAP8[($6)];
 var $8=$7&1;
 var $9=(($8<<24)>>24)==0;
 if($9){label=5;break;}else{label=4;break;}
 case 4: 
 var $11=(($this+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $16=$12;label=6;break;
 case 5: 
 var $14=$this;
 var $15=(($14+1)|0);
 var $16=$15;label=6;break;
 case 6: 
 var $16;
 var $17=($__old_cap>>>0)<2147483623;
 if($17){label=7;break;}else{var $27=-17;label=9;break;}
 case 7: 
 var $19=((($__delta_cap)+($__old_cap))|0);
 var $20=$__old_cap<<1;
 var $21=($19>>>0)<($20>>>0);
 var $22=($21?$20:$19);
 var $23=($22>>>0)<11;
 if($23){var $27=11;label=9;break;}else{label=8;break;}
 case 8: 
 var $25=((($22)+(16))|0);
 var $26=$25&-16;
 var $27=$26;label=9;break;
 case 9: 
 var $27;
 var $28=__Znwj($27);
 var $29=($__n_copy|0)==0;
 if($29){label=11;break;}else{label=10;break;}
 case 10: 
 assert($__n_copy % 1 === 0);(_memcpy($28, $16, $__n_copy)|0);
 label=11;break;
 case 11: 
 var $32=((($__old_sz)-($__n_del))|0);
 var $33=($32|0)==($__n_copy|0);
 if($33){label=13;break;}else{label=12;break;}
 case 12: 
 var $35=((($32)-($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $36=(($28+$_sum)|0);
 var $_sum1=((($__n_del)+($__n_copy))|0);
 var $37=(($16+$_sum1)|0);
 assert($35 % 1 === 0);(_memcpy($36, $37, $35)|0);
 label=13;break;
 case 13: 
 var $39=($__old_cap|0)==10;
 if($39){label=15;break;}else{label=14;break;}
 case 14: 
 __ZdlPv($16);
 label=15;break;
 case 15: 
 var $42=(($this+8)|0);
 HEAP32[(($42)>>2)]=$28;
 var $43=$27|1;
 var $44=(($this)|0);
 HEAP32[(($44)>>2)]=$43;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__sz>>>0)>1073741807;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 var $3=$this;
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($3);
 throw "Reached an unreachable!";
 case 3: 
 var $5=($__sz>>>0)<2;
 if($5){label=4;break;}else{label=5;break;}
 case 4: 
 var $7=$__sz<<1;
 var $8=(($7)&255);
 var $9=$this;
 HEAP8[($9)]=$8;
 var $10=(($this+4)|0);
 var $__p_0=$10;label=6;break;
 case 5: 
 var $11=((($__sz)+(4))|0);
 var $12=$11&-4;
 var $13=$12<<2;
 var $14=__Znwj($13);
 var $15=$14;
 var $16=(($this+8)|0);
 HEAP32[(($16)>>2)]=$15;
 var $17=$12|1;
 var $18=(($this)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=(($this+4)|0);
 HEAP32[(($19)>>2)]=$__sz;
 var $__p_0=$15;label=6;break;
 case 6: 
 var $__p_0;
 var $21=_wmemcpy($__p_0,$__s,$__sz);
 var $22=(($__p_0+($__sz<<2))|0);
 HEAP32[(($22)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__n>>>0)>1073741807;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 var $3=$this;
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($3);
 throw "Reached an unreachable!";
 case 3: 
 var $5=($__n>>>0)<2;
 if($5){label=4;break;}else{label=5;break;}
 case 4: 
 var $7=$__n<<1;
 var $8=(($7)&255);
 var $9=$this;
 HEAP8[($9)]=$8;
 var $10=(($this+4)|0);
 var $__p_0=$10;label=6;break;
 case 5: 
 var $11=((($__n)+(4))|0);
 var $12=$11&-4;
 var $13=$12<<2;
 var $14=__Znwj($13);
 var $15=$14;
 var $16=(($this+8)|0);
 HEAP32[(($16)>>2)]=$15;
 var $17=$12|1;
 var $18=(($this)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=(($this+4)|0);
 HEAP32[(($19)>>2)]=$__n;
 var $__p_0=$15;label=6;break;
 case 6: 
 var $__p_0;
 var $21=_wmemset($__p_0,$__c,$__n);
 var $22=(($__p_0+($__n<<2))|0);
 HEAP32[(($22)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 __ZdlPv($8);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_wcslen($__s);
 var $2=$this;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){var $12=1;var $11=$3;label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($this)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8&-2;
 var $phitmp_i_i=((($9)-(1))|0);
 var $10=(($8)&255);
 var $12=$phitmp_i_i;var $11=$10;label=3;break;
 case 3: 
 var $11;
 var $12;
 var $13=($1>>>0)>($12>>>0);
 var $14=$11&1;
 var $15=(($14<<24)>>24)==0;
 if($13){label=10;break;}else{label=4;break;}
 case 4: 
 if($15){label=6;break;}else{label=5;break;}
 case 5: 
 var $18=(($this+8)|0);
 var $19=HEAP32[(($18)>>2)];
 var $22=$19;label=7;break;
 case 6: 
 var $21=(($this+4)|0);
 var $22=$21;label=7;break;
 case 7: 
 var $22;
 var $23=_wmemmove($22,$__s,$1);
 var $24=(($22+($1<<2))|0);
 HEAP32[(($24)>>2)]=0;
 var $25=HEAP8[($2)];
 var $26=$25&1;
 var $27=(($26<<24)>>24)==0;
 if($27){label=9;break;}else{label=8;break;}
 case 8: 
 var $29=(($this+4)|0);
 HEAP32[(($29)>>2)]=$1;
 label=14;break;
 case 9: 
 var $31=$1<<1;
 var $32=(($31)&255);
 HEAP8[($2)]=$32;
 label=14;break;
 case 10: 
 if($15){label=12;break;}else{label=11;break;}
 case 11: 
 var $35=(($this+4)|0);
 var $36=HEAP32[(($35)>>2)];
 var $40=$36;label=13;break;
 case 12: 
 var $38=($11&255);
 var $39=$38>>>1;
 var $40=$39;label=13;break;
 case 13: 
 var $40;
 var $41=((($1)-($12))|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$12,$41,$40,0,$40,$1,$__s);
 label=14;break;
 case 14: 
 return $this;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this,$__res_arg){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__res_arg>>>0)>1073741807;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 var $3=$this;
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($3);
 throw "Reached an unreachable!";
 case 3: 
 var $5=$this;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){var $15=1;var $14=$6;label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$11&-2;
 var $phitmp_i=((($12)-(1))|0);
 var $13=(($11)&255);
 var $15=$phitmp_i;var $14=$13;label=5;break;
 case 5: 
 var $14;
 var $15;
 var $16=$14&1;
 var $17=(($16<<24)>>24)==0;
 if($17){label=7;break;}else{label=6;break;}
 case 6: 
 var $19=(($this+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $24=$20;label=8;break;
 case 7: 
 var $22=($14&255);
 var $23=$22>>>1;
 var $24=$23;label=8;break;
 case 8: 
 var $24;
 var $25=($24>>>0)>($__res_arg>>>0);
 var $26=($25?$24:$__res_arg);
 var $27=($26>>>0)<2;
 if($27){var $31=1;label=10;break;}else{label=9;break;}
 case 9: 
 var $29=((($26)+(4))|0);
 var $30=$29&-4;
 var $phitmp_i2=((($30)-(1))|0);
 var $31=$phitmp_i2;label=10;break;
 case 10: 
 var $31;
 var $32=($31|0)==($15|0);
 if($32){label=28;break;}else{label=11;break;}
 case 11: 
 var $34=($31|0)==1;
 if($34){label=12;break;}else{label=13;break;}
 case 12: 
 var $36=(($this+4)|0);
 var $37=(($this+8)|0);
 var $38=HEAP32[(($37)>>2)];
 var $__new_data_1=$36;var $__p_0=$38;var $__was_long_0_off0=1;var $__now_long_0_off0=0;var $60=$14;label=20;break;
 case 13: 
 var $40=($31>>>0)>($15>>>0);
 var $41=$31<<2;
 var $42=((($41)+(4))|0);
 if($40){label=14;break;}else{label=15;break;}
 case 14: 
 var $44=__Znwj($42);
 var $_sink=$44;label=17;break;
 case 15: 
 var $46=(function() { try { __THREW__ = 0; return __Znwj($42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_sink=$46;label=17;break; } else { label=16;break; }
 case 16: 
 var $48$0 = ___cxa_find_matching_catch(-1, -1,0); var $48$1 = tempRet0;
 var $49=$48$0;
 var $50=___cxa_begin_catch($49);
 ___cxa_end_catch();
 label=28;break;
 case 17: 
 var $_sink;
 var $51=$_sink;
 var $52=HEAP8[($5)];
 var $53=$52&1;
 var $54=(($53<<24)>>24)==0;
 if($54){label=19;break;}else{label=18;break;}
 case 18: 
 var $56=(($this+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $__new_data_1=$51;var $__p_0=$57;var $__was_long_0_off0=1;var $__now_long_0_off0=1;var $60=$52;label=20;break;
 case 19: 
 var $59=(($this+4)|0);
 var $__new_data_1=$51;var $__p_0=$59;var $__was_long_0_off0=0;var $__now_long_0_off0=1;var $60=$52;label=20;break;
 case 20: 
 var $60;
 var $__now_long_0_off0;
 var $__was_long_0_off0;
 var $__p_0;
 var $__new_data_1;
 var $61=$60&1;
 var $62=(($61<<24)>>24)==0;
 if($62){label=22;break;}else{label=21;break;}
 case 21: 
 var $64=(($this+4)|0);
 var $65=HEAP32[(($64)>>2)];
 var $69=$65;label=23;break;
 case 22: 
 var $67=($60&255);
 var $68=$67>>>1;
 var $69=$68;label=23;break;
 case 23: 
 var $69;
 var $70=((($69)+(1))|0);
 var $71=_wmemcpy($__new_data_1,$__p_0,$70);
 if($__was_long_0_off0){label=24;break;}else{label=25;break;}
 case 24: 
 var $73=$__p_0;
 __ZdlPv($73);
 label=25;break;
 case 25: 
 if($__now_long_0_off0){label=26;break;}else{label=27;break;}
 case 26: 
 var $76=((($31)+(1))|0);
 var $77=$76|1;
 var $78=(($this)|0);
 HEAP32[(($78)>>2)]=$77;
 var $79=(($this+4)|0);
 HEAP32[(($79)>>2)]=$24;
 var $80=(($this+8)|0);
 HEAP32[(($80)>>2)]=$__new_data_1;
 label=28;break;
 case 27: 
 var $82=$24<<1;
 var $83=(($82)&255);
 HEAP8[($5)]=$83;
 label=28;break;
 case 28: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)!=0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=($2&255);
 var $7=$6>>>1;
 var $__sz_0=$7;var $__cap_0=1;label=4;break;
 case 3: 
 var $9=(($this)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&-2;
 var $12=((($11)-(1))|0);
 var $13=(($this+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $__sz_0=$14;var $__cap_0=$12;label=4;break;
 case 4: 
 var $__cap_0;
 var $__sz_0;
 var $16=($__sz_0|0)==($__cap_0|0);
 if($16){label=5;break;}else{label=6;break;}
 case 5: 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap_0,1,$__cap_0,$__cap_0,0,0);
 var $18=HEAP8[($1)];
 var $19=$18&1;
 var $20=(($19<<24)>>24)==0;
 if($20){label=7;break;}else{label=8;break;}
 case 6: 
 if($4){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=(($this+4)|0);
 var $24=$__sz_0<<1;
 var $25=((($24)+(2))|0);
 var $26=(($25)&255);
 HEAP8[($1)]=$26;
 var $__p_0_sum_pre=((($__sz_0)+(1))|0);
 var $_pn=$23;var $__p_0_sum_pre_phi=$__p_0_sum_pre;label=9;break;
 case 8: 
 var $28=(($this+8)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=((($__sz_0)+(1))|0);
 var $31=(($this+4)|0);
 HEAP32[(($31)>>2)]=$30;
 var $_pn=$29;var $__p_0_sum_pre_phi=$30;label=9;break;
 case 9: 
 var $__p_0_sum_pre_phi;
 var $_pn;
 var $__p_0=(($_pn+($__sz_0<<2))|0);
 HEAP32[(($__p_0)>>2)]=$__c;
 var $33=(($_pn+($__p_0_sum_pre_phi<<2))|0);
 HEAP32[(($33)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((1073741806)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=$this;
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($4);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$this;
 var $7=HEAP8[($6)];
 var $8=$7&1;
 var $9=(($8<<24)>>24)==0;
 if($9){label=5;break;}else{label=4;break;}
 case 4: 
 var $11=(($this+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $15=$12;label=6;break;
 case 5: 
 var $14=(($this+4)|0);
 var $15=$14;label=6;break;
 case 6: 
 var $15;
 var $16=($__old_cap>>>0)<536870887;
 if($16){label=7;break;}else{var $26=1073741807;label=9;break;}
 case 7: 
 var $18=((($__delta_cap)+($__old_cap))|0);
 var $19=$__old_cap<<1;
 var $20=($18>>>0)<($19>>>0);
 var $21=($20?$19:$18);
 var $22=($21>>>0)<2;
 if($22){var $26=2;label=9;break;}else{label=8;break;}
 case 8: 
 var $24=((($21)+(4))|0);
 var $25=$24&-4;
 var $26=$25;label=9;break;
 case 9: 
 var $26;
 var $27=$26<<2;
 var $28=__Znwj($27);
 var $29=$28;
 var $30=($__n_copy|0)==0;
 if($30){label=11;break;}else{label=10;break;}
 case 10: 
 var $32=_wmemcpy($29,$15,$__n_copy);
 label=11;break;
 case 11: 
 var $34=($__n_add|0)==0;
 if($34){label=13;break;}else{label=12;break;}
 case 12: 
 var $36=(($29+($__n_copy<<2))|0);
 var $37=_wmemcpy($36,$__p_new_stuff,$__n_add);
 label=13;break;
 case 13: 
 var $39=((($__old_sz)-($__n_del))|0);
 var $40=($39|0)==($__n_copy|0);
 if($40){label=15;break;}else{label=14;break;}
 case 14: 
 var $42=((($39)-($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $43=(($29+($_sum<<2))|0);
 var $_sum1=((($__n_del)+($__n_copy))|0);
 var $44=(($15+($_sum1<<2))|0);
 var $45=_wmemcpy($43,$44,$42);
 label=15;break;
 case 15: 
 var $47=($__old_cap|0)==1;
 if($47){label=17;break;}else{label=16;break;}
 case 16: 
 var $49=$15;
 __ZdlPv($49);
 label=17;break;
 case 17: 
 var $51=(($this+8)|0);
 HEAP32[(($51)>>2)]=$29;
 var $52=$26|1;
 var $53=(($this)|0);
 HEAP32[(($53)>>2)]=$52;
 var $54=((($39)+($__n_add))|0);
 var $55=(($this+4)|0);
 HEAP32[(($55)>>2)]=$54;
 var $56=(($29+($54<<2))|0);
 HEAP32[(($56)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((1073741807)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=$this;
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($4);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$this;
 var $7=HEAP8[($6)];
 var $8=$7&1;
 var $9=(($8<<24)>>24)==0;
 if($9){label=5;break;}else{label=4;break;}
 case 4: 
 var $11=(($this+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $15=$12;label=6;break;
 case 5: 
 var $14=(($this+4)|0);
 var $15=$14;label=6;break;
 case 6: 
 var $15;
 var $16=($__old_cap>>>0)<536870887;
 if($16){label=7;break;}else{var $26=1073741807;label=9;break;}
 case 7: 
 var $18=((($__delta_cap)+($__old_cap))|0);
 var $19=$__old_cap<<1;
 var $20=($18>>>0)<($19>>>0);
 var $21=($20?$19:$18);
 var $22=($21>>>0)<2;
 if($22){var $26=2;label=9;break;}else{label=8;break;}
 case 8: 
 var $24=((($21)+(4))|0);
 var $25=$24&-4;
 var $26=$25;label=9;break;
 case 9: 
 var $26;
 var $27=$26<<2;
 var $28=__Znwj($27);
 var $29=$28;
 var $30=($__n_copy|0)==0;
 if($30){label=11;break;}else{label=10;break;}
 case 10: 
 var $32=_wmemcpy($29,$15,$__n_copy);
 label=11;break;
 case 11: 
 var $34=((($__old_sz)-($__n_del))|0);
 var $35=($34|0)==($__n_copy|0);
 if($35){label=13;break;}else{label=12;break;}
 case 12: 
 var $37=((($34)-($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $38=(($29+($_sum<<2))|0);
 var $_sum1=((($__n_del)+($__n_copy))|0);
 var $39=(($15+($_sum1<<2))|0);
 var $40=_wmemcpy($38,$39,$37);
 label=13;break;
 case 13: 
 var $42=($__old_cap|0)==1;
 if($42){label=15;break;}else{label=14;break;}
 case 14: 
 var $44=$15;
 __ZdlPv($44);
 label=15;break;
 case 15: 
 var $46=(($this+8)|0);
 HEAP32[(($46)>>2)]=$29;
 var $47=$26|1;
 var $48=(($this)|0);
 HEAP32[(($48)>>2)]=$47;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18ios_base5clearEj($this,$state){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($this+24)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+16)|0);
 HEAP32[(($6)>>2)]=$state;
 label=4;break;
 case 3: 
 var $8=$state|1;
 var $9=(($this+16)|0);
 HEAP32[(($9)>>2)]=$8;
 label=4;break;
 case 4: 
 var $11=($4&1);
 var $12=$11|$state;
 var $13=(($this+20)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$12&$14;
 var $16=($15|0)==0;
 if($16){label=11;break;}else{label=5;break;}
 case 5: 
 var $18=___cxa_allocate_exception(16);
 var $19=HEAP8[(14000)];
 var $20=(($19<<24)>>24)==0;
 if($20){label=6;break;}else{label=8;break;}
 case 6: 
 var $22=___cxa_guard_acquire(14000);
 var $23=($22|0)==0;
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 HEAP32[((11896)>>2)]=4096;
 var $25=_atexit((272),11896,___dso_handle);

 label=8;break;
 case 8: 
 var $26=$1;
 var $$etemp$0$0=8;
 var $$etemp$0$1=0;

 var $tmpcast_i=$1;
 var $27=$18;
 var $$etemp$3$0=1;
 var $$etemp$3$1=0;
 var $$etemp$5$0=32;
 var $$etemp$5$1=0;
 var $$etemp$6=11896;
 var $$etemp$4$0=$$etemp$6;
 var $$etemp$4$1=0;
 var $$etemp$2$0=_bitshift64Shl($$etemp$4$0,$$etemp$4$1,$$etemp$5$0);var $$etemp$2$1=tempRet0;
 var $$etemp$1$0=$$etemp$2$0|$$etemp$3$0;
 var $$etemp$1$1=$$etemp$2$1|$$etemp$3$1;
 var $st$7$0=(($1)|0);
 HEAP32[(($st$7$0)>>2)]=$$etemp$1$0;
 var $st$8$1=(($1+4)|0);
 HEAP32[(($st$8$1)>>2)]=$$etemp$1$1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112system_errorC2ENS_10error_codeEPKc($27,$tmpcast_i,1408) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 var $29=$18;
 HEAP32[(($29)>>2)]=3280;
 var $$etemp$9$0=8;
 var $$etemp$9$1=0;

 ___cxa_throw($18,8776,(64));
 throw "Reached an unreachable!";
 case 10: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 ___cxa_free_exception($18);
 ___resumeException($31$0)
 case 11: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18ios_baseD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=3256;
 var $2=(($this+40)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 var $_pre=(($this+32)|0);
 var $_pre1=(($this+36)|0);
 if($4){label=4;break;}else{var $i_01_i=$3;label=2;break;}
 case 2: 
 var $i_01_i;
 var $5=((($i_01_i)-(1))|0);
 var $6=HEAP32[(($_pre)>>2)];
 var $7=(($6+($5<<2))|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP32[(($_pre1)>>2)];
 var $10=(($9+($5<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8](0,$this,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 var $12=($5|0)==0;
 if($12){label=4;break;}else{var $i_01_i=$5;label=2;break;}
 case 4: 
 var $13=(($this+28)|0);
 var $14=$13;
 __ZNSt3__16localeD2Ev($14);
 var $15=HEAP32[(($_pre)>>2)];
 var $16=$15;
 _free($16);
 var $17=HEAP32[(($_pre1)>>2)];
 var $18=$17;
 _free($18);
 var $19=(($this+48)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$20;
 _free($21);
 var $22=(($this+60)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$23;
 _free($24);
 return;
 case 5: 
 var $26$0 = ___cxa_find_matching_catch(-1, -1,0); var $26$1 = tempRet0;
 var $27=$26$0;
 ___clang_call_terminate($27);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18ios_base6getlocEv($agg_result,$this){
 var label=0;


 var $1=(($this+28)|0);
 var $2=$1;
 __ZNSt3__16localeC2ERKS0_($agg_result,$2);
 return;
}


function __ZNSt3__18ios_base4initEPv($this,$sb){
 var label=0;


 var $1=(($this+24)|0);
 HEAP32[(($1)>>2)]=$sb;
 var $not_=($sb|0)==0;
 var $2=($not_&1);
 var $3=(($this+16)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=(($this+20)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($this+4)|0);
 HEAP32[(($5)>>2)]=4098;
 var $6=(($this+12)|0);
 HEAP32[(($6)>>2)]=0;
 var $7=(($this+8)|0);
 HEAP32[(($7)>>2)]=6;
 var $8=(($this+32)|0);
 var $9=(($this+28)|0);
 var $10=$9;
 var $11=$8;
 _memset($11, 0, 40)|0;
 __ZNSt3__16localeC2Ev($10);
 return;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4328;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 var $3=$this;
 __ZdlPv($3);
 return;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4328;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4328;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0){
 var label=0;


 return;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1){
 var label=0;


 return $this;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg_result,$this,$0$0,$0$1,$1,$2){
 var label=0;


 var $4=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($4)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($4+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $5=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($5)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($5+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 return;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg_result,$this,readnone,$0){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = readnone; readnone=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[((readnone)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[(((readnone)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[(((readnone)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[(((readnone)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];

 var $3=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($3)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($3+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($4)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($4+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 STACKTOP=sp;return;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this){
 var label=0;


 return 0;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this){
 var label=0;


 return 0;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=8;break;}
 case 2: 
 var $3=(($this+12)|0);
 var $4=(($this+16)|0);
 var $_01=$__s;var $__i_02=0;label=3;break;
 case 3: 
 var $__i_02;
 var $_01;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=(($6+1)|0);
 HEAP32[(($3)>>2)]=$10;
 var $11=HEAP8[($6)];
 var $storemerge=$11;label=7;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+40)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=FUNCTION_TABLE[$15]($this);
 var $17=($16|0)==-1;
 if($17){var $__i_0_lcssa=$__i_02;label=8;break;}else{label=6;break;}
 case 6: 
 var $19=(($16)&255);
 var $storemerge=$19;label=7;break;
 case 7: 
 var $storemerge;
 HEAP8[($_01)]=$storemerge;
 var $21=((($__i_02)+(1))|0);
 var $22=(($_01+1)|0);
 var $23=($21|0)<($__n|0);
 if($23){var $_01=$22;var $__i_02=$21;label=3;break;}else{var $__i_0_lcssa=$21;label=8;break;}
 case 8: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this){
 var label=0;


 return -1;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+36)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=($5|0)==-1;
 if($6){var $_0=-1;label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+12)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+1)|0);
 HEAP32[(($8)>>2)]=$10;
 var $11=HEAP8[($9)];
 var $12=($11&255);
 var $_0=$12;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0){
 var label=0;


 return -1;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=7;break;}
 case 2: 
 var $3=(($this+24)|0);
 var $4=(($this+28)|0);
 var $__i_01=0;var $_02=$__s;label=3;break;
 case 3: 
 var $_02;
 var $__i_01;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=HEAP8[($_02)];
 var $11=(($6+1)|0);
 HEAP32[(($3)>>2)]=$11;
 HEAP8[($6)]=$10;
 label=6;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+52)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=HEAP8[($_02)];
 var $17=($16&255);
 var $18=FUNCTION_TABLE[$15]($this,$17);
 var $19=($18|0)==-1;
 if($19){var $__i_0_lcssa=$__i_01;label=7;break;}else{label=6;break;}
 case 6: 
 var $21=(($_02+1)|0);
 var $22=((($__i_01)+(1))|0);
 var $23=($22|0)<($__n|0);
 if($23){var $__i_01=$22;var $_02=$21;label=3;break;}else{var $__i_0_lcssa=$22;label=7;break;}
 case 7: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0){
 var label=0;


 return -1;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4256;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 var $3=$this;
 __ZdlPv($3);
 return;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4256;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4256;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this,$0){
 var label=0;


 return;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this,$0,$1){
 var label=0;


 return $this;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg_result,$this,$0$0,$0$1,$1,$2){
 var label=0;


 var $4=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($4)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($4+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $5=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($5)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($5+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 return;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg_result,$this,readnone,$0){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = readnone; readnone=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[((readnone)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[(((readnone)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[(((readnone)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[(((readnone)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];

 var $3=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($3)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($3+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($4)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($4+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 STACKTOP=sp;return;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this){
 var label=0;


 return 0;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this){
 var label=0;


 return 0;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=7;break;}
 case 2: 
 var $3=(($this+12)|0);
 var $4=(($this+16)|0);
 var $_01=$__s;var $__i_02=0;label=3;break;
 case 3: 
 var $__i_02;
 var $_01;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=(($6+4)|0);
 HEAP32[(($3)>>2)]=$10;
 var $11=HEAP32[(($6)>>2)];
 var $storemerge=$11;label=6;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+40)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=FUNCTION_TABLE[$15]($this);
 var $17=($16|0)==-1;
 if($17){var $__i_0_lcssa=$__i_02;label=7;break;}else{var $storemerge=$16;label=6;break;}
 case 6: 
 var $storemerge;
 HEAP32[(($_01)>>2)]=$storemerge;
 var $19=((($__i_02)+(1))|0);
 var $20=(($_01+4)|0);
 var $21=($19|0)<($__n|0);
 if($21){var $_01=$20;var $__i_02=$19;label=3;break;}else{var $__i_0_lcssa=$19;label=7;break;}
 case 7: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this){
 var label=0;


 return -1;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+36)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=($5|0)==-1;
 if($6){var $_0=-1;label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+12)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+4)|0);
 HEAP32[(($8)>>2)]=$10;
 var $11=HEAP32[(($9)>>2)];
 var $_0=$11;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this,$0){
 var label=0;


 return -1;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=7;break;}
 case 2: 
 var $3=(($this+24)|0);
 var $4=(($this+28)|0);
 var $__i_01=0;var $_02=$__s;label=3;break;
 case 3: 
 var $_02;
 var $__i_01;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=HEAP32[(($_02)>>2)];
 var $11=(($6+4)|0);
 HEAP32[(($3)>>2)]=$11;
 HEAP32[(($6)>>2)]=$10;
 label=6;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+52)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=HEAP32[(($_02)>>2)];
 var $17=FUNCTION_TABLE[$15]($this,$16);
 var $18=($17|0)==-1;
 if($18){var $__i_0_lcssa=$__i_01;label=7;break;}else{label=6;break;}
 case 6: 
 var $20=(($_02+4)|0);
 var $21=((($__i_01)+(1))|0);
 var $22=($21|0)<($__n|0);
 if($22){var $__i_01=$21;var $_02=$20;label=3;break;}else{var $__i_0_lcssa=$21;label=7;break;}
 case 7: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this,$0){
 var label=0;


 return -1;
}


function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}


function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(8))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 return;
}


function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(8))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s=sp;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(12))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$this;
 var $_sum=((($5)+(24))|0);
 var $7=(($6+$_sum)|0);
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=15;break;}else{label=2;break;}
 case 2: 
 var $12=(($__s)|0);
 HEAP8[($12)]=0;
 var $13=(($__s+4)|0);
 HEAP32[(($13)>>2)]=$this;
 var $_sum5=((($5)+(16))|0);
 var $14=(($6+$_sum5)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=16;break;}
 case 3: 
 var $_sum10=((($5)+(72))|0);
 var $19=(($6+$_sum10)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){var $_pre12=$5;label=6;break;}else{label=4;break;}
 case 4: 
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=9;break; }
 case 5: 
 var $_pre_pre=HEAP32[(($1)>>2)];
 var $_phi_trans_insert_phi_trans_insert=((($_pre_pre)-(12))|0);
 var $_phi_trans_insert11_phi_trans_insert=$_phi_trans_insert_phi_trans_insert;
 var $_pre12_pre=HEAP32[(($_phi_trans_insert11_phi_trans_insert)>>2)];
 var $_pre12=$_pre12_pre;label=6;break;
 case 6: 
 var $_pre12;
 HEAP8[($12)]=1;
 var $_sum6=((($_pre12)+(24))|0);
 var $26=(($6+$_sum6)|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $29=$28;
 var $30=$28;
 var $31=HEAP32[(($30)>>2)];
 var $32=(($31+24)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$33]($29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $35=($34|0)==-1;
 if($35){label=8;break;}else{label=16;break;}
 case 8: 
 var $37=HEAP32[(($1)>>2)];
 var $38=((($37)-(12))|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($6+$40)|0);
 var $42=$41;
 var $_sum9=((($40)+(16))|0);
 var $43=(($6+$_sum9)|0);
 var $44=$43;
 var $45=HEAP32[(($44)>>2)];
 var $46=$45|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($42,$46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=10;break; }
 case 9: 
 var $48$0 = ___cxa_find_matching_catch(-1, -1,0); var $48$1 = tempRet0;
 var $49=$48$0;
 var $_0=$49;label=11;break;
 case 10: 
 var $51$0 = ___cxa_find_matching_catch(-1, -1,0); var $51$1 = tempRet0;
 var $52=$51$0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 var $_0=$52;label=11;break;
 case 11: 
 var $_0;
 var $54=___cxa_begin_catch($_0);
 var $55=HEAP32[(($1)>>2)];
 var $56=((($55)-(12))|0);
 var $57=$56;
 var $58=HEAP32[(($57)>>2)];
 var $_sum7=((($58)+(16))|0);
 var $59=(($6+$_sum7)|0);
 var $60=$59;
 var $61=HEAP32[(($60)>>2)];
 var $62=$61|1;
 HEAP32[(($60)>>2)]=$62;
 var $_sum8=((($58)+(20))|0);
 var $63=(($6+$_sum8)|0);
 var $64=$63;
 var $65=HEAP32[(($64)>>2)];
 var $66=$65&1;
 var $67=($66|0)==0;
 if($67){label=14;break;}else{label=12;break;}
 case 12: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=17;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 ___cxa_end_catch();
 label=15;break;
 case 15: 
 STACKTOP=sp;return $this;
 case 16: 
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 label=15;break;
 case 17: 
 var $71$0 = ___cxa_find_matching_catch(-1, -1); var $71$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=19;break; }
 case 18: 
 ___resumeException($71$0)
 case 19: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1,0); var $74$1 = tempRet0;
 var $75=$74$0;
 ___clang_call_terminate($75);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}


function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(8))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 return;
}


function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(8))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}


function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s=sp;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(12))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$this;
 var $_sum=((($5)+(24))|0);
 var $7=(($6+$_sum)|0);
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=15;break;}else{label=2;break;}
 case 2: 
 var $12=(($__s)|0);
 HEAP8[($12)]=0;
 var $13=(($__s+4)|0);
 HEAP32[(($13)>>2)]=$this;
 var $_sum5=((($5)+(16))|0);
 var $14=(($6+$_sum5)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=16;break;}
 case 3: 
 var $_sum10=((($5)+(72))|0);
 var $19=(($6+$_sum10)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){var $_pre12=$5;label=6;break;}else{label=4;break;}
 case 4: 
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=9;break; }
 case 5: 
 var $_pre_pre=HEAP32[(($1)>>2)];
 var $_phi_trans_insert_phi_trans_insert=((($_pre_pre)-(12))|0);
 var $_phi_trans_insert11_phi_trans_insert=$_phi_trans_insert_phi_trans_insert;
 var $_pre12_pre=HEAP32[(($_phi_trans_insert11_phi_trans_insert)>>2)];
 var $_pre12=$_pre12_pre;label=6;break;
 case 6: 
 var $_pre12;
 HEAP8[($12)]=1;
 var $_sum6=((($_pre12)+(24))|0);
 var $26=(($6+$_sum6)|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $29=$28;
 var $30=$28;
 var $31=HEAP32[(($30)>>2)];
 var $32=(($31+24)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$33]($29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $35=($34|0)==-1;
 if($35){label=8;break;}else{label=16;break;}
 case 8: 
 var $37=HEAP32[(($1)>>2)];
 var $38=((($37)-(12))|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($6+$40)|0);
 var $42=$41;
 var $_sum9=((($40)+(16))|0);
 var $43=(($6+$_sum9)|0);
 var $44=$43;
 var $45=HEAP32[(($44)>>2)];
 var $46=$45|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($42,$46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=10;break; }
 case 9: 
 var $48$0 = ___cxa_find_matching_catch(-1, -1,0); var $48$1 = tempRet0;
 var $49=$48$0;
 var $_0=$49;label=11;break;
 case 10: 
 var $51$0 = ___cxa_find_matching_catch(-1, -1,0); var $51$1 = tempRet0;
 var $52=$51$0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 var $_0=$52;label=11;break;
 case 11: 
 var $_0;
 var $54=___cxa_begin_catch($_0);
 var $55=HEAP32[(($1)>>2)];
 var $56=((($55)-(12))|0);
 var $57=$56;
 var $58=HEAP32[(($57)>>2)];
 var $_sum7=((($58)+(16))|0);
 var $59=(($6+$_sum7)|0);
 var $60=$59;
 var $61=HEAP32[(($60)>>2)];
 var $62=$61|1;
 HEAP32[(($60)>>2)]=$62;
 var $_sum8=((($58)+(20))|0);
 var $63=(($6+$_sum8)|0);
 var $64=$63;
 var $65=HEAP32[(($64)>>2)];
 var $66=$65&1;
 var $67=($66|0)==0;
 if($67){label=14;break;}else{label=12;break;}
 case 12: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=17;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 ___cxa_end_catch();
 label=15;break;
 case 15: 
 STACKTOP=sp;return $this;
 case 16: 
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 label=15;break;
 case 17: 
 var $71$0 = ___cxa_find_matching_catch(-1, -1); var $71$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=19;break; }
 case 18: 
 ___resumeException($71$0)
 case 19: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1,0); var $74$1 = tempRet0;
 var $75=$74$0;
 ___clang_call_terminate($75);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}


function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(4))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 return;
}


function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(4))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)-(12))|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$2;
 var $_sum=((($7)+(24))|0);
 var $9=(($8+$_sum)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=9;break;}else{label=2;break;}
 case 2: 
 var $_sum1=((($7)+(16))|0);
 var $14=(($8+$_sum1)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=9;break;}
 case 3: 
 var $_sum2=((($7)+(4))|0);
 var $19=(($8+$_sum2)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&8192;
 var $23=($22|0)==0;
 if($23){label=9;break;}else{label=4;break;}
 case 4: 
 var $25=__ZSt18uncaught_exceptionv();
 if($25){label=9;break;}else{label=5;break;}
 case 5: 
 var $27=HEAP32[(($1)>>2)];
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $30=((($29)-(12))|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$27;
 var $_sum3=((($32)+(24))|0);
 var $34=(($33+$_sum3)|0);
 var $35=$34;
 var $36=HEAP32[(($35)>>2)];
 var $37=$36;
 var $38=$36;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+24)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 var $43=($42|0)==-1;
 if($43){label=7;break;}else{label=9;break;}
 case 7: 
 var $45=HEAP32[(($1)>>2)];
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=((($47)-(12))|0);
 var $49=$48;
 var $50=HEAP32[(($49)>>2)];
 var $51=$45;
 var $52=(($51+$50)|0);
 var $53=$52;
 var $_sum4=((($50)+(16))|0);
 var $54=(($51+$_sum4)|0);
 var $55=$54;
 var $56=HEAP32[(($55)>>2)];
 var $57=$56|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($53,$57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $59$0 = ___cxa_find_matching_catch(-1, -1,0); var $59$1 = tempRet0;
 var $60=$59$0;
 var $61=___cxa_begin_catch($60);
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 return;
 case 10: 
 var $63$0 = ___cxa_find_matching_catch(-1, -1,0); var $63$1 = tempRet0;
 var $64=$63$0;
 ___clang_call_terminate($64);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;


 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;


 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}


function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(4))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 return;
}


function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(4))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}


function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)-(12))|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$2;
 var $_sum=((($7)+(24))|0);
 var $9=(($8+$_sum)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=9;break;}else{label=2;break;}
 case 2: 
 var $_sum1=((($7)+(16))|0);
 var $14=(($8+$_sum1)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=9;break;}
 case 3: 
 var $_sum2=((($7)+(4))|0);
 var $19=(($8+$_sum2)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&8192;
 var $23=($22|0)==0;
 if($23){label=9;break;}else{label=4;break;}
 case 4: 
 var $25=__ZSt18uncaught_exceptionv();
 if($25){label=9;break;}else{label=5;break;}
 case 5: 
 var $27=HEAP32[(($1)>>2)];
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $30=((($29)-(12))|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$27;
 var $_sum3=((($32)+(24))|0);
 var $34=(($33+$_sum3)|0);
 var $35=$34;
 var $36=HEAP32[(($35)>>2)];
 var $37=$36;
 var $38=$36;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+24)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 var $43=($42|0)==-1;
 if($43){label=7;break;}else{label=9;break;}
 case 7: 
 var $45=HEAP32[(($1)>>2)];
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=((($47)-(12))|0);
 var $49=$48;
 var $50=HEAP32[(($49)>>2)];
 var $51=$45;
 var $52=(($51+$50)|0);
 var $53=$52;
 var $_sum4=((($50)+(16))|0);
 var $54=(($51+$_sum4)|0);
 var $55=$54;
 var $56=HEAP32[(($55)>>2)];
 var $57=$56|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($53,$57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $59$0 = ___cxa_find_matching_catch(-1, -1,0); var $59$1 = tempRet0;
 var $60=$59$0;
 var $61=___cxa_begin_catch($60);
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 return;
 case 10: 
 var $63$0 = ___cxa_find_matching_catch(-1, -1,0); var $63$1 = tempRet0;
 var $64=$63$0;
 ___clang_call_terminate($64);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__119__iostream_category4nameEv($this){
 var label=0;


 return 1496;
}


function __ZNKSt3__119__iostream_category7messageEi($agg_result,$this,$ev){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($ev|0)==1;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=(($this)|0);
 __ZNKSt3__112__do_message7messageEi($agg_result,$3,$ev);
 label=4;break;
 case 3: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg_result,1640,35);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18ios_base7failureD0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__112system_errorD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__18ios_base7failureD2Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__112system_errorD2Ev($1);
 return;
}


function __ZNSt3__18ios_baseD0Ev($this){
 var label=0;


 __ZNSt3__18ios_baseD2Ev($this);
 var $1=$this;
 __ZdlPv($1);
 return;
}


function __ZNSt3__17collateIcED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__17collateIcED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNSt3__16locale5facetD2Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo2|0)==($__hi2|0);
 if($1){var $_02_lcssa=$__lo1;label=6;break;}else{var $_024=$__lo1;var $_015=$__lo2;label=2;break;}
 case 2: 
 var $_015;
 var $_024;
 var $2=($_024|0)==($__hi1|0);
 if($2){var $_0=-1;label=7;break;}else{label=3;break;}
 case 3: 
 var $4=HEAP8[($_024)];
 var $5=HEAP8[($_015)];
 var $6=(($4<<24)>>24)<(($5<<24)>>24);
 if($6){var $_0=-1;label=7;break;}else{label=4;break;}
 case 4: 
 var $8=(($5<<24)>>24)<(($4<<24)>>24);
 if($8){var $_0=1;label=7;break;}else{label=5;break;}
 case 5: 
 var $10=(($_024+1)|0);
 var $11=(($_015+1)|0);
 var $12=($11|0)==($__hi2|0);
 if($12){var $_02_lcssa=$10;label=6;break;}else{var $_024=$10;var $_015=$11;label=2;break;}
 case 6: 
 var $_02_lcssa;
 var $13=($_02_lcssa|0)!=($__hi1|0);
 var $14=($13&1);
 var $_0=$14;label=7;break;
 case 7: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg_result,$this,$__lo,$__hi){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__lo;
 var $2=$__hi;
 var $3=((($2)-($1))|0);
 var $4=($3>>>0)>4294967279;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$agg_result;
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($6);
 label=3;break;
 case 3: 
 var $8=($3>>>0)<11;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=$3<<1;
 var $11=(($10)&255);
 var $12=$agg_result;
 HEAP8[($12)]=$11;
 var $13=$agg_result;
 var $14=(($13+1)|0);
 var $__p_0_ph_i_i=$14;label=6;break;
 case 5: 
 var $15=((($3)+(16))|0);
 var $16=$15&-16;
 var $17=__Znwj($16);
 var $18=(($agg_result+8)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=$16|1;
 var $20=(($agg_result)|0);
 HEAP32[(($20)>>2)]=$19;
 var $21=(($agg_result+4)|0);
 HEAP32[(($21)>>2)]=$3;
 var $__p_0_ph_i_i=$17;label=6;break;
 case 6: 
 var $__p_0_ph_i_i;
 var $22=($__lo|0)==($__hi|0);
 if($22){var $__p_0_lcssa_i_i=$__p_0_ph_i_i;label=9;break;}else{var $__p_01_i_i=$__p_0_ph_i_i;var $_02_i_i=$__lo;label=7;break;}
 case 7: 
 var $_02_i_i;
 var $__p_01_i_i;
 var $23=HEAP8[($_02_i_i)];
 HEAP8[($__p_01_i_i)]=$23;
 var $24=(($_02_i_i+1)|0);
 var $25=(($__p_01_i_i+1)|0);
 var $26=($24|0)==($__hi|0);
 if($26){label=8;break;}else{var $__p_01_i_i=$25;var $_02_i_i=$24;label=7;break;}
 case 8: 
 var $scevgep4_i_i=(($__p_0_ph_i_i+$3)|0);
 var $__p_0_lcssa_i_i=$scevgep4_i_i;label=9;break;
 case 9: 
 var $__p_0_lcssa_i_i;
 HEAP8[($__p_0_lcssa_i_i)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo|0)==($__hi|0);
 if($1){var $__h_0_lcssa=0;label=3;break;}else{var $__p_01=$__lo;var $__h_02=0;label=2;break;}
 case 2: 
 var $__h_02;
 var $__p_01;
 var $2=$__h_02<<4;
 var $3=HEAP8[($__p_01)];
 var $4=(($3<<24)>>24);
 var $5=((($4)+($2))|0);
 var $6=$5&-268435456;
 var $7=$6>>>24;
 var $8=$7|$6;
 var $9=$8^$5;
 var $10=(($__p_01+1)|0);
 var $11=($10|0)==($__hi|0);
 if($11){var $__h_0_lcssa=$9;label=3;break;}else{var $__p_01=$10;var $__h_02=$9;label=2;break;}
 case 3: 
 var $__h_0_lcssa;
 return $__h_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17collateIwED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__17collateIwED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo2|0)==($__hi2|0);
 if($1){var $_02_lcssa=$__lo1;label=6;break;}else{var $_024=$__lo1;var $_015=$__lo2;label=2;break;}
 case 2: 
 var $_015;
 var $_024;
 var $2=($_024|0)==($__hi1|0);
 if($2){var $_0=-1;label=7;break;}else{label=3;break;}
 case 3: 
 var $4=HEAP32[(($_024)>>2)];
 var $5=HEAP32[(($_015)>>2)];
 var $6=($4|0)<($5|0);
 if($6){var $_0=-1;label=7;break;}else{label=4;break;}
 case 4: 
 var $8=($5|0)<($4|0);
 if($8){var $_0=1;label=7;break;}else{label=5;break;}
 case 5: 
 var $10=(($_024+4)|0);
 var $11=(($_015+4)|0);
 var $12=($11|0)==($__hi2|0);
 if($12){var $_02_lcssa=$10;label=6;break;}else{var $_024=$10;var $_015=$11;label=2;break;}
 case 6: 
 var $_02_lcssa;
 var $13=($_02_lcssa|0)!=($__hi1|0);
 var $14=($13&1);
 var $_0=$14;label=7;break;
 case 7: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg_result,$this,$__lo,$__hi){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__lo;
 var $2=$__hi;
 var $3=((($2)-($1))|0);
 var $4=$3>>2;
 var $5=($4>>>0)>1073741807;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$agg_result;
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($7);
 label=3;break;
 case 3: 
 var $9=($4>>>0)<2;
 if($9){label=4;break;}else{label=5;break;}
 case 4: 
 var $11=$3>>>1;
 var $12=(($11)&255);
 var $13=$agg_result;
 HEAP8[($13)]=$12;
 var $14=(($agg_result+4)|0);
 var $__p_0_ph_i_i=$14;label=6;break;
 case 5: 
 var $15=((($4)+(4))|0);
 var $16=$15&-4;
 var $17=$16<<2;
 var $18=__Znwj($17);
 var $19=$18;
 var $20=(($agg_result+8)|0);
 HEAP32[(($20)>>2)]=$19;
 var $21=$16|1;
 var $22=(($agg_result)|0);
 HEAP32[(($22)>>2)]=$21;
 var $23=(($agg_result+4)|0);
 HEAP32[(($23)>>2)]=$4;
 var $__p_0_ph_i_i=$19;label=6;break;
 case 6: 
 var $__p_0_ph_i_i;
 var $24=($__lo|0)==($__hi|0);
 if($24){var $__p_0_lcssa_i_i=$__p_0_ph_i_i;label=10;break;}else{label=7;break;}
 case 7: 
 var $scevgep_i_i=((($__hi)-(4))|0);
 var $25=$scevgep_i_i;
 var $26=((($25)-($1))|0);
 var $__p_01_i_i=$__p_0_ph_i_i;var $_02_i_i=$__lo;label=8;break;
 case 8: 
 var $_02_i_i;
 var $__p_01_i_i;
 var $28=HEAP32[(($_02_i_i)>>2)];
 HEAP32[(($__p_01_i_i)>>2)]=$28;
 var $29=(($_02_i_i+4)|0);
 var $30=(($__p_01_i_i+4)|0);
 var $31=($29|0)==($__hi|0);
 if($31){label=9;break;}else{var $__p_01_i_i=$30;var $_02_i_i=$29;label=8;break;}
 case 9: 
 var $32=$26>>>2;
 var $33=((($32)+(1))|0);
 var $scevgep5_i_i=(($__p_0_ph_i_i+($33<<2))|0);
 var $__p_0_lcssa_i_i=$scevgep5_i_i;label=10;break;
 case 10: 
 var $__p_0_lcssa_i_i;
 HEAP32[(($__p_0_lcssa_i_i)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo|0)==($__hi|0);
 if($1){var $__h_0_lcssa=0;label=3;break;}else{var $__p_01=$__lo;var $__h_02=0;label=2;break;}
 case 2: 
 var $__h_02;
 var $__p_01;
 var $2=$__h_02<<4;
 var $3=HEAP32[(($__p_01)>>2)];
 var $4=((($3)+($2))|0);
 var $5=$4&-268435456;
 var $6=$5>>>24;
 var $7=$6|$5;
 var $8=$7^$4;
 var $9=(($__p_01+4)|0);
 var $10=($9|0)==($__hi|0);
 if($10){var $__h_0_lcssa=$8;label=3;break;}else{var $__p_01=$9;var $__h_02=$8;label=2;break;}
 case 3: 
 var $__h_0_lcssa;
 return $__h_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i4=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $__lv=(sp)+(32);
 var $1=(sp)+(40);
 var $2=(sp)+(48);
 var $3=(sp)+(56);
 var $4=(sp)+(64);
 var $5=(sp)+(72);
 var $__names=(sp)+(80);
 var $6=(sp)+(104);
 var $7=(($__iob+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8&1;
 var $10=($9|0)==0;
 if($10){label=2;break;}else{label=7;break;}
 case 2: 
 HEAP32[(($__lv)>>2)]=-1;
 var $12=$this;
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+16)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($__b)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($2)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=(($__e)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($3)|0);
 HEAP32[(($21)>>2)]=$20;
 FUNCTION_TABLE[$15]($1,$this,$2,$3,$__iob,$__err,$__lv);
 var $22=(($1)|0);
 var $23=HEAP32[(($22)>>2)];
 HEAP32[(($16)>>2)]=$23;
 var $24=HEAP32[(($__lv)>>2)];
 if(($24|0)==0){ label=3;break;}else if(($24|0)==1){ label=4;break;}else{label=5;break;}
 case 3: 
 HEAP8[($__v)]=0;
 label=6;break;
 case 4: 
 HEAP8[($__v)]=1;
 label=6;break;
 case 5: 
 HEAP8[($__v)]=1;
 HEAP32[(($__err)>>2)]=4;
 label=6;break;
 case 6: 
 var $29=(($agg_result)|0);
 HEAP32[(($29)>>2)]=$23;
 label=28;break;
 case 7: 
 __ZNKSt3__18ios_base6getlocEv($4,$__iob);
 var $31=(($4)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $34=HEAP32[((13432)>>2)];
 var $35=($34|0)==-1;
 if($35){label=9;break;}else{label=8;break;}
 case 8: 
 var $37=(($__p_i_i_i_i)|0);
 HEAP32[(($37)>>2)]=13432;
 var $38=(($__p_i_i_i_i+4)|0);
 HEAP32[(($38)>>2)]=(26);
 var $39=(($__p_i_i_i_i+8)|0);
 HEAP32[(($39)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13432,$33,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=23;break; }
 case 9: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $40=HEAP32[((13436)>>2)];
 var $41=((($40)-(1))|0);
 var $42=(($32+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($32+8)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$43;
 var $47=$45;
 var $48=((($46)-($47))|0);
 var $49=$48>>2;
 var $50=($49>>>0)>($41>>>0);
 if($50){label=10;break;}else{label=11;break;}
 case 10: 
 var $51=(($45+($41<<2))|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($52|0)==0;
 if($53){label=11;break;}else{label=13;break;}
 case 11: 
 var $54=___cxa_allocate_exception(4);
 var $55=$54;
 __ZNSt8bad_castC2Ev($55);
 (function() { try { __THREW__ = 0; return ___cxa_throw($54,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=23;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $57=$52;
 var $58=HEAP32[(($31)>>2)];
 var $59=(($58)|0);
 var $60=__ZNSt3__114__shared_count16__release_sharedEv($59);
 __ZNKSt3__18ios_base6getlocEv($5,$__iob);
 var $61=(($5)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=$__p_i_i_i_i4;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $64=HEAP32[((13048)>>2)];
 var $65=($64|0)==-1;
 if($65){label=15;break;}else{label=14;break;}
 case 14: 
 var $67=(($__p_i_i_i_i4)|0);
 HEAP32[(($67)>>2)]=13048;
 var $68=(($__p_i_i_i_i4+4)|0);
 HEAP32[(($68)>>2)]=(26);
 var $69=(($__p_i_i_i_i4+8)|0);
 HEAP32[(($69)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13048,$63,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=24;break; }
 case 15: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $70=HEAP32[((13052)>>2)];
 var $71=((($70)-(1))|0);
 var $72=(($62+12)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=(($62+8)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=$73;
 var $77=$75;
 var $78=((($76)-($77))|0);
 var $79=$78>>2;
 var $80=($79>>>0)>($71>>>0);
 if($80){label=16;break;}else{label=17;break;}
 case 16: 
 var $81=(($75+($71<<2))|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=($82|0)==0;
 if($83){label=17;break;}else{label=19;break;}
 case 17: 
 var $84=___cxa_allocate_exception(4);
 var $85=$84;
 __ZNSt8bad_castC2Ev($85);
 (function() { try { __THREW__ = 0; return ___cxa_throw($84,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=24;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $87=$82;
 var $88=HEAP32[(($61)>>2)];
 var $89=(($88)|0);
 var $90=__ZNSt3__114__shared_count16__release_sharedEv($89);
 var $91=(($__names)|0);
 var $92=$82;
 var $93=HEAP32[(($92)>>2)];
 var $94=(($93+24)|0);
 var $95=HEAP32[(($94)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$95]($91,$87) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { var $_02=$91;label=25;break; }
 case 20: 
 var $96=(($__names+12)|0);
 var $97=HEAP32[(($92)>>2)];
 var $98=(($97+28)|0);
 var $99=HEAP32[(($98)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$99]($96,$87) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { var $_02=$96;label=25;break; }
 case 21: 
 var $100=(($__e)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=(($6)|0);
 HEAP32[(($102)>>2)]=$101;
 var $103=(($__names+24)|0);
 var $104=(function() { try { __THREW__ = 0; return __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$6,$91,$103,$57,$__err,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=27;break; }
 case 22: 
 var $105=($104|0)==($91|0);
 var $106=($105&1);
 HEAP8[($__v)]=$106;
 var $107=(($__b)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(($agg_result)|0);
 HEAP32[(($109)>>2)]=$108;
 var $110=(($__names+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($110);
 var $111=(($__names)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($111);
 label=28;break;
 case 23: 
 var $113$0 = ___cxa_find_matching_catch(-1, -1); var $113$1 = tempRet0;
 var $114=$113$0;
 var $115=$113$1;
 var $116=HEAP32[(($31)>>2)];
 var $117=(($116)|0);
 var $118=__ZNSt3__114__shared_count16__release_sharedEv($117);
 var $_0=$114;var $_01=$115;label=29;break;
 case 24: 
 var $120$0 = ___cxa_find_matching_catch(-1, -1); var $120$1 = tempRet0;
 var $121=$120$0;
 var $122=$120$1;
 var $123=HEAP32[(($61)>>2)];
 var $124=(($123)|0);
 var $125=__ZNSt3__114__shared_count16__release_sharedEv($124);
 var $_0=$121;var $_01=$122;label=29;break;
 case 25: 
 var $_02;
 var $127$0 = ___cxa_find_matching_catch(-1, -1); var $127$1 = tempRet0;
 var $128=$127$0;
 var $129=$127$1;
 var $130=($91|0)==($_02|0);
 if($130){var $_0=$128;var $_01=$129;label=29;break;}else{var $131=$_02;label=26;break;}
 case 26: 
 var $131;
 var $132=((($131)-(12))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($132);
 var $133=($132|0)==($91|0);
 if($133){var $_0=$128;var $_01=$129;label=29;break;}else{var $131=$132;label=26;break;}
 case 27: 
 var $134$0 = ___cxa_find_matching_catch(-1, -1); var $134$1 = tempRet0;
 var $135=$134$0;
 var $136=(($__names+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($136);
 var $137=(($__names)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($137);
 var $138=$134$1;
 var $_0=$135;var $_01=$138;label=29;break;
 case 28: 
 STACKTOP=sp;return;
 case 29: 
 var $_01;
 var $_0;
 var $140$0=$_0;
 var $140$1=0;
 var $141$0=$140$0;
 var $141$1=$_01;
 ___resumeException($141$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+248)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__atoms=(sp)+(16);
 var $__grouping=(sp)+(48);
 var $1=(sp)+(64);
 var $__buf=(sp)+(72);
 var $__g=(sp)+(88);
 var $this2_i_i_i=$__grouping;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($1,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=41;break; }
 case 2: 
 var $3=(($1)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $6=HEAP32[((13432)>>2)];
 var $7=($6|0)==-1;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=(($__p_i_i_i_i)|0);
 HEAP32[(($9)>>2)]=13432;
 var $10=(($__p_i_i_i_i+4)|0);
 HEAP32[(($10)>>2)]=(26);
 var $11=(($__p_i_i_i_i+8)|0);
 HEAP32[(($11)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13432,$5,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=42;break; }
 case 4: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $12=HEAP32[((13436)>>2)];
 var $13=((($12)-(1))|0);
 var $14=(($4+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($4+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$15;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($13>>>0);
 if($22){label=5;break;}else{label=6;break;}
 case 5: 
 var $23=(($17+($13<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=6;break;}else{label=8;break;}
 case 6: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 __ZNSt8bad_castC2Ev($27);
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=42;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $29=$24;
 var $30=(($__atoms)|0);
 var $31=$24;
 var $32=HEAP32[(($31)>>2)];
 var $33=(($32+32)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$34]($29,9744,9770,$30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=42;break; }
 case 9: 
 var $36=HEAP32[(($3)>>2)];
 var $37=(($36)|0);
 var $38=__ZNSt3__114__shared_count16__release_sharedEv($37);
 var $this2_i_i_i6=$__buf;
 HEAP32[(($this2_i_i_i6)>>2)]=0; HEAP32[((($this2_i_i_i6)+(4))>>2)]=0; HEAP32[((($this2_i_i_i6)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=44;break; }
 case 10: 
 var $39=HEAP8[($this2_i_i_i6)];
 var $40=$39&1;
 var $41=(($40<<24)>>24)==0;
 if($41){label=12;break;}else{label=11;break;}
 case 11: 
 var $43=(($__buf+8)|0);
 var $44=HEAP32[(($43)>>2)];
 var $_pre36=$__buf;
 var $_pre37=(($_pre36+1)|0);
 var $48=$44;var $_pre_phi38=$_pre37;var $_pre_phi40=$43;label=13;break;
 case 12: 
 var $46=$__buf;
 var $47=(($46+1)|0);
 var $_pre39=(($__buf+8)|0);
 var $48=$47;var $_pre_phi38=$47;var $_pre_phi40=$_pre39;label=13;break;
 case 13: 
 var $_pre_phi40;
 var $_pre_phi38;
 var $48;
 var $49=$__g;
 var $$etemp$2$0=160;
 var $$etemp$2$1=0;

 var $50=(($__g)|0);
 var $51=(($__b)|0);
 var $52=(($__e)|0);
 var $53=(($__buf)|0);
 var $54=(($__buf+4)|0);
 var $55=(($__atoms+24)|0);
 var $56=(($__atoms+25)|0);
 var $57=$__g;
 var $58=(($__atoms+26)|0);
 var $59=$__atoms;
 var $60=(($__grouping+4)|0);
 var $_pre=HEAP32[(($51)>>2)];
 var $__a_0=$48;var $63=0;var $62=$50;var $61=$48;var $_pre_i_i_i9=$_pre;label=14;break;
 case 14: 
 var $_pre_i_i_i9;
 var $61;
 var $62;
 var $63;
 var $__a_0;
 var $64=($_pre_i_i_i9|0)==0;
 if($64){var $78=0;label=19;break;}else{label=15;break;}
 case 15: 
 var $66=(($_pre_i_i_i9+12)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($_pre_i_i_i9+16)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=($67|0)==($69|0);
 if($70){label=16;break;}else{var $78=$_pre_i_i_i9;label=19;break;}
 case 16: 
 var $71=$_pre_i_i_i9;
 var $72=HEAP32[(($71)>>2)];
 var $73=(($72+36)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$74]($_pre_i_i_i9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=43;break; }
 case 17: 
 var $76=($75|0)==-1;
 if($76){label=18;break;}else{var $78=$_pre_i_i_i9;label=19;break;}
 case 18: 
 HEAP32[(($51)>>2)]=0;
 var $78=0;label=19;break;
 case 19: 
 var $78;
 var $79=($78|0)==0;
 var $80=HEAP32[(($52)>>2)];
 var $81=($80|0)==0;
 if($81){label=25;break;}else{label=20;break;}
 case 20: 
 var $83=(($80+12)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=(($80+16)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=($84|0)==($86|0);
 if($87){label=22;break;}else{label=21;break;}
 case 21: 
 if($79){label=27;break;}else{var $__a_2=$__a_0;label=71;break;}
 case 22: 
 var $88=$80;
 var $89=HEAP32[(($88)>>2)];
 var $90=(($89+36)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$91]($80) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=43;break; }
 case 23: 
 var $93=($92|0)==-1;
 if($93){label=24;break;}else{label=26;break;}
 case 24: 
 HEAP32[(($52)>>2)]=0;
 label=25;break;
 case 25: 
 if($79){var $__a_2=$__a_0;label=71;break;}else{label=27;break;}
 case 26: 
 if($79){label=27;break;}else{var $__a_2=$__a_0;label=71;break;}
 case 27: 
 var $97=$61;
 var $98=$__a_0;
 var $99=((($97)-($98))|0);
 var $100=HEAP8[($this2_i_i_i6)];
 var $101=$100&1;
 var $102=(($101<<24)>>24)==0;
 if($102){label=29;break;}else{label=28;break;}
 case 28: 
 var $104=HEAP32[(($54)>>2)];
 var $108=$104;label=30;break;
 case 29: 
 var $106=($100&255);
 var $107=$106>>>1;
 var $108=$107;label=30;break;
 case 30: 
 var $108;
 var $109=($99|0)==($108|0);
 if($109){label=31;break;}else{var $__a_1=$__a_0;var $149=$61;label=46;break;}
 case 31: 
 if($102){label=33;break;}else{label=32;break;}
 case 32: 
 var $112=HEAP32[(($54)>>2)];
 var $119=$112;var $118=$112;label=34;break;
 case 33: 
 var $114=($100&255);
 var $115=$114>>>1;
 var $116=($100&255);
 var $117=$116>>>1;
 var $119=$117;var $118=$115;label=34;break;
 case 34: 
 var $118;
 var $119;
 var $120=$119<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$120,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=43;break; }
 case 35: 
 var $121=HEAP8[($this2_i_i_i6)];
 var $122=$121&1;
 var $123=(($122<<24)>>24)==0;
 if($123){var $127=10;label=37;break;}else{label=36;break;}
 case 36: 
 var $125=HEAP32[(($53)>>2)];
 var $126=$125&-2;
 var $phitmp_i22=((($126)-(1))|0);
 var $127=$phitmp_i22;label=37;break;
 case 37: 
 var $127;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$127,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=43;break; }
 case 38: 
 var $128=HEAP8[($this2_i_i_i6)];
 var $129=$128&1;
 var $130=(($129<<24)>>24)==0;
 if($130){var $133=$_pre_phi38;label=40;break;}else{label=39;break;}
 case 39: 
 var $132=HEAP32[(($_pre_phi40)>>2)];
 var $133=$132;label=40;break;
 case 40: 
 var $133;
 var $134=(($133+$118)|0);
 var $__a_1=$133;var $149=$134;label=46;break;
 case 41: 
 var $136$0 = ___cxa_find_matching_catch(-1, -1); var $136$1 = tempRet0;
 var $137=$136$0;
 var $138=$136$1;
 var $_0=$137;var $_01=$138;label=94;break;
 case 42: 
 var $140$0 = ___cxa_find_matching_catch(-1, -1); var $140$1 = tempRet0;
 var $141=$140$0;
 var $142=$140$1;
 var $143=HEAP32[(($3)>>2)];
 var $144=(($143)|0);
 var $145=__ZNSt3__114__shared_count16__release_sharedEv($144);
 var $_0=$141;var $_01=$142;label=94;break;
 case 43: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=45;break;
 case 44: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit$1;var $eh_lpad_body$0=$lpad_nonloopexit$0;label=45;break;
 case 45: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $146=$eh_lpad_body$0;
 var $147=$eh_lpad_body$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 var $_0=$146;var $_01=$147;label=94;break;
 case 46: 
 var $149;
 var $__a_1;
 var $150=(($78+12)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(($78+16)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=($151|0)==($153|0);
 if($154){label=47;break;}else{label=49;break;}
 case 47: 
 var $156=$78;
 var $157=HEAP32[(($156)>>2)];
 var $158=(($157+36)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$159]($78) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=43;break; }
 case 48: 
 var $extract_t_i=(($160)&255);
 var $_0_i_off0_i=$extract_t_i;label=50;break;
 case 49: 
 var $162=HEAP8[($151)];
 var $_0_i_off0_i=$162;label=50;break;
 case 50: 
 var $_0_i_off0_i;
 var $163=($149|0)==($__a_1|0);
 if($163){label=51;break;}else{label=53;break;}
 case 51: 
 var $165=HEAP8[($55)];
 var $166=(($165<<24)>>24)==(($_0_i_off0_i<<24)>>24);
 var $167=HEAP8[($56)];
 var $168=(($167<<24)>>24)==(($_0_i_off0_i<<24)>>24);
 var $or_cond=$166|$168;
 if($or_cond){label=52;break;}else{label=53;break;}
 case 52: 
 var $170=($166?43:45);
 var $171=(($149+1)|0);
 HEAP8[($149)]=$170;
 var $_ph32=0;var $_ph31=$62;var $_ph=$171;label=68;break;
 case 53: 
 var $173=HEAP8[($this2_i_i_i)];
 var $174=$173&1;
 var $175=(($174<<24)>>24)==0;
 if($175){label=55;break;}else{label=54;break;}
 case 54: 
 var $177=HEAP32[(($60)>>2)];
 var $181=$177;label=56;break;
 case 55: 
 var $179=($173&255);
 var $180=$179>>>1;
 var $181=$180;label=56;break;
 case 56: 
 var $181;
 var $182=($181|0)!=0;
 var $183=(($_0_i_off0_i<<24)>>24)==0;
 var $or_cond_i=$182&$183;
 if($or_cond_i){label=57;break;}else{var $_01_i_i=$30;label=60;break;}
 case 57: 
 var $185=$62;
 var $186=((($185)-($57))|0);
 var $187=($186|0)<160;
 if($187){label=58;break;}else{var $_ph32=$63;var $_ph31=$62;var $_ph=$149;label=68;break;}
 case 58: 
 var $189=(($62+4)|0);
 HEAP32[(($62)>>2)]=$63;
 var $_ph32=0;var $_ph31=$189;var $_ph=$149;label=68;break;
 case 59: 
 var $191=($195|0)==($58|0);
 if($191){var $_0_lcssa_i_i=$58;label=61;break;}else{var $_01_i_i=$195;label=60;break;}
 case 60: 
 var $_01_i_i;
 var $193=HEAP8[($_01_i_i)];
 var $194=(($193<<24)>>24)==(($_0_i_off0_i<<24)>>24);
 var $195=(($_01_i_i+1)|0);
 if($194){var $_0_lcssa_i_i=$_01_i_i;label=61;break;}else{label=59;break;}
 case 61: 
 var $_0_lcssa_i_i;
 var $196=$_0_lcssa_i_i;
 var $197=((($196)-($59))|0);
 var $198=($197|0)>23;
 if($198){var $__a_2=$__a_1;label=71;break;}else{label=62;break;}
 case 62: 
 var $200=($197|0)<22;
 if($200){label=67;break;}else{label=63;break;}
 case 63: 
 if($163){var $__a_2=$149;label=71;break;}else{label=64;break;}
 case 64: 
 var $203=$149;
 var $204=$__a_1;
 var $205=((($203)-($204))|0);
 var $206=($205|0)<3;
 if($206){label=65;break;}else{var $__a_2=$__a_1;label=71;break;}
 case 65: 
 var $208=((($149)-(1))|0);
 var $209=HEAP8[($208)];
 var $210=(($209<<24)>>24)==48;
 if($210){label=66;break;}else{var $__a_2=$__a_1;label=71;break;}
 case 66: 
 var $212=((9744+$197)|0);
 var $213=HEAP8[($212)];
 var $214=(($149+1)|0);
 HEAP8[($149)]=$213;
 var $_ph32=0;var $_ph31=$62;var $_ph=$214;label=68;break;
 case 67: 
 var $216=((9744+$197)|0);
 var $217=HEAP8[($216)];
 var $218=(($149+1)|0);
 HEAP8[($149)]=$217;
 var $219=((($63)+(1))|0);
 var $_ph32=$219;var $_ph31=$62;var $_ph=$218;label=68;break;
 case 68: 
 var $_ph;
 var $_ph31;
 var $_ph32;
 var $221=HEAP32[(($51)>>2)];
 var $222=(($221+12)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=(($221+16)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=($223|0)==($225|0);
 if($226){label=69;break;}else{label=70;break;}
 case 69: 
 var $228=$221;
 var $229=HEAP32[(($228)>>2)];
 var $230=(($229+40)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$231]($221) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $63=$_ph32;var $62=$_ph31;var $61=$_ph;var $_pre_i_i_i9=$221;label=14;break; } else { label=43;break; }
 case 70: 
 var $234=(($223+1)|0);
 HEAP32[(($222)>>2)]=$234;
 var $__a_0=$__a_1;var $63=$_ph32;var $62=$_ph31;var $61=$_ph;var $_pre_i_i_i9=$221;label=14;break;
 case 71: 
 var $__a_2;
 var $235=(($__a_2+3)|0);
 HEAP8[($235)]=0;
 var $236=HEAP8[(13992)];
 var $237=(($236<<24)>>24)==0;
 if($237){label=72;break;}else{label=76;break;}
 case 72: 
 var $239=___cxa_guard_acquire(13992);
 var $240=($239|0)==0;
 if($240){label=76;break;}else{label=73;break;}
 case 73: 
 var $242=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=75;break; }
 case 74: 
 HEAP32[((11888)>>2)]=$242;

 label=76;break;
 case 75: 
 var $245$0 = ___cxa_find_matching_catch(-1, -1); var $245$1 = tempRet0;

 var $eh_lpad_body$1=$245$1;var $eh_lpad_body$0=$245$0;label=45;break;
 case 76: 
 var $247=HEAP32[((11888)>>2)];
 var $248=(function() { try { __THREW__ = 0; return __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__a_2,$247,1152,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=77;break; } else { label=44;break; }
 case 77: 
 var $250=($248|0)==1;
 if($250){label=79;break;}else{label=78;break;}
 case 78: 
 HEAP32[(($__err)>>2)]=4;
 label=79;break;
 case 79: 
 var $253=HEAP32[(($51)>>2)];
 var $254=($253|0)==0;
 if($254){var $268=0;label=84;break;}else{label=80;break;}
 case 80: 
 var $256=(($253+12)|0);
 var $257=HEAP32[(($256)>>2)];
 var $258=(($253+16)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=($257|0)==($259|0);
 if($260){label=81;break;}else{var $268=$253;label=84;break;}
 case 81: 
 var $261=$253;
 var $262=HEAP32[(($261)>>2)];
 var $263=(($262+36)|0);
 var $264=HEAP32[(($263)>>2)];
 var $265=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$264]($253) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=82;break; } else { label=44;break; }
 case 82: 
 var $266=($265|0)==-1;
 if($266){label=83;break;}else{var $268=$253;label=84;break;}
 case 83: 
 HEAP32[(($51)>>2)]=0;
 var $268=0;label=84;break;
 case 84: 
 var $268;
 var $269=($268|0)==0;
 var $270=HEAP32[(($52)>>2)];
 var $271=($270|0)==0;
 if($271){label=90;break;}else{label=85;break;}
 case 85: 
 var $273=(($270+12)|0);
 var $274=HEAP32[(($273)>>2)];
 var $275=(($270+16)|0);
 var $276=HEAP32[(($275)>>2)];
 var $277=($274|0)==($276|0);
 if($277){label=87;break;}else{label=86;break;}
 case 86: 
 if($269){label=93;break;}else{label=92;break;}
 case 87: 
 var $278=$270;
 var $279=HEAP32[(($278)>>2)];
 var $280=(($279+36)|0);
 var $281=HEAP32[(($280)>>2)];
 var $282=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$281]($270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=88;break; } else { label=44;break; }
 case 88: 
 var $283=($282|0)==-1;
 if($283){label=89;break;}else{label=91;break;}
 case 89: 
 HEAP32[(($52)>>2)]=0;
 label=90;break;
 case 90: 
 if($269){label=92;break;}else{label=93;break;}
 case 91: 
 var $285=($270|0)==0;
 var $tmp_i_i=$269^$285;
 if($tmp_i_i){label=93;break;}else{label=92;break;}
 case 92: 
 var $287=HEAP32[(($__err)>>2)];
 var $288=$287|2;
 HEAP32[(($__err)>>2)]=$288;
 label=93;break;
 case 93: 
 var $290=(($agg_result)|0);
 HEAP32[(($290)>>2)]=$268;
 var $$etemp$3$0=160;
 var $$etemp$3$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
 case 94: 
 var $_01;
 var $_0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $292$0=$_0;
 var $292$1=0;
 var $293$0=$292$0;
 var $293$1=$_01;
 ___resumeException($293$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i4=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $__lv=(sp)+(32);
 var $1=(sp)+(40);
 var $2=(sp)+(48);
 var $3=(sp)+(56);
 var $4=(sp)+(64);
 var $5=(sp)+(72);
 var $__names=(sp)+(80);
 var $6=(sp)+(104);
 var $7=(($__iob+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8&1;
 var $10=($9|0)==0;
 if($10){label=2;break;}else{label=7;break;}
 case 2: 
 HEAP32[(($__lv)>>2)]=-1;
 var $12=$this;
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+16)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($__b)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($2)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=(($__e)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($3)|0);
 HEAP32[(($21)>>2)]=$20;
 FUNCTION_TABLE[$15]($1,$this,$2,$3,$__iob,$__err,$__lv);
 var $22=(($1)|0);
 var $23=HEAP32[(($22)>>2)];
 HEAP32[(($16)>>2)]=$23;
 var $24=HEAP32[(($__lv)>>2)];
 if(($24|0)==0){ label=3;break;}else if(($24|0)==1){ label=4;break;}else{label=5;break;}
 case 3: 
 HEAP8[($__v)]=0;
 label=6;break;
 case 4: 
 HEAP8[($__v)]=1;
 label=6;break;
 case 5: 
 HEAP8[($__v)]=1;
 HEAP32[(($__err)>>2)]=4;
 label=6;break;
 case 6: 
 var $29=(($agg_result)|0);
 HEAP32[(($29)>>2)]=$23;
 label=28;break;
 case 7: 
 __ZNKSt3__18ios_base6getlocEv($4,$__iob);
 var $31=(($4)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $34=HEAP32[((13424)>>2)];
 var $35=($34|0)==-1;
 if($35){label=9;break;}else{label=8;break;}
 case 8: 
 var $37=(($__p_i_i_i_i)|0);
 HEAP32[(($37)>>2)]=13424;
 var $38=(($__p_i_i_i_i+4)|0);
 HEAP32[(($38)>>2)]=(26);
 var $39=(($__p_i_i_i_i+8)|0);
 HEAP32[(($39)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13424,$33,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=23;break; }
 case 9: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $40=HEAP32[((13428)>>2)];
 var $41=((($40)-(1))|0);
 var $42=(($32+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($32+8)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$43;
 var $47=$45;
 var $48=((($46)-($47))|0);
 var $49=$48>>2;
 var $50=($49>>>0)>($41>>>0);
 if($50){label=10;break;}else{label=11;break;}
 case 10: 
 var $51=(($45+($41<<2))|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($52|0)==0;
 if($53){label=11;break;}else{label=13;break;}
 case 11: 
 var $54=___cxa_allocate_exception(4);
 var $55=$54;
 __ZNSt8bad_castC2Ev($55);
 (function() { try { __THREW__ = 0; return ___cxa_throw($54,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=23;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $57=$52;
 var $58=HEAP32[(($31)>>2)];
 var $59=(($58)|0);
 var $60=__ZNSt3__114__shared_count16__release_sharedEv($59);
 __ZNKSt3__18ios_base6getlocEv($5,$__iob);
 var $61=(($5)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=$__p_i_i_i_i4;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $64=HEAP32[((13040)>>2)];
 var $65=($64|0)==-1;
 if($65){label=15;break;}else{label=14;break;}
 case 14: 
 var $67=(($__p_i_i_i_i4)|0);
 HEAP32[(($67)>>2)]=13040;
 var $68=(($__p_i_i_i_i4+4)|0);
 HEAP32[(($68)>>2)]=(26);
 var $69=(($__p_i_i_i_i4+8)|0);
 HEAP32[(($69)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13040,$63,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=24;break; }
 case 15: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $70=HEAP32[((13044)>>2)];
 var $71=((($70)-(1))|0);
 var $72=(($62+12)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=(($62+8)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=$73;
 var $77=$75;
 var $78=((($76)-($77))|0);
 var $79=$78>>2;
 var $80=($79>>>0)>($71>>>0);
 if($80){label=16;break;}else{label=17;break;}
 case 16: 
 var $81=(($75+($71<<2))|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=($82|0)==0;
 if($83){label=17;break;}else{label=19;break;}
 case 17: 
 var $84=___cxa_allocate_exception(4);
 var $85=$84;
 __ZNSt8bad_castC2Ev($85);
 (function() { try { __THREW__ = 0; return ___cxa_throw($84,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=24;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $87=$82;
 var $88=HEAP32[(($61)>>2)];
 var $89=(($88)|0);
 var $90=__ZNSt3__114__shared_count16__release_sharedEv($89);
 var $91=(($__names)|0);
 var $92=$82;
 var $93=HEAP32[(($92)>>2)];
 var $94=(($93+24)|0);
 var $95=HEAP32[(($94)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$95]($91,$87) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { var $_02=$91;label=25;break; }
 case 20: 
 var $96=(($__names+12)|0);
 var $97=HEAP32[(($92)>>2)];
 var $98=(($97+28)|0);
 var $99=HEAP32[(($98)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$99]($96,$87) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { var $_02=$96;label=25;break; }
 case 21: 
 var $100=(($__e)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=(($6)|0);
 HEAP32[(($102)>>2)]=$101;
 var $103=(($__names+24)|0);
 var $104=(function() { try { __THREW__ = 0; return __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$6,$91,$103,$57,$__err,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=27;break; }
 case 22: 
 var $105=($104|0)==($91|0);
 var $106=($105&1);
 HEAP8[($__v)]=$106;
 var $107=(($__b)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(($agg_result)|0);
 HEAP32[(($109)>>2)]=$108;
 var $110=(($__names+12)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($110);
 var $111=(($__names)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($111);
 label=28;break;
 case 23: 
 var $113$0 = ___cxa_find_matching_catch(-1, -1); var $113$1 = tempRet0;
 var $114=$113$0;
 var $115=$113$1;
 var $116=HEAP32[(($31)>>2)];
 var $117=(($116)|0);
 var $118=__ZNSt3__114__shared_count16__release_sharedEv($117);
 var $_0=$114;var $_01=$115;label=29;break;
 case 24: 
 var $120$0 = ___cxa_find_matching_catch(-1, -1); var $120$1 = tempRet0;
 var $121=$120$0;
 var $122=$120$1;
 var $123=HEAP32[(($61)>>2)];
 var $124=(($123)|0);
 var $125=__ZNSt3__114__shared_count16__release_sharedEv($124);
 var $_0=$121;var $_01=$122;label=29;break;
 case 25: 
 var $_02;
 var $127$0 = ___cxa_find_matching_catch(-1, -1); var $127$1 = tempRet0;
 var $128=$127$0;
 var $129=$127$1;
 var $130=($91|0)==($_02|0);
 if($130){var $_0=$128;var $_01=$129;label=29;break;}else{var $131=$_02;label=26;break;}
 case 26: 
 var $131;
 var $132=((($131)-(12))|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($132);
 var $133=($132|0)==($91|0);
 if($133){var $_0=$128;var $_01=$129;label=29;break;}else{var $131=$132;label=26;break;}
 case 27: 
 var $134$0 = ___cxa_find_matching_catch(-1, -1); var $134$1 = tempRet0;
 var $135=$134$0;
 var $136=(($__names+12)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($136);
 var $137=(($__names)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($137);
 var $138=$134$1;
 var $_0=$135;var $_01=$138;label=29;break;
 case 28: 
 STACKTOP=sp;return;
 case 29: 
 var $_01;
 var $_0;
 var $140$0=$_0;
 var $140$1=0;
 var $141$0=$140$0;
 var $141$1=$_01;
 ___resumeException($141$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$1,$2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+320)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__atoms=(sp)+(16);
 var $__grouping=(sp)+(120);
 var $1=(sp)+(136);
 var $__buf=(sp)+(144);
 var $__g=(sp)+(160);
 var $2=$__atoms;
 var $$etemp$0$0=104;
 var $$etemp$0$1=0;

 var $this2_i_i_i=$__grouping;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($1,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=42;break; }
 case 2: 
 var $4=(($1)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$__p_i_i_i_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $7=HEAP32[((13424)>>2)];
 var $8=($7|0)==-1;
 if($8){label=4;break;}else{label=3;break;}
 case 3: 
 var $10=(($__p_i_i_i_i)|0);
 HEAP32[(($10)>>2)]=13424;
 var $11=(($__p_i_i_i_i+4)|0);
 HEAP32[(($11)>>2)]=(26);
 var $12=(($__p_i_i_i_i+8)|0);
 HEAP32[(($12)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13424,$6,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=43;break; }
 case 4: 
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $13=HEAP32[((13428)>>2)];
 var $14=((($13)-(1))|0);
 var $15=(($5+12)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($5+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$16;
 var $20=$18;
 var $21=((($19)-($20))|0);
 var $22=$21>>2;
 var $23=($22>>>0)>($14>>>0);
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=(($18+($14<<2))|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)==0;
 if($26){label=6;break;}else{label=8;break;}
 case 6: 
 var $27=___cxa_allocate_exception(4);
 var $28=$27;
 __ZNSt8bad_castC2Ev($28);
 (function() { try { __THREW__ = 0; return ___cxa_throw($27,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=43;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $30=$25;
 var $31=(($__atoms)|0);
 var $32=$25;
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33+48)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$35]($30,9744,9770,$31) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=43;break; }
 case 9: 
 var $37=HEAP32[(($4)>>2)];
 var $38=(($37)|0);
 var $39=__ZNSt3__114__shared_count16__release_sharedEv($38);
 var $this2_i_i_i6=$__buf;
 HEAP32[(($this2_i_i_i6)>>2)]=0; HEAP32[((($this2_i_i_i6)+(4))>>2)]=0; HEAP32[((($this2_i_i_i6)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=45;break; }
 case 10: 
 var $40=HEAP8[($this2_i_i_i6)];
 var $41=$40&1;
 var $42=(($41<<24)>>24)==0;
 if($42){label=12;break;}else{label=11;break;}
 case 11: 
 var $44=(($__buf+8)|0);
 var $45=HEAP32[(($44)>>2)];
 var $_pre39=$__buf;
 var $_pre40=(($_pre39+1)|0);
 var $49=$45;var $_pre_phi41=$_pre40;var $_pre_phi43=$44;label=13;break;
 case 12: 
 var $47=$__buf;
 var $48=(($47+1)|0);
 var $_pre42=(($__buf+8)|0);
 var $49=$48;var $_pre_phi41=$48;var $_pre_phi43=$_pre42;label=13;break;
 case 13: 
 var $_pre_phi43;
 var $_pre_phi41;
 var $49;
 var $50=$__g;
 var $$etemp$3$0=160;
 var $$etemp$3$1=0;

 var $51=(($__g)|0);
 var $52=(($__b)|0);
 var $53=(($__e)|0);
 var $54=(($__buf)|0);
 var $55=(($__buf+4)|0);
 var $56=(($__atoms+96)|0);
 var $57=(($__atoms+100)|0);
 var $58=$__g;
 var $59=(($__atoms+104)|0);
 var $60=$__atoms;
 var $61=(($__grouping+4)|0);
 var $_pre=HEAP32[(($52)>>2)];
 var $__a_0=$49;var $64=0;var $63=$51;var $62=$49;var $_pre_i_i_i10=$_pre;label=14;break;
 case 14: 
 var $_pre_i_i_i10;
 var $62;
 var $63;
 var $64;
 var $__a_0;
 var $65=($_pre_i_i_i10|0)==0;
 if($65){var $83=1;var $82=0;label=20;break;}else{label=15;break;}
 case 15: 
 var $67=(($_pre_i_i_i10+12)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($_pre_i_i_i10+16)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=($68|0)==($70|0);
 if($71){label=16;break;}else{label=17;break;}
 case 16: 
 var $73=$_pre_i_i_i10;
 var $74=HEAP32[(($73)>>2)];
 var $75=(($74+36)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$76]($_pre_i_i_i10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i8=$77;label=18;break; } else { label=44;break; }
 case 17: 
 var $79=HEAP32[(($68)>>2)];
 var $_0_i_i_i_i8=$79;label=18;break;
 case 18: 
 var $_0_i_i_i_i8;
 var $80=($_0_i_i_i_i8|0)==-1;
 if($80){label=19;break;}else{var $83=0;var $82=$_pre_i_i_i10;label=20;break;}
 case 19: 
 HEAP32[(($52)>>2)]=0;
 var $83=1;var $82=0;label=20;break;
 case 20: 
 var $82;
 var $83;
 var $84=HEAP32[(($53)>>2)];
 var $85=($84|0)==0;
 if($85){label=26;break;}else{label=21;break;}
 case 21: 
 var $87=(($84+12)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=(($84+16)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=($88|0)==($90|0);
 if($91){label=22;break;}else{label=23;break;}
 case 22: 
 var $93=$84;
 var $94=HEAP32[(($93)>>2)];
 var $95=(($94+36)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$96]($84) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i14=$97;label=24;break; } else { label=44;break; }
 case 23: 
 var $99=HEAP32[(($88)>>2)];
 var $_0_i_i1_i_i14=$99;label=24;break;
 case 24: 
 var $_0_i_i1_i_i14;
 var $100=($_0_i_i1_i_i14|0)==-1;
 if($100){label=25;break;}else{label=27;break;}
 case 25: 
 HEAP32[(($53)>>2)]=0;
 label=26;break;
 case 26: 
 if($83){var $__a_2=$__a_0;label=71;break;}else{label=28;break;}
 case 27: 
 if($83){label=28;break;}else{var $__a_2=$__a_0;label=71;break;}
 case 28: 
 var $104=$62;
 var $105=$__a_0;
 var $106=((($104)-($105))|0);
 var $107=HEAP8[($this2_i_i_i6)];
 var $108=$107&1;
 var $109=(($108<<24)>>24)==0;
 if($109){label=30;break;}else{label=29;break;}
 case 29: 
 var $111=HEAP32[(($55)>>2)];
 var $115=$111;label=31;break;
 case 30: 
 var $113=($107&255);
 var $114=$113>>>1;
 var $115=$114;label=31;break;
 case 31: 
 var $115;
 var $116=($106|0)==($115|0);
 if($116){label=32;break;}else{var $__a_1=$__a_0;var $156=$62;label=47;break;}
 case 32: 
 if($109){label=34;break;}else{label=33;break;}
 case 33: 
 var $119=HEAP32[(($55)>>2)];
 var $126=$119;var $125=$119;label=35;break;
 case 34: 
 var $121=($107&255);
 var $122=$121>>>1;
 var $123=($107&255);
 var $124=$123>>>1;
 var $126=$124;var $125=$122;label=35;break;
 case 35: 
 var $125;
 var $126;
 var $127=$126<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$127,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=44;break; }
 case 36: 
 var $128=HEAP8[($this2_i_i_i6)];
 var $129=$128&1;
 var $130=(($129<<24)>>24)==0;
 if($130){var $134=10;label=38;break;}else{label=37;break;}
 case 37: 
 var $132=HEAP32[(($54)>>2)];
 var $133=$132&-2;
 var $phitmp_i26=((($133)-(1))|0);
 var $134=$phitmp_i26;label=38;break;
 case 38: 
 var $134;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$134,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=44;break; }
 case 39: 
 var $135=HEAP8[($this2_i_i_i6)];
 var $136=$135&1;
 var $137=(($136<<24)>>24)==0;
 if($137){var $140=$_pre_phi41;label=41;break;}else{label=40;break;}
 case 40: 
 var $139=HEAP32[(($_pre_phi43)>>2)];
 var $140=$139;label=41;break;
 case 41: 
 var $140;
 var $141=(($140+$125)|0);
 var $__a_1=$140;var $156=$141;label=47;break;
 case 42: 
 var $143$0 = ___cxa_find_matching_catch(-1, -1); var $143$1 = tempRet0;
 var $144=$143$0;
 var $145=$143$1;
 var $_0=$144;var $_01=$145;label=95;break;
 case 43: 
 var $147$0 = ___cxa_find_matching_catch(-1, -1); var $147$1 = tempRet0;
 var $148=$147$0;
 var $149=$147$1;
 var $150=HEAP32[(($4)>>2)];
 var $151=(($150)|0);
 var $152=__ZNSt3__114__shared_count16__release_sharedEv($151);
 var $_0=$148;var $_01=$149;label=95;break;
 case 44: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=46;break;
 case 45: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit$1;var $eh_lpad_body$0=$lpad_nonloopexit$0;label=46;break;
 case 46: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $153=$eh_lpad_body$0;
 var $154=$eh_lpad_body$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 var $_0=$153;var $_01=$154;label=95;break;
 case 47: 
 var $156;
 var $__a_1;
 var $157=(($82+12)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(($82+16)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=($158|0)==($160|0);
 if($161){label=48;break;}else{label=49;break;}
 case 48: 
 var $163=$82;
 var $164=HEAP32[(($163)>>2)];
 var $165=(($164+36)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$166]($82) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$167;label=50;break; } else { label=44;break; }
 case 49: 
 var $169=HEAP32[(($158)>>2)];
 var $_0_i_i=$169;label=50;break;
 case 50: 
 var $_0_i_i;
 var $170=($156|0)==($__a_1|0);
 if($170){label=51;break;}else{label=53;break;}
 case 51: 
 var $172=HEAP32[(($56)>>2)];
 var $173=($172|0)==($_0_i_i|0);
 var $174=HEAP32[(($57)>>2)];
 var $175=($174|0)==($_0_i_i|0);
 var $or_cond=$173|$175;
 if($or_cond){label=52;break;}else{label=53;break;}
 case 52: 
 var $177=($173?43:45);
 var $178=(($156+1)|0);
 HEAP8[($156)]=$177;
 var $_ph35=0;var $_ph34=$63;var $_ph=$178;label=68;break;
 case 53: 
 var $180=HEAP8[($this2_i_i_i)];
 var $181=$180&1;
 var $182=(($181<<24)>>24)==0;
 if($182){label=55;break;}else{label=54;break;}
 case 54: 
 var $184=HEAP32[(($61)>>2)];
 var $188=$184;label=56;break;
 case 55: 
 var $186=($180&255);
 var $187=$186>>>1;
 var $188=$187;label=56;break;
 case 56: 
 var $188;
 var $189=($188|0)!=0;
 var $190=($_0_i_i|0)==0;
 var $or_cond_i=$189&$190;
 if($or_cond_i){label=57;break;}else{var $_01_i_i=$31;label=60;break;}
 case 57: 
 var $192=$63;
 var $193=((($192)-($58))|0);
 var $194=($193|0)<160;
 if($194){label=58;break;}else{var $_ph35=$64;var $_ph34=$63;var $_ph=$156;label=68;break;}
 case 58: 
 var $196=(($63+4)|0);
 HEAP32[(($63)>>2)]=$64;
 var $_ph35=0;var $_ph34=$196;var $_ph=$156;label=68;break;
 case 59: 
 var $198=($202|0)==($59|0);
 if($198){var $_0_lcssa_i_i=$59;label=61;break;}else{var $_01_i_i=$202;label=60;break;}
 case 60: 
 var $_01_i_i;
 var $200=HEAP32[(($_01_i_i)>>2)];
 var $201=($200|0)==($_0_i_i|0);
 var $202=(($_01_i_i+4)|0);
 if($201){var $_0_lcssa_i_i=$_01_i_i;label=61;break;}else{label=59;break;}
 case 61: 
 var $_0_lcssa_i_i;
 var $203=$_0_lcssa_i_i;
 var $204=((($203)-($60))|0);
 var $205=$204>>2;
 var $206=($204|0)>92;
 if($206){var $__a_2=$__a_1;label=71;break;}else{label=62;break;}
 case 62: 
 var $208=($204|0)<88;
 if($208){label=67;break;}else{label=63;break;}
 case 63: 
 if($170){var $__a_2=$156;label=71;break;}else{label=64;break;}
 case 64: 
 var $211=$156;
 var $212=$__a_1;
 var $213=((($211)-($212))|0);
 var $214=($213|0)<3;
 if($214){label=65;break;}else{var $__a_2=$__a_1;label=71;break;}
 case 65: 
 var $216=((($156)-(1))|0);
 var $217=HEAP8[($216)];
 var $218=(($217<<24)>>24)==48;
 if($218){label=66;break;}else{var $__a_2=$__a_1;label=71;break;}
 case 66: 
 var $220=((9744+$205)|0);
 var $221=HEAP8[($220)];
 var $222=(($156+1)|0);
 HEAP8[($156)]=$221;
 var $_ph35=0;var $_ph34=$63;var $_ph=$222;label=68;break;
 case 67: 
 var $224=((9744+$205)|0);
 var $225=HEAP8[($224)];
 var $226=(($156+1)|0);
 HEAP8[($156)]=$225;
 var $227=((($64)+(1))|0);
 var $_ph35=$227;var $_ph34=$63;var $_ph=$226;label=68;break;
 case 68: 
 var $_ph;
 var $_ph34;
 var $_ph35;
 var $229=HEAP32[(($52)>>2)];
 var $230=(($229+12)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=(($229+16)|0);
 var $233=HEAP32[(($232)>>2)];
 var $234=($231|0)==($233|0);
 if($234){label=69;break;}else{label=70;break;}
 case 69: 
 var $236=$229;
 var $237=HEAP32[(($236)>>2)];
 var $238=(($237+40)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$239]($229) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $64=$_ph35;var $63=$_ph34;var $62=$_ph;var $_pre_i_i_i10=$229;label=14;break; } else { label=44;break; }
 case 70: 
 var $242=(($231+4)|0);
 HEAP32[(($230)>>2)]=$242;
 var $__a_0=$__a_1;var $64=$_ph35;var $63=$_ph34;var $62=$_ph;var $_pre_i_i_i10=$229;label=14;break;
 case 71: 
 var $__a_2;
 var $243=(($__a_2+3)|0);
 HEAP8[($243)]=0;
 var $244=HEAP8[(13992)];
 var $245=(($244<<24)>>24)==0;
 if($245){label=72;break;}else{label=76;break;}
 case 72: 
 var $247=___cxa_guard_acquire(13992);
 var $248=($247|0)==0;
 if($248){label=76;break;}else{label=73;break;}
 case 73: 
 var $250=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=75;break; }
 case 74: 
 HEAP32[((11888)>>2)]=$250;

 label=76;break;
 case 75: 
 var $253$0 = ___cxa_find_matching_catch(-1, -1); var $253$1 = tempRet0;

 var $eh_lpad_body$1=$253$1;var $eh_lpad_body$0=$253$0;label=46;break;
 case 76: 
 var $255=HEAP32[((11888)>>2)];
 var $256=(function() { try { __THREW__ = 0; return __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__a_2,$255,1152,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=77;break; } else { label=45;break; }
 case 77: 
 var $258=($256|0)==1;
 if($258){label=79;break;}else{label=78;break;}
 case 78: 
 HEAP32[(($__err)>>2)]=4;
 label=79;break;
 case 79: 
 var $261=HEAP32[(($52)>>2)];
 var $262=($261|0)==0;
 if($262){var $280=1;var $279=0;label=85;break;}else{label=80;break;}
 case 80: 
 var $264=(($261+12)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=(($261+16)|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=($265|0)==($267|0);
 if($268){label=81;break;}else{label=82;break;}
 case 81: 
 var $270=$261;
 var $271=HEAP32[(($270)>>2)];
 var $272=(($271+36)|0);
 var $273=HEAP32[(($272)>>2)];
 var $274=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$273]($261) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$274;label=83;break; } else { label=45;break; }
 case 82: 
 var $276=HEAP32[(($265)>>2)];
 var $_0_i_i_i_i=$276;label=83;break;
 case 83: 
 var $_0_i_i_i_i;
 var $277=($_0_i_i_i_i|0)==-1;
 if($277){label=84;break;}else{var $280=0;var $279=$261;label=85;break;}
 case 84: 
 HEAP32[(($52)>>2)]=0;
 var $280=1;var $279=0;label=85;break;
 case 85: 
 var $279;
 var $280;
 var $281=HEAP32[(($53)>>2)];
 var $282=($281|0)==0;
 if($282){label=91;break;}else{label=86;break;}
 case 86: 
 var $284=(($281+12)|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=(($281+16)|0);
 var $287=HEAP32[(($286)>>2)];
 var $288=($285|0)==($287|0);
 if($288){label=87;break;}else{label=88;break;}
 case 87: 
 var $290=$281;
 var $291=HEAP32[(($290)>>2)];
 var $292=(($291+36)|0);
 var $293=HEAP32[(($292)>>2)];
 var $294=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$293]($281) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$294;label=89;break; } else { label=45;break; }
 case 88: 
 var $296=HEAP32[(($285)>>2)];
 var $_0_i_i1_i_i=$296;label=89;break;
 case 89: 
 var $_0_i_i1_i_i;
 var $297=($_0_i_i1_i_i|0)==-1;
 if($297){label=90;break;}else{label=92;break;}
 case 90: 
 HEAP32[(($53)>>2)]=0;
 label=91;break;
 case 91: 
 if($280){label=93;break;}else{label=94;break;}
 case 92: 
 if($280){label=94;break;}else{label=93;break;}
 case 93: 
 var $300=HEAP32[(($__err)>>2)];
 var $301=$300|2;
 HEAP32[(($__err)>>2)]=$301;
 label=94;break;
 case 94: 
 var $303=(($agg_result)|0);
 HEAP32[(($303)>>2)]=$279;
 var $$etemp$4$0=160;
 var $$etemp$4$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $$etemp$5$0=104;
 var $$etemp$5$1=0;

 STACKTOP=sp;return;
 case 95: 
 var $_01;
 var $_0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $305$0=$_0;
 var $305$1=0;
 var $306$0=$305$0;
 var $306$1=$_01;
 ___resumeException($306$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($__a_end)>>2)];
 var $2=($1|0)==($__a|0);
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=(($__atoms+96)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==($__ct|0);
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=(($__atoms+100)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==($__ct|0);
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=($6?43:45);
 var $13=(($__a+1)|0);
 HEAP32[(($__a_end)>>2)]=$13;
 HEAP8[($__a)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 var $_0=0;label=23;break;
 case 5: 
 var $15=$__grouping;
 var $16=HEAP8[($15)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)==0;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $20=(($__grouping+4)|0);
 var $21=HEAP32[(($20)>>2)];
 var $25=$21;label=8;break;
 case 7: 
 var $23=($16&255);
 var $24=$23>>>1;
 var $25=$24;label=8;break;
 case 8: 
 var $25;
 var $26=($25|0)!=0;
 var $27=($__ct|0)==($__thousands_sep|0);
 var $or_cond=$26&$27;
 if($or_cond){label=9;break;}else{label=11;break;}
 case 9: 
 var $29=HEAP32[(($__g_end)>>2)];
 var $30=$29;
 var $31=$__g;
 var $32=((($30)-($31))|0);
 var $33=($32|0)<160;
 if($33){label=10;break;}else{var $_0=0;label=23;break;}
 case 10: 
 var $35=HEAP32[(($__dc)>>2)];
 var $36=(($29+4)|0);
 HEAP32[(($__g_end)>>2)]=$36;
 HEAP32[(($29)>>2)]=$35;
 HEAP32[(($__dc)>>2)]=0;
 var $_0=0;label=23;break;
 case 11: 
 var $38=(($__atoms+104)|0);
 var $_01_i=$__atoms;label=13;break;
 case 12: 
 var $40=($44|0)==($38|0);
 if($40){var $_0_lcssa_i=$38;label=14;break;}else{var $_01_i=$44;label=13;break;}
 case 13: 
 var $_01_i;
 var $42=HEAP32[(($_01_i)>>2)];
 var $43=($42|0)==($__ct|0);
 var $44=(($_01_i+4)|0);
 if($43){var $_0_lcssa_i=$_01_i;label=14;break;}else{label=12;break;}
 case 14: 
 var $_0_lcssa_i;
 var $45=$_0_lcssa_i;
 var $46=$__atoms;
 var $47=((($45)-($46))|0);
 var $48=$47>>2;
 var $49=($47|0)>92;
 if($49){var $_0=-1;label=23;break;}else{label=15;break;}
 case 15: 
 if(($__base|0)==8|($__base|0)==10){ label=16;break;}else if(($__base|0)==16){ label=17;break;}else{label=22;break;}
 case 16: 
 var $52=($48|0)<($__base|0);
 if($52){label=22;break;}else{var $_0=-1;label=23;break;}
 case 17: 
 var $54=($47|0)<88;
 if($54){label=22;break;}else{label=18;break;}
 case 18: 
 if($2){var $_0=-1;label=23;break;}else{label=19;break;}
 case 19: 
 var $57=$1;
 var $58=$__a;
 var $59=((($57)-($58))|0);
 var $60=($59|0)<3;
 if($60){label=20;break;}else{var $_0=-1;label=23;break;}
 case 20: 
 var $62=((($1)-(1))|0);
 var $63=HEAP8[($62)];
 var $64=(($63<<24)>>24)==48;
 if($64){label=21;break;}else{var $_0=-1;label=23;break;}
 case 21: 
 HEAP32[(($__dc)>>2)]=0;
 var $66=((9744+$48)|0);
 var $67=HEAP8[($66)];
 var $68=(($1+1)|0);
 HEAP32[(($__a_end)>>2)]=$68;
 HEAP8[($1)]=$67;
 var $_0=0;label=23;break;
 case 22: 
 var $70=((9744+$48)|0);
 var $71=HEAP8[($70)];
 var $72=(($1+1)|0);
 HEAP32[(($__a_end)>>2)]=$72;
 HEAP8[($1)]=$71;
 var $73=HEAP32[(($__dc)>>2)];
 var $74=((($73)+(1))|0);
 HEAP32[(($__dc)>>2)]=$74;
 var $_0=0;label=23;break;
 case 23: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg_result,$__iob,$__atoms,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i3=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $__loc=(sp)+(32);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=HEAP32[((13432)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__p_i_i_i_i)|0);
 HEAP32[(($7)>>2)]=13432;
 var $8=(($__p_i_i_i_i+4)|0);
 HEAP32[(($8)>>2)]=(26);
 var $9=(($__p_i_i_i_i+8)|0);
 HEAP32[(($9)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13432,$3,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=17;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $10=HEAP32[((13436)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($2+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=7;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 __ZNSt8bad_castC2Ev($25);
 (function() { try { __THREW__ = 0; return ___cxa_throw($24,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=17;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $27=$22;
 var $28=$22;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+32)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($27,9744,9770,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=17;break; }
 case 8: 
 var $33=HEAP32[(($1)>>2)];
 var $34=$__p_i_i_i_i3;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $35=HEAP32[((13048)>>2)];
 var $36=($35|0)==-1;
 if($36){label=10;break;}else{label=9;break;}
 case 9: 
 var $38=(($__p_i_i_i_i3)|0);
 HEAP32[(($38)>>2)]=13048;
 var $39=(($__p_i_i_i_i3+4)|0);
 HEAP32[(($39)>>2)]=(26);
 var $40=(($__p_i_i_i_i3+8)|0);
 HEAP32[(($40)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13048,$34,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=17;break; }
 case 10: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $41=HEAP32[((13052)>>2)];
 var $42=((($41)-(1))|0);
 var $43=(($33+12)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(($33+8)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=$44;
 var $48=$46;
 var $49=((($47)-($48))|0);
 var $50=$49>>2;
 var $51=($50>>>0)>($42>>>0);
 if($51){label=11;break;}else{label=12;break;}
 case 11: 
 var $52=(($46+($42<<2))|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($53|0)==0;
 if($54){label=12;break;}else{label=14;break;}
 case 12: 
 var $55=___cxa_allocate_exception(4);
 var $56=$55;
 __ZNSt8bad_castC2Ev($56);
 (function() { try { __THREW__ = 0; return ___cxa_throw($55,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=17;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $58=$53;
 var $59=$53;
 var $60=HEAP32[(($59)>>2)];
 var $61=(($60+16)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$62]($58) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=17;break; }
 case 15: 
 HEAP8[($__thousands_sep)]=$63;
 var $64=$53;
 var $65=HEAP32[(($64)>>2)];
 var $66=(($65+20)|0);
 var $67=HEAP32[(($66)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$67]($agg_result,$58) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=17;break; }
 case 16: 
 var $68=HEAP32[(($1)>>2)];
 var $69=(($68)|0);
 var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
 STACKTOP=sp;return;
 case 17: 
 var $72$0 = ___cxa_find_matching_catch(-1, -1); var $72$1 = tempRet0;
 var $73=HEAP32[(($1)>>2)];
 var $74=(($73)|0);
 var $75=__ZNSt3__114__shared_count16__release_sharedEv($74);
 ___resumeException($72$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg_result,$__iob,$__atoms,$__decimal_point,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i3=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $__loc=(sp)+(32);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=HEAP32[((13432)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__p_i_i_i_i)|0);
 HEAP32[(($7)>>2)]=13432;
 var $8=(($__p_i_i_i_i+4)|0);
 HEAP32[(($8)>>2)]=(26);
 var $9=(($__p_i_i_i_i+8)|0);
 HEAP32[(($9)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13432,$3,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=18;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $10=HEAP32[((13436)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($2+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=7;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 __ZNSt8bad_castC2Ev($25);
 (function() { try { __THREW__ = 0; return ___cxa_throw($24,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=18;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $27=$22;
 var $28=$22;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+32)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($27,9744,9776,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=18;break; }
 case 8: 
 var $33=HEAP32[(($1)>>2)];
 var $34=$__p_i_i_i_i3;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $35=HEAP32[((13048)>>2)];
 var $36=($35|0)==-1;
 if($36){label=10;break;}else{label=9;break;}
 case 9: 
 var $38=(($__p_i_i_i_i3)|0);
 HEAP32[(($38)>>2)]=13048;
 var $39=(($__p_i_i_i_i3+4)|0);
 HEAP32[(($39)>>2)]=(26);
 var $40=(($__p_i_i_i_i3+8)|0);
 HEAP32[(($40)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13048,$34,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=18;break; }
 case 10: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $41=HEAP32[((13052)>>2)];
 var $42=((($41)-(1))|0);
 var $43=(($33+12)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(($33+8)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=$44;
 var $48=$46;
 var $49=((($47)-($48))|0);
 var $50=$49>>2;
 var $51=($50>>>0)>($42>>>0);
 if($51){label=11;break;}else{label=12;break;}
 case 11: 
 var $52=(($46+($42<<2))|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($53|0)==0;
 if($54){label=12;break;}else{label=14;break;}
 case 12: 
 var $55=___cxa_allocate_exception(4);
 var $56=$55;
 __ZNSt8bad_castC2Ev($56);
 (function() { try { __THREW__ = 0; return ___cxa_throw($55,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $58=$53;
 var $59=$53;
 var $60=HEAP32[(($59)>>2)];
 var $61=(($60+12)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$62]($58) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=18;break; }
 case 15: 
 HEAP8[($__decimal_point)]=$63;
 var $64=HEAP32[(($59)>>2)];
 var $65=(($64+16)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$66]($58) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 HEAP8[($__thousands_sep)]=$67;
 var $68=$53;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+20)|0);
 var $71=HEAP32[(($70)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$71]($agg_result,$58) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=18;break; }
 case 17: 
 var $72=HEAP32[(($1)>>2)];
 var $73=(($72)|0);
 var $74=__ZNSt3__114__shared_count16__release_sharedEv($73);
 STACKTOP=sp;return;
 case 18: 
 var $76$0 = ___cxa_find_matching_catch(-1, -1); var $76$1 = tempRet0;
 var $77=HEAP32[(($1)>>2)];
 var $78=(($77)|0);
 var $79=__ZNSt3__114__shared_count16__release_sharedEv($78);
 ___resumeException($76$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__ct<<24)>>24)==(($__decimal_point<<24)>>24);
 if($1){label=2;break;}else{label=9;break;}
 case 2: 
 var $3=HEAP8[($__in_units)];
 var $4=(($3<<24)>>24)==0;
 if($4){var $_0=-1;label=36;break;}else{label=3;break;}
 case 3: 
 HEAP8[($__in_units)]=0;
 var $6=HEAP32[(($__a_end)>>2)];
 var $7=(($6+1)|0);
 HEAP32[(($__a_end)>>2)]=$7;
 HEAP8[($6)]=46;
 var $8=$__grouping;
 var $9=HEAP8[($8)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=5;break;}else{label=4;break;}
 case 4: 
 var $13=(($__grouping+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $18=$14;label=6;break;
 case 5: 
 var $16=($9&255);
 var $17=$16>>>1;
 var $18=$17;label=6;break;
 case 6: 
 var $18;
 var $19=($18|0)==0;
 if($19){var $_0=0;label=36;break;}else{label=7;break;}
 case 7: 
 var $21=HEAP32[(($__g_end)>>2)];
 var $22=$21;
 var $23=$__g;
 var $24=((($22)-($23))|0);
 var $25=($24|0)<160;
 if($25){label=8;break;}else{var $_0=0;label=36;break;}
 case 8: 
 var $27=HEAP32[(($__dc)>>2)];
 var $28=(($21+4)|0);
 HEAP32[(($__g_end)>>2)]=$28;
 HEAP32[(($21)>>2)]=$27;
 var $_0=0;label=36;break;
 case 9: 
 var $30=(($__ct<<24)>>24)==(($__thousands_sep<<24)>>24);
 if($30){label=10;break;}else{label=17;break;}
 case 10: 
 var $32=$__grouping;
 var $33=HEAP8[($32)];
 var $34=$33&1;
 var $35=(($34<<24)>>24)==0;
 if($35){label=12;break;}else{label=11;break;}
 case 11: 
 var $37=(($__grouping+4)|0);
 var $38=HEAP32[(($37)>>2)];
 var $42=$38;label=13;break;
 case 12: 
 var $40=($33&255);
 var $41=$40>>>1;
 var $42=$41;label=13;break;
 case 13: 
 var $42;
 var $43=($42|0)==0;
 if($43){label=17;break;}else{label=14;break;}
 case 14: 
 var $45=HEAP8[($__in_units)];
 var $46=(($45<<24)>>24)==0;
 if($46){var $_0=-1;label=36;break;}else{label=15;break;}
 case 15: 
 var $48=HEAP32[(($__g_end)>>2)];
 var $49=$48;
 var $50=$__g;
 var $51=((($49)-($50))|0);
 var $52=($51|0)<160;
 if($52){label=16;break;}else{var $_0=0;label=36;break;}
 case 16: 
 var $54=HEAP32[(($__dc)>>2)];
 var $55=(($48+4)|0);
 HEAP32[(($__g_end)>>2)]=$55;
 HEAP32[(($48)>>2)]=$54;
 HEAP32[(($__dc)>>2)]=0;
 var $_0=0;label=36;break;
 case 17: 
 var $57=(($__atoms+32)|0);
 var $_01_i=$__atoms;label=19;break;
 case 18: 
 var $59=($63|0)==($57|0);
 if($59){var $_0_lcssa_i=$57;label=20;break;}else{var $_01_i=$63;label=19;break;}
 case 19: 
 var $_01_i;
 var $61=HEAP8[($_01_i)];
 var $62=(($61<<24)>>24)==(($__ct<<24)>>24);
 var $63=(($_01_i+1)|0);
 if($62){var $_0_lcssa_i=$_01_i;label=20;break;}else{label=18;break;}
 case 20: 
 var $_0_lcssa_i;
 var $64=$_0_lcssa_i;
 var $65=$__atoms;
 var $66=((($64)-($65))|0);
 var $67=($66|0)>31;
 if($67){var $_0=-1;label=36;break;}else{label=21;break;}
 case 21: 
 var $69=((9744+$66)|0);
 var $70=HEAP8[($69)];
 if(($66|0)==25|($66|0)==24){ label=22;break;}else if(($66|0)==22|($66|0)==23){ label=25;break;}else{label=26;break;}
 case 22: 
 var $72=HEAP32[(($__a_end)>>2)];
 var $73=($72|0)==($__a|0);
 if($73){label=24;break;}else{label=23;break;}
 case 23: 
 var $75=((($72)-(1))|0);
 var $76=HEAP8[($75)];
 var $77=($76&255);
 var $78=$77&95;
 var $79=HEAP8[($__exp)];
 var $80=($79&255);
 var $81=$80&127;
 var $82=($78|0)==($81|0);
 if($82){label=24;break;}else{var $_0=-1;label=36;break;}
 case 24: 
 var $84=(($72+1)|0);
 HEAP32[(($__a_end)>>2)]=$84;
 HEAP8[($72)]=$70;
 var $_0=0;label=36;break;
 case 25: 
 HEAP8[($__exp)]=80;
 var $85=HEAP32[(($__a_end)>>2)];
 var $86=(($85+1)|0);
 HEAP32[(($__a_end)>>2)]=$86;
 HEAP8[($85)]=$70;
 var $_0=0;label=36;break;
 case 26: 
 var $88=($70&255);
 var $89=$88&95;
 var $90=HEAP8[($__exp)];
 var $91=(($90<<24)>>24);
 var $92=($89|0)==($91|0);
 if($92){label=27;break;}else{label=34;break;}
 case 27: 
 var $94=$90|-128;
 HEAP8[($__exp)]=$94;
 var $95=HEAP8[($__in_units)];
 var $96=(($95<<24)>>24)==0;
 if($96){label=34;break;}else{label=28;break;}
 case 28: 
 HEAP8[($__in_units)]=0;
 var $98=$__grouping;
 var $99=HEAP8[($98)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){label=30;break;}else{label=29;break;}
 case 29: 
 var $103=(($__grouping+4)|0);
 var $104=HEAP32[(($103)>>2)];
 var $108=$104;label=31;break;
 case 30: 
 var $106=($99&255);
 var $107=$106>>>1;
 var $108=$107;label=31;break;
 case 31: 
 var $108;
 var $109=($108|0)==0;
 if($109){label=34;break;}else{label=32;break;}
 case 32: 
 var $111=HEAP32[(($__g_end)>>2)];
 var $112=$111;
 var $113=$__g;
 var $114=((($112)-($113))|0);
 var $115=($114|0)<160;
 if($115){label=33;break;}else{label=34;break;}
 case 33: 
 var $117=HEAP32[(($__dc)>>2)];
 var $118=(($111+4)|0);
 HEAP32[(($__g_end)>>2)]=$118;
 HEAP32[(($111)>>2)]=$117;
 label=34;break;
 case 34: 
 var $120=HEAP32[(($__a_end)>>2)];
 var $121=(($120+1)|0);
 HEAP32[(($__a_end)>>2)]=$121;
 HEAP8[($120)]=$70;
 var $122=($66|0)>21;
 if($122){var $_0=0;label=36;break;}else{label=35;break;}
 case 35: 
 var $124=HEAP32[(($__dc)>>2)];
 var $125=((($124)+(1))|0);
 HEAP32[(($__dc)>>2)]=$125;
 var $_0=0;label=36;break;
 case 36: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg_result,$__iob,$__atoms,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i3=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $__loc=(sp)+(32);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=HEAP32[((13424)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__p_i_i_i_i)|0);
 HEAP32[(($7)>>2)]=13424;
 var $8=(($__p_i_i_i_i+4)|0);
 HEAP32[(($8)>>2)]=(26);
 var $9=(($__p_i_i_i_i+8)|0);
 HEAP32[(($9)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13424,$3,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=17;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $10=HEAP32[((13428)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($2+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=7;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 __ZNSt8bad_castC2Ev($25);
 (function() { try { __THREW__ = 0; return ___cxa_throw($24,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=17;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $27=$22;
 var $28=$22;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+48)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($27,9744,9770,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=17;break; }
 case 8: 
 var $33=HEAP32[(($1)>>2)];
 var $34=$__p_i_i_i_i3;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $35=HEAP32[((13040)>>2)];
 var $36=($35|0)==-1;
 if($36){label=10;break;}else{label=9;break;}
 case 9: 
 var $38=(($__p_i_i_i_i3)|0);
 HEAP32[(($38)>>2)]=13040;
 var $39=(($__p_i_i_i_i3+4)|0);
 HEAP32[(($39)>>2)]=(26);
 var $40=(($__p_i_i_i_i3+8)|0);
 HEAP32[(($40)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13040,$34,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=17;break; }
 case 10: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $41=HEAP32[((13044)>>2)];
 var $42=((($41)-(1))|0);
 var $43=(($33+12)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(($33+8)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=$44;
 var $48=$46;
 var $49=((($47)-($48))|0);
 var $50=$49>>2;
 var $51=($50>>>0)>($42>>>0);
 if($51){label=11;break;}else{label=12;break;}
 case 11: 
 var $52=(($46+($42<<2))|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($53|0)==0;
 if($54){label=12;break;}else{label=14;break;}
 case 12: 
 var $55=___cxa_allocate_exception(4);
 var $56=$55;
 __ZNSt8bad_castC2Ev($56);
 (function() { try { __THREW__ = 0; return ___cxa_throw($55,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=17;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $58=$53;
 var $59=$53;
 var $60=HEAP32[(($59)>>2)];
 var $61=(($60+16)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$62]($58) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=17;break; }
 case 15: 
 HEAP32[(($__thousands_sep)>>2)]=$63;
 var $64=$53;
 var $65=HEAP32[(($64)>>2)];
 var $66=(($65+20)|0);
 var $67=HEAP32[(($66)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$67]($agg_result,$58) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=17;break; }
 case 16: 
 var $68=HEAP32[(($1)>>2)];
 var $69=(($68)|0);
 var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
 STACKTOP=sp;return;
 case 17: 
 var $72$0 = ___cxa_find_matching_catch(-1, -1); var $72$1 = tempRet0;
 var $73=HEAP32[(($1)>>2)];
 var $74=(($73)|0);
 var $75=__ZNSt3__114__shared_count16__release_sharedEv($74);
 ___resumeException($72$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg_result,$__iob,$__atoms,$__decimal_point,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i3=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $__loc=(sp)+(32);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=HEAP32[((13424)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__p_i_i_i_i)|0);
 HEAP32[(($7)>>2)]=13424;
 var $8=(($__p_i_i_i_i+4)|0);
 HEAP32[(($8)>>2)]=(26);
 var $9=(($__p_i_i_i_i+8)|0);
 HEAP32[(($9)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13424,$3,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=18;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $10=HEAP32[((13428)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($2+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=7;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 __ZNSt8bad_castC2Ev($25);
 (function() { try { __THREW__ = 0; return ___cxa_throw($24,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=18;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $27=$22;
 var $28=$22;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+48)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($27,9744,9776,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=18;break; }
 case 8: 
 var $33=HEAP32[(($1)>>2)];
 var $34=$__p_i_i_i_i3;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $35=HEAP32[((13040)>>2)];
 var $36=($35|0)==-1;
 if($36){label=10;break;}else{label=9;break;}
 case 9: 
 var $38=(($__p_i_i_i_i3)|0);
 HEAP32[(($38)>>2)]=13040;
 var $39=(($__p_i_i_i_i3+4)|0);
 HEAP32[(($39)>>2)]=(26);
 var $40=(($__p_i_i_i_i3+8)|0);
 HEAP32[(($40)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13040,$34,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=18;break; }
 case 10: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $41=HEAP32[((13044)>>2)];
 var $42=((($41)-(1))|0);
 var $43=(($33+12)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(($33+8)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=$44;
 var $48=$46;
 var $49=((($47)-($48))|0);
 var $50=$49>>2;
 var $51=($50>>>0)>($42>>>0);
 if($51){label=11;break;}else{label=12;break;}
 case 11: 
 var $52=(($46+($42<<2))|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($53|0)==0;
 if($54){label=12;break;}else{label=14;break;}
 case 12: 
 var $55=___cxa_allocate_exception(4);
 var $56=$55;
 __ZNSt8bad_castC2Ev($56);
 (function() { try { __THREW__ = 0; return ___cxa_throw($55,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $58=$53;
 var $59=$53;
 var $60=HEAP32[(($59)>>2)];
 var $61=(($60+12)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$62]($58) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=18;break; }
 case 15: 
 HEAP32[(($__decimal_point)>>2)]=$63;
 var $64=HEAP32[(($59)>>2)];
 var $65=(($64+16)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$66]($58) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 HEAP32[(($__thousands_sep)>>2)]=$67;
 var $68=$53;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+20)|0);
 var $71=HEAP32[(($70)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$71]($agg_result,$58) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=18;break; }
 case 17: 
 var $72=HEAP32[(($1)>>2)];
 var $73=(($72)|0);
 var $74=__ZNSt3__114__shared_count16__release_sharedEv($73);
 STACKTOP=sp;return;
 case 18: 
 var $76$0 = ___cxa_find_matching_catch(-1, -1); var $76$1 = tempRet0;
 var $77=HEAP32[(($1)>>2)];
 var $78=(($77)|0);
 var $79=__ZNSt3__114__shared_count16__release_sharedEv($78);
 ___resumeException($76$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__ct|0)==($__decimal_point|0);
 if($1){label=2;break;}else{label=9;break;}
 case 2: 
 var $3=HEAP8[($__in_units)];
 var $4=(($3<<24)>>24)==0;
 if($4){var $_0=-1;label=36;break;}else{label=3;break;}
 case 3: 
 HEAP8[($__in_units)]=0;
 var $6=HEAP32[(($__a_end)>>2)];
 var $7=(($6+1)|0);
 HEAP32[(($__a_end)>>2)]=$7;
 HEAP8[($6)]=46;
 var $8=$__grouping;
 var $9=HEAP8[($8)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=5;break;}else{label=4;break;}
 case 4: 
 var $13=(($__grouping+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $18=$14;label=6;break;
 case 5: 
 var $16=($9&255);
 var $17=$16>>>1;
 var $18=$17;label=6;break;
 case 6: 
 var $18;
 var $19=($18|0)==0;
 if($19){var $_0=0;label=36;break;}else{label=7;break;}
 case 7: 
 var $21=HEAP32[(($__g_end)>>2)];
 var $22=$21;
 var $23=$__g;
 var $24=((($22)-($23))|0);
 var $25=($24|0)<160;
 if($25){label=8;break;}else{var $_0=0;label=36;break;}
 case 8: 
 var $27=HEAP32[(($__dc)>>2)];
 var $28=(($21+4)|0);
 HEAP32[(($__g_end)>>2)]=$28;
 HEAP32[(($21)>>2)]=$27;
 var $_0=0;label=36;break;
 case 9: 
 var $30=($__ct|0)==($__thousands_sep|0);
 if($30){label=10;break;}else{label=17;break;}
 case 10: 
 var $32=$__grouping;
 var $33=HEAP8[($32)];
 var $34=$33&1;
 var $35=(($34<<24)>>24)==0;
 if($35){label=12;break;}else{label=11;break;}
 case 11: 
 var $37=(($__grouping+4)|0);
 var $38=HEAP32[(($37)>>2)];
 var $42=$38;label=13;break;
 case 12: 
 var $40=($33&255);
 var $41=$40>>>1;
 var $42=$41;label=13;break;
 case 13: 
 var $42;
 var $43=($42|0)==0;
 if($43){label=17;break;}else{label=14;break;}
 case 14: 
 var $45=HEAP8[($__in_units)];
 var $46=(($45<<24)>>24)==0;
 if($46){var $_0=-1;label=36;break;}else{label=15;break;}
 case 15: 
 var $48=HEAP32[(($__g_end)>>2)];
 var $49=$48;
 var $50=$__g;
 var $51=((($49)-($50))|0);
 var $52=($51|0)<160;
 if($52){label=16;break;}else{var $_0=0;label=36;break;}
 case 16: 
 var $54=HEAP32[(($__dc)>>2)];
 var $55=(($48+4)|0);
 HEAP32[(($__g_end)>>2)]=$55;
 HEAP32[(($48)>>2)]=$54;
 HEAP32[(($__dc)>>2)]=0;
 var $_0=0;label=36;break;
 case 17: 
 var $57=(($__atoms+128)|0);
 var $_01_i=$__atoms;label=19;break;
 case 18: 
 var $59=($63|0)==($57|0);
 if($59){var $_0_lcssa_i=$57;label=20;break;}else{var $_01_i=$63;label=19;break;}
 case 19: 
 var $_01_i;
 var $61=HEAP32[(($_01_i)>>2)];
 var $62=($61|0)==($__ct|0);
 var $63=(($_01_i+4)|0);
 if($62){var $_0_lcssa_i=$_01_i;label=20;break;}else{label=18;break;}
 case 20: 
 var $_0_lcssa_i;
 var $64=$_0_lcssa_i;
 var $65=$__atoms;
 var $66=((($64)-($65))|0);
 var $67=$66>>2;
 var $68=($66|0)>124;
 if($68){var $_0=-1;label=36;break;}else{label=21;break;}
 case 21: 
 var $70=((9744+$67)|0);
 var $71=HEAP8[($70)];
 if(($67|0)==25|($67|0)==24){ label=22;break;}else if(($67|0)==22|($67|0)==23){ label=25;break;}else{label=26;break;}
 case 22: 
 var $73=HEAP32[(($__a_end)>>2)];
 var $74=($73|0)==($__a|0);
 if($74){label=24;break;}else{label=23;break;}
 case 23: 
 var $76=((($73)-(1))|0);
 var $77=HEAP8[($76)];
 var $78=($77&255);
 var $79=$78&95;
 var $80=HEAP8[($__exp)];
 var $81=($80&255);
 var $82=$81&127;
 var $83=($79|0)==($82|0);
 if($83){label=24;break;}else{var $_0=-1;label=36;break;}
 case 24: 
 var $85=(($73+1)|0);
 HEAP32[(($__a_end)>>2)]=$85;
 HEAP8[($73)]=$71;
 var $_0=0;label=36;break;
 case 25: 
 HEAP8[($__exp)]=80;
 label=34;break;
 case 26: 
 var $88=($71&255);
 var $89=$88&95;
 var $90=HEAP8[($__exp)];
 var $91=(($90<<24)>>24);
 var $92=($89|0)==($91|0);
 if($92){label=27;break;}else{label=34;break;}
 case 27: 
 var $94=$90|-128;
 HEAP8[($__exp)]=$94;
 var $95=HEAP8[($__in_units)];
 var $96=(($95<<24)>>24)==0;
 if($96){label=34;break;}else{label=28;break;}
 case 28: 
 HEAP8[($__in_units)]=0;
 var $98=$__grouping;
 var $99=HEAP8[($98)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){label=30;break;}else{label=29;break;}
 case 29: 
 var $103=(($__grouping+4)|0);
 var $104=HEAP32[(($103)>>2)];
 var $108=$104;label=31;break;
 case 30: 
 var $106=($99&255);
 var $107=$106>>>1;
 var $108=$107;label=31;break;
 case 31: 
 var $108;
 var $109=($108|0)==0;
 if($109){label=34;break;}else{label=32;break;}
 case 32: 
 var $111=HEAP32[(($__g_end)>>2)];
 var $112=$111;
 var $113=$__g;
 var $114=((($112)-($113))|0);
 var $115=($114|0)<160;
 if($115){label=33;break;}else{label=34;break;}
 case 33: 
 var $117=HEAP32[(($__dc)>>2)];
 var $118=(($111+4)|0);
 HEAP32[(($__g_end)>>2)]=$118;
 HEAP32[(($111)>>2)]=$117;
 label=34;break;
 case 34: 
 var $120=HEAP32[(($__a_end)>>2)];
 var $121=(($120+1)|0);
 HEAP32[(($__a_end)>>2)]=$121;
 HEAP8[($120)]=$71;
 var $122=($66|0)>84;
 if($122){var $_0=0;label=36;break;}else{label=35;break;}
 case 35: 
 var $124=HEAP32[(($__dc)>>2)];
 var $125=((($124)+(1))|0);
 HEAP32[(($__dc)>>2)]=$125;
 var $_0=0;label=36;break;
 case 36: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $1=(sp)+(16);
 var $2=(sp)+(24);
 var $__nm=(sp)+(32);
 var $3=(($__iob+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4&1;
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$this;
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+24)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($__s)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($1)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=($__v&1);
 FUNCTION_TABLE[$11]($agg_result,$this,$1,$__iob,$__fl,$15);
 label=30;break;
 case 3: 
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $17=(($2)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $20=HEAP32[((13048)>>2)];
 var $21=($20|0)==-1;
 if($21){label=5;break;}else{label=4;break;}
 case 4: 
 var $23=(($__p_i_i_i_i)|0);
 HEAP32[(($23)>>2)]=13048;
 var $24=(($__p_i_i_i_i+4)|0);
 HEAP32[(($24)>>2)]=(26);
 var $25=(($__p_i_i_i_i+8)|0);
 HEAP32[(($25)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13048,$19,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=27;break; }
 case 5: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $26=HEAP32[((13052)>>2)];
 var $27=((($26)-(1))|0);
 var $28=(($18+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($18+8)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$29;
 var $33=$31;
 var $34=((($32)-($33))|0);
 var $35=$34>>2;
 var $36=($35>>>0)>($27>>>0);
 if($36){label=6;break;}else{label=7;break;}
 case 6: 
 var $37=(($31+($27<<2))|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($38|0)==0;
 if($39){label=7;break;}else{label=9;break;}
 case 7: 
 var $40=___cxa_allocate_exception(4);
 var $41=$40;
 __ZNSt8bad_castC2Ev($41);
 (function() { try { __THREW__ = 0; return ___cxa_throw($40,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=27;break; }
 case 8: 
 throw "Reached an unreachable!";
 case 9: 
 var $43=$38;
 var $44=HEAP32[(($17)>>2)];
 var $45=(($44)|0);
 var $46=__ZNSt3__114__shared_count16__release_sharedEv($45);
 var $47=$38;
 var $48=HEAP32[(($47)>>2)];
 if($__v){label=10;break;}else{label=11;break;}
 case 10: 
 var $50=(($48+24)|0);
 var $51=HEAP32[(($50)>>2)];
 FUNCTION_TABLE[$51]($__nm,$43);
 label=12;break;
 case 11: 
 var $53=(($48+28)|0);
 var $54=HEAP32[(($53)>>2)];
 FUNCTION_TABLE[$54]($__nm,$43);
 label=12;break;
 case 12: 
 var $56=$__nm;
 var $57=HEAP8[($56)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=14;break;}else{label=13;break;}
 case 13: 
 var $61=(($__nm+8)|0);
 var $62=HEAP32[(($61)>>2)];
 var $_pre4=$__nm;
 var $_pre5=(($_pre4+1)|0);
 var $_ph=$62;var $_pre_phi6=$_pre5;var $_pre_phi8=$61;label=15;break;
 case 14: 
 var $64=$__nm;
 var $65=(($64+1)|0);
 var $_pre7=(($__nm+8)|0);
 var $_ph=$65;var $_pre_phi6=$65;var $_pre_phi8=$_pre7;label=15;break;
 case 15: 
 var $_pre_phi8;
 var $_pre_phi6;
 var $_ph;
 var $66=(($__s)|0);
 var $67=(($__nm+4)|0);
 var $69=$_ph;var $68=$57;label=16;break;
 case 16: 
 var $68;
 var $69;
 var $70=$68&1;
 var $71=(($70<<24)>>24)==0;
 if($71){label=18;break;}else{label=17;break;}
 case 17: 
 var $73=HEAP32[(($_pre_phi8)>>2)];
 var $74=HEAP32[(($67)>>2)];
 var $79=$74;var $78=$73;label=19;break;
 case 18: 
 var $76=($68&255);
 var $77=$76>>>1;
 var $79=$77;var $78=$_pre_phi6;label=19;break;
 case 19: 
 var $78;
 var $79;
 var $80=(($78+$79)|0);
 var $81=($69|0)==($80|0);
 if($81){label=29;break;}else{label=20;break;}
 case 20: 
 var $83=HEAP8[($69)];
 var $84=HEAP32[(($66)>>2)];
 var $85=($84|0)==0;
 if($85){label=26;break;}else{label=21;break;}
 case 21: 
 var $87=(($84+24)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=(($84+28)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=($88|0)==($90|0);
 if($91){label=23;break;}else{label=22;break;}
 case 22: 
 var $92=(($88+1)|0);
 HEAP32[(($87)>>2)]=$92;
 HEAP8[($88)]=$83;
 label=26;break;
 case 23: 
 var $93=$84;
 var $94=HEAP32[(($93)>>2)];
 var $95=(($94+52)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=($83&255);
 var $98=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$96]($84,$97) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=28;break; }
 case 24: 
 var $99=($98|0)==-1;
 if($99){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP32[(($66)>>2)]=0;
 label=26;break;
 case 26: 
 var $101=(($69+1)|0);
 var $_pre=HEAP8[($56)];
 var $69=$101;var $68=$_pre;label=16;break;
 case 27: 
 var $103$0 = ___cxa_find_matching_catch(-1, -1); var $103$1 = tempRet0;
 var $104=$103$0;
 var $105=$103$1;
 var $106=HEAP32[(($17)>>2)];
 var $107=(($106)|0);
 var $108=__ZNSt3__114__shared_count16__release_sharedEv($107);
 var $_0=$104;var $_01=$105;label=31;break;
 case 28: 
 var $110$0 = ___cxa_find_matching_catch(-1, -1); var $110$1 = tempRet0;
 var $111=$110$0;
 var $112=$110$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
 var $_0=$111;var $_01=$112;label=31;break;
 case 29: 
 var $114=HEAP32[(($66)>>2)];
 var $115=(($agg_result)|0);
 HEAP32[(($115)>>2)]=$114;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
 label=30;break;
 case 30: 
 STACKTOP=sp;return;
 case 31: 
 var $_01;
 var $_0;
 var $118$0=$_0;
 var $118$1=0;
 var $119$0=$118$0;
 var $119$1=$_01;
 ___resumeException($119$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(48);
 var $__oe=(sp)+(56);
 var $1=(sp)+(64);
 var $2=(sp)+(72);
 var $3=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[(2480)];HEAP8[((($3)+(1))|0)]=HEAP8[(2481)];HEAP8[((($3)+(2))|0)]=HEAP8[(2482)];HEAP8[((($3)+(3))|0)]=HEAP8[(2483)];HEAP8[((($3)+(4))|0)]=HEAP8[(2484)];HEAP8[((($3)+(5))|0)]=HEAP8[(2485)];
 var $4=(($__fmt+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__fmt+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$15;label=5;break;
 case 5: 
 var $_13_i_ph;
 HEAP8[($_13_i_ph)]=108;
 var $scevgep=(($_13_i_ph+1)|0);
 var $16=$6&74;
 if(($16|0)==64){ label=6;break;}else if(($16|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $19=$6&16384;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $24=(($__nar)|0);
 var $25=HEAP8[(13992)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=12;break;}else{label=16;break;}
 case 12: 
 var $28=___cxa_guard_acquire(13992);
 var $29=($28|0)==0;
 if($29){label=16;break;}else{label=13;break;}
 case 13: 
 var $31=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((11888)>>2)]=$31;

 label=16;break;
 case 15: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;

 ___resumeException($34$0)
 case 16: 
 var $35=HEAP32[((11888)>>2)];
 var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24,12,$35,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=(($__nar+$36)|0);
 var $38=HEAP32[(($5)>>2)];
 var $39=$38&176;
 if(($39|0)==16){ label=17;break;}else if(($39|0)==32){ var $_0_i1=$37;label=23;break;}else{label=22;break;}
 case 17: 
 var $41=HEAP8[($24)];
 if((($41<<24)>>24)==45|(($41<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $43=(($__nar+1)|0);
 var $_0_i1=$43;label=23;break;
 case 19: 
 var $45=($36|0)>1;
 var $46=(($41<<24)>>24)==48;
 var $or_cond_i=$45&$46;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $48=(($__nar+1)|0);
 var $49=HEAP8[($48)];
 if((($49<<24)>>24)==120|(($49<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $51=(($__nar+2)|0);
 var $_0_i1=$51;label=23;break;
 case 22: 
 var $_0_i1=$24;label=23;break;
 case 23: 
 var $_0_i1;
 var $53=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($24,$_0_i1,$37,$53,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $55=(($1)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56)|0);
 var $58=__ZNSt3__114__shared_count16__release_sharedEv($57);
 var $59=(($__s)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($2)|0);
 HEAP32[(($61)>>2)]=$60;
 var $62=HEAP32[(($__op)>>2)];
 var $63=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$53,$62,$63,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1); var $65$1 = tempRet0;
 var $66=(($1)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67)|0);
 var $69=__ZNSt3__114__shared_count16__release_sharedEv($68);
 ___resumeException($65$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i1=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=HEAP32[((13432)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__p_i_i_i_i)|0);
 HEAP32[(($7)>>2)]=13432;
 var $8=(($__p_i_i_i_i+4)|0);
 HEAP32[(($8)>>2)]=(26);
 var $9=(($__p_i_i_i_i+8)|0);
 HEAP32[(($9)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(13432,$3,260);
 label=3;break;
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $10=HEAP32[((13436)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($2+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 __ZNSt8bad_castC2Ev($25);
 ___cxa_throw($24,8200,(356));
 throw "Reached an unreachable!";
 case 6: 
 var $26=$22;
 var $27=HEAP32[(($1)>>2)];
 var $28=$__p_i_i_i_i1;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $29=HEAP32[((13048)>>2)];
 var $30=($29|0)==-1;
 if($30){label=8;break;}else{label=7;break;}
 case 7: 
 var $32=(($__p_i_i_i_i1)|0);
 HEAP32[(($32)>>2)]=13048;
 var $33=(($__p_i_i_i_i1+4)|0);
 HEAP32[(($33)>>2)]=(26);
 var $34=(($__p_i_i_i_i1+8)|0);
 HEAP32[(($34)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(13048,$28,260);
 label=8;break;
 case 8: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $35=HEAP32[((13052)>>2)];
 var $36=((($35)-(1))|0);
 var $37=(($27+12)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($27+8)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=$38;
 var $42=$40;
 var $43=((($41)-($42))|0);
 var $44=$43>>2;
 var $45=($44>>>0)>($36>>>0);
 if($45){label=9;break;}else{label=10;break;}
 case 9: 
 var $46=(($40+($36<<2))|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($47|0)==0;
 if($48){label=10;break;}else{label=11;break;}
 case 10: 
 var $49=___cxa_allocate_exception(4);
 var $50=$49;
 __ZNSt8bad_castC2Ev($50);
 ___cxa_throw($49,8200,(356));
 throw "Reached an unreachable!";
 case 11: 
 var $51=$47;
 var $52=$47;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+20)|0);
 var $55=HEAP32[(($54)>>2)];
 FUNCTION_TABLE[$55]($__grouping,$51);
 var $56=$__grouping;
 var $57=HEAP8[($56)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=13;break;}else{label=12;break;}
 case 12: 
 var $61=(($__grouping+4)|0);
 var $62=HEAP32[(($61)>>2)];
 var $66=$62;label=14;break;
 case 13: 
 var $64=($57&255);
 var $65=$64>>>1;
 var $66=$65;label=14;break;
 case 14: 
 var $66;
 var $67=($66|0)==0;
 if($67){label=15;break;}else{label=20;break;}
 case 15: 
 var $69=$22;
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+32)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]($26,$__nb,$__ne,$__ob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 var $74=$__ne;
 var $75=$__nb;
 var $76=((($74)-($75))|0);
 var $77=(($__ob+$76)|0);
 HEAP32[(($__oe)>>2)]=$77;
 label=46;break;
 case 17: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=19;break;
 case 19: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 20: 
 HEAP32[(($__oe)>>2)]=$__ob;
 var $80=HEAP8[($__nb)];
 if((($80<<24)>>24)==45|(($80<<24)>>24)==43){ label=21;break;}else{var $__nf_0=$__nb;label=23;break;}
 case 21: 
 var $82=$22;
 var $83=HEAP32[(($82)>>2)];
 var $84=(($83+28)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$85]($26,$80) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=18;break; }
 case 22: 
 var $87=(($__nb+1)|0);
 var $88=HEAP32[(($__oe)>>2)];
 var $89=(($88+1)|0);
 HEAP32[(($__oe)>>2)]=$89;
 HEAP8[($88)]=$86;
 var $__nf_0=$87;label=23;break;
 case 23: 
 var $__nf_0;
 var $91=$__ne;
 var $92=$__nf_0;
 var $93=((($91)-($92))|0);
 var $94=($93|0)>1;
 if($94){label=24;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 24: 
 var $96=HEAP8[($__nf_0)];
 var $97=(($96<<24)>>24)==48;
 if($97){label=25;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 25: 
 var $99=(($__nf_0+1)|0);
 var $100=HEAP8[($99)];
 if((($100<<24)>>24)==120|(($100<<24)>>24)==88){ label=26;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 26: 
 var $102=$22;
 var $103=HEAP32[(($102)>>2)];
 var $104=(($103+28)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$105]($26,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=18;break; }
 case 27: 
 var $107=HEAP32[(($__oe)>>2)];
 var $108=(($107+1)|0);
 HEAP32[(($__oe)>>2)]=$108;
 HEAP8[($107)]=$106;
 var $109=HEAP8[($99)];
 var $110=HEAP32[(($102)>>2)];
 var $111=(($110+28)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($26,$109) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=18;break; }
 case 28: 
 var $114=(($__nf_0+2)|0);
 var $115=HEAP32[(($__oe)>>2)];
 var $116=(($115+1)|0);
 HEAP32[(($__oe)>>2)]=$116;
 HEAP8[($115)]=$113;
 var $__nf_1=$114;label=29;break;
 case 29: 
 var $__nf_1;
 var $118=($__nf_1|0)==($__ne|0);
 if($118){label=32;break;}else{label=30;break;}
 case 30: 
 var $119=((($__ne)-(1))|0);
 var $120=($119>>>0)>($__nf_1>>>0);
 if($120){var $_012_i_i=$__nf_1;var $121=$119;label=31;break;}else{label=32;break;}
 case 31: 
 var $121;
 var $_012_i_i;
 var $122=HEAP8[($_012_i_i)];
 var $123=HEAP8[($121)];
 HEAP8[($_012_i_i)]=$123;
 HEAP8[($121)]=$122;
 var $124=(($_012_i_i+1)|0);
 var $125=((($121)-(1))|0);
 var $126=($124>>>0)<($125>>>0);
 if($126){var $_012_i_i=$124;var $121=$125;label=31;break;}else{label=32;break;}
 case 32: 
 var $127=$47;
 var $128=HEAP32[(($127)>>2)];
 var $129=(($128+16)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$130]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=18;break; }
 case 33: 
 var $132=($__nf_1>>>0)<($__ne>>>0);
 if($132){label=34;break;}else{label=43;break;}
 case 34: 
 var $133=$__grouping;
 var $134=(($133+1)|0);
 var $135=$22;
 var $136=(($__grouping+4)|0);
 var $137=(($__grouping+8)|0);
 var $__dc_013=0;var $__dg_014=0;var $__p_015=$__nf_1;label=35;break;
 case 35: 
 var $__p_015;
 var $__dg_014;
 var $__dc_013;
 var $138=HEAP8[($56)];
 var $139=$138&1;
 var $140=(($139<<24)>>24)==0;
 var $141=HEAP32[(($137)>>2)];
 var $_=($140?$134:$141);
 var $142=(($_+$__dg_014)|0);
 var $143=HEAP8[($142)];
 var $144=(($143<<24)>>24)==0;
 if($144){var $__dg_1=$__dg_014;var $__dc_1=$__dc_013;label=41;break;}else{label=36;break;}
 case 36: 
 var $145=HEAP32[(($137)>>2)];
 var $_16=($140?$134:$145);
 var $146=(($_16+$__dg_014)|0);
 var $147=HEAP8[($146)];
 var $148=(($147<<24)>>24);
 var $149=($__dc_013|0)==($148|0);
 if($149){label=37;break;}else{var $__dg_1=$__dg_014;var $__dc_1=$__dc_013;label=41;break;}
 case 37: 
 var $151=HEAP32[(($__oe)>>2)];
 var $152=(($151+1)|0);
 HEAP32[(($__oe)>>2)]=$152;
 HEAP8[($151)]=$131;
 var $153=HEAP8[($56)];
 var $154=$153&1;
 var $155=(($154<<24)>>24)==0;
 if($155){label=39;break;}else{label=38;break;}
 case 38: 
 var $157=HEAP32[(($136)>>2)];
 var $161=$157;label=40;break;
 case 39: 
 var $159=($153&255);
 var $160=$159>>>1;
 var $161=$160;label=40;break;
 case 40: 
 var $161;
 var $162=((($161)-(1))|0);
 var $163=($__dg_014>>>0)<($162>>>0);
 var $164=($163&1);
 var $___dg_0=((($164)+($__dg_014))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=41;break;
 case 41: 
 var $__dc_1;
 var $__dg_1;
 var $166=HEAP8[($__p_015)];
 var $167=HEAP32[(($135)>>2)];
 var $168=(($167+28)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($26,$166) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=17;break; }
 case 42: 
 var $171=HEAP32[(($__oe)>>2)];
 var $172=(($171+1)|0);
 HEAP32[(($__oe)>>2)]=$172;
 HEAP8[($171)]=$170;
 var $173=((($__dc_1)+(1))|0);
 var $174=(($__p_015+1)|0);
 var $175=($174>>>0)<($__ne>>>0);
 if($175){var $__dc_013=$173;var $__dg_014=$__dg_1;var $__p_015=$174;label=35;break;}else{label=43;break;}
 case 43: 
 var $176=$__nf_1;
 var $177=$__nb;
 var $178=((($176)-($177))|0);
 var $179=(($__ob+$178)|0);
 var $180=HEAP32[(($__oe)>>2)];
 var $181=($179|0)==($180|0);
 if($181){label=46;break;}else{label=44;break;}
 case 44: 
 var $182=((($180)-(1))|0);
 var $183=($182>>>0)>($179>>>0);
 if($183){var $_012_i_i10=$179;var $184=$182;label=45;break;}else{label=46;break;}
 case 45: 
 var $184;
 var $_012_i_i10;
 var $185=HEAP8[($_012_i_i10)];
 var $186=HEAP8[($184)];
 HEAP8[($_012_i_i10)]=$186;
 HEAP8[($184)]=$185;
 var $187=(($_012_i_i10+1)|0);
 var $188=((($184)-(1))|0);
 var $189=($187>>>0)<($188>>>0);
 if($189){var $_012_i_i10=$187;var $184=$188;label=45;break;}else{label=46;break;}
 case 46: 
 var $190=($__np|0)==($__ne|0);
 if($190){label=47;break;}else{label=48;break;}
 case 47: 
 var $192=HEAP32[(($__oe)>>2)];
 var $storemerge=$192;label=49;break;
 case 48: 
 var $194=$__np;
 var $195=$__nb;
 var $196=((($194)-($195))|0);
 var $197=(($__ob+$196)|0);
 var $storemerge=$197;label=49;break;
 case 49: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(80);
 var $__oe=(sp)+(88);
 var $1=(sp)+(96);
 var $2=(sp)+(104);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($3+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$15;label=5;break;
 case 5: 
 var $_13_i_ph;
 var $16=(($_13_i_ph+1)|0);
 HEAP8[($_13_i_ph)]=108;
 HEAP8[($16)]=108;
 var $scevgep=(($_13_i_ph+2)|0);
 var $17=$6&74;
 if(($17|0)==64){ label=6;break;}else if(($17|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $20=$6&16384;
 var $21=($20|0)==0;
 if($21){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $25=(($__nar)|0);
 var $26=HEAP8[(13992)];
 var $27=(($26<<24)>>24)==0;
 if($27){label=12;break;}else{label=16;break;}
 case 12: 
 var $29=___cxa_guard_acquire(13992);
 var $30=($29|0)==0;
 if($30){label=16;break;}else{label=13;break;}
 case 13: 
 var $32=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((11888)>>2)]=$32;

 label=16;break;
 case 15: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;

 ___resumeException($35$0)
 case 16: 
 var $36=HEAP32[((11888)>>2)];
 var $37=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($25,22,$36,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $38=(($__nar+$37)|0);
 var $39=HEAP32[(($5)>>2)];
 var $40=$39&176;
 if(($40|0)==16){ label=17;break;}else if(($40|0)==32){ var $_0_i1=$38;label=23;break;}else{label=22;break;}
 case 17: 
 var $42=HEAP8[($25)];
 if((($42<<24)>>24)==45|(($42<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $44=(($__nar+1)|0);
 var $_0_i1=$44;label=23;break;
 case 19: 
 var $46=($37|0)>1;
 var $47=(($42<<24)>>24)==48;
 var $or_cond_i=$46&$47;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $49=(($__nar+1)|0);
 var $50=HEAP8[($49)];
 if((($50<<24)>>24)==120|(($50<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $52=(($__nar+2)|0);
 var $_0_i1=$52;label=23;break;
 case 22: 
 var $_0_i1=$25;label=23;break;
 case 23: 
 var $_0_i1;
 var $54=(($__o)|0);
 var $$etemp$3$0=41;
 var $$etemp$3$1=0;

 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($25,$_0_i1,$38,$54,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $56=(($1)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 var $60=(($__s)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($2)|0);
 HEAP32[(($62)>>2)]=$61;
 var $63=HEAP32[(($__op)>>2)];
 var $64=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$54,$63,$64,$__iob,$__fl);
 var $$etemp$4$0=41;
 var $$etemp$4$1=0;

 STACKTOP=sp;return;
 case 25: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 var $67=(($1)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68)|0);
 var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
 ___resumeException($66$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(48);
 var $__oe=(sp)+(56);
 var $1=(sp)+(64);
 var $2=(sp)+(72);
 var $3=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[(2480)];HEAP8[((($3)+(1))|0)]=HEAP8[(2481)];HEAP8[((($3)+(2))|0)]=HEAP8[(2482)];HEAP8[((($3)+(3))|0)]=HEAP8[(2483)];HEAP8[((($3)+(4))|0)]=HEAP8[(2484)];HEAP8[((($3)+(5))|0)]=HEAP8[(2485)];
 var $4=(($__fmt+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__fmt+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$15;label=5;break;
 case 5: 
 var $_13_i_ph;
 HEAP8[($_13_i_ph)]=108;
 var $scevgep=(($_13_i_ph+1)|0);
 var $16=$6&74;
 if(($16|0)==64){ label=6;break;}else if(($16|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $19=$6&16384;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $24=(($__nar)|0);
 var $25=HEAP8[(13992)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=12;break;}else{label=16;break;}
 case 12: 
 var $28=___cxa_guard_acquire(13992);
 var $29=($28|0)==0;
 if($29){label=16;break;}else{label=13;break;}
 case 13: 
 var $31=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((11888)>>2)]=$31;

 label=16;break;
 case 15: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;

 ___resumeException($34$0)
 case 16: 
 var $35=HEAP32[((11888)>>2)];
 var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24,12,$35,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=(($__nar+$36)|0);
 var $38=HEAP32[(($5)>>2)];
 var $39=$38&176;
 if(($39|0)==16){ label=17;break;}else if(($39|0)==32){ var $_0_i1=$37;label=23;break;}else{label=22;break;}
 case 17: 
 var $41=HEAP8[($24)];
 if((($41<<24)>>24)==45|(($41<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $43=(($__nar+1)|0);
 var $_0_i1=$43;label=23;break;
 case 19: 
 var $45=($36|0)>1;
 var $46=(($41<<24)>>24)==48;
 var $or_cond_i=$45&$46;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $48=(($__nar+1)|0);
 var $49=HEAP8[($48)];
 if((($49<<24)>>24)==120|(($49<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $51=(($__nar+2)|0);
 var $_0_i1=$51;label=23;break;
 case 22: 
 var $_0_i1=$24;label=23;break;
 case 23: 
 var $_0_i1;
 var $53=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($24,$_0_i1,$37,$53,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $55=(($1)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56)|0);
 var $58=__ZNSt3__114__shared_count16__release_sharedEv($57);
 var $59=(($__s)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($2)|0);
 HEAP32[(($61)>>2)]=$60;
 var $62=HEAP32[(($__op)>>2)];
 var $63=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$53,$62,$63,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1); var $65$1 = tempRet0;
 var $66=(($1)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67)|0);
 var $69=__ZNSt3__114__shared_count16__release_sharedEv($68);
 ___resumeException($65$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(80);
 var $__oe=(sp)+(88);
 var $1=(sp)+(96);
 var $2=(sp)+(104);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($3+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$15;label=5;break;
 case 5: 
 var $_13_i_ph;
 var $16=(($_13_i_ph+1)|0);
 HEAP8[($_13_i_ph)]=108;
 HEAP8[($16)]=108;
 var $scevgep=(($_13_i_ph+2)|0);
 var $17=$6&74;
 if(($17|0)==64){ label=6;break;}else if(($17|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $20=$6&16384;
 var $21=($20|0)==0;
 if($21){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $25=(($__nar)|0);
 var $26=HEAP8[(13992)];
 var $27=(($26<<24)>>24)==0;
 if($27){label=12;break;}else{label=16;break;}
 case 12: 
 var $29=___cxa_guard_acquire(13992);
 var $30=($29|0)==0;
 if($30){label=16;break;}else{label=13;break;}
 case 13: 
 var $32=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((11888)>>2)]=$32;

 label=16;break;
 case 15: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;

 ___resumeException($35$0)
 case 16: 
 var $36=HEAP32[((11888)>>2)];
 var $37=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($25,23,$36,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $38=(($__nar+$37)|0);
 var $39=HEAP32[(($5)>>2)];
 var $40=$39&176;
 if(($40|0)==16){ label=17;break;}else if(($40|0)==32){ var $_0_i1=$38;label=23;break;}else{label=22;break;}
 case 17: 
 var $42=HEAP8[($25)];
 if((($42<<24)>>24)==45|(($42<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $44=(($__nar+1)|0);
 var $_0_i1=$44;label=23;break;
 case 19: 
 var $46=($37|0)>1;
 var $47=(($42<<24)>>24)==48;
 var $or_cond_i=$46&$47;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $49=(($__nar+1)|0);
 var $50=HEAP8[($49)];
 if((($50<<24)>>24)==120|(($50<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $52=(($__nar+2)|0);
 var $_0_i1=$52;label=23;break;
 case 22: 
 var $_0_i1=$25;label=23;break;
 case 23: 
 var $_0_i1;
 var $54=(($__o)|0);
 var $$etemp$3$0=43;
 var $$etemp$3$1=0;

 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($25,$_0_i1,$38,$54,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $56=(($1)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 var $60=(($__s)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($2)|0);
 HEAP32[(($62)>>2)]=$61;
 var $63=HEAP32[(($__op)>>2)];
 var $64=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$54,$63,$64,$__iob,$__fl);
 var $$etemp$4$0=43;
 var $$etemp$4$1=0;

 STACKTOP=sp;return;
 case 25: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 var $67=(($1)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68)|0);
 var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
 ___resumeException($66$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+152)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(sp)+(136);
 var $3=(sp)+(144);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=$__fmt;
 var $5=(($4+1)|0);
 var $6=(($__iob+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&2048;
 var $9=($8|0)==0;
 if($9){var $_0_i=$5;label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($4+2)|0);
 HEAP8[($5)]=43;
 var $_0_i=$11;label=3;break;
 case 3: 
 var $_0_i;
 var $13=$7&1024;
 var $14=($13|0)==0;
 if($14){var $_1_i=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $16=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_1_i=$16;label=5;break;
 case 5: 
 var $_1_i;
 var $18=$7&260;
 var $19=$7>>>14;
 var $20=($18|0)==260;
 if($20){label=13;break;}else{label=6;break;}
 case 6: 
 var $21=(($_1_i+1)|0);
 HEAP8[($_1_i)]=46;
 var $22=(($_1_i+2)|0);
 HEAP8[($21)]=42;
 if(($18|0)==256){ label=10;break;}else if(($18|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $24=$19&1;
 var $25=($24|0)==0;
 if($25){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($22)]=70;
 var $specify_precision_0_off0_ph_i14=1;label=19;break;
 case 9: 
 HEAP8[($22)]=102;
 var $specify_precision_0_off0_ph_i14=1;label=19;break;
 case 10: 
 var $29=$19&1;
 var $30=($29|0)==0;
 if($30){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($22)]=69;
 var $specify_precision_0_off0_ph_i14=1;label=19;break;
 case 12: 
 HEAP8[($22)]=101;
 var $specify_precision_0_off0_ph_i14=1;label=19;break;
 case 13: 
 var $34=$19&1;
 var $35=($34|0)==0;
 if($35){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($_1_i)]=65;
 var $specify_precision_0_off0_ph_i14=0;label=19;break;
 case 15: 
 HEAP8[($_1_i)]=97;
 var $specify_precision_0_off0_ph_i14=0;label=19;break;
 case 16: 
 var $39=$19&1;
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($22)]=71;
 var $specify_precision_0_off0_ph_i14=1;label=19;break;
 case 18: 
 HEAP8[($22)]=103;
 var $specify_precision_0_off0_ph_i14=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i14;
 var $43=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$43;
 var $44=HEAP8[(13992)];
 var $45=(($44<<24)>>24)==0;
 if($45){label=20;break;}else{label=24;break;}
 case 20: 
 var $47=___cxa_guard_acquire(13992);
 var $48=($47|0)==0;
 if($48){label=24;break;}else{label=21;break;}
 case 21: 
 var $50=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((11888)>>2)]=$50;

 label=24;break;
 case 23: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;

 ___resumeException($53$0)
 case 24: 
 var $54=HEAP32[((11888)>>2)];
 if($specify_precision_0_off0_ph_i14){label=25;break;}else{label=26;break;}
 case 25: 
 var $56=(($__iob+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$57,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$58;label=27;break;
 case 26: 
 var $60=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$60;label=27;break;
 case 27: 
 var $__nc_0;
 var $62=($__nc_0|0)>29;
 if($62){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre21=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $103=0;var $102=$_pre21;label=47;break;
 case 29: 
 var $64=HEAP8[(13992)];
 var $65=(($64<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i14){label=30;break;}else{label=38;break;}
 case 30: 
 if($65){label=31;break;}else{label=35;break;}
 case 31: 
 var $68=___cxa_guard_acquire(13992);
 var $69=($68|0)==0;
 if($69){label=35;break;}else{label=32;break;}
 case 32: 
 var $71=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((11888)>>2)]=$71;

 label=35;break;
 case 34: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1); var $74$1 = tempRet0;

 var $eh_lpad_body$1=$74$1;var $eh_lpad_body$0=$74$0;label=37;break;
 case 35: 
 var $76=HEAP32[((11888)>>2)];
 var $77=(($__iob+8)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$76,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$78,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$79;label=44;break; } else { label=36;break; }
 case 36: 
 var $81$0 = ___cxa_find_matching_catch(-1, -1); var $81$1 = tempRet0;
 var $eh_lpad_body$1=$81$1;var $eh_lpad_body$0=$81$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $82=$eh_lpad_body$0;
 var $83=$eh_lpad_body$1;
 var $_1219=$83;var $_120=$82;label=76;break;
 case 38: 
 if($65){label=39;break;}else{label=43;break;}
 case 39: 
 var $86=___cxa_guard_acquire(13992);
 var $87=($86|0)==0;
 if($87){label=43;break;}else{label=40;break;}
 case 40: 
 var $89=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((11888)>>2)]=$89;

 label=43;break;
 case 42: 
 var $92$0 = ___cxa_find_matching_catch(-1, -1); var $92$1 = tempRet0;

 var $eh_lpad_body$1=$92$1;var $eh_lpad_body$0=$92$0;label=37;break;
 case 43: 
 var $94=HEAP32[((11888)>>2)];
 var $95=(($__iob+8)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$94,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$96,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$97;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $99=HEAP32[(($__nb)>>2)];
 var $100=($99|0)==0;
 if($100){label=45;break;}else{var $__nc_2=$__nc_1;var $103=$99;var $102=$99;label=47;break;}
 case 45: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 var $_pre=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_1;var $103=$_pre;var $102=$_pre;label=47;break;
 case 47: 
 var $102;
 var $103;
 var $__nc_2;
 var $104=(($102+$__nc_2)|0);
 var $105=HEAP32[(($6)>>2)];
 var $106=$105&176;
 if(($106|0)==16){ label=48;break;}else if(($106|0)==32){ var $_0_i7=$104;label=54;break;}else{label=53;break;}
 case 48: 
 var $108=HEAP8[($102)];
 if((($108<<24)>>24)==45|(($108<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $110=(($102+1)|0);
 var $_0_i7=$110;label=54;break;
 case 50: 
 var $112=($__nc_2|0)>1;
 var $113=(($108<<24)>>24)==48;
 var $or_cond_i=$112&$113;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $115=(($102+1)|0);
 var $116=HEAP8[($115)];
 if((($116<<24)>>24)==120|(($116<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $118=(($102+2)|0);
 var $_0_i7=$118;label=54;break;
 case 53: 
 var $_0_i7=$102;label=54;break;
 case 54: 
 var $_0_i7;
 var $120=(($__o)|0);
 var $$etemp$3$0=57;
 var $$etemp$3$1=0;

 var $121=($102|0)==($43|0);
 if($121){var $__ob_0=$120;var $133=0;var $132=$43;label=59;break;}else{label=55;break;}
 case 55: 
 var $123=$__nc_2<<1;
 var $124=_malloc($123);
 var $125=($124|0)==0;
 if($125){label=56;break;}else{var $__ob_0=$124;var $133=$124;var $132=$102;label=59;break;}
 case 56: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $128=0;label=58;break; }
 case 57: 
 var $_pre22=HEAP32[(($__nb)>>2)];
 var $__ob_0=0;var $133=0;var $132=$_pre22;label=59;break;
 case 58: 
 var $128;
 var $129$0 = ___cxa_find_matching_catch(-1, -1); var $129$1 = tempRet0;
 var $130=$129$0;
 var $131=$129$1;
 var $_0=$130;var $_01=$131;var $168=$128;label=70;break;
 case 59: 
 var $132;
 var $133;
 var $__ob_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($1,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { var $128=$133;label=58;break; }
 case 60: 
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($132,$_0_i7,$104,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=69;break; }
 case 61: 
 var $136=(($1)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=(($137)|0);
 var $139=__ZNSt3__114__shared_count16__release_sharedEv($138);
 var $140=(($__s)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=(($3)|0);
 HEAP32[(($142)>>2)]=$141;
 var $143=HEAP32[(($__op)>>2)];
 var $144=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$3,$__ob_0,$143,$144,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { var $128=$133;label=58;break; }
 case 62: 
 var $146=(($2)|0);
 var $147=HEAP32[(($146)>>2)];
 HEAP32[(($140)>>2)]=$147;
 var $148=(($agg_result)|0);
 HEAP32[(($148)>>2)]=$147;
 var $149=($133|0)==0;
 if($149){label=65;break;}else{label=63;break;}
 case 63: 
 (function() { try { __THREW__ = 0; return _free($133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=64;break; }
 case 64: 
 var $152$0 = ___cxa_find_matching_catch(-1, -1,0); var $152$1 = tempRet0;
 var $153=$152$0;
 ___clang_call_terminate($153);
 throw "Reached an unreachable!";
 case 65: 
 var $$etemp$4$0=57;
 var $$etemp$4$1=0;

 var $154=($103|0)==0;
 if($154){label=68;break;}else{label=66;break;}
 case 66: 
 (function() { try { __THREW__ = 0; return _free($103) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=67;break; }
 case 67: 
 var $157$0 = ___cxa_find_matching_catch(-1, -1,0); var $157$1 = tempRet0;
 var $158=$157$0;
 ___clang_call_terminate($158);
 throw "Reached an unreachable!";
 case 68: 
 STACKTOP=sp;return;
 case 69: 
 var $160$0 = ___cxa_find_matching_catch(-1, -1); var $160$1 = tempRet0;
 var $161=$160$0;
 var $162=$160$1;
 var $163=(($1)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=(($164)|0);
 var $166=__ZNSt3__114__shared_count16__release_sharedEv($165);
 var $_0=$161;var $_01=$162;var $168=$133;label=70;break;
 case 70: 
 var $168;
 var $_01;
 var $_0;
 var $169=($168|0)==0;
 if($169){label=73;break;}else{label=71;break;}
 case 71: 
 (function() { try { __THREW__ = 0; return _free($168) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=73;break; } else { label=72;break; }
 case 72: 
 var $172$0 = ___cxa_find_matching_catch(-1, -1,0); var $172$1 = tempRet0;
 var $173=$172$0;
 ___clang_call_terminate($173);
 throw "Reached an unreachable!";
 case 73: 
 var $174=($103|0)==0;
 if($174){var $_1219=$_01;var $_120=$_0;label=76;break;}else{label=74;break;}
 case 74: 
 (function() { try { __THREW__ = 0; return _free($103) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_1219=$_01;var $_120=$_0;label=76;break; } else { label=75;break; }
 case 75: 
 var $177$0 = ___cxa_find_matching_catch(-1, -1,0); var $177$1 = tempRet0;
 var $178=$177$0;
 ___clang_call_terminate($178);
 throw "Reached an unreachable!";
 case 76: 
 var $_120;
 var $_1219;
 var $179$0=$_120;
 var $179$1=0;
 var $180$0=$179$0;
 var $180$1=$_1219;
 ___resumeException($180$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i1=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=HEAP32[((13432)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__p_i_i_i_i)|0);
 HEAP32[(($7)>>2)]=13432;
 var $8=(($__p_i_i_i_i+4)|0);
 HEAP32[(($8)>>2)]=(26);
 var $9=(($__p_i_i_i_i+8)|0);
 HEAP32[(($9)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(13432,$3,260);
 label=3;break;
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $10=HEAP32[((13436)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($2+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 __ZNSt8bad_castC2Ev($25);
 ___cxa_throw($24,8200,(356));
 throw "Reached an unreachable!";
 case 6: 
 var $26=$22;
 var $27=HEAP32[(($1)>>2)];
 var $28=$__p_i_i_i_i1;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $29=HEAP32[((13048)>>2)];
 var $30=($29|0)==-1;
 if($30){label=8;break;}else{label=7;break;}
 case 7: 
 var $32=(($__p_i_i_i_i1)|0);
 HEAP32[(($32)>>2)]=13048;
 var $33=(($__p_i_i_i_i1+4)|0);
 HEAP32[(($33)>>2)]=(26);
 var $34=(($__p_i_i_i_i1+8)|0);
 HEAP32[(($34)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(13048,$28,260);
 label=8;break;
 case 8: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $35=HEAP32[((13052)>>2)];
 var $36=((($35)-(1))|0);
 var $37=(($27+12)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($27+8)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=$38;
 var $42=$40;
 var $43=((($41)-($42))|0);
 var $44=$43>>2;
 var $45=($44>>>0)>($36>>>0);
 if($45){label=9;break;}else{label=10;break;}
 case 9: 
 var $46=(($40+($36<<2))|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($47|0)==0;
 if($48){label=10;break;}else{label=11;break;}
 case 10: 
 var $49=___cxa_allocate_exception(4);
 var $50=$49;
 __ZNSt8bad_castC2Ev($50);
 ___cxa_throw($49,8200,(356));
 throw "Reached an unreachable!";
 case 11: 
 var $51=$47;
 var $52=$47;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+20)|0);
 var $55=HEAP32[(($54)>>2)];
 FUNCTION_TABLE[$55]($__grouping,$51);
 HEAP32[(($__oe)>>2)]=$__ob;
 var $56=HEAP8[($__nb)];
 if((($56<<24)>>24)==45|(($56<<24)>>24)==43){ label=12;break;}else{var $__nf_0=$__nb;label=20;break;}
 case 12: 
 var $58=$22;
 var $59=HEAP32[(($58)>>2)];
 var $60=(($59+28)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$61]($26,$56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 var $63=(($__nb+1)|0);
 var $64=HEAP32[(($__oe)>>2)];
 var $65=(($64+1)|0);
 HEAP32[(($__oe)>>2)]=$65;
 HEAP8[($64)]=$62;
 var $__nf_0=$63;label=20;break;
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=19;break;
 case 15: 
 var $lpad_loopexit22$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit22$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit22$1;var $eh_lpad_body$0=$lpad_loopexit22$0;label=19;break;
 case 16: 
 var $lpad_loopexit30$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit30$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit30$1;var $eh_lpad_body$0=$lpad_loopexit30$0;label=19;break;
 case 17: 
 var $lpad_loopexit38$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit38$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit38$1;var $eh_lpad_body$0=$lpad_loopexit38$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit39$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit39$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit39$1;var $eh_lpad_body$0=$lpad_nonloopexit39$0;label=19;break;
 case 19: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($eh_lpad_body$0)
 case 20: 
 var $__nf_0;
 var $67=$__ne;
 var $68=$__nf_0;
 var $69=((($67)-($68))|0);
 var $70=($69|0)>1;
 if($70){label=22;break;}else{label=21;break;}
 case 21: 
 var $71=($__nf_0>>>0)<($__ne>>>0);
 if($71){var $__ns_134=$__nf_0;label=36;break;}else{var $__nf_1=$__nf_0;var $__ns_2=$__nf_0;label=43;break;}
 case 22: 
 var $73=HEAP8[($__nf_0)];
 var $74=(($73<<24)>>24)==48;
 if($74){label=23;break;}else{label=21;break;}
 case 23: 
 var $76=(($__nf_0+1)|0);
 var $77=HEAP8[($76)];
 if((($77<<24)>>24)==120|(($77<<24)>>24)==88){ label=24;break;}else{label=21;break;}
 case 24: 
 var $79=$22;
 var $80=HEAP32[(($79)>>2)];
 var $81=(($80+28)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$82]($26,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 var $84=HEAP32[(($__oe)>>2)];
 var $85=(($84+1)|0);
 HEAP32[(($__oe)>>2)]=$85;
 HEAP8[($84)]=$83;
 var $86=(($__nf_0+2)|0);
 var $87=HEAP8[($76)];
 var $88=HEAP32[(($79)>>2)];
 var $89=(($88+28)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$90]($26,$87) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=18;break; }
 case 26: 
 var $92=HEAP32[(($__oe)>>2)];
 var $93=(($92+1)|0);
 HEAP32[(($__oe)>>2)]=$93;
 HEAP8[($92)]=$91;
 var $94=($86>>>0)<($__ne>>>0);
 if($94){var $__ns_043=$86;label=28;break;}else{var $__nf_1=$86;var $__ns_2=$86;label=43;break;}
 case 27: 
 var $96=($114>>>0)<($__ne>>>0);
 if($96){var $__ns_043=$114;label=28;break;}else{var $__nf_1=$86;var $__ns_2=$114;label=43;break;}
 case 28: 
 var $__ns_043;
 var $97=HEAP8[($__ns_043)];
 var $98=HEAP8[(13992)];
 var $99=(($98<<24)>>24)==0;
 if($99){label=29;break;}else{label=33;break;}
 case 29: 
 var $101=___cxa_guard_acquire(13992);
 var $102=($101|0)==0;
 if($102){label=33;break;}else{label=30;break;}
 case 30: 
 var $104=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=32;break; }
 case 31: 
 HEAP32[((11888)>>2)]=$104;

 label=33;break;
 case 32: 
 var $107$0 = ___cxa_find_matching_catch(-1, -1); var $107$1 = tempRet0;

 var $eh_lpad_body$1=$107$1;var $eh_lpad_body$0=$107$0;label=19;break;
 case 33: 
 var $109=HEAP32[((11888)>>2)];
 var $110=(($97<<24)>>24);
 var $111=(function() { try { __THREW__ = 0; return _isxdigit_l($110,$109) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=17;break; }
 case 34: 
 var $113=($111|0)==0;
 var $114=(($__ns_043+1)|0);
 if($113){var $__nf_1=$86;var $__ns_2=$__ns_043;label=43;break;}else{label=27;break;}
 case 35: 
 var $116=($134>>>0)<($__ne>>>0);
 if($116){var $__ns_134=$134;label=36;break;}else{var $__nf_1=$__nf_0;var $__ns_2=$134;label=43;break;}
 case 36: 
 var $__ns_134;
 var $117=HEAP8[($__ns_134)];
 var $118=HEAP8[(13992)];
 var $119=(($118<<24)>>24)==0;
 if($119){label=37;break;}else{label=41;break;}
 case 37: 
 var $121=___cxa_guard_acquire(13992);
 var $122=($121|0)==0;
 if($122){label=41;break;}else{label=38;break;}
 case 38: 
 var $124=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=40;break; }
 case 39: 
 HEAP32[((11888)>>2)]=$124;

 label=41;break;
 case 40: 
 var $127$0 = ___cxa_find_matching_catch(-1, -1); var $127$1 = tempRet0;

 var $eh_lpad_body$1=$127$1;var $eh_lpad_body$0=$127$0;label=19;break;
 case 41: 
 var $129=HEAP32[((11888)>>2)];
 var $130=(($117<<24)>>24);
 var $131=(function() { try { __THREW__ = 0; return _isdigit_l($130,$129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=16;break; }
 case 42: 
 var $133=($131|0)==0;
 var $134=(($__ns_134+1)|0);
 if($133){var $__nf_1=$__nf_0;var $__ns_2=$__ns_134;label=43;break;}else{label=35;break;}
 case 43: 
 var $__ns_2;
 var $__nf_1;
 var $135=$__grouping;
 var $136=HEAP8[($135)];
 var $137=$136&1;
 var $138=(($137<<24)>>24)==0;
 if($138){label=45;break;}else{label=44;break;}
 case 44: 
 var $140=(($__grouping+4)|0);
 var $141=HEAP32[(($140)>>2)];
 var $145=$141;label=46;break;
 case 45: 
 var $143=($136&255);
 var $144=$143>>>1;
 var $145=$144;label=46;break;
 case 46: 
 var $145;
 var $146=($145|0)==0;
 if($146){label=47;break;}else{label=49;break;}
 case 47: 
 var $148=HEAP32[(($__oe)>>2)];
 var $149=$22;
 var $150=HEAP32[(($149)>>2)];
 var $151=(($150+32)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$152]($26,$__nf_1,$__ns_2,$148) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=18;break; }
 case 48: 
 var $154=$__ns_2;
 var $155=$__nf_1;
 var $156=((($154)-($155))|0);
 var $157=HEAP32[(($__oe)>>2)];
 var $158=(($157+$156)|0);
 HEAP32[(($__oe)>>2)]=$158;
 label=66;break;
 case 49: 
 var $160=($__nf_1|0)==($__ns_2|0);
 if($160){label=52;break;}else{label=50;break;}
 case 50: 
 var $161=((($__ns_2)-(1))|0);
 var $162=($161>>>0)>($__nf_1>>>0);
 if($162){var $_012_i_i=$__nf_1;var $163=$161;label=51;break;}else{label=52;break;}
 case 51: 
 var $163;
 var $_012_i_i;
 var $164=HEAP8[($_012_i_i)];
 var $165=HEAP8[($163)];
 HEAP8[($_012_i_i)]=$165;
 HEAP8[($163)]=$164;
 var $166=(($_012_i_i+1)|0);
 var $167=((($163)-(1))|0);
 var $168=($166>>>0)<($167>>>0);
 if($168){var $_012_i_i=$166;var $163=$167;label=51;break;}else{label=52;break;}
 case 52: 
 var $169=$47;
 var $170=HEAP32[(($169)>>2)];
 var $171=(($170+16)|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$172]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=18;break; }
 case 53: 
 var $174=($__nf_1>>>0)<($__ns_2>>>0);
 if($174){label=54;break;}else{label=63;break;}
 case 54: 
 var $175=$__grouping;
 var $176=(($175+1)|0);
 var $177=(($__grouping+4)|0);
 var $178=(($__grouping+8)|0);
 var $179=$22;
 var $__dc_025=0;var $__dg_026=0;var $__p_027=$__nf_1;label=55;break;
 case 55: 
 var $__p_027;
 var $__dg_026;
 var $__dc_025;
 var $180=HEAP8[($135)];
 var $181=$180&1;
 var $182=(($181<<24)>>24)==0;
 var $183=HEAP32[(($178)>>2)];
 var $_=($182?$176:$183);
 var $184=(($_+$__dg_026)|0);
 var $185=HEAP8[($184)];
 var $186=(($185<<24)>>24)>0;
 if($186){label=56;break;}else{var $__dg_1=$__dg_026;var $__dc_1=$__dc_025;label=61;break;}
 case 56: 
 var $187=HEAP32[(($178)>>2)];
 var $_58=($182?$176:$187);
 var $188=(($_58+$__dg_026)|0);
 var $189=HEAP8[($188)];
 var $190=(($189<<24)>>24);
 var $191=($__dc_025|0)==($190|0);
 if($191){label=57;break;}else{var $__dg_1=$__dg_026;var $__dc_1=$__dc_025;label=61;break;}
 case 57: 
 var $193=HEAP32[(($__oe)>>2)];
 var $194=(($193+1)|0);
 HEAP32[(($__oe)>>2)]=$194;
 HEAP8[($193)]=$173;
 var $195=HEAP8[($135)];
 var $196=$195&1;
 var $197=(($196<<24)>>24)==0;
 if($197){label=59;break;}else{label=58;break;}
 case 58: 
 var $199=HEAP32[(($177)>>2)];
 var $203=$199;label=60;break;
 case 59: 
 var $201=($195&255);
 var $202=$201>>>1;
 var $203=$202;label=60;break;
 case 60: 
 var $203;
 var $204=((($203)-(1))|0);
 var $205=($__dg_026>>>0)<($204>>>0);
 var $206=($205&1);
 var $___dg_0=((($206)+($__dg_026))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=61;break;
 case 61: 
 var $__dc_1;
 var $__dg_1;
 var $208=HEAP8[($__p_027)];
 var $209=HEAP32[(($179)>>2)];
 var $210=(($209+28)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$211]($26,$208) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=15;break; }
 case 62: 
 var $213=HEAP32[(($__oe)>>2)];
 var $214=(($213+1)|0);
 HEAP32[(($__oe)>>2)]=$214;
 HEAP8[($213)]=$212;
 var $215=((($__dc_1)+(1))|0);
 var $216=(($__p_027+1)|0);
 var $217=($216>>>0)<($__ns_2>>>0);
 if($217){var $__dc_025=$215;var $__dg_026=$__dg_1;var $__p_027=$216;label=55;break;}else{label=63;break;}
 case 63: 
 var $218=$__nf_1;
 var $219=$__nb;
 var $220=((($218)-($219))|0);
 var $221=(($__ob+$220)|0);
 var $222=HEAP32[(($__oe)>>2)];
 var $223=($221|0)==($222|0);
 if($223){label=66;break;}else{label=64;break;}
 case 64: 
 var $224=((($222)-(1))|0);
 var $225=($224>>>0)>($221>>>0);
 if($225){var $_012_i_i13=$221;var $226=$224;label=65;break;}else{label=66;break;}
 case 65: 
 var $226;
 var $_012_i_i13;
 var $227=HEAP8[($_012_i_i13)];
 var $228=HEAP8[($226)];
 HEAP8[($_012_i_i13)]=$228;
 HEAP8[($226)]=$227;
 var $229=(($_012_i_i13+1)|0);
 var $230=((($226)-(1))|0);
 var $231=($229>>>0)<($230>>>0);
 if($231){var $_012_i_i13=$229;var $226=$230;label=65;break;}else{label=66;break;}
 case 66: 
 var $232=($__ns_2>>>0)<($__ne>>>0);
 if($232){label=67;break;}else{var $__nf_3=$__ns_2;label=73;break;}
 case 67: 
 var $233=$22;
 var $__nf_221=$__ns_2;label=68;break;
 case 68: 
 var $__nf_221;
 var $235=HEAP8[($__nf_221)];
 var $236=(($235<<24)>>24)==46;
 if($236){label=69;break;}else{label=71;break;}
 case 69: 
 var $238=$47;
 var $239=HEAP32[(($238)>>2)];
 var $240=(($239+12)|0);
 var $241=HEAP32[(($240)>>2)];
 var $242=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$241]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=70;break; } else { label=18;break; }
 case 70: 
 var $243=HEAP32[(($__oe)>>2)];
 var $244=(($243+1)|0);
 HEAP32[(($__oe)>>2)]=$244;
 HEAP8[($243)]=$242;
 var $245=(($__nf_221+1)|0);
 var $__nf_3=$245;label=73;break;
 case 71: 
 var $247=HEAP32[(($233)>>2)];
 var $248=(($247+28)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$249]($26,$235) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=14;break; }
 case 72: 
 var $251=HEAP32[(($__oe)>>2)];
 var $252=(($251+1)|0);
 HEAP32[(($__oe)>>2)]=$252;
 HEAP8[($251)]=$250;
 var $253=(($__nf_221+1)|0);
 var $254=($253>>>0)<($__ne>>>0);
 if($254){var $__nf_221=$253;label=68;break;}else{var $__nf_3=$253;label=73;break;}
 case 73: 
 var $__nf_3;
 var $255=HEAP32[(($__oe)>>2)];
 var $256=$22;
 var $257=HEAP32[(($256)>>2)];
 var $258=(($257+32)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$259]($26,$__nf_3,$__ne,$255) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=18;break; }
 case 74: 
 var $261=$__nf_3;
 var $262=((($67)-($261))|0);
 var $263=HEAP32[(($__oe)>>2)];
 var $264=(($263+$262)|0);
 HEAP32[(($__oe)>>2)]=$264;
 var $265=($__np|0)==($__ne|0);
 if($265){var $storemerge=$264;label=76;break;}else{label=75;break;}
 case 75: 
 var $267=$__np;
 var $268=$__nb;
 var $269=((($267)-($268))|0);
 var $270=(($__ob+$269)|0);
 var $storemerge=$270;label=76;break;
 case 76: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+152)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(sp)+(136);
 var $3=(sp)+(144);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=$__fmt;
 var $5=(($4+1)|0);
 var $6=(($__iob+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&2048;
 var $9=($8|0)==0;
 if($9){var $_0_i=$5;label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($4+2)|0);
 HEAP8[($5)]=43;
 var $_0_i=$11;label=3;break;
 case 3: 
 var $_0_i;
 var $13=$7&1024;
 var $14=($13|0)==0;
 if($14){var $_1_i=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $16=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_1_i=$16;label=5;break;
 case 5: 
 var $_1_i;
 var $18=$7&260;
 var $19=$7>>>14;
 var $20=($18|0)==260;
 if($20){label=13;break;}else{label=6;break;}
 case 6: 
 var $21=(($_1_i+1)|0);
 HEAP8[($_1_i)]=46;
 var $22=(($_1_i+2)|0);
 HEAP8[($21)]=42;
 HEAP8[($22)]=76;
 var $scevgep=(($_1_i+3)|0);
 if(($18|0)==256){ label=10;break;}else if(($18|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $24=$19&1;
 var $25=($24|0)==0;
 if($25){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=70;
 var $specify_precision_0_off0_ph_i19=1;label=19;break;
 case 9: 
 HEAP8[($scevgep)]=102;
 var $specify_precision_0_off0_ph_i19=1;label=19;break;
 case 10: 
 var $29=$19&1;
 var $30=($29|0)==0;
 if($30){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($scevgep)]=69;
 var $specify_precision_0_off0_ph_i19=1;label=19;break;
 case 12: 
 HEAP8[($scevgep)]=101;
 var $specify_precision_0_off0_ph_i19=1;label=19;break;
 case 13: 
 HEAP8[($_1_i)]=76;
 var $scevgep18=(($_1_i+1)|0);
 var $34=$19&1;
 var $35=($34|0)==0;
 if($35){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($scevgep18)]=65;
 var $specify_precision_0_off0_ph_i19=0;label=19;break;
 case 15: 
 HEAP8[($scevgep18)]=97;
 var $specify_precision_0_off0_ph_i19=0;label=19;break;
 case 16: 
 var $39=$19&1;
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($scevgep)]=71;
 var $specify_precision_0_off0_ph_i19=1;label=19;break;
 case 18: 
 HEAP8[($scevgep)]=103;
 var $specify_precision_0_off0_ph_i19=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i19;
 var $43=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$43;
 var $44=HEAP8[(13992)];
 var $45=(($44<<24)>>24)==0;
 if($45){label=20;break;}else{label=24;break;}
 case 20: 
 var $47=___cxa_guard_acquire(13992);
 var $48=($47|0)==0;
 if($48){label=24;break;}else{label=21;break;}
 case 21: 
 var $50=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((11888)>>2)]=$50;

 label=24;break;
 case 23: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;

 ___resumeException($53$0)
 case 24: 
 var $54=HEAP32[((11888)>>2)];
 if($specify_precision_0_off0_ph_i19){label=25;break;}else{label=26;break;}
 case 25: 
 var $56=(($__iob+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$57,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$58;label=27;break;
 case 26: 
 var $60=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$60;label=27;break;
 case 27: 
 var $__nc_0;
 var $62=($__nc_0|0)>29;
 if($62){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre16=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $101=0;var $100=$_pre16;label=47;break;
 case 29: 
 var $64=HEAP8[(13992)];
 var $65=(($64<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i19){label=30;break;}else{label=38;break;}
 case 30: 
 if($65){label=31;break;}else{label=35;break;}
 case 31: 
 var $68=___cxa_guard_acquire(13992);
 var $69=($68|0)==0;
 if($69){label=35;break;}else{label=32;break;}
 case 32: 
 var $71=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((11888)>>2)]=$71;

 label=35;break;
 case 34: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1); var $74$1 = tempRet0;

 var $eh_lpad_body$1=$74$1;var $eh_lpad_body$0=$74$0;label=37;break;
 case 35: 
 var $76=HEAP32[((11888)>>2)];
 var $77=(($__iob+8)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$76,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$78,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$79;label=44;break; } else { label=36;break; }
 case 36: 
 var $81$0 = ___cxa_find_matching_catch(-1, -1); var $81$1 = tempRet0;
 var $eh_lpad_body$1=$81$1;var $eh_lpad_body$0=$81$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $82=$eh_lpad_body$0;
 var $83=$eh_lpad_body$1;
 var $_1214=$83;var $_115=$82;label=72;break;
 case 38: 
 if($65){label=39;break;}else{label=43;break;}
 case 39: 
 var $86=___cxa_guard_acquire(13992);
 var $87=($86|0)==0;
 if($87){label=43;break;}else{label=40;break;}
 case 40: 
 var $89=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((11888)>>2)]=$89;

 label=43;break;
 case 42: 
 var $92$0 = ___cxa_find_matching_catch(-1, -1); var $92$1 = tempRet0;

 var $eh_lpad_body$1=$92$1;var $eh_lpad_body$0=$92$0;label=37;break;
 case 43: 
 var $94=HEAP32[((11888)>>2)];
 var $95=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$94,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$95;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $97=HEAP32[(($__nb)>>2)];
 var $98=($97|0)==0;
 if($98){label=45;break;}else{var $__nc_2=$__nc_1;var $101=$97;var $100=$97;label=47;break;}
 case 45: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 var $_pre=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_1;var $101=$_pre;var $100=$_pre;label=47;break;
 case 47: 
 var $100;
 var $101;
 var $__nc_2;
 var $102=(($100+$__nc_2)|0);
 var $103=HEAP32[(($6)>>2)];
 var $104=$103&176;
 if(($104|0)==16){ label=48;break;}else if(($104|0)==32){ var $_0_i7=$102;label=54;break;}else{label=53;break;}
 case 48: 
 var $106=HEAP8[($100)];
 if((($106<<24)>>24)==45|(($106<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $108=(($100+1)|0);
 var $_0_i7=$108;label=54;break;
 case 50: 
 var $110=($__nc_2|0)>1;
 var $111=(($106<<24)>>24)==48;
 var $or_cond_i=$110&$111;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $113=(($100+1)|0);
 var $114=HEAP8[($113)];
 if((($114<<24)>>24)==120|(($114<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $116=(($100+2)|0);
 var $_0_i7=$116;label=54;break;
 case 53: 
 var $_0_i7=$100;label=54;break;
 case 54: 
 var $_0_i7;
 var $118=(($__o)|0);
 var $$etemp$3$0=57;
 var $$etemp$3$1=0;

 var $119=($100|0)==($43|0);
 if($119){var $__ob_0=$118;var $131=0;var $130=$43;label=59;break;}else{label=55;break;}
 case 55: 
 var $121=$__nc_2<<1;
 var $122=_malloc($121);
 var $123=($122|0)==0;
 if($123){label=56;break;}else{var $__ob_0=$122;var $131=$122;var $130=$100;label=59;break;}
 case 56: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $126=0;label=58;break; }
 case 57: 
 var $_pre17=HEAP32[(($__nb)>>2)];
 var $__ob_0=0;var $131=0;var $130=$_pre17;label=59;break;
 case 58: 
 var $126;
 var $127$0 = ___cxa_find_matching_catch(-1, -1); var $127$1 = tempRet0;
 var $128=$127$0;
 var $129=$127$1;
 var $_0=$128;var $_01=$129;var $160=$126;label=68;break;
 case 59: 
 var $130;
 var $131;
 var $__ob_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($1,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { var $126=$131;label=58;break; }
 case 60: 
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($130,$_0_i7,$102,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=67;break; }
 case 61: 
 var $134=(($1)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=(($135)|0);
 var $137=__ZNSt3__114__shared_count16__release_sharedEv($136);
 var $138=(($__s)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=(($3)|0);
 HEAP32[(($140)>>2)]=$139;
 var $141=HEAP32[(($__op)>>2)];
 var $142=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$3,$__ob_0,$141,$142,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { var $126=$131;label=58;break; }
 case 62: 
 var $144=(($2)|0);
 var $145=HEAP32[(($144)>>2)];
 HEAP32[(($138)>>2)]=$145;
 var $146=(($agg_result)|0);
 HEAP32[(($146)>>2)]=$145;
 var $147=($131|0)==0;
 if($147){label=64;break;}else{label=63;break;}
 case 63: 
 _free($131);
 label=64;break;
 case 64: 
 var $$etemp$4$0=57;
 var $$etemp$4$1=0;

 var $149=($101|0)==0;
 if($149){label=66;break;}else{label=65;break;}
 case 65: 
 _free($101);
 label=66;break;
 case 66: 
 STACKTOP=sp;return;
 case 67: 
 var $152$0 = ___cxa_find_matching_catch(-1, -1); var $152$1 = tempRet0;
 var $153=$152$0;
 var $154=$152$1;
 var $155=(($1)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=(($156)|0);
 var $158=__ZNSt3__114__shared_count16__release_sharedEv($157);
 var $_0=$153;var $_01=$154;var $160=$131;label=68;break;
 case 68: 
 var $160;
 var $_01;
 var $_0;
 var $161=($160|0)==0;
 if($161){label=70;break;}else{label=69;break;}
 case 69: 
 _free($160);
 label=70;break;
 case 70: 
 var $163=($101|0)==0;
 if($163){var $_1214=$_01;var $_115=$_0;label=72;break;}else{label=71;break;}
 case 71: 
 _free($101);
 var $_1214=$_01;var $_115=$_0;label=72;break;
 case 72: 
 var $_115;
 var $_1214;
 var $165$0=$_115;
 var $165$1=0;
 var $166$0=$165$0;
 var $166$1=$_1214;
 ___resumeException($166$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__fmt=(sp)+(16);
 var $__nar=(sp)+(24);
 var $__o=(sp)+(48);
 var $1=(sp)+(88);
 var $2=(sp)+(96);
 var $3=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[(2488)];HEAP8[((($3)+(1))|0)]=HEAP8[(2489)];HEAP8[((($3)+(2))|0)]=HEAP8[(2490)];HEAP8[((($3)+(3))|0)]=HEAP8[(2491)];HEAP8[((($3)+(4))|0)]=HEAP8[(2492)];HEAP8[((($3)+(5))|0)]=HEAP8[(2493)];
 var $4=(($__nar)|0);
 var $5=HEAP8[(13992)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=2;break;}else{label=6;break;}
 case 2: 
 var $8=___cxa_guard_acquire(13992);
 var $9=($8|0)==0;
 if($9){label=6;break;}else{label=3;break;}
 case 3: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((11888)>>2)]=$11;

 label=6;break;
 case 5: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;

 ___resumeException($14$0)
 case 6: 
 var $15=HEAP32[((11888)>>2)];
 var $16=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($4,20,$15,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $17=(($__nar+$16)|0);
 var $18=(($__iob+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$19&176;
 if(($20|0)==32){ var $_0_i=$17;label=13;break;}else if(($20|0)==16){ label=7;break;}else{label=12;break;}
 case 7: 
 var $22=HEAP8[($4)];
 if((($22<<24)>>24)==45|(($22<<24)>>24)==43){ label=8;break;}else{label=9;break;}
 case 8: 
 var $24=(($__nar+1)|0);
 var $_0_i=$24;label=13;break;
 case 9: 
 var $26=($16|0)>1;
 var $27=(($22<<24)>>24)==48;
 var $or_cond_i=$26&$27;
 if($or_cond_i){label=10;break;}else{label=12;break;}
 case 10: 
 var $29=(($__nar+1)|0);
 var $30=HEAP8[($29)];
 if((($30<<24)>>24)==120|(($30<<24)>>24)==88){ label=11;break;}else{label=12;break;}
 case 11: 
 var $32=(($__nar+2)|0);
 var $_0_i=$32;label=13;break;
 case 12: 
 var $_0_i=$4;label=13;break;
 case 13: 
 var $_0_i;
 var $34=(($__o)|0);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;

 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 var $35=(($1)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=$__p_i_i_i_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $38=HEAP32[((13432)>>2)];
 var $39=($38|0)==-1;
 if($39){label=15;break;}else{label=14;break;}
 case 14: 
 var $41=(($__p_i_i_i_i)|0);
 HEAP32[(($41)>>2)]=13432;
 var $42=(($__p_i_i_i_i+4)|0);
 HEAP32[(($42)>>2)]=(26);
 var $43=(($__p_i_i_i_i+8)|0);
 HEAP32[(($43)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13432,$37,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=20;break; }
 case 15: 
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $44=HEAP32[((13436)>>2)];
 var $45=((($44)-(1))|0);
 var $46=(($36+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($36+8)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=$47;
 var $51=$49;
 var $52=((($50)-($51))|0);
 var $53=$52>>2;
 var $54=($53>>>0)>($45>>>0);
 if($54){label=16;break;}else{label=17;break;}
 case 16: 
 var $55=(($49+($45<<2))|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($56|0)==0;
 if($57){label=17;break;}else{label=19;break;}
 case 17: 
 var $58=___cxa_allocate_exception(4);
 var $59=$58;
 __ZNSt8bad_castC2Ev($59);
 (function() { try { __THREW__ = 0; return ___cxa_throw($58,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=20;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $61=$56;
 var $62=HEAP32[(($35)>>2)];
 var $63=(($62)|0);
 var $64=__ZNSt3__114__shared_count16__release_sharedEv($63);
 var $65=$56;
 var $66=HEAP32[(($65)>>2)];
 var $67=(($66+32)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=FUNCTION_TABLE[$68]($61,$4,$17,$34);
 var $70=(($__o+$16)|0);
 var $71=($_0_i|0)==($17|0);
 if($71){var $__op_0=$70;label=22;break;}else{label=21;break;}
 case 20: 
 var $73$0 = ___cxa_find_matching_catch(-1, -1); var $73$1 = tempRet0;
 var $74=HEAP32[(($35)>>2)];
 var $75=(($74)|0);
 var $76=__ZNSt3__114__shared_count16__release_sharedEv($75);
 ___resumeException($73$0)
 case 21: 
 var $78=$__nar;
 var $79=$_0_i;
 var $80=((($79)-($78))|0);
 var $81=(($__o+$80)|0);
 var $__op_0=$81;label=22;break;
 case 22: 
 var $__op_0;
 var $83=(($__s)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=(($2)|0);
 HEAP32[(($85)>>2)]=$84;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$34,$__op_0,$70,$__iob,$__fl);
 var $$etemp$3$0=37;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $1=(sp)+(16);
 var $2=(sp)+(24);
 var $__nm=(sp)+(32);
 var $3=(($__iob+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4&1;
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$this;
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+24)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($__s)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($1)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=($__v&1);
 FUNCTION_TABLE[$11]($agg_result,$this,$1,$__iob,$__fl,$15);
 label=30;break;
 case 3: 
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $17=(($2)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $20=HEAP32[((13040)>>2)];
 var $21=($20|0)==-1;
 if($21){label=5;break;}else{label=4;break;}
 case 4: 
 var $23=(($__p_i_i_i_i)|0);
 HEAP32[(($23)>>2)]=13040;
 var $24=(($__p_i_i_i_i+4)|0);
 HEAP32[(($24)>>2)]=(26);
 var $25=(($__p_i_i_i_i+8)|0);
 HEAP32[(($25)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13040,$19,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=27;break; }
 case 5: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $26=HEAP32[((13044)>>2)];
 var $27=((($26)-(1))|0);
 var $28=(($18+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($18+8)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$29;
 var $33=$31;
 var $34=((($32)-($33))|0);
 var $35=$34>>2;
 var $36=($35>>>0)>($27>>>0);
 if($36){label=6;break;}else{label=7;break;}
 case 6: 
 var $37=(($31+($27<<2))|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($38|0)==0;
 if($39){label=7;break;}else{label=9;break;}
 case 7: 
 var $40=___cxa_allocate_exception(4);
 var $41=$40;
 __ZNSt8bad_castC2Ev($41);
 (function() { try { __THREW__ = 0; return ___cxa_throw($40,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=27;break; }
 case 8: 
 throw "Reached an unreachable!";
 case 9: 
 var $43=$38;
 var $44=HEAP32[(($17)>>2)];
 var $45=(($44)|0);
 var $46=__ZNSt3__114__shared_count16__release_sharedEv($45);
 var $47=$38;
 var $48=HEAP32[(($47)>>2)];
 if($__v){label=10;break;}else{label=11;break;}
 case 10: 
 var $50=(($48+24)|0);
 var $51=HEAP32[(($50)>>2)];
 FUNCTION_TABLE[$51]($__nm,$43);
 label=12;break;
 case 11: 
 var $53=(($48+28)|0);
 var $54=HEAP32[(($53)>>2)];
 FUNCTION_TABLE[$54]($__nm,$43);
 label=12;break;
 case 12: 
 var $56=$__nm;
 var $57=HEAP8[($56)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=14;break;}else{label=13;break;}
 case 13: 
 var $61=(($__nm+8)|0);
 var $62=HEAP32[(($61)>>2)];
 var $_pre4=(($__nm+4)|0);
 var $_ph=$62;var $_pre_phi=$_pre4;var $_pre_phi6=$61;label=15;break;
 case 14: 
 var $64=(($__nm+4)|0);
 var $_pre5=(($__nm+8)|0);
 var $_ph=$64;var $_pre_phi=$64;var $_pre_phi6=$_pre5;label=15;break;
 case 15: 
 var $_pre_phi6;
 var $_pre_phi;
 var $_ph;
 var $65=(($__s)|0);
 var $67=$_ph;var $66=$57;label=16;break;
 case 16: 
 var $66;
 var $67;
 var $68=$66&1;
 var $69=(($68<<24)>>24)==0;
 if($69){label=18;break;}else{label=17;break;}
 case 17: 
 var $71=HEAP32[(($_pre_phi6)>>2)];
 var $72=HEAP32[(($_pre_phi)>>2)];
 var $77=$72;var $76=$71;label=19;break;
 case 18: 
 var $74=($66&255);
 var $75=$74>>>1;
 var $77=$75;var $76=$_pre_phi;label=19;break;
 case 19: 
 var $76;
 var $77;
 var $78=(($76+($77<<2))|0);
 var $79=($67|0)==($78|0);
 if($79){label=29;break;}else{label=20;break;}
 case 20: 
 var $81=HEAP32[(($67)>>2)];
 var $82=HEAP32[(($65)>>2)];
 var $83=($82|0)==0;
 if($83){label=26;break;}else{label=21;break;}
 case 21: 
 var $85=(($82+24)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=(($82+28)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=($86|0)==($88|0);
 if($89){label=22;break;}else{label=23;break;}
 case 22: 
 var $91=$82;
 var $92=HEAP32[(($91)>>2)];
 var $93=(($92+52)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$94]($82,$81) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$95;label=24;break; } else { label=28;break; }
 case 23: 
 var $97=(($86+4)|0);
 HEAP32[(($85)>>2)]=$97;
 HEAP32[(($86)>>2)]=$81;
 var $_0_i_i=$81;label=24;break;
 case 24: 
 var $_0_i_i;
 var $98=($_0_i_i|0)==-1;
 if($98){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP32[(($65)>>2)]=0;
 label=26;break;
 case 26: 
 var $100=(($67+4)|0);
 var $_pre=HEAP8[($56)];
 var $67=$100;var $66=$_pre;label=16;break;
 case 27: 
 var $102$0 = ___cxa_find_matching_catch(-1, -1); var $102$1 = tempRet0;
 var $103=$102$0;
 var $104=$102$1;
 var $105=HEAP32[(($17)>>2)];
 var $106=(($105)|0);
 var $107=__ZNSt3__114__shared_count16__release_sharedEv($106);
 var $_0=$103;var $_01=$104;label=31;break;
 case 28: 
 var $109$0 = ___cxa_find_matching_catch(-1, -1); var $109$1 = tempRet0;
 var $110=$109$0;
 var $111=$109$1;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
 var $_0=$110;var $_01=$111;label=31;break;
 case 29: 
 var $113=HEAP32[(($65)>>2)];
 var $114=(($agg_result)|0);
 HEAP32[(($114)>>2)]=$113;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
 label=30;break;
 case 30: 
 STACKTOP=sp;return;
 case 31: 
 var $_01;
 var $_0;
 var $117$0=$_0;
 var $117$1=0;
 var $118$0=$117$0;
 var $118$1=$_01;
 ___resumeException($118$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(sp)+(136);
 var $3=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[(2480)];HEAP8[((($3)+(1))|0)]=HEAP8[(2481)];HEAP8[((($3)+(2))|0)]=HEAP8[(2482)];HEAP8[((($3)+(3))|0)]=HEAP8[(2483)];HEAP8[((($3)+(4))|0)]=HEAP8[(2484)];HEAP8[((($3)+(5))|0)]=HEAP8[(2485)];
 var $4=(($__fmt+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__fmt+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$15;label=5;break;
 case 5: 
 var $_13_i_ph;
 HEAP8[($_13_i_ph)]=108;
 var $scevgep=(($_13_i_ph+1)|0);
 var $16=$6&74;
 if(($16|0)==64){ label=6;break;}else if(($16|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $19=$6&16384;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $24=(($__nar)|0);
 var $25=HEAP8[(13992)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=12;break;}else{label=16;break;}
 case 12: 
 var $28=___cxa_guard_acquire(13992);
 var $29=($28|0)==0;
 if($29){label=16;break;}else{label=13;break;}
 case 13: 
 var $31=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((11888)>>2)]=$31;

 label=16;break;
 case 15: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;

 ___resumeException($34$0)
 case 16: 
 var $35=HEAP32[((11888)>>2)];
 var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24,12,$35,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=(($__nar+$36)|0);
 var $38=HEAP32[(($5)>>2)];
 var $39=$38&176;
 if(($39|0)==16){ label=17;break;}else if(($39|0)==32){ var $_0_i1=$37;label=23;break;}else{label=22;break;}
 case 17: 
 var $41=HEAP8[($24)];
 if((($41<<24)>>24)==45|(($41<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $43=(($__nar+1)|0);
 var $_0_i1=$43;label=23;break;
 case 19: 
 var $45=($36|0)>1;
 var $46=(($41<<24)>>24)==48;
 var $or_cond_i=$45&$46;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $48=(($__nar+1)|0);
 var $49=HEAP8[($48)];
 if((($49<<24)>>24)==120|(($49<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $51=(($__nar+2)|0);
 var $_0_i1=$51;label=23;break;
 case 22: 
 var $_0_i1=$24;label=23;break;
 case 23: 
 var $_0_i1;
 var $53=$__o;
 var $$etemp$0$0=84;
 var $$etemp$0$1=0;

 var $54=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($24,$_0_i1,$37,$54,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $56=(($1)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 var $60=(($__s)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($2)|0);
 HEAP32[(($62)>>2)]=$61;
 var $63=HEAP32[(($__op)>>2)];
 var $64=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$54,$63,$64,$__iob,$__fl);
 var $$etemp$1$0=84;
 var $$etemp$1$1=0;

 STACKTOP=sp;return;
 case 25: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 var $67=(($1)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68)|0);
 var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
 ___resumeException($66$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i1=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=HEAP32[((13424)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__p_i_i_i_i)|0);
 HEAP32[(($7)>>2)]=13424;
 var $8=(($__p_i_i_i_i+4)|0);
 HEAP32[(($8)>>2)]=(26);
 var $9=(($__p_i_i_i_i+8)|0);
 HEAP32[(($9)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(13424,$3,260);
 label=3;break;
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $10=HEAP32[((13428)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($2+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 __ZNSt8bad_castC2Ev($25);
 ___cxa_throw($24,8200,(356));
 throw "Reached an unreachable!";
 case 6: 
 var $26=$22;
 var $27=HEAP32[(($1)>>2)];
 var $28=$__p_i_i_i_i1;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $29=HEAP32[((13040)>>2)];
 var $30=($29|0)==-1;
 if($30){label=8;break;}else{label=7;break;}
 case 7: 
 var $32=(($__p_i_i_i_i1)|0);
 HEAP32[(($32)>>2)]=13040;
 var $33=(($__p_i_i_i_i1+4)|0);
 HEAP32[(($33)>>2)]=(26);
 var $34=(($__p_i_i_i_i1+8)|0);
 HEAP32[(($34)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(13040,$28,260);
 label=8;break;
 case 8: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $35=HEAP32[((13044)>>2)];
 var $36=((($35)-(1))|0);
 var $37=(($27+12)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($27+8)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=$38;
 var $42=$40;
 var $43=((($41)-($42))|0);
 var $44=$43>>2;
 var $45=($44>>>0)>($36>>>0);
 if($45){label=9;break;}else{label=10;break;}
 case 9: 
 var $46=(($40+($36<<2))|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($47|0)==0;
 if($48){label=10;break;}else{label=11;break;}
 case 10: 
 var $49=___cxa_allocate_exception(4);
 var $50=$49;
 __ZNSt8bad_castC2Ev($50);
 ___cxa_throw($49,8200,(356));
 throw "Reached an unreachable!";
 case 11: 
 var $51=$47;
 var $52=$47;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+20)|0);
 var $55=HEAP32[(($54)>>2)];
 FUNCTION_TABLE[$55]($__grouping,$51);
 var $56=$__grouping;
 var $57=HEAP8[($56)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=13;break;}else{label=12;break;}
 case 12: 
 var $61=(($__grouping+4)|0);
 var $62=HEAP32[(($61)>>2)];
 var $66=$62;label=14;break;
 case 13: 
 var $64=($57&255);
 var $65=$64>>>1;
 var $66=$65;label=14;break;
 case 14: 
 var $66;
 var $67=($66|0)==0;
 if($67){label=15;break;}else{label=20;break;}
 case 15: 
 var $69=$22;
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+48)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]($26,$__nb,$__ne,$__ob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 var $74=$__ne;
 var $75=$__nb;
 var $76=((($74)-($75))|0);
 var $77=(($__ob+($76<<2))|0);
 HEAP32[(($__oe)>>2)]=$77;
 var $190=$77;label=47;break;
 case 17: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=19;break;
 case 19: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 20: 
 HEAP32[(($__oe)>>2)]=$__ob;
 var $80=HEAP8[($__nb)];
 if((($80<<24)>>24)==45|(($80<<24)>>24)==43){ label=21;break;}else{var $__nf_0=$__nb;label=23;break;}
 case 21: 
 var $82=$22;
 var $83=HEAP32[(($82)>>2)];
 var $84=(($83+44)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$85]($26,$80) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=18;break; }
 case 22: 
 var $87=(($__nb+1)|0);
 var $88=HEAP32[(($__oe)>>2)];
 var $89=(($88+4)|0);
 HEAP32[(($__oe)>>2)]=$89;
 HEAP32[(($88)>>2)]=$86;
 var $__nf_0=$87;label=23;break;
 case 23: 
 var $__nf_0;
 var $91=$__ne;
 var $92=$__nf_0;
 var $93=((($91)-($92))|0);
 var $94=($93|0)>1;
 if($94){label=24;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 24: 
 var $96=HEAP8[($__nf_0)];
 var $97=(($96<<24)>>24)==48;
 if($97){label=25;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 25: 
 var $99=(($__nf_0+1)|0);
 var $100=HEAP8[($99)];
 if((($100<<24)>>24)==120|(($100<<24)>>24)==88){ label=26;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 26: 
 var $102=$22;
 var $103=HEAP32[(($102)>>2)];
 var $104=(($103+44)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$105]($26,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=18;break; }
 case 27: 
 var $107=HEAP32[(($__oe)>>2)];
 var $108=(($107+4)|0);
 HEAP32[(($__oe)>>2)]=$108;
 HEAP32[(($107)>>2)]=$106;
 var $109=HEAP8[($99)];
 var $110=HEAP32[(($102)>>2)];
 var $111=(($110+44)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($26,$109) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=18;break; }
 case 28: 
 var $114=(($__nf_0+2)|0);
 var $115=HEAP32[(($__oe)>>2)];
 var $116=(($115+4)|0);
 HEAP32[(($__oe)>>2)]=$116;
 HEAP32[(($115)>>2)]=$113;
 var $__nf_1=$114;label=29;break;
 case 29: 
 var $__nf_1;
 var $118=($__nf_1|0)==($__ne|0);
 if($118){label=32;break;}else{label=30;break;}
 case 30: 
 var $119=((($__ne)-(1))|0);
 var $120=($119>>>0)>($__nf_1>>>0);
 if($120){var $_012_i_i=$__nf_1;var $121=$119;label=31;break;}else{label=32;break;}
 case 31: 
 var $121;
 var $_012_i_i;
 var $122=HEAP8[($_012_i_i)];
 var $123=HEAP8[($121)];
 HEAP8[($_012_i_i)]=$123;
 HEAP8[($121)]=$122;
 var $124=(($_012_i_i+1)|0);
 var $125=((($121)-(1))|0);
 var $126=($124>>>0)<($125>>>0);
 if($126){var $_012_i_i=$124;var $121=$125;label=31;break;}else{label=32;break;}
 case 32: 
 var $127=$47;
 var $128=HEAP32[(($127)>>2)];
 var $129=(($128+16)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$130]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=18;break; }
 case 33: 
 var $132=($__nf_1>>>0)<($__ne>>>0);
 if($132){label=35;break;}else{label=34;break;}
 case 34: 
 var $_pre=HEAP32[(($__oe)>>2)];
 var $176=$_pre;label=44;break;
 case 35: 
 var $133=$__grouping;
 var $134=(($133+1)|0);
 var $135=$22;
 var $136=(($__grouping+4)|0);
 var $137=(($__grouping+8)|0);
 var $__dc_012=0;var $__dg_013=0;var $__p_014=$__nf_1;label=36;break;
 case 36: 
 var $__p_014;
 var $__dg_013;
 var $__dc_012;
 var $138=HEAP8[($56)];
 var $139=$138&1;
 var $140=(($139<<24)>>24)==0;
 var $141=HEAP32[(($137)>>2)];
 var $_=($140?$134:$141);
 var $142=(($_+$__dg_013)|0);
 var $143=HEAP8[($142)];
 var $144=(($143<<24)>>24)==0;
 if($144){var $__dg_1=$__dg_013;var $__dc_1=$__dc_012;label=42;break;}else{label=37;break;}
 case 37: 
 var $145=HEAP32[(($137)>>2)];
 var $_15=($140?$134:$145);
 var $146=(($_15+$__dg_013)|0);
 var $147=HEAP8[($146)];
 var $148=(($147<<24)>>24);
 var $149=($__dc_012|0)==($148|0);
 if($149){label=38;break;}else{var $__dg_1=$__dg_013;var $__dc_1=$__dc_012;label=42;break;}
 case 38: 
 var $151=HEAP32[(($__oe)>>2)];
 var $152=(($151+4)|0);
 HEAP32[(($__oe)>>2)]=$152;
 HEAP32[(($151)>>2)]=$131;
 var $153=HEAP8[($56)];
 var $154=$153&1;
 var $155=(($154<<24)>>24)==0;
 if($155){label=40;break;}else{label=39;break;}
 case 39: 
 var $157=HEAP32[(($136)>>2)];
 var $161=$157;label=41;break;
 case 40: 
 var $159=($153&255);
 var $160=$159>>>1;
 var $161=$160;label=41;break;
 case 41: 
 var $161;
 var $162=((($161)-(1))|0);
 var $163=($__dg_013>>>0)<($162>>>0);
 var $164=($163&1);
 var $___dg_0=((($164)+($__dg_013))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=42;break;
 case 42: 
 var $__dc_1;
 var $__dg_1;
 var $166=HEAP8[($__p_014)];
 var $167=HEAP32[(($135)>>2)];
 var $168=(($167+44)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($26,$166) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=17;break; }
 case 43: 
 var $171=HEAP32[(($__oe)>>2)];
 var $172=(($171+4)|0);
 HEAP32[(($__oe)>>2)]=$172;
 HEAP32[(($171)>>2)]=$170;
 var $173=((($__dc_1)+(1))|0);
 var $174=(($__p_014+1)|0);
 var $175=($174>>>0)<($__ne>>>0);
 if($175){var $__dc_012=$173;var $__dg_013=$__dg_1;var $__p_014=$174;label=36;break;}else{var $176=$172;label=44;break;}
 case 44: 
 var $176;
 var $177=$__nf_1;
 var $178=$__nb;
 var $179=((($177)-($178))|0);
 var $180=(($__ob+($179<<2))|0);
 var $181=($180|0)==($176|0);
 if($181){var $190=$176;label=47;break;}else{label=45;break;}
 case 45: 
 var $182=((($176)-(4))|0);
 var $183=($182>>>0)>($180>>>0);
 if($183){var $_012_i_i10=$180;var $184=$182;label=46;break;}else{var $190=$176;label=47;break;}
 case 46: 
 var $184;
 var $_012_i_i10;
 var $185=HEAP32[(($_012_i_i10)>>2)];
 var $186=HEAP32[(($184)>>2)];
 HEAP32[(($_012_i_i10)>>2)]=$186;
 HEAP32[(($184)>>2)]=$185;
 var $187=(($_012_i_i10+4)|0);
 var $188=((($184)-(4))|0);
 var $189=($187>>>0)<($188>>>0);
 if($189){var $_012_i_i10=$187;var $184=$188;label=46;break;}else{var $190=$176;label=47;break;}
 case 47: 
 var $190;
 var $191=($__np|0)==($__ne|0);
 if($191){var $storemerge=$190;label=49;break;}else{label=48;break;}
 case 48: 
 var $193=$__np;
 var $194=$__nb;
 var $195=((($193)-($194))|0);
 var $196=(($__ob+($195<<2))|0);
 var $storemerge=$196;label=49;break;
 case 49: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+232)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(200);
 var $__oe=(sp)+(208);
 var $1=(sp)+(216);
 var $2=(sp)+(224);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($3+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$15;label=5;break;
 case 5: 
 var $_13_i_ph;
 var $16=(($_13_i_ph+1)|0);
 HEAP8[($_13_i_ph)]=108;
 HEAP8[($16)]=108;
 var $scevgep=(($_13_i_ph+2)|0);
 var $17=$6&74;
 if(($17|0)==64){ label=6;break;}else if(($17|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $20=$6&16384;
 var $21=($20|0)==0;
 if($21){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $25=(($__nar)|0);
 var $26=HEAP8[(13992)];
 var $27=(($26<<24)>>24)==0;
 if($27){label=12;break;}else{label=16;break;}
 case 12: 
 var $29=___cxa_guard_acquire(13992);
 var $30=($29|0)==0;
 if($30){label=16;break;}else{label=13;break;}
 case 13: 
 var $32=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((11888)>>2)]=$32;

 label=16;break;
 case 15: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;

 ___resumeException($35$0)
 case 16: 
 var $36=HEAP32[((11888)>>2)];
 var $37=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($25,22,$36,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $38=(($__nar+$37)|0);
 var $39=HEAP32[(($5)>>2)];
 var $40=$39&176;
 if(($40|0)==16){ label=17;break;}else if(($40|0)==32){ var $_0_i1=$38;label=23;break;}else{label=22;break;}
 case 17: 
 var $42=HEAP8[($25)];
 if((($42<<24)>>24)==45|(($42<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $44=(($__nar+1)|0);
 var $_0_i1=$44;label=23;break;
 case 19: 
 var $46=($37|0)>1;
 var $47=(($42<<24)>>24)==48;
 var $or_cond_i=$46&$47;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $49=(($__nar+1)|0);
 var $50=HEAP8[($49)];
 if((($50<<24)>>24)==120|(($50<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $52=(($__nar+2)|0);
 var $_0_i1=$52;label=23;break;
 case 22: 
 var $_0_i1=$25;label=23;break;
 case 23: 
 var $_0_i1;
 var $54=$__o;
 var $$etemp$3$0=164;
 var $$etemp$3$1=0;

 var $55=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($25,$_0_i1,$38,$55,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $57=(($1)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(($58)|0);
 var $60=__ZNSt3__114__shared_count16__release_sharedEv($59);
 var $61=(($__s)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(($2)|0);
 HEAP32[(($63)>>2)]=$62;
 var $64=HEAP32[(($__op)>>2)];
 var $65=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$55,$64,$65,$__iob,$__fl);
 var $$etemp$4$0=164;
 var $$etemp$4$1=0;

 STACKTOP=sp;return;
 case 25: 
 var $67$0 = ___cxa_find_matching_catch(-1, -1); var $67$1 = tempRet0;
 var $68=(($1)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69)|0);
 var $71=__ZNSt3__114__shared_count16__release_sharedEv($70);
 ___resumeException($67$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(sp)+(136);
 var $3=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[(2480)];HEAP8[((($3)+(1))|0)]=HEAP8[(2481)];HEAP8[((($3)+(2))|0)]=HEAP8[(2482)];HEAP8[((($3)+(3))|0)]=HEAP8[(2483)];HEAP8[((($3)+(4))|0)]=HEAP8[(2484)];HEAP8[((($3)+(5))|0)]=HEAP8[(2485)];
 var $4=(($__fmt+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__fmt+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$15;label=5;break;
 case 5: 
 var $_13_i_ph;
 HEAP8[($_13_i_ph)]=108;
 var $scevgep=(($_13_i_ph+1)|0);
 var $16=$6&74;
 if(($16|0)==64){ label=6;break;}else if(($16|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $19=$6&16384;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $24=(($__nar)|0);
 var $25=HEAP8[(13992)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=12;break;}else{label=16;break;}
 case 12: 
 var $28=___cxa_guard_acquire(13992);
 var $29=($28|0)==0;
 if($29){label=16;break;}else{label=13;break;}
 case 13: 
 var $31=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((11888)>>2)]=$31;

 label=16;break;
 case 15: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;

 ___resumeException($34$0)
 case 16: 
 var $35=HEAP32[((11888)>>2)];
 var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24,12,$35,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=(($__nar+$36)|0);
 var $38=HEAP32[(($5)>>2)];
 var $39=$38&176;
 if(($39|0)==16){ label=17;break;}else if(($39|0)==32){ var $_0_i1=$37;label=23;break;}else{label=22;break;}
 case 17: 
 var $41=HEAP8[($24)];
 if((($41<<24)>>24)==45|(($41<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $43=(($__nar+1)|0);
 var $_0_i1=$43;label=23;break;
 case 19: 
 var $45=($36|0)>1;
 var $46=(($41<<24)>>24)==48;
 var $or_cond_i=$45&$46;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $48=(($__nar+1)|0);
 var $49=HEAP8[($48)];
 if((($49<<24)>>24)==120|(($49<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $51=(($__nar+2)|0);
 var $_0_i1=$51;label=23;break;
 case 22: 
 var $_0_i1=$24;label=23;break;
 case 23: 
 var $_0_i1;
 var $53=$__o;
 var $$etemp$0$0=84;
 var $$etemp$0$1=0;

 var $54=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($24,$_0_i1,$37,$54,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $56=(($1)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 var $60=(($__s)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($2)|0);
 HEAP32[(($62)>>2)]=$61;
 var $63=HEAP32[(($__op)>>2)];
 var $64=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$54,$63,$64,$__iob,$__fl);
 var $$etemp$1$0=84;
 var $$etemp$1$1=0;

 STACKTOP=sp;return;
 case 25: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 var $67=(($1)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68)|0);
 var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
 ___resumeException($66$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+240)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(208);
 var $__oe=(sp)+(216);
 var $1=(sp)+(224);
 var $2=(sp)+(232);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($3+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$15;label=5;break;
 case 5: 
 var $_13_i_ph;
 var $16=(($_13_i_ph+1)|0);
 HEAP8[($_13_i_ph)]=108;
 HEAP8[($16)]=108;
 var $scevgep=(($_13_i_ph+2)|0);
 var $17=$6&74;
 if(($17|0)==64){ label=6;break;}else if(($17|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $20=$6&16384;
 var $21=($20|0)==0;
 if($21){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $25=(($__nar)|0);
 var $26=HEAP8[(13992)];
 var $27=(($26<<24)>>24)==0;
 if($27){label=12;break;}else{label=16;break;}
 case 12: 
 var $29=___cxa_guard_acquire(13992);
 var $30=($29|0)==0;
 if($30){label=16;break;}else{label=13;break;}
 case 13: 
 var $32=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((11888)>>2)]=$32;

 label=16;break;
 case 15: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;

 ___resumeException($35$0)
 case 16: 
 var $36=HEAP32[((11888)>>2)];
 var $37=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($25,23,$36,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $38=(($__nar+$37)|0);
 var $39=HEAP32[(($5)>>2)];
 var $40=$39&176;
 if(($40|0)==16){ label=17;break;}else if(($40|0)==32){ var $_0_i1=$38;label=23;break;}else{label=22;break;}
 case 17: 
 var $42=HEAP8[($25)];
 if((($42<<24)>>24)==45|(($42<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $44=(($__nar+1)|0);
 var $_0_i1=$44;label=23;break;
 case 19: 
 var $46=($37|0)>1;
 var $47=(($42<<24)>>24)==48;
 var $or_cond_i=$46&$47;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $49=(($__nar+1)|0);
 var $50=HEAP8[($49)];
 if((($50<<24)>>24)==120|(($50<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $52=(($__nar+2)|0);
 var $_0_i1=$52;label=23;break;
 case 22: 
 var $_0_i1=$25;label=23;break;
 case 23: 
 var $_0_i1;
 var $54=$__o;
 var $$etemp$3$0=172;
 var $$etemp$3$1=0;

 var $55=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($25,$_0_i1,$38,$55,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $57=(($1)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(($58)|0);
 var $60=__ZNSt3__114__shared_count16__release_sharedEv($59);
 var $61=(($__s)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(($2)|0);
 HEAP32[(($63)>>2)]=$62;
 var $64=HEAP32[(($__op)>>2)];
 var $65=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$55,$64,$65,$__iob,$__fl);
 var $$etemp$4$0=172;
 var $$etemp$4$1=0;

 STACKTOP=sp;return;
 case 25: 
 var $67$0 = ___cxa_find_matching_catch(-1, -1); var $67$1 = tempRet0;
 var $68=(($1)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69)|0);
 var $71=__ZNSt3__114__shared_count16__release_sharedEv($70);
 ___resumeException($67$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+320)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(280);
 var $__oe=(sp)+(288);
 var $1=(sp)+(296);
 var $2=(sp)+(304);
 var $3=(sp)+(312);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=$__fmt;
 var $5=(($4+1)|0);
 var $6=(($__iob+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&2048;
 var $9=($8|0)==0;
 if($9){var $_0_i=$5;label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($4+2)|0);
 HEAP8[($5)]=43;
 var $_0_i=$11;label=3;break;
 case 3: 
 var $_0_i;
 var $13=$7&1024;
 var $14=($13|0)==0;
 if($14){var $_1_i=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $16=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_1_i=$16;label=5;break;
 case 5: 
 var $_1_i;
 var $18=$7&260;
 var $19=$7>>>14;
 var $20=($18|0)==260;
 if($20){label=13;break;}else{label=6;break;}
 case 6: 
 var $21=(($_1_i+1)|0);
 HEAP8[($_1_i)]=46;
 var $22=(($_1_i+2)|0);
 HEAP8[($21)]=42;
 if(($18|0)==256){ label=10;break;}else if(($18|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $24=$19&1;
 var $25=($24|0)==0;
 if($25){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($22)]=70;
 var $specify_precision_0_off0_ph_i12=1;label=19;break;
 case 9: 
 HEAP8[($22)]=102;
 var $specify_precision_0_off0_ph_i12=1;label=19;break;
 case 10: 
 var $29=$19&1;
 var $30=($29|0)==0;
 if($30){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($22)]=69;
 var $specify_precision_0_off0_ph_i12=1;label=19;break;
 case 12: 
 HEAP8[($22)]=101;
 var $specify_precision_0_off0_ph_i12=1;label=19;break;
 case 13: 
 var $34=$19&1;
 var $35=($34|0)==0;
 if($35){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($_1_i)]=65;
 var $specify_precision_0_off0_ph_i12=0;label=19;break;
 case 15: 
 HEAP8[($_1_i)]=97;
 var $specify_precision_0_off0_ph_i12=0;label=19;break;
 case 16: 
 var $39=$19&1;
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($22)]=71;
 var $specify_precision_0_off0_ph_i12=1;label=19;break;
 case 18: 
 HEAP8[($22)]=103;
 var $specify_precision_0_off0_ph_i12=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i12;
 var $43=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$43;
 var $44=HEAP8[(13992)];
 var $45=(($44<<24)>>24)==0;
 if($45){label=20;break;}else{label=24;break;}
 case 20: 
 var $47=___cxa_guard_acquire(13992);
 var $48=($47|0)==0;
 if($48){label=24;break;}else{label=21;break;}
 case 21: 
 var $50=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((11888)>>2)]=$50;

 label=24;break;
 case 23: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;

 ___resumeException($53$0)
 case 24: 
 var $54=HEAP32[((11888)>>2)];
 if($specify_precision_0_off0_ph_i12){label=25;break;}else{label=26;break;}
 case 25: 
 var $56=(($__iob+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$57,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$58;label=27;break;
 case 26: 
 var $60=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$60;label=27;break;
 case 27: 
 var $__nc_0;
 var $62=($__nc_0|0)>29;
 if($62){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre19=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $103=0;var $102=$_pre19;label=47;break;
 case 29: 
 var $64=HEAP8[(13992)];
 var $65=(($64<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i12){label=30;break;}else{label=38;break;}
 case 30: 
 if($65){label=31;break;}else{label=35;break;}
 case 31: 
 var $68=___cxa_guard_acquire(13992);
 var $69=($68|0)==0;
 if($69){label=35;break;}else{label=32;break;}
 case 32: 
 var $71=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((11888)>>2)]=$71;

 label=35;break;
 case 34: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1); var $74$1 = tempRet0;

 var $eh_lpad_body$1=$74$1;var $eh_lpad_body$0=$74$0;label=37;break;
 case 35: 
 var $76=HEAP32[((11888)>>2)];
 var $77=(($__iob+8)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$76,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$78,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$79;label=44;break; } else { label=36;break; }
 case 36: 
 var $81$0 = ___cxa_find_matching_catch(-1, -1); var $81$1 = tempRet0;
 var $eh_lpad_body$1=$81$1;var $eh_lpad_body$0=$81$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $82=$eh_lpad_body$0;
 var $83=$eh_lpad_body$1;
 var $_1217=$83;var $_118=$82;label=72;break;
 case 38: 
 if($65){label=39;break;}else{label=43;break;}
 case 39: 
 var $86=___cxa_guard_acquire(13992);
 var $87=($86|0)==0;
 if($87){label=43;break;}else{label=40;break;}
 case 40: 
 var $89=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((11888)>>2)]=$89;

 label=43;break;
 case 42: 
 var $92$0 = ___cxa_find_matching_catch(-1, -1); var $92$1 = tempRet0;

 var $eh_lpad_body$1=$92$1;var $eh_lpad_body$0=$92$0;label=37;break;
 case 43: 
 var $94=HEAP32[((11888)>>2)];
 var $95=(($__iob+8)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$94,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$96,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$97;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $99=HEAP32[(($__nb)>>2)];
 var $100=($99|0)==0;
 if($100){label=45;break;}else{var $__nc_2=$__nc_1;var $103=$99;var $102=$99;label=47;break;}
 case 45: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 var $_pre=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_1;var $103=$_pre;var $102=$_pre;label=47;break;
 case 47: 
 var $102;
 var $103;
 var $__nc_2;
 var $104=(($102+$__nc_2)|0);
 var $105=HEAP32[(($6)>>2)];
 var $106=$105&176;
 if(($106|0)==16){ label=48;break;}else if(($106|0)==32){ var $_0_i7=$104;label=54;break;}else{label=53;break;}
 case 48: 
 var $108=HEAP8[($102)];
 if((($108<<24)>>24)==45|(($108<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $110=(($102+1)|0);
 var $_0_i7=$110;label=54;break;
 case 50: 
 var $112=($__nc_2|0)>1;
 var $113=(($108<<24)>>24)==48;
 var $or_cond_i=$112&$113;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $115=(($102+1)|0);
 var $116=HEAP8[($115)];
 if((($116<<24)>>24)==120|(($116<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $118=(($102+2)|0);
 var $_0_i7=$118;label=54;break;
 case 53: 
 var $_0_i7=$102;label=54;break;
 case 54: 
 var $_0_i7;
 var $120=$__o;
 var $$etemp$3$0=228;
 var $$etemp$3$1=0;

 var $121=(($__o)|0);
 var $122=($102|0)==($43|0);
 if($122){var $__ob_0=$121;var $135=0;var $134=$43;label=59;break;}else{label=55;break;}
 case 55: 
 var $124=$__nc_2<<3;
 var $125=_malloc($124);
 var $126=$125;
 var $127=($125|0)==0;
 if($127){label=56;break;}else{var $__ob_0=$126;var $135=$126;var $134=$102;label=59;break;}
 case 56: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $130=0;label=58;break; }
 case 57: 
 var $_pre20=HEAP32[(($__nb)>>2)];
 var $__ob_0=$126;var $135=$126;var $134=$_pre20;label=59;break;
 case 58: 
 var $130;
 var $131$0 = ___cxa_find_matching_catch(-1, -1); var $131$1 = tempRet0;
 var $132=$131$0;
 var $133=$131$1;
 var $_0=$132;var $_01=$133;var $165=$130;label=68;break;
 case 59: 
 var $134;
 var $135;
 var $__ob_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($1,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { var $130=$135;label=58;break; }
 case 60: 
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($134,$_0_i7,$104,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=67;break; }
 case 61: 
 var $138=(($1)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=(($139)|0);
 var $141=__ZNSt3__114__shared_count16__release_sharedEv($140);
 var $142=(($__s)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=(($3)|0);
 HEAP32[(($144)>>2)]=$143;
 var $145=HEAP32[(($__op)>>2)];
 var $146=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$3,$__ob_0,$145,$146,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { var $130=$135;label=58;break; }
 case 62: 
 var $148=(($2)|0);
 var $149=HEAP32[(($148)>>2)];
 HEAP32[(($142)>>2)]=$149;
 var $150=(($agg_result)|0);
 HEAP32[(($150)>>2)]=$149;
 var $151=($135|0)==0;
 if($151){label=64;break;}else{label=63;break;}
 case 63: 
 var $153=$135;
 _free($153);
 label=64;break;
 case 64: 
 var $$etemp$4$0=228;
 var $$etemp$4$1=0;

 var $154=($103|0)==0;
 if($154){label=66;break;}else{label=65;break;}
 case 65: 
 _free($103);
 label=66;break;
 case 66: 
 STACKTOP=sp;return;
 case 67: 
 var $157$0 = ___cxa_find_matching_catch(-1, -1); var $157$1 = tempRet0;
 var $158=$157$0;
 var $159=$157$1;
 var $160=(($1)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($161)|0);
 var $163=__ZNSt3__114__shared_count16__release_sharedEv($162);
 var $_0=$158;var $_01=$159;var $165=$135;label=68;break;
 case 68: 
 var $165;
 var $_01;
 var $_0;
 var $166=($165|0)==0;
 if($166){label=70;break;}else{label=69;break;}
 case 69: 
 var $168=$165;
 _free($168);
 label=70;break;
 case 70: 
 var $169=($103|0)==0;
 if($169){var $_1217=$_01;var $_118=$_0;label=72;break;}else{label=71;break;}
 case 71: 
 _free($103);
 var $_1217=$_01;var $_118=$_0;label=72;break;
 case 72: 
 var $_118;
 var $_1217;
 var $171$0=$_118;
 var $171$1=0;
 var $172$0=$171$0;
 var $172$1=$_1217;
 ___resumeException($172$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i1=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=HEAP32[((13424)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__p_i_i_i_i)|0);
 HEAP32[(($7)>>2)]=13424;
 var $8=(($__p_i_i_i_i+4)|0);
 HEAP32[(($8)>>2)]=(26);
 var $9=(($__p_i_i_i_i+8)|0);
 HEAP32[(($9)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(13424,$3,260);
 label=3;break;
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $10=HEAP32[((13428)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($2+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 __ZNSt8bad_castC2Ev($25);
 ___cxa_throw($24,8200,(356));
 throw "Reached an unreachable!";
 case 6: 
 var $26=$22;
 var $27=HEAP32[(($1)>>2)];
 var $28=$__p_i_i_i_i1;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $29=HEAP32[((13040)>>2)];
 var $30=($29|0)==-1;
 if($30){label=8;break;}else{label=7;break;}
 case 7: 
 var $32=(($__p_i_i_i_i1)|0);
 HEAP32[(($32)>>2)]=13040;
 var $33=(($__p_i_i_i_i1+4)|0);
 HEAP32[(($33)>>2)]=(26);
 var $34=(($__p_i_i_i_i1+8)|0);
 HEAP32[(($34)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(13040,$28,260);
 label=8;break;
 case 8: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $35=HEAP32[((13044)>>2)];
 var $36=((($35)-(1))|0);
 var $37=(($27+12)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($27+8)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=$38;
 var $42=$40;
 var $43=((($41)-($42))|0);
 var $44=$43>>2;
 var $45=($44>>>0)>($36>>>0);
 if($45){label=9;break;}else{label=10;break;}
 case 9: 
 var $46=(($40+($36<<2))|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($47|0)==0;
 if($48){label=10;break;}else{label=11;break;}
 case 10: 
 var $49=___cxa_allocate_exception(4);
 var $50=$49;
 __ZNSt8bad_castC2Ev($50);
 ___cxa_throw($49,8200,(356));
 throw "Reached an unreachable!";
 case 11: 
 var $51=$47;
 var $52=$47;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+20)|0);
 var $55=HEAP32[(($54)>>2)];
 FUNCTION_TABLE[$55]($__grouping,$51);
 HEAP32[(($__oe)>>2)]=$__ob;
 var $56=HEAP8[($__nb)];
 if((($56<<24)>>24)==45|(($56<<24)>>24)==43){ label=12;break;}else{var $__nf_0=$__nb;label=20;break;}
 case 12: 
 var $58=$22;
 var $59=HEAP32[(($58)>>2)];
 var $60=(($59+44)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$61]($26,$56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 var $63=(($__nb+1)|0);
 var $64=HEAP32[(($__oe)>>2)];
 var $65=(($64+4)|0);
 HEAP32[(($__oe)>>2)]=$65;
 HEAP32[(($64)>>2)]=$62;
 var $__nf_0=$63;label=20;break;
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=19;break;
 case 15: 
 var $lpad_loopexit21$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit21$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit21$1;var $eh_lpad_body$0=$lpad_loopexit21$0;label=19;break;
 case 16: 
 var $lpad_loopexit29$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit29$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit29$1;var $eh_lpad_body$0=$lpad_loopexit29$0;label=19;break;
 case 17: 
 var $lpad_loopexit37$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit37$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit37$1;var $eh_lpad_body$0=$lpad_loopexit37$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit38$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit38$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit38$1;var $eh_lpad_body$0=$lpad_nonloopexit38$0;label=19;break;
 case 19: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($eh_lpad_body$0)
 case 20: 
 var $__nf_0;
 var $67=$__ne;
 var $68=$__nf_0;
 var $69=((($67)-($68))|0);
 var $70=($69|0)>1;
 if($70){label=22;break;}else{label=21;break;}
 case 21: 
 var $71=($__nf_0>>>0)<($__ne>>>0);
 if($71){var $__ns_133=$__nf_0;label=36;break;}else{var $__nf_1=$__nf_0;var $__ns_2=$__nf_0;label=43;break;}
 case 22: 
 var $73=HEAP8[($__nf_0)];
 var $74=(($73<<24)>>24)==48;
 if($74){label=23;break;}else{label=21;break;}
 case 23: 
 var $76=(($__nf_0+1)|0);
 var $77=HEAP8[($76)];
 if((($77<<24)>>24)==120|(($77<<24)>>24)==88){ label=24;break;}else{label=21;break;}
 case 24: 
 var $79=$22;
 var $80=HEAP32[(($79)>>2)];
 var $81=(($80+44)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$82]($26,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 var $84=HEAP32[(($__oe)>>2)];
 var $85=(($84+4)|0);
 HEAP32[(($__oe)>>2)]=$85;
 HEAP32[(($84)>>2)]=$83;
 var $86=(($__nf_0+2)|0);
 var $87=HEAP8[($76)];
 var $88=HEAP32[(($79)>>2)];
 var $89=(($88+44)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$90]($26,$87) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=18;break; }
 case 26: 
 var $92=HEAP32[(($__oe)>>2)];
 var $93=(($92+4)|0);
 HEAP32[(($__oe)>>2)]=$93;
 HEAP32[(($92)>>2)]=$91;
 var $94=($86>>>0)<($__ne>>>0);
 if($94){var $__ns_042=$86;label=28;break;}else{var $__nf_1=$86;var $__ns_2=$86;label=43;break;}
 case 27: 
 var $96=($114>>>0)<($__ne>>>0);
 if($96){var $__ns_042=$114;label=28;break;}else{var $__nf_1=$86;var $__ns_2=$114;label=43;break;}
 case 28: 
 var $__ns_042;
 var $97=HEAP8[($__ns_042)];
 var $98=HEAP8[(13992)];
 var $99=(($98<<24)>>24)==0;
 if($99){label=29;break;}else{label=33;break;}
 case 29: 
 var $101=___cxa_guard_acquire(13992);
 var $102=($101|0)==0;
 if($102){label=33;break;}else{label=30;break;}
 case 30: 
 var $104=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=32;break; }
 case 31: 
 HEAP32[((11888)>>2)]=$104;

 label=33;break;
 case 32: 
 var $107$0 = ___cxa_find_matching_catch(-1, -1); var $107$1 = tempRet0;

 var $eh_lpad_body$1=$107$1;var $eh_lpad_body$0=$107$0;label=19;break;
 case 33: 
 var $109=HEAP32[((11888)>>2)];
 var $110=(($97<<24)>>24);
 var $111=(function() { try { __THREW__ = 0; return _isxdigit_l($110,$109) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=17;break; }
 case 34: 
 var $113=($111|0)==0;
 var $114=(($__ns_042+1)|0);
 if($113){var $__nf_1=$86;var $__ns_2=$__ns_042;label=43;break;}else{label=27;break;}
 case 35: 
 var $116=($134>>>0)<($__ne>>>0);
 if($116){var $__ns_133=$134;label=36;break;}else{var $__nf_1=$__nf_0;var $__ns_2=$134;label=43;break;}
 case 36: 
 var $__ns_133;
 var $117=HEAP8[($__ns_133)];
 var $118=HEAP8[(13992)];
 var $119=(($118<<24)>>24)==0;
 if($119){label=37;break;}else{label=41;break;}
 case 37: 
 var $121=___cxa_guard_acquire(13992);
 var $122=($121|0)==0;
 if($122){label=41;break;}else{label=38;break;}
 case 38: 
 var $124=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=40;break; }
 case 39: 
 HEAP32[((11888)>>2)]=$124;

 label=41;break;
 case 40: 
 var $127$0 = ___cxa_find_matching_catch(-1, -1); var $127$1 = tempRet0;

 var $eh_lpad_body$1=$127$1;var $eh_lpad_body$0=$127$0;label=19;break;
 case 41: 
 var $129=HEAP32[((11888)>>2)];
 var $130=(($117<<24)>>24);
 var $131=(function() { try { __THREW__ = 0; return _isdigit_l($130,$129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=16;break; }
 case 42: 
 var $133=($131|0)==0;
 var $134=(($__ns_133+1)|0);
 if($133){var $__nf_1=$__nf_0;var $__ns_2=$__ns_133;label=43;break;}else{label=35;break;}
 case 43: 
 var $__ns_2;
 var $__nf_1;
 var $135=$__grouping;
 var $136=HEAP8[($135)];
 var $137=$136&1;
 var $138=(($137<<24)>>24)==0;
 if($138){label=45;break;}else{label=44;break;}
 case 44: 
 var $140=(($__grouping+4)|0);
 var $141=HEAP32[(($140)>>2)];
 var $145=$141;label=46;break;
 case 45: 
 var $143=($136&255);
 var $144=$143>>>1;
 var $145=$144;label=46;break;
 case 46: 
 var $145;
 var $146=($145|0)==0;
 if($146){label=47;break;}else{label=49;break;}
 case 47: 
 var $148=HEAP32[(($__oe)>>2)];
 var $149=$22;
 var $150=HEAP32[(($149)>>2)];
 var $151=(($150+48)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$152]($26,$__nf_1,$__ns_2,$148) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=18;break; }
 case 48: 
 var $154=$__ns_2;
 var $155=$__nf_1;
 var $156=((($154)-($155))|0);
 var $157=HEAP32[(($__oe)>>2)];
 var $158=(($157+($156<<2))|0);
 HEAP32[(($__oe)>>2)]=$158;
 var $232=$158;label=67;break;
 case 49: 
 var $160=($__nf_1|0)==($__ns_2|0);
 if($160){label=52;break;}else{label=50;break;}
 case 50: 
 var $161=((($__ns_2)-(1))|0);
 var $162=($161>>>0)>($__nf_1>>>0);
 if($162){var $_012_i_i=$__nf_1;var $163=$161;label=51;break;}else{label=52;break;}
 case 51: 
 var $163;
 var $_012_i_i;
 var $164=HEAP8[($_012_i_i)];
 var $165=HEAP8[($163)];
 HEAP8[($_012_i_i)]=$165;
 HEAP8[($163)]=$164;
 var $166=(($_012_i_i+1)|0);
 var $167=((($163)-(1))|0);
 var $168=($166>>>0)<($167>>>0);
 if($168){var $_012_i_i=$166;var $163=$167;label=51;break;}else{label=52;break;}
 case 52: 
 var $169=$47;
 var $170=HEAP32[(($169)>>2)];
 var $171=(($170+16)|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$172]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=18;break; }
 case 53: 
 var $174=($__nf_1>>>0)<($__ns_2>>>0);
 if($174){label=55;break;}else{label=54;break;}
 case 54: 
 var $_pre=HEAP32[(($__oe)>>2)];
 var $218=$_pre;label=64;break;
 case 55: 
 var $175=$__grouping;
 var $176=(($175+1)|0);
 var $177=(($__grouping+4)|0);
 var $178=(($__grouping+8)|0);
 var $179=$22;
 var $__dc_024=0;var $__dg_025=0;var $__p_026=$__nf_1;label=56;break;
 case 56: 
 var $__p_026;
 var $__dg_025;
 var $__dc_024;
 var $180=HEAP8[($135)];
 var $181=$180&1;
 var $182=(($181<<24)>>24)==0;
 var $183=HEAP32[(($178)>>2)];
 var $_=($182?$176:$183);
 var $184=(($_+$__dg_025)|0);
 var $185=HEAP8[($184)];
 var $186=(($185<<24)>>24)>0;
 if($186){label=57;break;}else{var $__dg_1=$__dg_025;var $__dc_1=$__dc_024;label=62;break;}
 case 57: 
 var $187=HEAP32[(($178)>>2)];
 var $_57=($182?$176:$187);
 var $188=(($_57+$__dg_025)|0);
 var $189=HEAP8[($188)];
 var $190=(($189<<24)>>24);
 var $191=($__dc_024|0)==($190|0);
 if($191){label=58;break;}else{var $__dg_1=$__dg_025;var $__dc_1=$__dc_024;label=62;break;}
 case 58: 
 var $193=HEAP32[(($__oe)>>2)];
 var $194=(($193+4)|0);
 HEAP32[(($__oe)>>2)]=$194;
 HEAP32[(($193)>>2)]=$173;
 var $195=HEAP8[($135)];
 var $196=$195&1;
 var $197=(($196<<24)>>24)==0;
 if($197){label=60;break;}else{label=59;break;}
 case 59: 
 var $199=HEAP32[(($177)>>2)];
 var $203=$199;label=61;break;
 case 60: 
 var $201=($195&255);
 var $202=$201>>>1;
 var $203=$202;label=61;break;
 case 61: 
 var $203;
 var $204=((($203)-(1))|0);
 var $205=($__dg_025>>>0)<($204>>>0);
 var $206=($205&1);
 var $___dg_0=((($206)+($__dg_025))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=62;break;
 case 62: 
 var $__dc_1;
 var $__dg_1;
 var $208=HEAP8[($__p_026)];
 var $209=HEAP32[(($179)>>2)];
 var $210=(($209+44)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$211]($26,$208) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { label=15;break; }
 case 63: 
 var $213=HEAP32[(($__oe)>>2)];
 var $214=(($213+4)|0);
 HEAP32[(($__oe)>>2)]=$214;
 HEAP32[(($213)>>2)]=$212;
 var $215=((($__dc_1)+(1))|0);
 var $216=(($__p_026+1)|0);
 var $217=($216>>>0)<($__ns_2>>>0);
 if($217){var $__dc_024=$215;var $__dg_025=$__dg_1;var $__p_026=$216;label=56;break;}else{var $218=$214;label=64;break;}
 case 64: 
 var $218;
 var $219=$__nf_1;
 var $220=$__nb;
 var $221=((($219)-($220))|0);
 var $222=(($__ob+($221<<2))|0);
 var $223=($222|0)==($218|0);
 if($223){var $232=$218;label=67;break;}else{label=65;break;}
 case 65: 
 var $224=((($218)-(4))|0);
 var $225=($224>>>0)>($222>>>0);
 if($225){var $_012_i_i13=$222;var $226=$224;label=66;break;}else{var $232=$218;label=67;break;}
 case 66: 
 var $226;
 var $_012_i_i13;
 var $227=HEAP32[(($_012_i_i13)>>2)];
 var $228=HEAP32[(($226)>>2)];
 HEAP32[(($_012_i_i13)>>2)]=$228;
 HEAP32[(($226)>>2)]=$227;
 var $229=(($_012_i_i13+4)|0);
 var $230=((($226)-(4))|0);
 var $231=($229>>>0)<($230>>>0);
 if($231){var $_012_i_i13=$229;var $226=$230;label=66;break;}else{var $232=$218;label=67;break;}
 case 67: 
 var $232;
 var $233=($__ns_2>>>0)<($__ne>>>0);
 if($233){label=68;break;}else{var $__nf_3=$__ns_2;var $256=$232;label=74;break;}
 case 68: 
 var $234=$22;
 var $__nf_220=$__ns_2;label=69;break;
 case 69: 
 var $__nf_220;
 var $236=HEAP8[($__nf_220)];
 var $237=(($236<<24)>>24)==46;
 if($237){label=70;break;}else{label=72;break;}
 case 70: 
 var $239=$47;
 var $240=HEAP32[(($239)>>2)];
 var $241=(($240+12)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$242]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=18;break; }
 case 71: 
 var $244=HEAP32[(($__oe)>>2)];
 var $245=(($244+4)|0);
 HEAP32[(($__oe)>>2)]=$245;
 HEAP32[(($244)>>2)]=$243;
 var $246=(($__nf_220+1)|0);
 var $__nf_3=$246;var $256=$245;label=74;break;
 case 72: 
 var $248=HEAP32[(($234)>>2)];
 var $249=(($248+44)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$250]($26,$236) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=73;break; } else { label=14;break; }
 case 73: 
 var $252=HEAP32[(($__oe)>>2)];
 var $253=(($252+4)|0);
 HEAP32[(($__oe)>>2)]=$253;
 HEAP32[(($252)>>2)]=$251;
 var $254=(($__nf_220+1)|0);
 var $255=($254>>>0)<($__ne>>>0);
 if($255){var $__nf_220=$254;label=69;break;}else{var $__nf_3=$254;var $256=$253;label=74;break;}
 case 74: 
 var $256;
 var $__nf_3;
 var $257=$22;
 var $258=HEAP32[(($257)>>2)];
 var $259=(($258+48)|0);
 var $260=HEAP32[(($259)>>2)];
 var $261=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$260]($26,$__nf_3,$__ne,$256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=75;break; } else { label=18;break; }
 case 75: 
 var $262=$__nf_3;
 var $263=((($67)-($262))|0);
 var $264=HEAP32[(($__oe)>>2)];
 var $265=(($264+($263<<2))|0);
 HEAP32[(($__oe)>>2)]=$265;
 var $266=($__np|0)==($__ne|0);
 if($266){var $storemerge=$265;label=77;break;}else{label=76;break;}
 case 76: 
 var $268=$__np;
 var $269=$__nb;
 var $270=((($268)-($269))|0);
 var $271=(($__ob+($270<<2))|0);
 var $storemerge=$271;label=77;break;
 case 77: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+320)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(280);
 var $__oe=(sp)+(288);
 var $1=(sp)+(296);
 var $2=(sp)+(304);
 var $3=(sp)+(312);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=$__fmt;
 var $5=(($4+1)|0);
 var $6=(($__iob+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&2048;
 var $9=($8|0)==0;
 if($9){var $_0_i=$5;label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($4+2)|0);
 HEAP8[($5)]=43;
 var $_0_i=$11;label=3;break;
 case 3: 
 var $_0_i;
 var $13=$7&1024;
 var $14=($13|0)==0;
 if($14){var $_1_i=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $16=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_1_i=$16;label=5;break;
 case 5: 
 var $_1_i;
 var $18=$7&260;
 var $19=$7>>>14;
 var $20=($18|0)==260;
 if($20){label=13;break;}else{label=6;break;}
 case 6: 
 var $21=(($_1_i+1)|0);
 HEAP8[($_1_i)]=46;
 var $22=(($_1_i+2)|0);
 HEAP8[($21)]=42;
 HEAP8[($22)]=76;
 var $scevgep=(($_1_i+3)|0);
 if(($18|0)==256){ label=10;break;}else if(($18|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $24=$19&1;
 var $25=($24|0)==0;
 if($25){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=70;
 var $specify_precision_0_off0_ph_i17=1;label=19;break;
 case 9: 
 HEAP8[($scevgep)]=102;
 var $specify_precision_0_off0_ph_i17=1;label=19;break;
 case 10: 
 var $29=$19&1;
 var $30=($29|0)==0;
 if($30){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($scevgep)]=69;
 var $specify_precision_0_off0_ph_i17=1;label=19;break;
 case 12: 
 HEAP8[($scevgep)]=101;
 var $specify_precision_0_off0_ph_i17=1;label=19;break;
 case 13: 
 HEAP8[($_1_i)]=76;
 var $scevgep16=(($_1_i+1)|0);
 var $34=$19&1;
 var $35=($34|0)==0;
 if($35){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($scevgep16)]=65;
 var $specify_precision_0_off0_ph_i17=0;label=19;break;
 case 15: 
 HEAP8[($scevgep16)]=97;
 var $specify_precision_0_off0_ph_i17=0;label=19;break;
 case 16: 
 var $39=$19&1;
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($scevgep)]=71;
 var $specify_precision_0_off0_ph_i17=1;label=19;break;
 case 18: 
 HEAP8[($scevgep)]=103;
 var $specify_precision_0_off0_ph_i17=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i17;
 var $43=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$43;
 var $44=HEAP8[(13992)];
 var $45=(($44<<24)>>24)==0;
 if($45){label=20;break;}else{label=24;break;}
 case 20: 
 var $47=___cxa_guard_acquire(13992);
 var $48=($47|0)==0;
 if($48){label=24;break;}else{label=21;break;}
 case 21: 
 var $50=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((11888)>>2)]=$50;

 label=24;break;
 case 23: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;

 ___resumeException($53$0)
 case 24: 
 var $54=HEAP32[((11888)>>2)];
 if($specify_precision_0_off0_ph_i17){label=25;break;}else{label=26;break;}
 case 25: 
 var $56=(($__iob+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$57,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$58;label=27;break;
 case 26: 
 var $60=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$60;label=27;break;
 case 27: 
 var $__nc_0;
 var $62=($__nc_0|0)>29;
 if($62){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre14=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $101=0;var $100=$_pre14;label=47;break;
 case 29: 
 var $64=HEAP8[(13992)];
 var $65=(($64<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i17){label=30;break;}else{label=38;break;}
 case 30: 
 if($65){label=31;break;}else{label=35;break;}
 case 31: 
 var $68=___cxa_guard_acquire(13992);
 var $69=($68|0)==0;
 if($69){label=35;break;}else{label=32;break;}
 case 32: 
 var $71=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((11888)>>2)]=$71;

 label=35;break;
 case 34: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1); var $74$1 = tempRet0;

 var $eh_lpad_body$1=$74$1;var $eh_lpad_body$0=$74$0;label=37;break;
 case 35: 
 var $76=HEAP32[((11888)>>2)];
 var $77=(($__iob+8)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$76,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$78,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$79;label=44;break; } else { label=36;break; }
 case 36: 
 var $81$0 = ___cxa_find_matching_catch(-1, -1); var $81$1 = tempRet0;
 var $eh_lpad_body$1=$81$1;var $eh_lpad_body$0=$81$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $82=$eh_lpad_body$0;
 var $83=$eh_lpad_body$1;
 var $_1212=$83;var $_113=$82;label=72;break;
 case 38: 
 if($65){label=39;break;}else{label=43;break;}
 case 39: 
 var $86=___cxa_guard_acquire(13992);
 var $87=($86|0)==0;
 if($87){label=43;break;}else{label=40;break;}
 case 40: 
 var $89=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((11888)>>2)]=$89;

 label=43;break;
 case 42: 
 var $92$0 = ___cxa_find_matching_catch(-1, -1); var $92$1 = tempRet0;

 var $eh_lpad_body$1=$92$1;var $eh_lpad_body$0=$92$0;label=37;break;
 case 43: 
 var $94=HEAP32[((11888)>>2)];
 var $95=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$94,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$95;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $97=HEAP32[(($__nb)>>2)];
 var $98=($97|0)==0;
 if($98){label=45;break;}else{var $__nc_2=$__nc_1;var $101=$97;var $100=$97;label=47;break;}
 case 45: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 var $_pre=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_1;var $101=$_pre;var $100=$_pre;label=47;break;
 case 47: 
 var $100;
 var $101;
 var $__nc_2;
 var $102=(($100+$__nc_2)|0);
 var $103=HEAP32[(($6)>>2)];
 var $104=$103&176;
 if(($104|0)==16){ label=48;break;}else if(($104|0)==32){ var $_0_i7=$102;label=54;break;}else{label=53;break;}
 case 48: 
 var $106=HEAP8[($100)];
 if((($106<<24)>>24)==45|(($106<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $108=(($100+1)|0);
 var $_0_i7=$108;label=54;break;
 case 50: 
 var $110=($__nc_2|0)>1;
 var $111=(($106<<24)>>24)==48;
 var $or_cond_i=$110&$111;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $113=(($100+1)|0);
 var $114=HEAP8[($113)];
 if((($114<<24)>>24)==120|(($114<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $116=(($100+2)|0);
 var $_0_i7=$116;label=54;break;
 case 53: 
 var $_0_i7=$100;label=54;break;
 case 54: 
 var $_0_i7;
 var $118=$__o;
 var $$etemp$3$0=228;
 var $$etemp$3$1=0;

 var $119=(($__o)|0);
 var $120=($100|0)==($43|0);
 if($120){var $__ob_0=$119;var $133=0;var $132=$43;label=59;break;}else{label=55;break;}
 case 55: 
 var $122=$__nc_2<<3;
 var $123=_malloc($122);
 var $124=$123;
 var $125=($123|0)==0;
 if($125){label=56;break;}else{var $__ob_0=$124;var $133=$124;var $132=$100;label=59;break;}
 case 56: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $128=0;label=58;break; }
 case 57: 
 var $_pre15=HEAP32[(($__nb)>>2)];
 var $__ob_0=$124;var $133=$124;var $132=$_pre15;label=59;break;
 case 58: 
 var $128;
 var $129$0 = ___cxa_find_matching_catch(-1, -1); var $129$1 = tempRet0;
 var $130=$129$0;
 var $131=$129$1;
 var $_0=$130;var $_01=$131;var $163=$128;label=68;break;
 case 59: 
 var $132;
 var $133;
 var $__ob_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($1,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { var $128=$133;label=58;break; }
 case 60: 
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($132,$_0_i7,$102,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=67;break; }
 case 61: 
 var $136=(($1)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=(($137)|0);
 var $139=__ZNSt3__114__shared_count16__release_sharedEv($138);
 var $140=(($__s)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=(($3)|0);
 HEAP32[(($142)>>2)]=$141;
 var $143=HEAP32[(($__op)>>2)];
 var $144=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$3,$__ob_0,$143,$144,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { var $128=$133;label=58;break; }
 case 62: 
 var $146=(($2)|0);
 var $147=HEAP32[(($146)>>2)];
 HEAP32[(($140)>>2)]=$147;
 var $148=(($agg_result)|0);
 HEAP32[(($148)>>2)]=$147;
 var $149=($133|0)==0;
 if($149){label=64;break;}else{label=63;break;}
 case 63: 
 var $151=$133;
 _free($151);
 label=64;break;
 case 64: 
 var $$etemp$4$0=228;
 var $$etemp$4$1=0;

 var $152=($101|0)==0;
 if($152){label=66;break;}else{label=65;break;}
 case 65: 
 _free($101);
 label=66;break;
 case 66: 
 STACKTOP=sp;return;
 case 67: 
 var $155$0 = ___cxa_find_matching_catch(-1, -1); var $155$1 = tempRet0;
 var $156=$155$0;
 var $157=$155$1;
 var $158=(($1)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(($159)|0);
 var $161=__ZNSt3__114__shared_count16__release_sharedEv($160);
 var $_0=$156;var $_01=$157;var $163=$133;label=68;break;
 case 68: 
 var $163;
 var $_01;
 var $_0;
 var $164=($163|0)==0;
 if($164){label=70;break;}else{label=69;break;}
 case 69: 
 var $166=$163;
 _free($166);
 label=70;break;
 case 70: 
 var $167=($101|0)==0;
 if($167){var $_1212=$_01;var $_113=$_0;label=72;break;}else{label=71;break;}
 case 71: 
 _free($101);
 var $_1212=$_01;var $_113=$_0;label=72;break;
 case 72: 
 var $_113;
 var $_1212;
 var $169$0=$_113;
 var $169$1=0;
 var $170$0=$169$0;
 var $170$1=$_1212;
 ___resumeException($170$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+216)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__fmt=(sp)+(16);
 var $__nar=(sp)+(24);
 var $__o=(sp)+(48);
 var $1=(sp)+(200);
 var $2=(sp)+(208);
 var $3=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[(2488)];HEAP8[((($3)+(1))|0)]=HEAP8[(2489)];HEAP8[((($3)+(2))|0)]=HEAP8[(2490)];HEAP8[((($3)+(3))|0)]=HEAP8[(2491)];HEAP8[((($3)+(4))|0)]=HEAP8[(2492)];HEAP8[((($3)+(5))|0)]=HEAP8[(2493)];
 var $4=(($__nar)|0);
 var $5=HEAP8[(13992)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=2;break;}else{label=6;break;}
 case 2: 
 var $8=___cxa_guard_acquire(13992);
 var $9=($8|0)==0;
 if($9){label=6;break;}else{label=3;break;}
 case 3: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((11888)>>2)]=$11;

 label=6;break;
 case 5: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;

 ___resumeException($14$0)
 case 6: 
 var $15=HEAP32[((11888)>>2)];
 var $16=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($4,20,$15,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $17=(($__nar+$16)|0);
 var $18=(($__iob+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$19&176;
 if(($20|0)==32){ var $_0_i=$17;label=13;break;}else if(($20|0)==16){ label=7;break;}else{label=12;break;}
 case 7: 
 var $22=HEAP8[($4)];
 if((($22<<24)>>24)==45|(($22<<24)>>24)==43){ label=8;break;}else{label=9;break;}
 case 8: 
 var $24=(($__nar+1)|0);
 var $_0_i=$24;label=13;break;
 case 9: 
 var $26=($16|0)>1;
 var $27=(($22<<24)>>24)==48;
 var $or_cond_i=$26&$27;
 if($or_cond_i){label=10;break;}else{label=12;break;}
 case 10: 
 var $29=(($__nar+1)|0);
 var $30=HEAP8[($29)];
 if((($30<<24)>>24)==120|(($30<<24)>>24)==88){ label=11;break;}else{label=12;break;}
 case 11: 
 var $32=(($__nar+2)|0);
 var $_0_i=$32;label=13;break;
 case 12: 
 var $_0_i=$4;label=13;break;
 case 13: 
 var $_0_i;
 var $34=$__o;
 var $$etemp$0$0=148;
 var $$etemp$0$1=0;

 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 var $35=(($1)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=$__p_i_i_i_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $38=HEAP32[((13424)>>2)];
 var $39=($38|0)==-1;
 if($39){label=15;break;}else{label=14;break;}
 case 14: 
 var $41=(($__p_i_i_i_i)|0);
 HEAP32[(($41)>>2)]=13424;
 var $42=(($__p_i_i_i_i+4)|0);
 HEAP32[(($42)>>2)]=(26);
 var $43=(($__p_i_i_i_i+8)|0);
 HEAP32[(($43)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13424,$37,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=20;break; }
 case 15: 
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $44=HEAP32[((13428)>>2)];
 var $45=((($44)-(1))|0);
 var $46=(($36+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($36+8)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=$47;
 var $51=$49;
 var $52=((($50)-($51))|0);
 var $53=$52>>2;
 var $54=($53>>>0)>($45>>>0);
 if($54){label=16;break;}else{label=17;break;}
 case 16: 
 var $55=(($49+($45<<2))|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($56|0)==0;
 if($57){label=17;break;}else{label=19;break;}
 case 17: 
 var $58=___cxa_allocate_exception(4);
 var $59=$58;
 __ZNSt8bad_castC2Ev($59);
 (function() { try { __THREW__ = 0; return ___cxa_throw($58,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=20;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $61=$56;
 var $62=HEAP32[(($35)>>2)];
 var $63=(($62)|0);
 var $64=__ZNSt3__114__shared_count16__release_sharedEv($63);
 var $65=(($__o)|0);
 var $66=$56;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+48)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=FUNCTION_TABLE[$69]($61,$4,$17,$65);
 var $71=(($__o+($16<<2))|0);
 var $72=($_0_i|0)==($17|0);
 if($72){var $__op_0=$71;label=22;break;}else{label=21;break;}
 case 20: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1); var $74$1 = tempRet0;
 var $75=HEAP32[(($35)>>2)];
 var $76=(($75)|0);
 var $77=__ZNSt3__114__shared_count16__release_sharedEv($76);
 ___resumeException($74$0)
 case 21: 
 var $79=$__nar;
 var $80=$_0_i;
 var $81=((($80)-($79))|0);
 var $82=(($__o+($81<<2))|0);
 var $__op_0=$82;label=22;break;
 case 22: 
 var $__op_0;
 var $84=(($__s)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(($2)|0);
 HEAP32[(($86)>>2)]=$85;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$65,$__op_0,$71,$__iob,$__fl);
 var $$etemp$3$0=148;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $1=(sp)+(16);
 var $2=(sp)+(24);
 var $3=(sp)+(32);
 var $4=(sp)+(40);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 var $5=(($1)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $8=HEAP32[((13432)>>2)];
 var $9=($8|0)==-1;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($__p_i_i_i_i)|0);
 HEAP32[(($11)>>2)]=13432;
 var $12=(($__p_i_i_i_i+4)|0);
 HEAP32[(($12)>>2)]=(26);
 var $13=(($__p_i_i_i_i+8)|0);
 HEAP32[(($13)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13432,$7,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=22;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $14=HEAP32[((13436)>>2)];
 var $15=((($14)-(1))|0);
 var $16=(($6+12)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($6+8)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$17;
 var $21=$19;
 var $22=((($20)-($21))|0);
 var $23=$22>>2;
 var $24=($23>>>0)>($15>>>0);
 if($24){label=4;break;}else{label=5;break;}
 case 4: 
 var $25=(($19+($15<<2))|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)==0;
 if($27){label=5;break;}else{label=7;break;}
 case 5: 
 var $28=___cxa_allocate_exception(4);
 var $29=$28;
 __ZNSt8bad_castC2Ev($29);
 (function() { try { __THREW__ = 0; return ___cxa_throw($28,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=22;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $31=$26;
 var $32=HEAP32[(($5)>>2)];
 var $33=(($32)|0);
 var $34=__ZNSt3__114__shared_count16__release_sharedEv($33);
 HEAP32[(($__err)>>2)]=0;
 var $35=($__fmtb|0)==($__fmte|0);
 var $_phi_trans_insert_pre_pre=(($__b)|0);
 if($35){label=67;break;}else{label=8;break;}
 case 8: 
 var $36=(($__e)|0);
 var $37=$26;
 var $38=(($26+8)|0);
 var $39=$38;
 var $40=$26;
 var $41=$this;
 var $42=(($3)|0);
 var $43=(($4)|0);
 var $44=(($2)|0);
 var $_0_ph37=$__fmtb;var $_pre38=0;label=9;break;
 case 9: 
 var $_pre38;
 var $_0_ph37;
 var $46=$_pre38;label=10;break;
 case 10: 
 var $46;
 var $47=($46|0)==0;
 if($47){label=11;break;}else{label=67;break;}
 case 11: 
 var $49=HEAP32[(($_phi_trans_insert_pre_pre)>>2)];
 var $50=($49|0)==0;
 if($50){var $64=0;label=15;break;}else{label=12;break;}
 case 12: 
 var $52=(($49+12)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($49+16)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=($53|0)==($55|0);
 if($56){label=13;break;}else{var $64=$49;label=15;break;}
 case 13: 
 var $57=$49;
 var $58=HEAP32[(($57)>>2)];
 var $59=(($58+36)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=FUNCTION_TABLE[$60]($49);
 var $62=($61|0)==-1;
 if($62){label=14;break;}else{var $64=$49;label=15;break;}
 case 14: 
 HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=0;
 var $64=0;label=15;break;
 case 15: 
 var $64;
 var $65=($64|0)==0;
 var $66=HEAP32[(($36)>>2)];
 var $67=($66|0)==0;
 if($67){label=20;break;}else{label=16;break;}
 case 16: 
 var $69=(($66+12)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=(($66+16)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=($70|0)==($72|0);
 if($73){label=17;break;}else{label=19;break;}
 case 17: 
 var $74=$66;
 var $75=HEAP32[(($74)>>2)];
 var $76=(($75+36)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=FUNCTION_TABLE[$77]($66);
 var $79=($78|0)==-1;
 if($79){label=18;break;}else{label=19;break;}
 case 18: 
 HEAP32[(($36)>>2)]=0;
 label=20;break;
 case 19: 
 if($65){var $88=$66;label=23;break;}else{label=21;break;}
 case 20: 
 if($65){label=21;break;}else{var $88=0;label=23;break;}
 case 21: 
 HEAP32[(($__err)>>2)]=4;
 var $_pre_i_i_i19=$64;label=68;break;
 case 22: 
 var $83$0 = ___cxa_find_matching_catch(-1, -1); var $83$1 = tempRet0;
 var $84=HEAP32[(($5)>>2)];
 var $85=(($84)|0);
 var $86=__ZNSt3__114__shared_count16__release_sharedEv($85);
 ___resumeException($83$0)
 case 23: 
 var $88;
 var $89=HEAP8[($_0_ph37)];
 var $90=HEAP32[(($37)>>2)];
 var $91=(($90+36)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=FUNCTION_TABLE[$92]($31,$89,0);
 var $94=(($93<<24)>>24)==37;
 if($94){label=24;break;}else{label=33;break;}
 case 24: 
 var $96=(($_0_ph37+1)|0);
 var $97=($96|0)==($__fmte|0);
 if($97){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP32[(($__err)>>2)]=4;
 var $_pre_i_i_i19=$64;label=68;break;
 case 26: 
 var $100=HEAP8[($96)];
 var $101=HEAP32[(($37)>>2)];
 var $102=(($101+36)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=FUNCTION_TABLE[$103]($31,$100,0);
 if((($104<<24)>>24)==69|(($104<<24)>>24)==48){ label=27;break;}else{var $__opt_0=0;var $__cmd_0=$104;var $_1=$96;label=30;break;}
 case 27: 
 var $106=(($_0_ph37+2)|0);
 var $107=($106|0)==($__fmte|0);
 if($107){label=28;break;}else{label=29;break;}
 case 28: 
 HEAP32[(($__err)>>2)]=4;
 var $_pre_i_i_i19=$64;label=68;break;
 case 29: 
 var $110=HEAP8[($106)];
 var $111=HEAP32[(($37)>>2)];
 var $112=(($111+36)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=FUNCTION_TABLE[$113]($31,$110,0);
 var $__opt_0=$104;var $__cmd_0=$114;var $_1=$106;label=30;break;
 case 30: 
 var $_1;
 var $__cmd_0;
 var $__opt_0;
 var $116=HEAP32[(($41)>>2)];
 var $117=(($116+36)|0);
 var $118=HEAP32[(($117)>>2)];
 HEAP32[(($42)>>2)]=$64;
 HEAP32[(($43)>>2)]=$88;
 FUNCTION_TABLE[$118]($2,$this,$3,$4,$__iob,$__err,$__tm,$__cmd_0,$__opt_0);
 var $119=HEAP32[(($44)>>2)];
 HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=$119;
 var $120=(($_1+1)|0);
 var $_0_ph_be=$120;label=31;break;
 case 31: 
 var $_0_ph_be;
 var $121=($_0_ph_be|0)==($__fmte|0);
 if($121){label=67;break;}else{label=32;break;}
 case 32: 
 var $_pre38_pre=HEAP32[(($__err)>>2)];
 var $_0_ph37=$_0_ph_be;var $_pre38=$_pre38_pre;label=9;break;
 case 33: 
 var $123=HEAP8[($_0_ph37)];
 var $isascii1_i=(($123<<24)>>24)>-1;
 if($isascii1_i){label=34;break;}else{label=58;break;}
 case 34: 
 var $124=(($123<<24)>>24);
 var $125=HEAP32[(($39)>>2)];
 var $126=(($125+($124<<1))|0);
 var $127=HEAP16[(($126)>>1)];
 var $128=$127&8192;
 var $129=(($128<<16)>>16)==0;
 if($129){label=58;break;}else{var $_0_pn=$_0_ph37;label=35;break;}
 case 35: 
 var $_0_pn;
 var $_2=(($_0_pn+1)|0);
 var $130=($_2|0)==($__fmte|0);
 if($130){var $_2_lcssa=$__fmte;label=38;break;}else{label=36;break;}
 case 36: 
 var $132=HEAP8[($_2)];
 var $isascii1_i2=(($132<<24)>>24)>-1;
 if($isascii1_i2){label=37;break;}else{var $_2_lcssa=$_2;label=38;break;}
 case 37: 
 var $133=(($132<<24)>>24);
 var $134=(($125+($133<<1))|0);
 var $135=HEAP16[(($134)>>1)];
 var $136=$135&8192;
 var $137=(($136<<16)>>16)==0;
 if($137){var $_2_lcssa=$_2;label=38;break;}else{var $_0_pn=$_2;label=35;break;}
 case 38: 
 var $_2_lcssa;
 var $_pre_i_i_i5=$64;var $138=$88;var $_pre_i2_i_i9=$88;label=39;break;
 case 39: 
 var $_pre_i2_i_i9;
 var $138;
 var $_pre_i_i_i5;
 var $139=($_pre_i_i_i5|0)==0;
 if($139){var $153=0;label=43;break;}else{label=40;break;}
 case 40: 
 var $141=(($_pre_i_i_i5+12)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(($_pre_i_i_i5+16)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=($142|0)==($144|0);
 if($145){label=41;break;}else{var $153=$_pre_i_i_i5;label=43;break;}
 case 41: 
 var $146=$_pre_i_i_i5;
 var $147=HEAP32[(($146)>>2)];
 var $148=(($147+36)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=FUNCTION_TABLE[$149]($_pre_i_i_i5);
 var $151=($150|0)==-1;
 if($151){label=42;break;}else{var $153=$_pre_i_i_i5;label=43;break;}
 case 42: 
 HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=0;
 var $153=0;label=43;break;
 case 43: 
 var $153;
 var $154=($153|0)==0;
 var $155=($138|0)==0;
 if($155){var $_pre_i2_i_i940=$_pre_i2_i_i9;label=48;break;}else{label=44;break;}
 case 44: 
 var $157=(($138+12)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(($138+16)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=($158|0)==($160|0);
 if($161){label=46;break;}else{label=45;break;}
 case 45: 
 if($154){var $171=$138;var $_pre_i2_i_i939=$_pre_i2_i_i9;label=50;break;}else{var $_0_ph_be=$_2_lcssa;label=31;break;}
 case 46: 
 var $162=$138;
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+36)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=FUNCTION_TABLE[$165]($138);
 var $167=($166|0)==-1;
 if($167){label=47;break;}else{label=49;break;}
 case 47: 
 HEAP32[(($36)>>2)]=0;
 var $_pre_i2_i_i940=0;label=48;break;
 case 48: 
 var $_pre_i2_i_i940;
 if($154){var $_0_ph_be=$_2_lcssa;label=31;break;}else{var $171=0;var $_pre_i2_i_i939=$_pre_i2_i_i940;label=50;break;}
 case 49: 
 var $169=($_pre_i2_i_i9|0)==0;
 var $tmp_i_i11=$154^$169;
 if($tmp_i_i11){var $171=$_pre_i2_i_i9;var $_pre_i2_i_i939=$_pre_i2_i_i9;label=50;break;}else{var $_0_ph_be=$_2_lcssa;label=31;break;}
 case 50: 
 var $_pre_i2_i_i939;
 var $171;
 var $172=(($153+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($153+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($173|0)==($175|0);
 if($176){label=51;break;}else{label=52;break;}
 case 51: 
 var $178=$153;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+36)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=FUNCTION_TABLE[$181]($153);
 var $extract_t_i=(($182)&255);
 var $_0_i_off0_i=$extract_t_i;label=53;break;
 case 52: 
 var $184=HEAP8[($173)];
 var $_0_i_off0_i=$184;label=53;break;
 case 53: 
 var $_0_i_off0_i;
 var $isascii1_i12=(($_0_i_off0_i<<24)>>24)>-1;
 if($isascii1_i12){label=54;break;}else{var $_0_ph_be=$_2_lcssa;label=31;break;}
 case 54: 
 var $185=(($_0_i_off0_i<<24)>>24);
 var $186=HEAP32[(($39)>>2)];
 var $187=(($186+($185<<1))|0);
 var $188=HEAP16[(($187)>>1)];
 var $189=$188&8192;
 var $190=(($189<<16)>>16)==0;
 if($190){var $_0_ph_be=$_2_lcssa;label=31;break;}else{label=55;break;}
 case 55: 
 var $192=HEAP32[(($172)>>2)];
 var $193=HEAP32[(($174)>>2)];
 var $194=($192|0)==($193|0);
 if($194){label=56;break;}else{label=57;break;}
 case 56: 
 var $196=$153;
 var $197=HEAP32[(($196)>>2)];
 var $198=(($197+40)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=FUNCTION_TABLE[$199]($153);
 var $_pre_i_i_i5=$153;var $138=$171;var $_pre_i2_i_i9=$_pre_i2_i_i939;label=39;break;
 case 57: 
 var $202=(($192+1)|0);
 HEAP32[(($172)>>2)]=$202;
 var $_pre_i_i_i5=$153;var $138=$171;var $_pre_i2_i_i9=$_pre_i2_i_i939;label=39;break;
 case 58: 
 var $203=(($64+12)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=(($64+16)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=($204|0)==($206|0);
 if($207){label=59;break;}else{label=60;break;}
 case 59: 
 var $209=$64;
 var $210=HEAP32[(($209)>>2)];
 var $211=(($210+36)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=FUNCTION_TABLE[$212]($64);
 var $extract_t_i14=(($213)&255);
 var $_0_i_off0_i15=$extract_t_i14;label=61;break;
 case 60: 
 var $215=HEAP8[($204)];
 var $_0_i_off0_i15=$215;label=61;break;
 case 61: 
 var $_0_i_off0_i15;
 var $216=HEAP32[(($40)>>2)];
 var $217=(($216+12)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=FUNCTION_TABLE[$218]($31,$_0_i_off0_i15);
 var $220=HEAP8[($_0_ph37)];
 var $221=HEAP32[(($40)>>2)];
 var $222=(($221+12)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=FUNCTION_TABLE[$223]($31,$220);
 var $225=(($219<<24)>>24)==(($224<<24)>>24);
 if($225){label=62;break;}else{label=66;break;}
 case 62: 
 var $227=HEAP32[(($203)>>2)];
 var $228=HEAP32[(($205)>>2)];
 var $229=($227|0)==($228|0);
 if($229){label=63;break;}else{label=64;break;}
 case 63: 
 var $231=$64;
 var $232=HEAP32[(($231)>>2)];
 var $233=(($232+40)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=FUNCTION_TABLE[$234]($64);
 label=65;break;
 case 64: 
 var $237=(($227+1)|0);
 HEAP32[(($203)>>2)]=$237;
 label=65;break;
 case 65: 
 var $238=(($_0_ph37+1)|0);
 var $_0_ph_be=$238;label=31;break;
 case 66: 
 HEAP32[(($__err)>>2)]=4;
 var $46=4;label=10;break;
 case 67: 
 var $_pre=HEAP32[(($_phi_trans_insert_pre_pre)>>2)];
 var $_pre_i_i_i19=$_pre;label=68;break;
 case 68: 
 var $_pre_i_i_i19;
 var $239=(($__b)|0);
 var $240=($_pre_i_i_i19|0)==0;
 if($240){var $254=0;label=72;break;}else{label=69;break;}
 case 69: 
 var $242=(($_pre_i_i_i19+12)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=(($_pre_i_i_i19+16)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=($243|0)==($245|0);
 if($246){label=70;break;}else{var $254=$_pre_i_i_i19;label=72;break;}
 case 70: 
 var $247=$_pre_i_i_i19;
 var $248=HEAP32[(($247)>>2)];
 var $249=(($248+36)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=FUNCTION_TABLE[$250]($_pre_i_i_i19);
 var $252=($251|0)==-1;
 if($252){label=71;break;}else{var $254=$_pre_i_i_i19;label=72;break;}
 case 71: 
 HEAP32[(($239)>>2)]=0;
 var $254=0;label=72;break;
 case 72: 
 var $254;
 var $255=($254|0)==0;
 var $256=(($__e)|0);
 var $257=HEAP32[(($256)>>2)];
 var $258=($257|0)==0;
 if($258){label=77;break;}else{label=73;break;}
 case 73: 
 var $260=(($257+12)|0);
 var $261=HEAP32[(($260)>>2)];
 var $262=(($257+16)|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=($261|0)==($263|0);
 if($264){label=74;break;}else{label=76;break;}
 case 74: 
 var $265=$257;
 var $266=HEAP32[(($265)>>2)];
 var $267=(($266+36)|0);
 var $268=HEAP32[(($267)>>2)];
 var $269=FUNCTION_TABLE[$268]($257);
 var $270=($269|0)==-1;
 if($270){label=75;break;}else{label=76;break;}
 case 75: 
 HEAP32[(($256)>>2)]=0;
 label=77;break;
 case 76: 
 if($255){label=79;break;}else{label=78;break;}
 case 77: 
 if($255){label=78;break;}else{label=79;break;}
 case 78: 
 var $273=HEAP32[(($__err)>>2)];
 var $274=$273|2;
 HEAP32[(($__err)>>2)]=$274;
 label=79;break;
 case 79: 
 var $276=(($agg_result)|0);
 HEAP32[(($276)>>2)]=$254;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this){
 var label=0;


 return 2;
}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result,$this,$1,$2,$__iob,$__err,$__tm,2472,2480);
 STACKTOP=sp;return;
}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($this+8)|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+20)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=FUNCTION_TABLE[$7]($3);
 var $9=(($__b)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($1)|0);
 HEAP32[(($11)>>2)]=$10;
 var $12=(($__e)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=$8;
 var $16=HEAP8[($15)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)==0;
 if($18){label=3;break;}else{label=2;break;}
 case 2: 
 var $20=(($8+8)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=(($8+4)|0);
 var $23=HEAP32[(($22)>>2)];
 var $33=$23;var $32=$21;var $31=$21;label=4;break;
 case 3: 
 var $25=$8;
 var $26=(($25+1)|0);
 var $27=$8;
 var $28=(($27+1)|0);
 var $29=($16&255);
 var $30=$29>>>1;
 var $33=$30;var $32=$26;var $31=$28;label=4;break;
 case 4: 
 var $31;
 var $32;
 var $33;
 var $34=(($31+$33)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result,$this,$1,$2,$__iob,$__err,$__tm,$32,$34);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__p_i_i_i_i=(sp)+(8);
 var $2=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $6=HEAP32[((13432)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($__p_i_i_i_i)|0);
 HEAP32[(($9)>>2)]=13432;
 var $10=(($__p_i_i_i_i+4)|0);
 HEAP32[(($10)>>2)]=(26);
 var $11=(($__p_i_i_i_i+8)|0);
 HEAP32[(($11)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13432,$5,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=10;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $12=HEAP32[((13436)>>2)];
 var $13=((($12)-(1))|0);
 var $14=(($4+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($4+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$15;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($13>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($13<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 __ZNSt8bad_castC2Ev($27);
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=10;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $29=$24;
 var $30=HEAP32[(($3)>>2)];
 var $31=(($30)|0);
 var $32=__ZNSt3__114__shared_count16__release_sharedEv($31);
 var $33=(($__e)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$1;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $36=(($this+8)|0);
 var $37=$36;
 var $38=HEAP32[(($37)>>2)];
 var $39=HEAP32[(($38)>>2)];
 var $40=FUNCTION_TABLE[$39]($36);
 var $41=(($1)|0);
 HEAP32[(($41)>>2)]=$34;
 var $42=(($40+168)|0);
 var $43=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$1,$40,$42,$29,$__err,0);
 var $44=$43;
 var $45=$40;
 var $46=((($44)-($45))|0);
 var $47=($46|0)<168;
 if($47){label=8;break;}else{label=9;break;}
 case 8: 
 var $49=(($__tm+24)|0);
 var $50=(((($46|0))/(12))&-1);
 var $51=(((($50|0))%(7))&-1);
 HEAP32[(($49)>>2)]=$51;
 label=9;break;
 case 9: 
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $52=(($__b)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($agg_result)|0);
 HEAP32[(($54)>>2)]=$53;
 STACKTOP=sp;return;
 case 10: 
 var $56$0 = ___cxa_find_matching_catch(-1, -1); var $56$1 = tempRet0;
 var $57=HEAP32[(($3)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 ___resumeException($56$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__p_i_i_i_i=(sp)+(8);
 var $2=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $6=HEAP32[((13432)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($__p_i_i_i_i)|0);
 HEAP32[(($9)>>2)]=13432;
 var $10=(($__p_i_i_i_i+4)|0);
 HEAP32[(($10)>>2)]=(26);
 var $11=(($__p_i_i_i_i+8)|0);
 HEAP32[(($11)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13432,$5,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=10;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $12=HEAP32[((13436)>>2)];
 var $13=((($12)-(1))|0);
 var $14=(($4+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($4+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$15;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($13>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($13<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 __ZNSt8bad_castC2Ev($27);
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=10;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $29=$24;
 var $30=HEAP32[(($3)>>2)];
 var $31=(($30)|0);
 var $32=__ZNSt3__114__shared_count16__release_sharedEv($31);
 var $33=(($__e)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$1;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $36=(($this+8)|0);
 var $37=$36;
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+4)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=FUNCTION_TABLE[$40]($36);
 var $42=(($1)|0);
 HEAP32[(($42)>>2)]=$34;
 var $43=(($41+288)|0);
 var $44=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$1,$41,$43,$29,$__err,0);
 var $45=$44;
 var $46=$41;
 var $47=((($45)-($46))|0);
 var $48=($47|0)<288;
 if($48){label=8;break;}else{label=9;break;}
 case 8: 
 var $50=(($__tm+16)|0);
 var $51=(((($47|0))/(12))&-1);
 var $52=(((($51|0))%(12))&-1);
 HEAP32[(($50)>>2)]=$52;
 label=9;break;
 case 9: 
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $53=(($__b)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($agg_result)|0);
 HEAP32[(($55)>>2)]=$54;
 STACKTOP=sp;return;
 case 10: 
 var $57$0 = ___cxa_find_matching_catch(-1, -1); var $57$1 = tempRet0;
 var $58=HEAP32[(($3)>>2)];
 var $59=(($58)|0);
 var $60=__ZNSt3__114__shared_count16__release_sharedEv($59);
 ___resumeException($57$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__p_i_i_i_i=(sp)+(8);
 var $2=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $6=HEAP32[((13432)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($__p_i_i_i_i)|0);
 HEAP32[(($9)>>2)]=13432;
 var $10=(($__p_i_i_i_i+4)|0);
 HEAP32[(($10)>>2)]=(26);
 var $11=(($__p_i_i_i_i+8)|0);
 HEAP32[(($11)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13432,$5,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=13;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $12=HEAP32[((13436)>>2)];
 var $13=((($12)-(1))|0);
 var $14=(($4+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($4+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$15;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($13>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($13<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 __ZNSt8bad_castC2Ev($27);
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=13;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $29=$24;
 var $30=HEAP32[(($3)>>2)];
 var $31=(($30)|0);
 var $32=__ZNSt3__114__shared_count16__release_sharedEv($31);
 var $33=(($__tm+20)|0);
 var $34=(($__e)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=$1;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $37=(($1)|0);
 HEAP32[(($37)>>2)]=$35;
 var $38=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$1,$__err,$29,4);
 var $39=HEAP32[(($__err)>>2)];
 var $40=$39&4;
 var $41=($40|0)==0;
 if($41){label=8;break;}else{label=12;break;}
 case 8: 
 var $43=($38|0)<69;
 if($43){label=9;break;}else{label=10;break;}
 case 9: 
 var $45=((($38)+(2000))|0);
 var $__t_0_i=$45;label=11;break;
 case 10: 
 var $_off_i=((($38)-(69))|0);
 var $47=($_off_i>>>0)<31;
 var $48=((($38)+(1900))|0);
 var $__i=($47?$48:$38);
 var $__t_0_i=$__i;label=11;break;
 case 11: 
 var $__t_0_i;
 var $50=((($__t_0_i)-(1900))|0);
 HEAP32[(($33)>>2)]=$50;
 label=12;break;
 case 12: 
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $51=(($__b)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($agg_result)|0);
 HEAP32[(($53)>>2)]=$52;
 STACKTOP=sp;return;
 case 13: 
 var $55$0 = ___cxa_find_matching_catch(-1, -1); var $55$1 = tempRet0;
 var $56=HEAP32[(($3)>>2)];
 var $57=(($56)|0);
 var $58=__ZNSt3__114__shared_count16__release_sharedEv($57);
 ___resumeException($55$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=sp;
 var $3=(sp)+(8);
 var $4=(sp)+(16);
 var $5=(sp)+(24);
 var $6=(sp)+(32);
 var $7=(sp)+(40);
 var $8=(sp)+(48);
 var $9=(sp)+(56);
 var $10=(sp)+(64);
 var $11=(sp)+(72);
 var $12=(sp)+(80);
 var $13=(sp)+(88);
 var $14=(sp)+(96);
 var $__p_i_i_i_i=(sp)+(104);
 var $15=(sp)+(120);
 var $16=(sp)+(128);
 var $17=(sp)+(136);
 var $18=(sp)+(144);
 var $19=(sp)+(152);
 var $20=(sp)+(160);
 var $21=(sp)+(168);
 var $22=(sp)+(176);
 var $23=(sp)+(184);
 var $24=(sp)+(192);
 var $25=(sp)+(200);
 var $26=(sp)+(208);
 var $27=(sp)+(216);
 var $28=(sp)+(224);
 var $29=(sp)+(232);
 var $30=(sp)+(240);
 var $31=(sp)+(248);
 var $32=(sp)+(256);
 var $33=(sp)+(264);
 var $34=(sp)+(272);
 var $35=(sp)+(280);
 var $36=(sp)+(288);
 var $37=(sp)+(296);
 var $38=(sp)+(304);
 var $39=(sp)+(312);
 var $40=(sp)+(320);
 HEAP32[(($__err)>>2)]=0;
 __ZNKSt3__18ios_base6getlocEv($15,$__iob);
 var $41=(($15)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $44=HEAP32[((13432)>>2)];
 var $45=($44|0)==-1;
 if($45){label=3;break;}else{label=2;break;}
 case 2: 
 var $47=(($__p_i_i_i_i)|0);
 HEAP32[(($47)>>2)]=13432;
 var $48=(($__p_i_i_i_i+4)|0);
 HEAP32[(($48)>>2)]=(26);
 var $49=(($__p_i_i_i_i+8)|0);
 HEAP32[(($49)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13432,$43,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=8;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $50=HEAP32[((13436)>>2)];
 var $51=((($50)-(1))|0);
 var $52=(($42+12)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($42+8)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=$53;
 var $57=$55;
 var $58=((($56)-($57))|0);
 var $59=$58>>2;
 var $60=($59>>>0)>($51>>>0);
 if($60){label=4;break;}else{label=5;break;}
 case 4: 
 var $61=(($55+($51<<2))|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=($62|0)==0;
 if($63){label=5;break;}else{label=7;break;}
 case 5: 
 var $64=___cxa_allocate_exception(4);
 var $65=$64;
 __ZNSt8bad_castC2Ev($65);
 (function() { try { __THREW__ = 0; return ___cxa_throw($64,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $67=$62;
 var $68=HEAP32[(($41)>>2)];
 var $69=(($68)|0);
 var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
 var $71=(($__fmt<<24)>>24);
 switch(($71|0)){case 98:case 66:case 104:{ label=11;break;}case 99:{ label=13;break;}case 100:case 101:{ label=17;break;}case 68:{ label=20;break;}case 70:{ label=21;break;}case 72:{ label=22;break;}case 73:{ label=25;break;}case 106:{ label=28;break;}case 109:{ label=31;break;}case 77:{ label=34;break;}case 110:case 116:{ label=37;break;}case 112:{ label=38;break;}case 114:{ label=52;break;}case 82:{ label=53;break;}case 83:{ label=54;break;}case 84:{ label=57;break;}case 119:{ label=58;break;}case 120:{ label=61;break;}case 88:{ label=62;break;}case 121:{ label=66;break;}case 89:{ label=71;break;}case 37:{ label=73;break;}case 97:case 65:{ label=9;break;}default:{label=74;break;}}break;
 case 8: 
 var $73$0 = ___cxa_find_matching_catch(-1, -1); var $73$1 = tempRet0;
 var $74=HEAP32[(($41)>>2)];
 var $75=(($74)|0);
 var $76=__ZNSt3__114__shared_count16__release_sharedEv($75);
 ___resumeException($73$0)
 case 9: 
 var $78=(($__e)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=$14;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $81=(($this+8)|0);
 var $82=$81;
 var $83=HEAP32[(($82)>>2)];
 var $84=HEAP32[(($83)>>2)];
 var $85=FUNCTION_TABLE[$84]($81);
 var $86=(($14)|0);
 HEAP32[(($86)>>2)]=$79;
 var $87=(($85+168)|0);
 var $88=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$14,$85,$87,$67,$__err,0);
 var $89=$88;
 var $90=$85;
 var $91=((($89)-($90))|0);
 var $92=($91|0)<168;
 if($92){label=10;break;}else{label=75;break;}
 case 10: 
 var $94=(($__tm+24)|0);
 var $95=(((($91|0))/(12))&-1);
 var $96=(((($95|0))%(7))&-1);
 HEAP32[(($94)>>2)]=$96;
 label=75;break;
 case 11: 
 var $98=(($__e)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=$13;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $101=(($this+8)|0);
 var $102=$101;
 var $103=HEAP32[(($102)>>2)];
 var $104=(($103+4)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=FUNCTION_TABLE[$105]($101);
 var $107=(($13)|0);
 HEAP32[(($107)>>2)]=$99;
 var $108=(($106+288)|0);
 var $109=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$13,$106,$108,$67,$__err,0);
 var $110=$109;
 var $111=$106;
 var $112=((($110)-($111))|0);
 var $113=($112|0)<288;
 if($113){label=12;break;}else{label=75;break;}
 case 12: 
 var $115=(($__tm+16)|0);
 var $116=(((($112|0))/(12))&-1);
 var $117=(((($116|0))%(12))&-1);
 HEAP32[(($115)>>2)]=$117;
 label=75;break;
 case 13: 
 var $119=(($this+8)|0);
 var $120=$119;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+12)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=FUNCTION_TABLE[$123]($119);
 var $125=(($__b)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=(($17)|0);
 HEAP32[(($127)>>2)]=$126;
 var $128=(($__e)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=(($18)|0);
 HEAP32[(($130)>>2)]=$129;
 var $131=$124;
 var $132=HEAP8[($131)];
 var $133=$132&1;
 var $134=(($133<<24)>>24)==0;
 if($134){label=15;break;}else{label=14;break;}
 case 14: 
 var $136=(($124+8)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=(($124+4)|0);
 var $139=HEAP32[(($138)>>2)];
 var $149=$139;var $148=$137;var $147=$137;label=16;break;
 case 15: 
 var $141=$124;
 var $142=(($141+1)|0);
 var $143=$124;
 var $144=(($143+1)|0);
 var $145=($132&255);
 var $146=$145>>>1;
 var $149=$146;var $148=$142;var $147=$144;label=16;break;
 case 16: 
 var $147;
 var $148;
 var $149;
 var $150=(($147+$149)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($16,$this,$17,$18,$__iob,$__err,$__tm,$148,$150);
 var $151=(($16)|0);
 var $152=HEAP32[(($151)>>2)];
 HEAP32[(($125)>>2)]=$152;
 label=75;break;
 case 17: 
 var $154=(($__e)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=$12;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $157=(($12)|0);
 HEAP32[(($157)>>2)]=$155;
 var $158=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$12,$__err,$67,2);
 var $159=HEAP32[(($__err)>>2)];
 var $160=$159&4;
 var $161=($160|0)==0;
 var $162=($158|0)>0;
 var $or_cond_i=$161&$162;
 var $163=($158|0)<32;
 var $or_cond3_i=$or_cond_i&$163;
 if($or_cond3_i){label=18;break;}else{label=19;break;}
 case 18: 
 var $165=(($__tm+12)|0);
 HEAP32[(($165)>>2)]=$158;
 label=75;break;
 case 19: 
 var $167=$159|4;
 HEAP32[(($__err)>>2)]=$167;
 label=75;break;
 case 20: 
 var $169=(($__b)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=(($20)|0);
 HEAP32[(($171)>>2)]=$170;
 var $172=(($__e)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($21)|0);
 HEAP32[(($174)>>2)]=$173;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($19,$this,$20,$21,$__iob,$__err,$__tm,2464,2472);
 var $175=(($19)|0);
 var $176=HEAP32[(($175)>>2)];
 HEAP32[(($169)>>2)]=$176;
 label=75;break;
 case 21: 
 var $178=(($__b)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(($23)|0);
 HEAP32[(($180)>>2)]=$179;
 var $181=(($__e)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=(($24)|0);
 HEAP32[(($183)>>2)]=$182;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($22,$this,$23,$24,$__iob,$__err,$__tm,2456,2464);
 var $184=(($22)|0);
 var $185=HEAP32[(($184)>>2)];
 HEAP32[(($178)>>2)]=$185;
 label=75;break;
 case 22: 
 var $187=(($__e)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=$11;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $190=(($11)|0);
 HEAP32[(($190)>>2)]=$188;
 var $191=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$11,$__err,$67,2);
 var $192=HEAP32[(($__err)>>2)];
 var $193=$192&4;
 var $194=($193|0)==0;
 var $195=($191|0)<24;
 var $or_cond_i10=$194&$195;
 if($or_cond_i10){label=23;break;}else{label=24;break;}
 case 23: 
 var $197=(($__tm+8)|0);
 HEAP32[(($197)>>2)]=$191;
 label=75;break;
 case 24: 
 var $199=$192|4;
 HEAP32[(($__err)>>2)]=$199;
 label=75;break;
 case 25: 
 var $201=(($__e)|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=$10;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $204=(($10)|0);
 HEAP32[(($204)>>2)]=$202;
 var $205=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$10,$__err,$67,2);
 var $206=HEAP32[(($__err)>>2)];
 var $207=$206&4;
 var $208=($207|0)==0;
 var $209=($205|0)>0;
 var $or_cond_i13=$208&$209;
 var $210=($205|0)<13;
 var $or_cond3_i14=$or_cond_i13&$210;
 if($or_cond3_i14){label=26;break;}else{label=27;break;}
 case 26: 
 var $212=(($__tm+8)|0);
 HEAP32[(($212)>>2)]=$205;
 label=75;break;
 case 27: 
 var $214=$206|4;
 HEAP32[(($__err)>>2)]=$214;
 label=75;break;
 case 28: 
 var $216=(($__e)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=$9;
 var $$etemp$7$0=4;
 var $$etemp$7$1=0;

 var $219=(($9)|0);
 HEAP32[(($219)>>2)]=$217;
 var $220=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$9,$__err,$67,3);
 var $221=HEAP32[(($__err)>>2)];
 var $222=$221&4;
 var $223=($222|0)==0;
 var $224=($220|0)<366;
 var $or_cond_i17=$223&$224;
 if($or_cond_i17){label=29;break;}else{label=30;break;}
 case 29: 
 var $226=(($__tm+28)|0);
 HEAP32[(($226)>>2)]=$220;
 label=75;break;
 case 30: 
 var $228=$221|4;
 HEAP32[(($__err)>>2)]=$228;
 label=75;break;
 case 31: 
 var $230=(($__e)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=$8;
 var $$etemp$8$0=4;
 var $$etemp$8$1=0;

 var $233=(($8)|0);
 HEAP32[(($233)>>2)]=$231;
 var $234=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$8,$__err,$67,2);
 var $235=HEAP32[(($__err)>>2)];
 var $236=$235&4;
 var $237=($236|0)==0;
 var $238=($234|0)<13;
 var $or_cond_i20=$237&$238;
 if($or_cond_i20){label=32;break;}else{label=33;break;}
 case 32: 
 var $240=(($__tm+16)|0);
 var $241=((($234)-(1))|0);
 HEAP32[(($240)>>2)]=$241;
 label=75;break;
 case 33: 
 var $243=$235|4;
 HEAP32[(($__err)>>2)]=$243;
 label=75;break;
 case 34: 
 var $245=(($__e)|0);
 var $246=HEAP32[(($245)>>2)];
 var $247=$7;
 var $$etemp$9$0=4;
 var $$etemp$9$1=0;

 var $248=(($7)|0);
 HEAP32[(($248)>>2)]=$246;
 var $249=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$7,$__err,$67,2);
 var $250=HEAP32[(($__err)>>2)];
 var $251=$250&4;
 var $252=($251|0)==0;
 var $253=($249|0)<60;
 var $or_cond_i23=$252&$253;
 if($or_cond_i23){label=35;break;}else{label=36;break;}
 case 35: 
 var $255=(($__tm+4)|0);
 HEAP32[(($255)>>2)]=$249;
 label=75;break;
 case 36: 
 var $257=$250|4;
 HEAP32[(($__err)>>2)]=$257;
 label=75;break;
 case 37: 
 var $259=(($__e)|0);
 var $260=HEAP32[(($259)>>2)];
 var $261=(($25)|0);
 HEAP32[(($261)>>2)]=$260;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$25,$__err,$67);
 label=75;break;
 case 38: 
 var $263=(($__tm+8)|0);
 var $264=(($__e)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=$6;
 var $$etemp$10$0=4;
 var $$etemp$10$1=0;

 var $267=(($this+8)|0);
 var $268=$267;
 var $269=HEAP32[(($268)>>2)];
 var $270=(($269+8)|0);
 var $271=HEAP32[(($270)>>2)];
 var $272=FUNCTION_TABLE[$271]($267);
 var $273=$272;
 var $274=HEAP8[($273)];
 var $275=$274&1;
 var $276=(($275<<24)>>24)==0;
 if($276){label=40;break;}else{label=39;break;}
 case 39: 
 var $278=(($272+4)|0);
 var $279=HEAP32[(($278)>>2)];
 var $283=$279;label=41;break;
 case 40: 
 var $281=($274&255);
 var $282=$281>>>1;
 var $283=$282;label=41;break;
 case 41: 
 var $283;
 var $284=(($272+12)|0);
 var $285=$284;
 var $286=HEAP8[($285)];
 var $287=$286&1;
 var $288=(($287<<24)>>24)==0;
 if($288){label=43;break;}else{label=42;break;}
 case 42: 
 var $290=(($272+16)|0);
 var $291=HEAP32[(($290)>>2)];
 var $295=$291;label=44;break;
 case 43: 
 var $293=($286&255);
 var $294=$293>>>1;
 var $295=$294;label=44;break;
 case 44: 
 var $295;
 var $296=(((-$295))|0);
 var $297=($283|0)==($296|0);
 if($297){label=45;break;}else{label=46;break;}
 case 45: 
 var $299=HEAP32[(($__err)>>2)];
 var $300=$299|4;
 HEAP32[(($__err)>>2)]=$300;
 label=75;break;
 case 46: 
 var $302=(($6)|0);
 HEAP32[(($302)>>2)]=$265;
 var $303=(($272+24)|0);
 var $304=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$6,$272,$303,$67,$__err,0);
 var $305=$304;
 var $306=$272;
 var $307=((($305)-($306))|0);
 var $308=($304|0)==($272|0);
 if($308){label=47;break;}else{label=49;break;}
 case 47: 
 var $310=HEAP32[(($263)>>2)];
 var $311=($310|0)==12;
 if($311){label=48;break;}else{label=49;break;}
 case 48: 
 HEAP32[(($263)>>2)]=0;
 label=75;break;
 case 49: 
 var $314=($307|0)==12;
 if($314){label=50;break;}else{label=75;break;}
 case 50: 
 var $316=HEAP32[(($263)>>2)];
 var $317=($316|0)<12;
 if($317){label=51;break;}else{label=75;break;}
 case 51: 
 var $319=((($316)+(12))|0);
 HEAP32[(($263)>>2)]=$319;
 label=75;break;
 case 52: 
 var $321=(($__b)|0);
 var $322=HEAP32[(($321)>>2)];
 var $323=(($27)|0);
 HEAP32[(($323)>>2)]=$322;
 var $324=(($__e)|0);
 var $325=HEAP32[(($324)>>2)];
 var $326=(($28)|0);
 HEAP32[(($326)>>2)]=$325;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($26,$this,$27,$28,$__iob,$__err,$__tm,2440,2451);
 var $327=(($26)|0);
 var $328=HEAP32[(($327)>>2)];
 HEAP32[(($321)>>2)]=$328;
 label=75;break;
 case 53: 
 var $330=(($__b)|0);
 var $331=HEAP32[(($330)>>2)];
 var $332=(($30)|0);
 HEAP32[(($332)>>2)]=$331;
 var $333=(($__e)|0);
 var $334=HEAP32[(($333)>>2)];
 var $335=(($31)|0);
 HEAP32[(($335)>>2)]=$334;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($29,$this,$30,$31,$__iob,$__err,$__tm,2432,2437);
 var $336=(($29)|0);
 var $337=HEAP32[(($336)>>2)];
 HEAP32[(($330)>>2)]=$337;
 label=75;break;
 case 54: 
 var $339=(($__e)|0);
 var $340=HEAP32[(($339)>>2)];
 var $341=$5;
 var $$etemp$11$0=4;
 var $$etemp$11$1=0;

 var $342=(($5)|0);
 HEAP32[(($342)>>2)]=$340;
 var $343=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$5,$__err,$67,2);
 var $344=HEAP32[(($__err)>>2)];
 var $345=$344&4;
 var $346=($345|0)==0;
 var $347=($343|0)<61;
 var $or_cond_i28=$346&$347;
 if($or_cond_i28){label=55;break;}else{label=56;break;}
 case 55: 
 var $349=(($__tm)|0);
 HEAP32[(($349)>>2)]=$343;
 label=75;break;
 case 56: 
 var $351=$344|4;
 HEAP32[(($__err)>>2)]=$351;
 label=75;break;
 case 57: 
 var $353=(($__b)|0);
 var $354=HEAP32[(($353)>>2)];
 var $355=(($33)|0);
 HEAP32[(($355)>>2)]=$354;
 var $356=(($__e)|0);
 var $357=HEAP32[(($356)>>2)];
 var $358=(($34)|0);
 HEAP32[(($358)>>2)]=$357;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($32,$this,$33,$34,$__iob,$__err,$__tm,2424,2432);
 var $359=(($32)|0);
 var $360=HEAP32[(($359)>>2)];
 HEAP32[(($353)>>2)]=$360;
 label=75;break;
 case 58: 
 var $362=(($__e)|0);
 var $363=HEAP32[(($362)>>2)];
 var $364=$4;
 var $$etemp$12$0=4;
 var $$etemp$12$1=0;

 var $365=(($4)|0);
 HEAP32[(($365)>>2)]=$363;
 var $366=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$4,$__err,$67,1);
 var $367=HEAP32[(($__err)>>2)];
 var $368=$367&4;
 var $369=($368|0)==0;
 var $370=($366|0)<7;
 var $or_cond_i31=$369&$370;
 if($or_cond_i31){label=59;break;}else{label=60;break;}
 case 59: 
 var $372=(($__tm+24)|0);
 HEAP32[(($372)>>2)]=$366;
 label=75;break;
 case 60: 
 var $374=$367|4;
 HEAP32[(($__err)>>2)]=$374;
 label=75;break;
 case 61: 
 var $376=$this;
 var $377=HEAP32[(($376)>>2)];
 var $378=(($377+20)|0);
 var $379=HEAP32[(($378)>>2)];
 var $380=(($__b)|0);
 var $381=HEAP32[(($380)>>2)];
 var $382=(($35)|0);
 HEAP32[(($382)>>2)]=$381;
 var $383=(($__e)|0);
 var $384=HEAP32[(($383)>>2)];
 var $385=(($36)|0);
 HEAP32[(($385)>>2)]=$384;
 FUNCTION_TABLE[$379]($agg_result,$this,$35,$36,$__iob,$__err,$__tm);
 label=76;break;
 case 62: 
 var $387=(($this+8)|0);
 var $388=$387;
 var $389=HEAP32[(($388)>>2)];
 var $390=(($389+24)|0);
 var $391=HEAP32[(($390)>>2)];
 var $392=FUNCTION_TABLE[$391]($387);
 var $393=(($__b)|0);
 var $394=HEAP32[(($393)>>2)];
 var $395=(($38)|0);
 HEAP32[(($395)>>2)]=$394;
 var $396=(($__e)|0);
 var $397=HEAP32[(($396)>>2)];
 var $398=(($39)|0);
 HEAP32[(($398)>>2)]=$397;
 var $399=$392;
 var $400=HEAP8[($399)];
 var $401=$400&1;
 var $402=(($401<<24)>>24)==0;
 if($402){label=64;break;}else{label=63;break;}
 case 63: 
 var $404=(($392+8)|0);
 var $405=HEAP32[(($404)>>2)];
 var $406=(($392+4)|0);
 var $407=HEAP32[(($406)>>2)];
 var $417=$407;var $416=$405;var $415=$405;label=65;break;
 case 64: 
 var $409=$392;
 var $410=(($409+1)|0);
 var $411=$392;
 var $412=(($411+1)|0);
 var $413=($400&255);
 var $414=$413>>>1;
 var $417=$414;var $416=$410;var $415=$412;label=65;break;
 case 65: 
 var $415;
 var $416;
 var $417;
 var $418=(($415+$417)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($37,$this,$38,$39,$__iob,$__err,$__tm,$416,$418);
 var $419=(($37)|0);
 var $420=HEAP32[(($419)>>2)];
 HEAP32[(($393)>>2)]=$420;
 label=75;break;
 case 66: 
 var $422=(($__tm+20)|0);
 var $423=(($__e)|0);
 var $424=HEAP32[(($423)>>2)];
 var $425=$3;
 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $426=(($3)|0);
 HEAP32[(($426)>>2)]=$424;
 var $427=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$3,$__err,$67,4);
 var $428=HEAP32[(($__err)>>2)];
 var $429=$428&4;
 var $430=($429|0)==0;
 if($430){label=67;break;}else{label=75;break;}
 case 67: 
 var $432=($427|0)<69;
 if($432){label=68;break;}else{label=69;break;}
 case 68: 
 var $434=((($427)+(2000))|0);
 var $__t_0_i=$434;label=70;break;
 case 69: 
 var $_off_i=((($427)-(69))|0);
 var $436=($_off_i>>>0)<31;
 var $437=((($427)+(1900))|0);
 var $__i=($436?$437:$427);
 var $__t_0_i=$__i;label=70;break;
 case 70: 
 var $__t_0_i;
 var $439=((($__t_0_i)-(1900))|0);
 HEAP32[(($422)>>2)]=$439;
 label=75;break;
 case 71: 
 var $441=(($__e)|0);
 var $442=HEAP32[(($441)>>2)];
 var $443=$2;
 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $444=(($2)|0);
 HEAP32[(($444)>>2)]=$442;
 var $445=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$2,$__err,$67,4);
 var $446=HEAP32[(($__err)>>2)];
 var $447=$446&4;
 var $448=($447|0)==0;
 if($448){label=72;break;}else{label=75;break;}
 case 72: 
 var $450=(($__tm+20)|0);
 var $451=((($445)-(1900))|0);
 HEAP32[(($450)>>2)]=$451;
 label=75;break;
 case 73: 
 var $453=(($__e)|0);
 var $454=HEAP32[(($453)>>2)];
 var $455=(($40)|0);
 HEAP32[(($455)>>2)]=$454;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$40,$__err,$67);
 label=75;break;
 case 74: 
 var $457=HEAP32[(($__err)>>2)];
 var $458=$457|4;
 HEAP32[(($__err)>>2)]=$458;
 label=75;break;
 case 75: 
 var $459=(($__b)|0);
 var $460=HEAP32[(($459)>>2)];
 var $461=(($agg_result)|0);
 HEAP32[(($461)>>2)]=$460;
 label=76;break;
 case 76: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=(($__e)|0);
 var $3=(($__ct+8)|0);
 label=2;break;
 case 2: 
 var $4=HEAP32[(($1)>>2)];
 var $5=($4|0)==0;
 if($5){var $19=0;label=7;break;}else{label=3;break;}
 case 3: 
 var $7=(($4+12)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($4+16)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($8|0)==($10|0);
 if($11){label=4;break;}else{var $19=$4;label=7;break;}
 case 4: 
 var $12=$4;
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+36)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=FUNCTION_TABLE[$15]($4);
 var $17=($16|0)==-1;
 if($17){label=6;break;}else{label=5;break;}
 case 5: 
 var $_pre_i_i_i=HEAP32[(($1)>>2)];
 var $19=$_pre_i_i_i;label=7;break;
 case 6: 
 HEAP32[(($1)>>2)]=0;
 var $19=0;label=7;break;
 case 7: 
 var $19;
 var $20=($19|0)==0;
 var $21=HEAP32[(($2)>>2)];
 var $22=($21|0)==0;
 if($22){label=12;break;}else{label=8;break;}
 case 8: 
 var $24=(($21+12)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($21+16)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($25|0)==($27|0);
 if($28){label=10;break;}else{label=9;break;}
 case 9: 
 if($20){var $37=$21;label=14;break;}else{var $_pre_i2_i_i6=$21;label=22;break;}
 case 10: 
 var $29=$21;
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+36)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=FUNCTION_TABLE[$32]($21);
 var $34=($33|0)==-1;
 if($34){label=11;break;}else{label=13;break;}
 case 11: 
 HEAP32[(($2)>>2)]=0;
 label=12;break;
 case 12: 
 if($20){var $_pre_i2_i_i6=0;label=22;break;}else{var $37=0;label=14;break;}
 case 13: 
 if($20){var $37=$21;label=14;break;}else{var $_pre_i2_i_i6=$21;label=22;break;}
 case 14: 
 var $37;
 var $38=HEAP32[(($1)>>2)];
 var $39=(($38+12)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($38+16)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($40|0)==($42|0);
 if($43){label=15;break;}else{label=16;break;}
 case 15: 
 var $45=$38;
 var $46=HEAP32[(($45)>>2)];
 var $47=(($46+36)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=FUNCTION_TABLE[$48]($38);
 var $extract_t_i=(($49)&255);
 var $_0_i_off0_i=$extract_t_i;label=17;break;
 case 16: 
 var $51=HEAP8[($40)];
 var $_0_i_off0_i=$51;label=17;break;
 case 17: 
 var $_0_i_off0_i;
 var $isascii1_i=(($_0_i_off0_i<<24)>>24)>-1;
 if($isascii1_i){label=18;break;}else{var $_pre_i2_i_i6=$37;label=22;break;}
 case 18: 
 var $52=(($_0_i_off0_i<<24)>>24);
 var $53=HEAP32[(($3)>>2)];
 var $54=(($53+($52<<1))|0);
 var $55=HEAP16[(($54)>>1)];
 var $56=$55&8192;
 var $57=(($56<<16)>>16)==0;
 if($57){var $_pre_i2_i_i6=$37;label=22;break;}else{label=19;break;}
 case 19: 
 var $59=HEAP32[(($1)>>2)];
 var $60=(($59+12)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($59+16)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=($61|0)==($63|0);
 if($64){label=20;break;}else{label=21;break;}
 case 20: 
 var $66=$59;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+40)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=FUNCTION_TABLE[$69]($59);
 label=2;break;
 case 21: 
 var $72=(($61+1)|0);
 HEAP32[(($60)>>2)]=$72;
 label=2;break;
 case 22: 
 var $_pre_i2_i_i6;
 var $73=HEAP32[(($1)>>2)];
 var $74=($73|0)==0;
 if($74){var $88=0;label=27;break;}else{label=23;break;}
 case 23: 
 var $76=(($73+12)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(($73+16)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=($77|0)==($79|0);
 if($80){label=24;break;}else{var $88=$73;label=27;break;}
 case 24: 
 var $81=$73;
 var $82=HEAP32[(($81)>>2)];
 var $83=(($82+36)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=FUNCTION_TABLE[$84]($73);
 var $86=($85|0)==-1;
 if($86){label=26;break;}else{label=25;break;}
 case 25: 
 var $_pre_i_i_i2=HEAP32[(($1)>>2)];
 var $88=$_pre_i_i_i2;label=27;break;
 case 26: 
 HEAP32[(($1)>>2)]=0;
 var $88=0;label=27;break;
 case 27: 
 var $88;
 var $89=($88|0)==0;
 var $90=($_pre_i2_i_i6|0)==0;
 if($90){label=32;break;}else{label=28;break;}
 case 28: 
 var $92=(($_pre_i2_i_i6+12)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(($_pre_i2_i_i6+16)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($93|0)==($95|0);
 if($96){label=29;break;}else{label=31;break;}
 case 29: 
 var $97=$_pre_i2_i_i6;
 var $98=HEAP32[(($97)>>2)];
 var $99=(($98+36)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=FUNCTION_TABLE[$100]($_pre_i2_i_i6);
 var $102=($101|0)==-1;
 if($102){label=30;break;}else{label=31;break;}
 case 30: 
 HEAP32[(($2)>>2)]=0;
 label=32;break;
 case 31: 
 if($89){label=34;break;}else{label=33;break;}
 case 32: 
 if($89){label=33;break;}else{label=34;break;}
 case 33: 
 var $105=HEAP32[(($__err)>>2)];
 var $106=$105|2;
 HEAP32[(($__err)>>2)]=$106;
 label=34;break;
 case 34: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $17=0;label=6;break;}else{label=2;break;}
 case 2: 
 var $5=(($2+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($2+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6|0)==($8|0);
 if($9){label=3;break;}else{var $17=$2;label=6;break;}
 case 3: 
 var $10=$2;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+36)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=FUNCTION_TABLE[$13]($2);
 var $15=($14|0)==-1;
 if($15){label=5;break;}else{label=4;break;}
 case 4: 
 var $_pre_i_i_i=HEAP32[(($1)>>2)];
 var $17=$_pre_i_i_i;label=6;break;
 case 5: 
 HEAP32[(($1)>>2)]=0;
 var $17=0;label=6;break;
 case 6: 
 var $17;
 var $18=($17|0)==0;
 var $19=(($__e)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==0;
 if($21){label=11;break;}else{label=7;break;}
 case 7: 
 var $23=(($20+12)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($20+16)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($24|0)==($26|0);
 if($27){label=8;break;}else{label=10;break;}
 case 8: 
 var $28=$20;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=FUNCTION_TABLE[$31]($20);
 var $33=($32|0)==-1;
 if($33){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($19)>>2)]=0;
 label=11;break;
 case 10: 
 if($18){var $_pre_i2_i_i611=$20;label=13;break;}else{label=12;break;}
 case 11: 
 if($18){label=12;break;}else{var $_pre_i2_i_i611=0;label=13;break;}
 case 12: 
 var $36=HEAP32[(($__err)>>2)];
 var $37=$36|6;
 HEAP32[(($__err)>>2)]=$37;
 label=33;break;
 case 13: 
 var $_pre_i2_i_i611;
 var $39=HEAP32[(($1)>>2)];
 var $40=(($39+12)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(($39+16)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($41|0)==($43|0);
 if($44){label=14;break;}else{label=15;break;}
 case 14: 
 var $46=$39;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+36)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=FUNCTION_TABLE[$49]($39);
 var $extract_t_i=(($50)&255);
 var $_0_i_off0_i=$extract_t_i;label=16;break;
 case 15: 
 var $52=HEAP8[($41)];
 var $_0_i_off0_i=$52;label=16;break;
 case 16: 
 var $_0_i_off0_i;
 var $53=$__ct;
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+36)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=FUNCTION_TABLE[$56]($__ct,$_0_i_off0_i,0);
 var $58=(($57<<24)>>24)==37;
 if($58){label=18;break;}else{label=17;break;}
 case 17: 
 var $60=HEAP32[(($__err)>>2)];
 var $61=$60|4;
 HEAP32[(($__err)>>2)]=$61;
 label=33;break;
 case 18: 
 var $63=HEAP32[(($1)>>2)];
 var $64=(($63+12)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(($63+16)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=($65|0)==($67|0);
 if($68){label=19;break;}else{label=20;break;}
 case 19: 
 var $70=$63;
 var $71=HEAP32[(($70)>>2)];
 var $72=(($71+40)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=FUNCTION_TABLE[$73]($63);
 var $_pre=HEAP32[(($1)>>2)];
 var $77=$_pre;label=21;break;
 case 20: 
 var $76=(($65+1)|0);
 HEAP32[(($64)>>2)]=$76;
 var $77=$63;label=21;break;
 case 21: 
 var $77;
 var $78=($77|0)==0;
 if($78){var $92=0;label=26;break;}else{label=22;break;}
 case 22: 
 var $80=(($77+12)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=(($77+16)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=($81|0)==($83|0);
 if($84){label=23;break;}else{var $92=$77;label=26;break;}
 case 23: 
 var $85=$77;
 var $86=HEAP32[(($85)>>2)];
 var $87=(($86+36)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=FUNCTION_TABLE[$88]($77);
 var $90=($89|0)==-1;
 if($90){label=25;break;}else{label=24;break;}
 case 24: 
 var $_pre_i_i_i2=HEAP32[(($1)>>2)];
 var $92=$_pre_i_i_i2;label=26;break;
 case 25: 
 HEAP32[(($1)>>2)]=0;
 var $92=0;label=26;break;
 case 26: 
 var $92;
 var $93=($92|0)==0;
 var $94=($_pre_i2_i_i611|0)==0;
 if($94){label=31;break;}else{label=27;break;}
 case 27: 
 var $96=(($_pre_i2_i_i611+12)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=(($_pre_i2_i_i611+16)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($97|0)==($99|0);
 if($100){label=28;break;}else{label=30;break;}
 case 28: 
 var $101=$_pre_i2_i_i611;
 var $102=HEAP32[(($101)>>2)];
 var $103=(($102+36)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=FUNCTION_TABLE[$104]($_pre_i2_i_i611);
 var $106=($105|0)==-1;
 if($106){label=29;break;}else{label=30;break;}
 case 29: 
 HEAP32[(($19)>>2)]=0;
 label=31;break;
 case 30: 
 if($93){label=33;break;}else{label=32;break;}
 case 31: 
 if($93){label=32;break;}else{label=33;break;}
 case 32: 
 var $109=HEAP32[(($__err)>>2)];
 var $110=$109|2;
 HEAP32[(($__err)>>2)]=$110;
 label=33;break;
 case 33: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}



function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $1=(sp)+(16);
 var $2=(sp)+(24);
 var $3=(sp)+(32);
 var $4=(sp)+(40);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 var $5=(($1)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $8=HEAP32[((13424)>>2)];
 var $9=($8|0)==-1;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($__p_i_i_i_i)|0);
 HEAP32[(($11)>>2)]=13424;
 var $12=(($__p_i_i_i_i+4)|0);
 HEAP32[(($12)>>2)]=(26);
 var $13=(($__p_i_i_i_i+8)|0);
 HEAP32[(($13)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13424,$7,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=26;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $14=HEAP32[((13428)>>2)];
 var $15=((($14)-(1))|0);
 var $16=(($6+12)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($6+8)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$17;
 var $21=$19;
 var $22=((($20)-($21))|0);
 var $23=$22>>2;
 var $24=($23>>>0)>($15>>>0);
 if($24){label=4;break;}else{label=5;break;}
 case 4: 
 var $25=(($19+($15<<2))|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)==0;
 if($27){label=5;break;}else{label=7;break;}
 case 5: 
 var $28=___cxa_allocate_exception(4);
 var $29=$28;
 __ZNSt8bad_castC2Ev($29);
 (function() { try { __THREW__ = 0; return ___cxa_throw($28,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=26;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $31=$26;
 var $32=HEAP32[(($5)>>2)];
 var $33=(($32)|0);
 var $34=__ZNSt3__114__shared_count16__release_sharedEv($33);
 HEAP32[(($__err)>>2)]=0;
 var $35=($__fmtb|0)==($__fmte|0);
 var $_phi_trans_insert_pre_pre=(($__b)|0);
 if($35){label=71;break;}else{label=8;break;}
 case 8: 
 var $36=(($__e)|0);
 var $37=$26;
 var $38=$26;
 var $39=$26;
 var $40=$this;
 var $41=(($3)|0);
 var $42=(($4)|0);
 var $43=(($2)|0);
 var $_0_ph41=$__fmtb;var $_pre42=0;label=9;break;
 case 9: 
 var $_pre42;
 var $_0_ph41;
 var $45=$_pre42;label=10;break;
 case 10: 
 var $45;
 var $46=($45|0)==0;
 if($46){label=11;break;}else{label=71;break;}
 case 11: 
 var $48=HEAP32[(($_phi_trans_insert_pre_pre)>>2)];
 var $49=($48|0)==0;
 if($49){var $67=1;var $66=0;label=17;break;}else{label=12;break;}
 case 12: 
 var $51=(($48+12)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($48+16)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=($52|0)==($54|0);
 if($55){label=13;break;}else{label=14;break;}
 case 13: 
 var $57=$48;
 var $58=HEAP32[(($57)>>2)];
 var $59=(($58+36)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=FUNCTION_TABLE[$60]($48);
 var $_0_i_i_i_i=$61;label=15;break;
 case 14: 
 var $63=HEAP32[(($52)>>2)];
 var $_0_i_i_i_i=$63;label=15;break;
 case 15: 
 var $_0_i_i_i_i;
 var $64=($_0_i_i_i_i|0)==-1;
 if($64){label=16;break;}else{var $67=0;var $66=$48;label=17;break;}
 case 16: 
 HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=0;
 var $67=1;var $66=0;label=17;break;
 case 17: 
 var $66;
 var $67;
 var $68=HEAP32[(($36)>>2)];
 var $69=($68|0)==0;
 if($69){label=23;break;}else{label=18;break;}
 case 18: 
 var $71=(($68+12)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(($68+16)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=($72|0)==($74|0);
 if($75){label=19;break;}else{label=20;break;}
 case 19: 
 var $77=$68;
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78+36)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=FUNCTION_TABLE[$80]($68);
 var $_0_i_i1_i_i=$81;label=21;break;
 case 20: 
 var $83=HEAP32[(($72)>>2)];
 var $_0_i_i1_i_i=$83;label=21;break;
 case 21: 
 var $_0_i_i1_i_i;
 var $84=($_0_i_i1_i_i|0)==-1;
 if($84){label=22;break;}else{label=24;break;}
 case 22: 
 HEAP32[(($36)>>2)]=0;
 label=23;break;
 case 23: 
 if($67){label=25;break;}else{var $93=0;label=27;break;}
 case 24: 
 if($67){var $93=$68;label=27;break;}else{label=25;break;}
 case 25: 
 HEAP32[(($__err)>>2)]=4;
 var $_pre_i_i_i19=$66;label=72;break;
 case 26: 
 var $88$0 = ___cxa_find_matching_catch(-1, -1); var $88$1 = tempRet0;
 var $89=HEAP32[(($5)>>2)];
 var $90=(($89)|0);
 var $91=__ZNSt3__114__shared_count16__release_sharedEv($90);
 ___resumeException($88$0)
 case 27: 
 var $93;
 var $94=HEAP32[(($_0_ph41)>>2)];
 var $95=HEAP32[(($37)>>2)];
 var $96=(($95+52)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=FUNCTION_TABLE[$97]($31,$94,0);
 var $99=(($98<<24)>>24)==37;
 if($99){label=28;break;}else{label=37;break;}
 case 28: 
 var $101=(($_0_ph41+4)|0);
 var $102=($101|0)==($__fmte|0);
 if($102){label=29;break;}else{label=30;break;}
 case 29: 
 HEAP32[(($__err)>>2)]=4;
 var $_pre_i_i_i19=$66;label=72;break;
 case 30: 
 var $105=HEAP32[(($101)>>2)];
 var $106=HEAP32[(($37)>>2)];
 var $107=(($106+52)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=FUNCTION_TABLE[$108]($31,$105,0);
 if((($109<<24)>>24)==69|(($109<<24)>>24)==48){ label=31;break;}else{var $__opt_0=0;var $__cmd_0=$109;var $_1=$101;label=34;break;}
 case 31: 
 var $111=(($_0_ph41+8)|0);
 var $112=($111|0)==($__fmte|0);
 if($112){label=32;break;}else{label=33;break;}
 case 32: 
 HEAP32[(($__err)>>2)]=4;
 var $_pre_i_i_i19=$66;label=72;break;
 case 33: 
 var $115=HEAP32[(($111)>>2)];
 var $116=HEAP32[(($37)>>2)];
 var $117=(($116+52)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=FUNCTION_TABLE[$118]($31,$115,0);
 var $__opt_0=$109;var $__cmd_0=$119;var $_1=$111;label=34;break;
 case 34: 
 var $_1;
 var $__cmd_0;
 var $__opt_0;
 var $121=HEAP32[(($40)>>2)];
 var $122=(($121+36)|0);
 var $123=HEAP32[(($122)>>2)];
 HEAP32[(($41)>>2)]=$66;
 HEAP32[(($42)>>2)]=$93;
 FUNCTION_TABLE[$123]($2,$this,$3,$4,$__iob,$__err,$__tm,$__cmd_0,$__opt_0);
 var $124=HEAP32[(($43)>>2)];
 HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=$124;
 var $125=(($_1+4)|0);
 var $_0_ph_be=$125;label=35;break;
 case 35: 
 var $_0_ph_be;
 var $126=($_0_ph_be|0)==($__fmte|0);
 if($126){label=71;break;}else{label=36;break;}
 case 36: 
 var $_pre42_pre=HEAP32[(($__err)>>2)];
 var $_0_ph41=$_0_ph_be;var $_pre42=$_pre42_pre;label=9;break;
 case 37: 
 var $128=HEAP32[(($_0_ph41)>>2)];
 var $129=HEAP32[(($38)>>2)];
 var $130=(($129+12)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=FUNCTION_TABLE[$131]($31,8192,$128);
 if($132){var $_0_pn=$_0_ph41;label=38;break;}else{label=62;break;}
 case 38: 
 var $_0_pn;
 var $_2=(($_0_pn+4)|0);
 var $133=($_2|0)==($__fmte|0);
 if($133){var $_2_lcssa=$__fmte;label=40;break;}else{label=39;break;}
 case 39: 
 var $135=HEAP32[(($_2)>>2)];
 var $136=HEAP32[(($38)>>2)];
 var $137=(($136+12)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=FUNCTION_TABLE[$138]($31,8192,$135);
 if($139){var $_0_pn=$_2;label=38;break;}else{var $_2_lcssa=$_2;label=40;break;}
 case 40: 
 var $_2_lcssa;
 var $_pre_i_i_i4=$66;var $140=$93;var $_pre_i3_i_i10=$93;label=41;break;
 case 41: 
 var $_pre_i3_i_i10;
 var $140;
 var $_pre_i_i_i4;
 var $141=($_pre_i_i_i4|0)==0;
 if($141){var $159=1;var $158=0;label=47;break;}else{label=42;break;}
 case 42: 
 var $143=(($_pre_i_i_i4+12)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=(($_pre_i_i_i4+16)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=($144|0)==($146|0);
 if($147){label=43;break;}else{label=44;break;}
 case 43: 
 var $149=$_pre_i_i_i4;
 var $150=HEAP32[(($149)>>2)];
 var $151=(($150+36)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=FUNCTION_TABLE[$152]($_pre_i_i_i4);
 var $_0_i_i_i_i2=$153;label=45;break;
 case 44: 
 var $155=HEAP32[(($144)>>2)];
 var $_0_i_i_i_i2=$155;label=45;break;
 case 45: 
 var $_0_i_i_i_i2;
 var $156=($_0_i_i_i_i2|0)==-1;
 if($156){label=46;break;}else{var $159=0;var $158=$_pre_i_i_i4;label=47;break;}
 case 46: 
 HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=0;
 var $159=1;var $158=0;label=47;break;
 case 47: 
 var $158;
 var $159;
 var $160=($140|0)==0;
 if($160){var $_pre_i3_i_i1044=$_pre_i3_i_i10;label=53;break;}else{label=48;break;}
 case 48: 
 var $162=(($140+12)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(($140+16)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=($163|0)==($165|0);
 if($166){label=49;break;}else{label=50;break;}
 case 49: 
 var $168=$140;
 var $169=HEAP32[(($168)>>2)];
 var $170=(($169+36)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=FUNCTION_TABLE[$171]($140);
 var $_0_i_i1_i_i8=$172;label=51;break;
 case 50: 
 var $174=HEAP32[(($163)>>2)];
 var $_0_i_i1_i_i8=$174;label=51;break;
 case 51: 
 var $_0_i_i1_i_i8;
 var $175=($_0_i_i1_i_i8|0)==-1;
 if($175){label=52;break;}else{label=54;break;}
 case 52: 
 HEAP32[(($36)>>2)]=0;
 var $_pre_i3_i_i1044=0;label=53;break;
 case 53: 
 var $_pre_i3_i_i1044;
 if($159){var $_0_ph_be=$_2_lcssa;label=35;break;}else{var $178=0;var $_pre_i3_i_i1043=$_pre_i3_i_i1044;label=55;break;}
 case 54: 
 var $phitmp_i4_i_i11=($_pre_i3_i_i10|0)==0;
 var $tmp_i_i13=$159^$phitmp_i4_i_i11;
 if($tmp_i_i13){var $178=$_pre_i3_i_i10;var $_pre_i3_i_i1043=$_pre_i3_i_i10;label=55;break;}else{var $_0_ph_be=$_2_lcssa;label=35;break;}
 case 55: 
 var $_pre_i3_i_i1043;
 var $178;
 var $179=(($158+12)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=(($158+16)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=($180|0)==($182|0);
 if($183){label=56;break;}else{label=57;break;}
 case 56: 
 var $185=$158;
 var $186=HEAP32[(($185)>>2)];
 var $187=(($186+36)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=FUNCTION_TABLE[$188]($158);
 var $_0_i_i=$189;label=58;break;
 case 57: 
 var $191=HEAP32[(($180)>>2)];
 var $_0_i_i=$191;label=58;break;
 case 58: 
 var $_0_i_i;
 var $192=HEAP32[(($38)>>2)];
 var $193=(($192+12)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=FUNCTION_TABLE[$194]($31,8192,$_0_i_i);
 if($195){label=59;break;}else{var $_0_ph_be=$_2_lcssa;label=35;break;}
 case 59: 
 var $197=HEAP32[(($179)>>2)];
 var $198=HEAP32[(($181)>>2)];
 var $199=($197|0)==($198|0);
 if($199){label=60;break;}else{label=61;break;}
 case 60: 
 var $201=$158;
 var $202=HEAP32[(($201)>>2)];
 var $203=(($202+40)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=FUNCTION_TABLE[$204]($158);
 var $_pre_i_i_i4=$158;var $140=$178;var $_pre_i3_i_i10=$_pre_i3_i_i1043;label=41;break;
 case 61: 
 var $207=(($197+4)|0);
 HEAP32[(($179)>>2)]=$207;
 var $_pre_i_i_i4=$158;var $140=$178;var $_pre_i3_i_i10=$_pre_i3_i_i1043;label=41;break;
 case 62: 
 var $209=(($66+12)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=(($66+16)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($210|0)==($212|0);
 if($213){label=63;break;}else{label=64;break;}
 case 63: 
 var $215=$66;
 var $216=HEAP32[(($215)>>2)];
 var $217=(($216+36)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=FUNCTION_TABLE[$218]($66);
 var $_0_i_i14=$219;label=65;break;
 case 64: 
 var $221=HEAP32[(($210)>>2)];
 var $_0_i_i14=$221;label=65;break;
 case 65: 
 var $_0_i_i14;
 var $222=HEAP32[(($39)>>2)];
 var $223=(($222+28)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=FUNCTION_TABLE[$224]($31,$_0_i_i14);
 var $226=HEAP32[(($_0_ph41)>>2)];
 var $227=HEAP32[(($39)>>2)];
 var $228=(($227+28)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=FUNCTION_TABLE[$229]($31,$226);
 var $231=($225|0)==($230|0);
 if($231){label=66;break;}else{label=70;break;}
 case 66: 
 var $233=HEAP32[(($209)>>2)];
 var $234=HEAP32[(($211)>>2)];
 var $235=($233|0)==($234|0);
 if($235){label=67;break;}else{label=68;break;}
 case 67: 
 var $237=$66;
 var $238=HEAP32[(($237)>>2)];
 var $239=(($238+40)|0);
 var $240=HEAP32[(($239)>>2)];
 var $241=FUNCTION_TABLE[$240]($66);
 label=69;break;
 case 68: 
 var $243=(($233+4)|0);
 HEAP32[(($209)>>2)]=$243;
 label=69;break;
 case 69: 
 var $244=(($_0_ph41+4)|0);
 var $_0_ph_be=$244;label=35;break;
 case 70: 
 HEAP32[(($__err)>>2)]=4;
 var $45=4;label=10;break;
 case 71: 
 var $_pre=HEAP32[(($_phi_trans_insert_pre_pre)>>2)];
 var $_pre_i_i_i19=$_pre;label=72;break;
 case 72: 
 var $_pre_i_i_i19;
 var $246=(($__b)|0);
 var $247=($_pre_i_i_i19|0)==0;
 if($247){var $265=1;var $264=0;label=78;break;}else{label=73;break;}
 case 73: 
 var $249=(($_pre_i_i_i19+12)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=(($_pre_i_i_i19+16)|0);
 var $252=HEAP32[(($251)>>2)];
 var $253=($250|0)==($252|0);
 if($253){label=74;break;}else{label=75;break;}
 case 74: 
 var $255=$_pre_i_i_i19;
 var $256=HEAP32[(($255)>>2)];
 var $257=(($256+36)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=FUNCTION_TABLE[$258]($_pre_i_i_i19);
 var $_0_i_i_i_i17=$259;label=76;break;
 case 75: 
 var $261=HEAP32[(($250)>>2)];
 var $_0_i_i_i_i17=$261;label=76;break;
 case 76: 
 var $_0_i_i_i_i17;
 var $262=($_0_i_i_i_i17|0)==-1;
 if($262){label=77;break;}else{var $265=0;var $264=$_pre_i_i_i19;label=78;break;}
 case 77: 
 HEAP32[(($246)>>2)]=0;
 var $265=1;var $264=0;label=78;break;
 case 78: 
 var $264;
 var $265;
 var $266=(($__e)|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=($267|0)==0;
 if($268){label=84;break;}else{label=79;break;}
 case 79: 
 var $270=(($267+12)|0);
 var $271=HEAP32[(($270)>>2)];
 var $272=(($267+16)|0);
 var $273=HEAP32[(($272)>>2)];
 var $274=($271|0)==($273|0);
 if($274){label=80;break;}else{label=81;break;}
 case 80: 
 var $276=$267;
 var $277=HEAP32[(($276)>>2)];
 var $278=(($277+36)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=FUNCTION_TABLE[$279]($267);
 var $_0_i_i1_i_i23=$280;label=82;break;
 case 81: 
 var $282=HEAP32[(($271)>>2)];
 var $_0_i_i1_i_i23=$282;label=82;break;
 case 82: 
 var $_0_i_i1_i_i23;
 var $283=($_0_i_i1_i_i23|0)==-1;
 if($283){label=83;break;}else{label=85;break;}
 case 83: 
 HEAP32[(($266)>>2)]=0;
 label=84;break;
 case 84: 
 if($265){label=86;break;}else{label=87;break;}
 case 85: 
 if($265){label=87;break;}else{label=86;break;}
 case 86: 
 var $286=HEAP32[(($__err)>>2)];
 var $287=$286|2;
 HEAP32[(($__err)>>2)]=$287;
 label=87;break;
 case 87: 
 var $289=(($agg_result)|0);
 HEAP32[(($289)>>2)]=$264;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this){
 var label=0;


 return 2;
}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result,$this,$1,$2,$__iob,$__err,$__tm,2392,2424);
 STACKTOP=sp;return;
}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($this+8)|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+20)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=FUNCTION_TABLE[$7]($3);
 var $9=(($__b)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($1)|0);
 HEAP32[(($11)>>2)]=$10;
 var $12=(($__e)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=$8;
 var $16=HEAP8[($15)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)==0;
 if($18){label=3;break;}else{label=2;break;}
 case 2: 
 var $20=(($8+8)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=(($8+4)|0);
 var $23=HEAP32[(($22)>>2)];
 var $31=$23;var $30=$21;var $29=$21;label=4;break;
 case 3: 
 var $25=(($8+4)|0);
 var $26=(($8+4)|0);
 var $27=($16&255);
 var $28=$27>>>1;
 var $31=$28;var $30=$25;var $29=$26;label=4;break;
 case 4: 
 var $29;
 var $30;
 var $31;
 var $32=(($29+($31<<2))|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result,$this,$1,$2,$__iob,$__err,$__tm,$30,$32);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__p_i_i_i_i=(sp)+(8);
 var $2=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $6=HEAP32[((13424)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($__p_i_i_i_i)|0);
 HEAP32[(($9)>>2)]=13424;
 var $10=(($__p_i_i_i_i+4)|0);
 HEAP32[(($10)>>2)]=(26);
 var $11=(($__p_i_i_i_i+8)|0);
 HEAP32[(($11)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13424,$5,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=10;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $12=HEAP32[((13428)>>2)];
 var $13=((($12)-(1))|0);
 var $14=(($4+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($4+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$15;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($13>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($13<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 __ZNSt8bad_castC2Ev($27);
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=10;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $29=$24;
 var $30=HEAP32[(($3)>>2)];
 var $31=(($30)|0);
 var $32=__ZNSt3__114__shared_count16__release_sharedEv($31);
 var $33=(($__e)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$1;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $36=(($this+8)|0);
 var $37=$36;
 var $38=HEAP32[(($37)>>2)];
 var $39=HEAP32[(($38)>>2)];
 var $40=FUNCTION_TABLE[$39]($36);
 var $41=(($1)|0);
 HEAP32[(($41)>>2)]=$34;
 var $42=(($40+168)|0);
 var $43=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$1,$40,$42,$29,$__err,0);
 var $44=$43;
 var $45=$40;
 var $46=((($44)-($45))|0);
 var $47=($46|0)<168;
 if($47){label=8;break;}else{label=9;break;}
 case 8: 
 var $49=(($__tm+24)|0);
 var $50=(((($46|0))/(12))&-1);
 var $51=(((($50|0))%(7))&-1);
 HEAP32[(($49)>>2)]=$51;
 label=9;break;
 case 9: 
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $52=(($__b)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($agg_result)|0);
 HEAP32[(($54)>>2)]=$53;
 STACKTOP=sp;return;
 case 10: 
 var $56$0 = ___cxa_find_matching_catch(-1, -1); var $56$1 = tempRet0;
 var $57=HEAP32[(($3)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 ___resumeException($56$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__p_i_i_i_i=(sp)+(8);
 var $2=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $6=HEAP32[((13424)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($__p_i_i_i_i)|0);
 HEAP32[(($9)>>2)]=13424;
 var $10=(($__p_i_i_i_i+4)|0);
 HEAP32[(($10)>>2)]=(26);
 var $11=(($__p_i_i_i_i+8)|0);
 HEAP32[(($11)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13424,$5,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=10;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $12=HEAP32[((13428)>>2)];
 var $13=((($12)-(1))|0);
 var $14=(($4+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($4+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$15;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($13>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($13<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 __ZNSt8bad_castC2Ev($27);
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=10;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $29=$24;
 var $30=HEAP32[(($3)>>2)];
 var $31=(($30)|0);
 var $32=__ZNSt3__114__shared_count16__release_sharedEv($31);
 var $33=(($__e)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$1;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $36=(($this+8)|0);
 var $37=$36;
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+4)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=FUNCTION_TABLE[$40]($36);
 var $42=(($1)|0);
 HEAP32[(($42)>>2)]=$34;
 var $43=(($41+288)|0);
 var $44=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$1,$41,$43,$29,$__err,0);
 var $45=$44;
 var $46=$41;
 var $47=((($45)-($46))|0);
 var $48=($47|0)<288;
 if($48){label=8;break;}else{label=9;break;}
 case 8: 
 var $50=(($__tm+16)|0);
 var $51=(((($47|0))/(12))&-1);
 var $52=(((($51|0))%(12))&-1);
 HEAP32[(($50)>>2)]=$52;
 label=9;break;
 case 9: 
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $53=(($__b)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($agg_result)|0);
 HEAP32[(($55)>>2)]=$54;
 STACKTOP=sp;return;
 case 10: 
 var $57$0 = ___cxa_find_matching_catch(-1, -1); var $57$1 = tempRet0;
 var $58=HEAP32[(($3)>>2)];
 var $59=(($58)|0);
 var $60=__ZNSt3__114__shared_count16__release_sharedEv($59);
 ___resumeException($57$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__p_i_i_i_i=(sp)+(8);
 var $2=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $6=HEAP32[((13424)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($__p_i_i_i_i)|0);
 HEAP32[(($9)>>2)]=13424;
 var $10=(($__p_i_i_i_i+4)|0);
 HEAP32[(($10)>>2)]=(26);
 var $11=(($__p_i_i_i_i+8)|0);
 HEAP32[(($11)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13424,$5,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=13;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $12=HEAP32[((13428)>>2)];
 var $13=((($12)-(1))|0);
 var $14=(($4+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($4+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$15;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($13>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($13<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 __ZNSt8bad_castC2Ev($27);
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=13;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $29=$24;
 var $30=HEAP32[(($3)>>2)];
 var $31=(($30)|0);
 var $32=__ZNSt3__114__shared_count16__release_sharedEv($31);
 var $33=(($__tm+20)|0);
 var $34=(($__e)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=$1;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $37=(($1)|0);
 HEAP32[(($37)>>2)]=$35;
 var $38=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$1,$__err,$29,4);
 var $39=HEAP32[(($__err)>>2)];
 var $40=$39&4;
 var $41=($40|0)==0;
 if($41){label=8;break;}else{label=12;break;}
 case 8: 
 var $43=($38|0)<69;
 if($43){label=9;break;}else{label=10;break;}
 case 9: 
 var $45=((($38)+(2000))|0);
 var $__t_0_i=$45;label=11;break;
 case 10: 
 var $_off_i=((($38)-(69))|0);
 var $47=($_off_i>>>0)<31;
 var $48=((($38)+(1900))|0);
 var $__i=($47?$48:$38);
 var $__t_0_i=$__i;label=11;break;
 case 11: 
 var $__t_0_i;
 var $50=((($__t_0_i)-(1900))|0);
 HEAP32[(($33)>>2)]=$50;
 label=12;break;
 case 12: 
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $51=(($__b)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($agg_result)|0);
 HEAP32[(($53)>>2)]=$52;
 STACKTOP=sp;return;
 case 13: 
 var $55$0 = ___cxa_find_matching_catch(-1, -1); var $55$1 = tempRet0;
 var $56=HEAP32[(($3)>>2)];
 var $57=(($56)|0);
 var $58=__ZNSt3__114__shared_count16__release_sharedEv($57);
 ___resumeException($55$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=sp;
 var $3=(sp)+(8);
 var $4=(sp)+(16);
 var $5=(sp)+(24);
 var $6=(sp)+(32);
 var $7=(sp)+(40);
 var $8=(sp)+(48);
 var $9=(sp)+(56);
 var $10=(sp)+(64);
 var $11=(sp)+(72);
 var $12=(sp)+(80);
 var $13=(sp)+(88);
 var $14=(sp)+(96);
 var $__p_i_i_i_i=(sp)+(104);
 var $15=(sp)+(120);
 var $16=(sp)+(128);
 var $17=(sp)+(136);
 var $18=(sp)+(144);
 var $19=(sp)+(152);
 var $20=(sp)+(160);
 var $21=(sp)+(168);
 var $22=(sp)+(176);
 var $23=(sp)+(184);
 var $24=(sp)+(192);
 var $25=(sp)+(200);
 var $26=(sp)+(208);
 var $27=(sp)+(216);
 var $28=(sp)+(224);
 var $29=(sp)+(232);
 var $30=(sp)+(240);
 var $31=(sp)+(248);
 var $32=(sp)+(256);
 var $33=(sp)+(264);
 var $34=(sp)+(272);
 var $35=(sp)+(280);
 var $36=(sp)+(288);
 var $37=(sp)+(296);
 var $38=(sp)+(304);
 var $39=(sp)+(312);
 var $40=(sp)+(320);
 HEAP32[(($__err)>>2)]=0;
 __ZNKSt3__18ios_base6getlocEv($15,$__iob);
 var $41=(($15)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $44=HEAP32[((13424)>>2)];
 var $45=($44|0)==-1;
 if($45){label=3;break;}else{label=2;break;}
 case 2: 
 var $47=(($__p_i_i_i_i)|0);
 HEAP32[(($47)>>2)]=13424;
 var $48=(($__p_i_i_i_i+4)|0);
 HEAP32[(($48)>>2)]=(26);
 var $49=(($__p_i_i_i_i+8)|0);
 HEAP32[(($49)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13424,$43,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=8;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $50=HEAP32[((13428)>>2)];
 var $51=((($50)-(1))|0);
 var $52=(($42+12)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($42+8)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=$53;
 var $57=$55;
 var $58=((($56)-($57))|0);
 var $59=$58>>2;
 var $60=($59>>>0)>($51>>>0);
 if($60){label=4;break;}else{label=5;break;}
 case 4: 
 var $61=(($55+($51<<2))|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=($62|0)==0;
 if($63){label=5;break;}else{label=7;break;}
 case 5: 
 var $64=___cxa_allocate_exception(4);
 var $65=$64;
 __ZNSt8bad_castC2Ev($65);
 (function() { try { __THREW__ = 0; return ___cxa_throw($64,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $67=$62;
 var $68=HEAP32[(($41)>>2)];
 var $69=(($68)|0);
 var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
 var $71=(($__fmt<<24)>>24);
 switch(($71|0)){case 98:case 66:case 104:{ label=11;break;}case 99:{ label=13;break;}case 100:case 101:{ label=17;break;}case 68:{ label=20;break;}case 70:{ label=21;break;}case 72:{ label=22;break;}case 73:{ label=25;break;}case 106:{ label=28;break;}case 109:{ label=31;break;}case 77:{ label=34;break;}case 110:case 116:{ label=37;break;}case 112:{ label=38;break;}case 114:{ label=52;break;}case 82:{ label=53;break;}case 83:{ label=54;break;}case 84:{ label=57;break;}case 119:{ label=58;break;}case 120:{ label=61;break;}case 88:{ label=62;break;}case 121:{ label=66;break;}case 89:{ label=71;break;}case 37:{ label=73;break;}case 97:case 65:{ label=9;break;}default:{label=74;break;}}break;
 case 8: 
 var $73$0 = ___cxa_find_matching_catch(-1, -1); var $73$1 = tempRet0;
 var $74=HEAP32[(($41)>>2)];
 var $75=(($74)|0);
 var $76=__ZNSt3__114__shared_count16__release_sharedEv($75);
 ___resumeException($73$0)
 case 9: 
 var $78=(($__e)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=$14;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $81=(($this+8)|0);
 var $82=$81;
 var $83=HEAP32[(($82)>>2)];
 var $84=HEAP32[(($83)>>2)];
 var $85=FUNCTION_TABLE[$84]($81);
 var $86=(($14)|0);
 HEAP32[(($86)>>2)]=$79;
 var $87=(($85+168)|0);
 var $88=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$14,$85,$87,$67,$__err,0);
 var $89=$88;
 var $90=$85;
 var $91=((($89)-($90))|0);
 var $92=($91|0)<168;
 if($92){label=10;break;}else{label=75;break;}
 case 10: 
 var $94=(($__tm+24)|0);
 var $95=(((($91|0))/(12))&-1);
 var $96=(((($95|0))%(7))&-1);
 HEAP32[(($94)>>2)]=$96;
 label=75;break;
 case 11: 
 var $98=(($__e)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=$13;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $101=(($this+8)|0);
 var $102=$101;
 var $103=HEAP32[(($102)>>2)];
 var $104=(($103+4)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=FUNCTION_TABLE[$105]($101);
 var $107=(($13)|0);
 HEAP32[(($107)>>2)]=$99;
 var $108=(($106+288)|0);
 var $109=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$13,$106,$108,$67,$__err,0);
 var $110=$109;
 var $111=$106;
 var $112=((($110)-($111))|0);
 var $113=($112|0)<288;
 if($113){label=12;break;}else{label=75;break;}
 case 12: 
 var $115=(($__tm+16)|0);
 var $116=(((($112|0))/(12))&-1);
 var $117=(((($116|0))%(12))&-1);
 HEAP32[(($115)>>2)]=$117;
 label=75;break;
 case 13: 
 var $119=(($this+8)|0);
 var $120=$119;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+12)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=FUNCTION_TABLE[$123]($119);
 var $125=(($__b)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=(($17)|0);
 HEAP32[(($127)>>2)]=$126;
 var $128=(($__e)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=(($18)|0);
 HEAP32[(($130)>>2)]=$129;
 var $131=$124;
 var $132=HEAP8[($131)];
 var $133=$132&1;
 var $134=(($133<<24)>>24)==0;
 if($134){label=15;break;}else{label=14;break;}
 case 14: 
 var $136=(($124+8)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=(($124+4)|0);
 var $139=HEAP32[(($138)>>2)];
 var $147=$139;var $146=$137;var $145=$137;label=16;break;
 case 15: 
 var $141=(($124+4)|0);
 var $142=(($124+4)|0);
 var $143=($132&255);
 var $144=$143>>>1;
 var $147=$144;var $146=$141;var $145=$142;label=16;break;
 case 16: 
 var $145;
 var $146;
 var $147;
 var $148=(($145+($147<<2))|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($16,$this,$17,$18,$__iob,$__err,$__tm,$146,$148);
 var $149=(($16)|0);
 var $150=HEAP32[(($149)>>2)];
 HEAP32[(($125)>>2)]=$150;
 label=75;break;
 case 17: 
 var $152=(($__e)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=$12;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $155=(($12)|0);
 HEAP32[(($155)>>2)]=$153;
 var $156=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$12,$__err,$67,2);
 var $157=HEAP32[(($__err)>>2)];
 var $158=$157&4;
 var $159=($158|0)==0;
 var $160=($156|0)>0;
 var $or_cond_i=$159&$160;
 var $161=($156|0)<32;
 var $or_cond3_i=$or_cond_i&$161;
 if($or_cond3_i){label=18;break;}else{label=19;break;}
 case 18: 
 var $163=(($__tm+12)|0);
 HEAP32[(($163)>>2)]=$156;
 label=75;break;
 case 19: 
 var $165=$157|4;
 HEAP32[(($__err)>>2)]=$165;
 label=75;break;
 case 20: 
 var $167=(($__b)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=(($20)|0);
 HEAP32[(($169)>>2)]=$168;
 var $170=(($__e)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=(($21)|0);
 HEAP32[(($172)>>2)]=$171;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($19,$this,$20,$21,$__iob,$__err,$__tm,2360,2392);
 var $173=(($19)|0);
 var $174=HEAP32[(($173)>>2)];
 HEAP32[(($167)>>2)]=$174;
 label=75;break;
 case 21: 
 var $176=(($__b)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($23)|0);
 HEAP32[(($178)>>2)]=$177;
 var $179=(($__e)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=(($24)|0);
 HEAP32[(($181)>>2)]=$180;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($22,$this,$23,$24,$__iob,$__err,$__tm,2328,2360);
 var $182=(($22)|0);
 var $183=HEAP32[(($182)>>2)];
 HEAP32[(($176)>>2)]=$183;
 label=75;break;
 case 22: 
 var $185=(($__e)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=$11;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $188=(($11)|0);
 HEAP32[(($188)>>2)]=$186;
 var $189=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$11,$__err,$67,2);
 var $190=HEAP32[(($__err)>>2)];
 var $191=$190&4;
 var $192=($191|0)==0;
 var $193=($189|0)<24;
 var $or_cond_i10=$192&$193;
 if($or_cond_i10){label=23;break;}else{label=24;break;}
 case 23: 
 var $195=(($__tm+8)|0);
 HEAP32[(($195)>>2)]=$189;
 label=75;break;
 case 24: 
 var $197=$190|4;
 HEAP32[(($__err)>>2)]=$197;
 label=75;break;
 case 25: 
 var $199=(($__e)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=$10;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $202=(($10)|0);
 HEAP32[(($202)>>2)]=$200;
 var $203=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$10,$__err,$67,2);
 var $204=HEAP32[(($__err)>>2)];
 var $205=$204&4;
 var $206=($205|0)==0;
 var $207=($203|0)>0;
 var $or_cond_i13=$206&$207;
 var $208=($203|0)<13;
 var $or_cond3_i14=$or_cond_i13&$208;
 if($or_cond3_i14){label=26;break;}else{label=27;break;}
 case 26: 
 var $210=(($__tm+8)|0);
 HEAP32[(($210)>>2)]=$203;
 label=75;break;
 case 27: 
 var $212=$204|4;
 HEAP32[(($__err)>>2)]=$212;
 label=75;break;
 case 28: 
 var $214=(($__e)|0);
 var $215=HEAP32[(($214)>>2)];
 var $216=$9;
 var $$etemp$7$0=4;
 var $$etemp$7$1=0;

 var $217=(($9)|0);
 HEAP32[(($217)>>2)]=$215;
 var $218=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$9,$__err,$67,3);
 var $219=HEAP32[(($__err)>>2)];
 var $220=$219&4;
 var $221=($220|0)==0;
 var $222=($218|0)<366;
 var $or_cond_i17=$221&$222;
 if($or_cond_i17){label=29;break;}else{label=30;break;}
 case 29: 
 var $224=(($__tm+28)|0);
 HEAP32[(($224)>>2)]=$218;
 label=75;break;
 case 30: 
 var $226=$219|4;
 HEAP32[(($__err)>>2)]=$226;
 label=75;break;
 case 31: 
 var $228=(($__e)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=$8;
 var $$etemp$8$0=4;
 var $$etemp$8$1=0;

 var $231=(($8)|0);
 HEAP32[(($231)>>2)]=$229;
 var $232=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$8,$__err,$67,2);
 var $233=HEAP32[(($__err)>>2)];
 var $234=$233&4;
 var $235=($234|0)==0;
 var $236=($232|0)<13;
 var $or_cond_i20=$235&$236;
 if($or_cond_i20){label=32;break;}else{label=33;break;}
 case 32: 
 var $238=(($__tm+16)|0);
 var $239=((($232)-(1))|0);
 HEAP32[(($238)>>2)]=$239;
 label=75;break;
 case 33: 
 var $241=$233|4;
 HEAP32[(($__err)>>2)]=$241;
 label=75;break;
 case 34: 
 var $243=(($__e)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=$7;
 var $$etemp$9$0=4;
 var $$etemp$9$1=0;

 var $246=(($7)|0);
 HEAP32[(($246)>>2)]=$244;
 var $247=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$7,$__err,$67,2);
 var $248=HEAP32[(($__err)>>2)];
 var $249=$248&4;
 var $250=($249|0)==0;
 var $251=($247|0)<60;
 var $or_cond_i23=$250&$251;
 if($or_cond_i23){label=35;break;}else{label=36;break;}
 case 35: 
 var $253=(($__tm+4)|0);
 HEAP32[(($253)>>2)]=$247;
 label=75;break;
 case 36: 
 var $255=$248|4;
 HEAP32[(($__err)>>2)]=$255;
 label=75;break;
 case 37: 
 var $257=(($__e)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=(($25)|0);
 HEAP32[(($259)>>2)]=$258;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$25,$__err,$67);
 label=75;break;
 case 38: 
 var $261=(($__tm+8)|0);
 var $262=(($__e)|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=$6;
 var $$etemp$10$0=4;
 var $$etemp$10$1=0;

 var $265=(($this+8)|0);
 var $266=$265;
 var $267=HEAP32[(($266)>>2)];
 var $268=(($267+8)|0);
 var $269=HEAP32[(($268)>>2)];
 var $270=FUNCTION_TABLE[$269]($265);
 var $271=$270;
 var $272=HEAP8[($271)];
 var $273=$272&1;
 var $274=(($273<<24)>>24)==0;
 if($274){label=40;break;}else{label=39;break;}
 case 39: 
 var $276=(($270+4)|0);
 var $277=HEAP32[(($276)>>2)];
 var $281=$277;label=41;break;
 case 40: 
 var $279=($272&255);
 var $280=$279>>>1;
 var $281=$280;label=41;break;
 case 41: 
 var $281;
 var $282=(($270+12)|0);
 var $283=$282;
 var $284=HEAP8[($283)];
 var $285=$284&1;
 var $286=(($285<<24)>>24)==0;
 if($286){label=43;break;}else{label=42;break;}
 case 42: 
 var $288=(($270+16)|0);
 var $289=HEAP32[(($288)>>2)];
 var $293=$289;label=44;break;
 case 43: 
 var $291=($284&255);
 var $292=$291>>>1;
 var $293=$292;label=44;break;
 case 44: 
 var $293;
 var $294=(((-$293))|0);
 var $295=($281|0)==($294|0);
 if($295){label=45;break;}else{label=46;break;}
 case 45: 
 var $297=HEAP32[(($__err)>>2)];
 var $298=$297|4;
 HEAP32[(($__err)>>2)]=$298;
 label=75;break;
 case 46: 
 var $300=(($6)|0);
 HEAP32[(($300)>>2)]=$263;
 var $301=(($270+24)|0);
 var $302=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$6,$270,$301,$67,$__err,0);
 var $303=$302;
 var $304=$270;
 var $305=((($303)-($304))|0);
 var $306=($302|0)==($270|0);
 if($306){label=47;break;}else{label=49;break;}
 case 47: 
 var $308=HEAP32[(($261)>>2)];
 var $309=($308|0)==12;
 if($309){label=48;break;}else{label=49;break;}
 case 48: 
 HEAP32[(($261)>>2)]=0;
 label=75;break;
 case 49: 
 var $312=($305|0)==12;
 if($312){label=50;break;}else{label=75;break;}
 case 50: 
 var $314=HEAP32[(($261)>>2)];
 var $315=($314|0)<12;
 if($315){label=51;break;}else{label=75;break;}
 case 51: 
 var $317=((($314)+(12))|0);
 HEAP32[(($261)>>2)]=$317;
 label=75;break;
 case 52: 
 var $319=(($__b)|0);
 var $320=HEAP32[(($319)>>2)];
 var $321=(($27)|0);
 HEAP32[(($321)>>2)]=$320;
 var $322=(($__e)|0);
 var $323=HEAP32[(($322)>>2)];
 var $324=(($28)|0);
 HEAP32[(($324)>>2)]=$323;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($26,$this,$27,$28,$__iob,$__err,$__tm,2280,2324);
 var $325=(($26)|0);
 var $326=HEAP32[(($325)>>2)];
 HEAP32[(($319)>>2)]=$326;
 label=75;break;
 case 53: 
 var $328=(($__b)|0);
 var $329=HEAP32[(($328)>>2)];
 var $330=(($30)|0);
 HEAP32[(($330)>>2)]=$329;
 var $331=(($__e)|0);
 var $332=HEAP32[(($331)>>2)];
 var $333=(($31)|0);
 HEAP32[(($333)>>2)]=$332;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($29,$this,$30,$31,$__iob,$__err,$__tm,2256,2276);
 var $334=(($29)|0);
 var $335=HEAP32[(($334)>>2)];
 HEAP32[(($328)>>2)]=$335;
 label=75;break;
 case 54: 
 var $337=(($__e)|0);
 var $338=HEAP32[(($337)>>2)];
 var $339=$5;
 var $$etemp$11$0=4;
 var $$etemp$11$1=0;

 var $340=(($5)|0);
 HEAP32[(($340)>>2)]=$338;
 var $341=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$5,$__err,$67,2);
 var $342=HEAP32[(($__err)>>2)];
 var $343=$342&4;
 var $344=($343|0)==0;
 var $345=($341|0)<61;
 var $or_cond_i28=$344&$345;
 if($or_cond_i28){label=55;break;}else{label=56;break;}
 case 55: 
 var $347=(($__tm)|0);
 HEAP32[(($347)>>2)]=$341;
 label=75;break;
 case 56: 
 var $349=$342|4;
 HEAP32[(($__err)>>2)]=$349;
 label=75;break;
 case 57: 
 var $351=(($__b)|0);
 var $352=HEAP32[(($351)>>2)];
 var $353=(($33)|0);
 HEAP32[(($353)>>2)]=$352;
 var $354=(($__e)|0);
 var $355=HEAP32[(($354)>>2)];
 var $356=(($34)|0);
 HEAP32[(($356)>>2)]=$355;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($32,$this,$33,$34,$__iob,$__err,$__tm,2224,2256);
 var $357=(($32)|0);
 var $358=HEAP32[(($357)>>2)];
 HEAP32[(($351)>>2)]=$358;
 label=75;break;
 case 58: 
 var $360=(($__e)|0);
 var $361=HEAP32[(($360)>>2)];
 var $362=$4;
 var $$etemp$12$0=4;
 var $$etemp$12$1=0;

 var $363=(($4)|0);
 HEAP32[(($363)>>2)]=$361;
 var $364=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$4,$__err,$67,1);
 var $365=HEAP32[(($__err)>>2)];
 var $366=$365&4;
 var $367=($366|0)==0;
 var $368=($364|0)<7;
 var $or_cond_i31=$367&$368;
 if($or_cond_i31){label=59;break;}else{label=60;break;}
 case 59: 
 var $370=(($__tm+24)|0);
 HEAP32[(($370)>>2)]=$364;
 label=75;break;
 case 60: 
 var $372=$365|4;
 HEAP32[(($__err)>>2)]=$372;
 label=75;break;
 case 61: 
 var $374=$this;
 var $375=HEAP32[(($374)>>2)];
 var $376=(($375+20)|0);
 var $377=HEAP32[(($376)>>2)];
 var $378=(($__b)|0);
 var $379=HEAP32[(($378)>>2)];
 var $380=(($35)|0);
 HEAP32[(($380)>>2)]=$379;
 var $381=(($__e)|0);
 var $382=HEAP32[(($381)>>2)];
 var $383=(($36)|0);
 HEAP32[(($383)>>2)]=$382;
 FUNCTION_TABLE[$377]($agg_result,$this,$35,$36,$__iob,$__err,$__tm);
 label=76;break;
 case 62: 
 var $385=(($this+8)|0);
 var $386=$385;
 var $387=HEAP32[(($386)>>2)];
 var $388=(($387+24)|0);
 var $389=HEAP32[(($388)>>2)];
 var $390=FUNCTION_TABLE[$389]($385);
 var $391=(($__b)|0);
 var $392=HEAP32[(($391)>>2)];
 var $393=(($38)|0);
 HEAP32[(($393)>>2)]=$392;
 var $394=(($__e)|0);
 var $395=HEAP32[(($394)>>2)];
 var $396=(($39)|0);
 HEAP32[(($396)>>2)]=$395;
 var $397=$390;
 var $398=HEAP8[($397)];
 var $399=$398&1;
 var $400=(($399<<24)>>24)==0;
 if($400){label=64;break;}else{label=63;break;}
 case 63: 
 var $402=(($390+8)|0);
 var $403=HEAP32[(($402)>>2)];
 var $404=(($390+4)|0);
 var $405=HEAP32[(($404)>>2)];
 var $413=$405;var $412=$403;var $411=$403;label=65;break;
 case 64: 
 var $407=(($390+4)|0);
 var $408=(($390+4)|0);
 var $409=($398&255);
 var $410=$409>>>1;
 var $413=$410;var $412=$407;var $411=$408;label=65;break;
 case 65: 
 var $411;
 var $412;
 var $413;
 var $414=(($411+($413<<2))|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($37,$this,$38,$39,$__iob,$__err,$__tm,$412,$414);
 var $415=(($37)|0);
 var $416=HEAP32[(($415)>>2)];
 HEAP32[(($391)>>2)]=$416;
 label=75;break;
 case 66: 
 var $418=(($__tm+20)|0);
 var $419=(($__e)|0);
 var $420=HEAP32[(($419)>>2)];
 var $421=$3;
 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $422=(($3)|0);
 HEAP32[(($422)>>2)]=$420;
 var $423=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$3,$__err,$67,4);
 var $424=HEAP32[(($__err)>>2)];
 var $425=$424&4;
 var $426=($425|0)==0;
 if($426){label=67;break;}else{label=75;break;}
 case 67: 
 var $428=($423|0)<69;
 if($428){label=68;break;}else{label=69;break;}
 case 68: 
 var $430=((($423)+(2000))|0);
 var $__t_0_i=$430;label=70;break;
 case 69: 
 var $_off_i=((($423)-(69))|0);
 var $432=($_off_i>>>0)<31;
 var $433=((($423)+(1900))|0);
 var $__i=($432?$433:$423);
 var $__t_0_i=$__i;label=70;break;
 case 70: 
 var $__t_0_i;
 var $435=((($__t_0_i)-(1900))|0);
 HEAP32[(($418)>>2)]=$435;
 label=75;break;
 case 71: 
 var $437=(($__e)|0);
 var $438=HEAP32[(($437)>>2)];
 var $439=$2;
 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $440=(($2)|0);
 HEAP32[(($440)>>2)]=$438;
 var $441=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$2,$__err,$67,4);
 var $442=HEAP32[(($__err)>>2)];
 var $443=$442&4;
 var $444=($443|0)==0;
 if($444){label=72;break;}else{label=75;break;}
 case 72: 
 var $446=(($__tm+20)|0);
 var $447=((($441)-(1900))|0);
 HEAP32[(($446)>>2)]=$447;
 label=75;break;
 case 73: 
 var $449=(($__e)|0);
 var $450=HEAP32[(($449)>>2)];
 var $451=(($40)|0);
 HEAP32[(($451)>>2)]=$450;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$40,$__err,$67);
 label=75;break;
 case 74: 
 var $453=HEAP32[(($__err)>>2)];
 var $454=$453|4;
 HEAP32[(($__err)>>2)]=$454;
 label=75;break;
 case 75: 
 var $455=(($__b)|0);
 var $456=HEAP32[(($455)>>2)];
 var $457=(($agg_result)|0);
 HEAP32[(($457)>>2)]=$456;
 label=76;break;
 case 76: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=(($__e)|0);
 var $3=$__ct;
 label=2;break;
 case 2: 
 var $4=HEAP32[(($1)>>2)];
 var $5=($4|0)==0;
 if($5){var $22=1;label=9;break;}else{label=3;break;}
 case 3: 
 var $7=(($4+12)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($4+16)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($8|0)==($10|0);
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 var $13=$4;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+36)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=FUNCTION_TABLE[$16]($4);
 var $_0_i_i_i_i=$17;label=6;break;
 case 5: 
 var $19=HEAP32[(($8)>>2)];
 var $_0_i_i_i_i=$19;label=6;break;
 case 6: 
 var $_0_i_i_i_i;
 var $20=($_0_i_i_i_i|0)==-1;
 if($20){label=8;break;}else{label=7;break;}
 case 7: 
 var $_pre_i_i_i=HEAP32[(($1)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $22=$phitmp_i_i_i;label=9;break;
 case 8: 
 HEAP32[(($1)>>2)]=0;
 var $22=1;label=9;break;
 case 9: 
 var $22;
 var $23=HEAP32[(($2)>>2)];
 var $24=($23|0)==0;
 if($24){label=15;break;}else{label=10;break;}
 case 10: 
 var $26=(($23+12)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(($23+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($27|0)==($29|0);
 if($30){label=11;break;}else{label=12;break;}
 case 11: 
 var $32=$23;
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33+36)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=FUNCTION_TABLE[$35]($23);
 var $_0_i_i1_i_i=$36;label=13;break;
 case 12: 
 var $38=HEAP32[(($27)>>2)];
 var $_0_i_i1_i_i=$38;label=13;break;
 case 13: 
 var $_0_i_i1_i_i;
 var $39=($_0_i_i1_i_i|0)==-1;
 if($39){label=14;break;}else{label=16;break;}
 case 14: 
 HEAP32[(($2)>>2)]=0;
 label=15;break;
 case 15: 
 if($22){var $_pre_i3_i_i9=0;label=24;break;}else{var $42=0;label=17;break;}
 case 16: 
 if($22){var $42=$23;label=17;break;}else{var $_pre_i3_i_i9=$23;label=24;break;}
 case 17: 
 var $42;
 var $43=HEAP32[(($1)>>2)];
 var $44=(($43+12)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($43+16)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($45|0)==($47|0);
 if($48){label=18;break;}else{label=19;break;}
 case 18: 
 var $50=$43;
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+36)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=FUNCTION_TABLE[$53]($43);
 var $_0_i_i=$54;label=20;break;
 case 19: 
 var $56=HEAP32[(($45)>>2)];
 var $_0_i_i=$56;label=20;break;
 case 20: 
 var $_0_i_i;
 var $57=HEAP32[(($3)>>2)];
 var $58=(($57+12)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=FUNCTION_TABLE[$59]($__ct,8192,$_0_i_i);
 if($60){label=21;break;}else{var $_pre_i3_i_i9=$42;label=24;break;}
 case 21: 
 var $62=HEAP32[(($1)>>2)];
 var $63=(($62+12)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=(($62+16)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=($64|0)==($66|0);
 if($67){label=22;break;}else{label=23;break;}
 case 22: 
 var $69=$62;
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+40)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=FUNCTION_TABLE[$72]($62);
 label=2;break;
 case 23: 
 var $75=(($64+4)|0);
 HEAP32[(($63)>>2)]=$75;
 label=2;break;
 case 24: 
 var $_pre_i3_i_i9;
 var $77=HEAP32[(($1)>>2)];
 var $78=($77|0)==0;
 if($78){var $95=1;label=31;break;}else{label=25;break;}
 case 25: 
 var $80=(($77+12)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=(($77+16)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=($81|0)==($83|0);
 if($84){label=26;break;}else{label=27;break;}
 case 26: 
 var $86=$77;
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+36)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=FUNCTION_TABLE[$89]($77);
 var $_0_i_i_i_i1=$90;label=28;break;
 case 27: 
 var $92=HEAP32[(($81)>>2)];
 var $_0_i_i_i_i1=$92;label=28;break;
 case 28: 
 var $_0_i_i_i_i1;
 var $93=($_0_i_i_i_i1|0)==-1;
 if($93){label=30;break;}else{label=29;break;}
 case 29: 
 var $_pre_i_i_i3=HEAP32[(($1)>>2)];
 var $phitmp_i_i_i4=($_pre_i_i_i3|0)==0;
 var $95=$phitmp_i_i_i4;label=31;break;
 case 30: 
 HEAP32[(($1)>>2)]=0;
 var $95=1;label=31;break;
 case 31: 
 var $95;
 var $96=($_pre_i3_i_i9|0)==0;
 if($96){label=37;break;}else{label=32;break;}
 case 32: 
 var $98=(($_pre_i3_i_i9+12)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=(($_pre_i3_i_i9+16)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($99|0)==($101|0);
 if($102){label=33;break;}else{label=34;break;}
 case 33: 
 var $104=$_pre_i3_i_i9;
 var $105=HEAP32[(($104)>>2)];
 var $106=(($105+36)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=FUNCTION_TABLE[$107]($_pre_i3_i_i9);
 var $_0_i_i1_i_i7=$108;label=35;break;
 case 34: 
 var $110=HEAP32[(($99)>>2)];
 var $_0_i_i1_i_i7=$110;label=35;break;
 case 35: 
 var $_0_i_i1_i_i7;
 var $111=($_0_i_i1_i_i7|0)==-1;
 if($111){label=36;break;}else{label=38;break;}
 case 36: 
 HEAP32[(($2)>>2)]=0;
 label=37;break;
 case 37: 
 if($95){label=39;break;}else{label=40;break;}
 case 38: 
 if($95){label=40;break;}else{label=39;break;}
 case 39: 
 var $114=HEAP32[(($__err)>>2)];
 var $115=$114|2;
 HEAP32[(($__err)>>2)]=$115;
 label=40;break;
 case 40: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $20=1;label=8;break;}else{label=2;break;}
 case 2: 
 var $5=(($2+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($2+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6|0)==($8|0);
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 var $11=$2;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+36)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=FUNCTION_TABLE[$14]($2);
 var $_0_i_i_i_i=$15;label=5;break;
 case 4: 
 var $17=HEAP32[(($6)>>2)];
 var $_0_i_i_i_i=$17;label=5;break;
 case 5: 
 var $_0_i_i_i_i;
 var $18=($_0_i_i_i_i|0)==-1;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $_pre_i_i_i=HEAP32[(($1)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $20=$phitmp_i_i_i;label=8;break;
 case 7: 
 HEAP32[(($1)>>2)]=0;
 var $20=1;label=8;break;
 case 8: 
 var $20;
 var $21=(($__e)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=14;break;}else{label=9;break;}
 case 9: 
 var $25=(($22+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($22+16)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($26|0)==($28|0);
 if($29){label=10;break;}else{label=11;break;}
 case 10: 
 var $31=$22;
 var $32=HEAP32[(($31)>>2)];
 var $33=(($32+36)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=FUNCTION_TABLE[$34]($22);
 var $_0_i_i1_i_i=$35;label=12;break;
 case 11: 
 var $37=HEAP32[(($26)>>2)];
 var $_0_i_i1_i_i=$37;label=12;break;
 case 12: 
 var $_0_i_i1_i_i;
 var $38=($_0_i_i1_i_i|0)==-1;
 if($38){label=13;break;}else{label=15;break;}
 case 13: 
 HEAP32[(($21)>>2)]=0;
 label=14;break;
 case 14: 
 if($20){label=16;break;}else{var $_pre_i3_i_i915=0;label=17;break;}
 case 15: 
 if($20){var $_pre_i3_i_i915=$22;label=17;break;}else{label=16;break;}
 case 16: 
 var $41=HEAP32[(($__err)>>2)];
 var $42=$41|6;
 HEAP32[(($__err)>>2)]=$42;
 label=41;break;
 case 17: 
 var $_pre_i3_i_i915;
 var $44=HEAP32[(($1)>>2)];
 var $45=(($44+12)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($44+16)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=($46|0)==($48|0);
 if($49){label=18;break;}else{label=19;break;}
 case 18: 
 var $51=$44;
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52+36)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=FUNCTION_TABLE[$54]($44);
 var $_0_i_i=$55;label=20;break;
 case 19: 
 var $57=HEAP32[(($46)>>2)];
 var $_0_i_i=$57;label=20;break;
 case 20: 
 var $_0_i_i;
 var $58=$__ct;
 var $59=HEAP32[(($58)>>2)];
 var $60=(($59+52)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=FUNCTION_TABLE[$61]($__ct,$_0_i_i,0);
 var $63=(($62<<24)>>24)==37;
 if($63){label=22;break;}else{label=21;break;}
 case 21: 
 var $65=HEAP32[(($__err)>>2)];
 var $66=$65|4;
 HEAP32[(($__err)>>2)]=$66;
 label=41;break;
 case 22: 
 var $68=HEAP32[(($1)>>2)];
 var $69=(($68+12)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=(($68+16)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=($70|0)==($72|0);
 if($73){label=23;break;}else{label=24;break;}
 case 23: 
 var $75=$68;
 var $76=HEAP32[(($75)>>2)];
 var $77=(($76+40)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=FUNCTION_TABLE[$78]($68);
 var $_pre=HEAP32[(($1)>>2)];
 var $82=$_pre;label=25;break;
 case 24: 
 var $81=(($70+4)|0);
 HEAP32[(($69)>>2)]=$81;
 var $82=$68;label=25;break;
 case 25: 
 var $82;
 var $83=($82|0)==0;
 if($83){var $100=1;label=32;break;}else{label=26;break;}
 case 26: 
 var $85=(($82+12)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=(($82+16)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=($86|0)==($88|0);
 if($89){label=27;break;}else{label=28;break;}
 case 27: 
 var $91=$82;
 var $92=HEAP32[(($91)>>2)];
 var $93=(($92+36)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=FUNCTION_TABLE[$94]($82);
 var $_0_i_i_i_i1=$95;label=29;break;
 case 28: 
 var $97=HEAP32[(($86)>>2)];
 var $_0_i_i_i_i1=$97;label=29;break;
 case 29: 
 var $_0_i_i_i_i1;
 var $98=($_0_i_i_i_i1|0)==-1;
 if($98){label=31;break;}else{label=30;break;}
 case 30: 
 var $_pre_i_i_i3=HEAP32[(($1)>>2)];
 var $phitmp_i_i_i4=($_pre_i_i_i3|0)==0;
 var $100=$phitmp_i_i_i4;label=32;break;
 case 31: 
 HEAP32[(($1)>>2)]=0;
 var $100=1;label=32;break;
 case 32: 
 var $100;
 var $101=($_pre_i3_i_i915|0)==0;
 if($101){label=38;break;}else{label=33;break;}
 case 33: 
 var $103=(($_pre_i3_i_i915+12)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=(($_pre_i3_i_i915+16)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=($104|0)==($106|0);
 if($107){label=34;break;}else{label=35;break;}
 case 34: 
 var $109=$_pre_i3_i_i915;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+36)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=FUNCTION_TABLE[$112]($_pre_i3_i_i915);
 var $_0_i_i1_i_i7=$113;label=36;break;
 case 35: 
 var $115=HEAP32[(($104)>>2)];
 var $_0_i_i1_i_i7=$115;label=36;break;
 case 36: 
 var $_0_i_i1_i_i7;
 var $116=($_0_i_i1_i_i7|0)==-1;
 if($116){label=37;break;}else{label=39;break;}
 case 37: 
 HEAP32[(($21)>>2)]=0;
 label=38;break;
 case 38: 
 if($100){label=40;break;}else{label=41;break;}
 case 39: 
 if($100){label=41;break;}else{label=40;break;}
 case 40: 
 var $119=HEAP32[(($__err)>>2)];
 var $120=$119|2;
 HEAP32[(($__err)>>2)]=$120;
 label=41;break;
 case 41: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__110__time_putD2Ev($1);
 var $2=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($2);
 var $3=$this;
 __ZdlPv($3);
 return;
}


function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__110__time_putD2Ev($1);
 var $2=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($2);
 return;
}


function __ZNSt3__110__time_putD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=HEAP8[(13992)];
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=6;break;}
 case 2: 
 var $6=___cxa_guard_acquire(13992);
 var $7=($6|0)==0;
 if($7){label=6;break;}else{label=3;break;}
 case 3: 
 var $9=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((11888)>>2)]=$9;

 label=6;break;
 case 5: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1,0); var $12$1 = tempRet0;

 var $eh_lpad_body$1=$12$1;var $eh_lpad_body$0=$12$0;label=10;break;
 case 6: 
 var $14=HEAP32[((11888)>>2)];
 var $15=($2|0)==($14|0);
 if($15){label=8;break;}else{label=7;break;}
 case 7: 
 var $17=HEAP32[(($1)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=9;break; }
 case 8: 
 return;
 case 9: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1,0); var $20$1 = tempRet0;
 var $eh_lpad_body$1=$20$1;var $eh_lpad_body$0=$20$0;label=10;break;
 case 10: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $21=$eh_lpad_body$0;
 ___clang_call_terminate($21);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg_result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $fmt_i=sp;
 var $__nar=(sp)+(8);
 var $3=(($__nar)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 var $4=(($fmt_i)|0);
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 HEAP8[($4)]=37;
 var $5=(($fmt_i+1)|0);
 HEAP8[($5)]=$__fmt;
 var $6=(($fmt_i+2)|0);
 HEAP8[($6)]=$__mod;
 var $7=(($fmt_i+3)|0);
 HEAP8[($7)]=0;
 var $8=(($__mod<<24)>>24)==0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 HEAP8[($5)]=$__mod;
 HEAP8[($6)]=$__fmt;
 label=3;break;
 case 3: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=_strftime_l($3,100,$4,$__tm,$11);
 var $13=(($__nar+$12)|0);
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $14=(($__s)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($12|0)==0;
 if($16){var $37=$15;label=9;break;}else{var $_01_i_i=$3;var $17=$15;label=4;break;}
 case 4: 
 var $17;
 var $_01_i_i;
 var $18=HEAP8[($_01_i_i)];
 var $19=($17|0)==0;
 if($19){var $34=0;label=8;break;}else{label=5;break;}
 case 5: 
 var $21=(($17+24)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($17+28)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($22|0)==($24|0);
 if($25){label=7;break;}else{label=6;break;}
 case 6: 
 var $26=(($22+1)|0);
 HEAP32[(($21)>>2)]=$26;
 HEAP8[($22)]=$18;
 var $34=$17;label=8;break;
 case 7: 
 var $27=$17;
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+52)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($18&255);
 var $32=FUNCTION_TABLE[$30]($17,$31);
 var $33=($32|0)==-1;
 var $__i=($33?0:$17);
 var $34=$__i;label=8;break;
 case 8: 
 var $34;
 var $35=(($_01_i_i+1)|0);
 var $36=($35|0)==($13|0);
 if($36){var $37=$34;label=9;break;}else{var $_01_i_i=$35;var $17=$34;label=4;break;}
 case 9: 
 var $37;
 var $38=(($agg_result)|0);
 HEAP32[(($38)>>2)]=$37;
 var $$etemp$3$0=100;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__110__time_putD2Ev($1);
 var $2=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($2);
 var $3=$this;
 __ZdlPv($3);
 return;
}


function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__110__time_putD2Ev($1);
 var $2=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($2);
 return;
}


function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg_result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+408)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__nar=sp;
 var $__ne=(sp)+(400);
 var $3=$__nar;
 var $$etemp$0$0=400;
 var $$etemp$0$1=0;

 var $4=(($__nar)|0);
 var $5=(($__nar+400)|0);
 HEAP32[(($__ne)>>2)]=$5;
 var $6=(($this+8)|0);
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($6,$4,$__ne,$__tm,$__fmt,$__mod);
 var $7=HEAP32[(($__ne)>>2)];
 var $8=(($__s)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($4|0)==($7|0);
 if($10){var $32=$9;label=8;break;}else{var $_01_i_i=$4;var $11=$9;label=2;break;}
 case 2: 
 var $11;
 var $_01_i_i;
 var $12=HEAP32[(($_01_i_i)>>2)];
 var $13=($11|0)==0;
 if($13){var $29=0;label=7;break;}else{label=3;break;}
 case 3: 
 var $15=(($11+24)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($11+28)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($16|0)==($18|0);
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=$11;
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+52)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=FUNCTION_TABLE[$24]($11,$12);
 var $_0_i_i_i_i=$25;label=6;break;
 case 5: 
 var $27=(($16+4)|0);
 HEAP32[(($15)>>2)]=$27;
 HEAP32[(($16)>>2)]=$12;
 var $_0_i_i_i_i=$12;label=6;break;
 case 6: 
 var $_0_i_i_i_i;
 var $28=($_0_i_i_i_i|0)==-1;
 var $__i=($28?0:$11);
 var $29=$__i;label=7;break;
 case 7: 
 var $29;
 var $30=(($_01_i_i+4)|0);
 var $31=($30|0)==($7|0);
 if($31){var $32=$29;label=8;break;}else{var $_01_i_i=$30;var $11=$29;label=2;break;}
 case 8: 
 var $32;
 var $33=(($agg_result)|0);
 HEAP32[(($33)>>2)]=$32;
 var $$etemp$1$0=400;
 var $$etemp$1$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this,$__wb,$__we,$__tm,$__fmt,$__mod){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+120)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $fmt_i=sp;
 var $__nar=(sp)+(8);
 var $mb=(sp)+(112);
 var $tmpcast=$mb;
 var $__nb=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__nar)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 var $2=(($fmt_i)|0);
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 HEAP8[($2)]=37;
 var $3=(($fmt_i+1)|0);
 HEAP8[($3)]=$__fmt;
 var $4=(($fmt_i+2)|0);
 HEAP8[($4)]=$__mod;
 var $5=(($fmt_i+3)|0);
 HEAP8[($5)]=0;
 var $6=(($__mod<<24)>>24)==0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 HEAP8[($3)]=$__mod;
 HEAP8[($4)]=$__fmt;
 label=3;break;
 case 3: 
 var $8=(($this)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=_strftime_l($1,100,$2,$__tm,$9);
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $$etemp$3$0=0;
 var $$etemp$3$1=0;
 var $st$4$0=(($mb)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($mb+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 HEAP32[(($__nb)>>2)]=$1;
 var $11=HEAP32[(($__we)>>2)];
 var $12=$11;
 var $13=$__wb;
 var $14=((($12)-($13))|0);
 var $15=$14>>2;
 var $16=HEAP32[(($8)>>2)];
 var $17=_uselocale($16);
 var $18=(function() { try { __THREW__ = 0; return _mbsrtowcs($__wb,$__nb,$15,$tmpcast) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 var $20=($17|0)==0;
 if($20){label=11;break;}else{label=5;break;}
 case 5: 
 var $22=(function() { try { __THREW__ = 0; return _uselocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=6;break; }
 case 6: 
 var $24$0 = ___cxa_find_matching_catch(-1, -1,0); var $24$1 = tempRet0;
 var $25=$24$0;
 ___clang_call_terminate($25);
 throw "Reached an unreachable!";
 case 7: 
 var $27$0 = ___cxa_find_matching_catch(-1, -1); var $27$1 = tempRet0;
 var $28=($17|0)==0;
 if($28){label=10;break;}else{label=8;break;}
 case 8: 
 var $30=(function() { try { __THREW__ = 0; return _uselocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=9;break; }
 case 9: 
 var $32$0 = ___cxa_find_matching_catch(-1, -1,0); var $32$1 = tempRet0;
 var $33=$32$0;
 ___clang_call_terminate($33);
 throw "Reached an unreachable!";
 case 10: 
 ___resumeException($27$0)
 case 11: 
 var $34=($18|0)==-1;
 if($34){label=12;break;}else{label=13;break;}
 case 12: 
 __ZNSt3__121__throw_runtime_errorEPKc(1064);
 throw "Reached an unreachable!";
 case 13: 
 var $37=(($__wb+($18<<2))|0);
 HEAP32[(($__we)>>2)]=$37;
 var $$etemp$6$0=100;
 var $$etemp$6$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110moneypunctIcLb0EED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__110moneypunctIcLb0EED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this){
 var label=0;


 return 127;
}


function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this){
 var label=0;


 return 127;
}


function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg_result,$this){
 var label=0;


 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg_result,1,45);
 return;
}


function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNSt3__110moneypunctIcLb1EED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__110moneypunctIcLb1EED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this){
 var label=0;


 return 127;
}


function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this){
 var label=0;


 return 127;
}


function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg_result,$this){
 var label=0;


 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg_result,1,45);
 return;
}


function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNSt3__110moneypunctIwLb0EED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__110moneypunctIwLb0EED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this){
 var label=0;


 return 2147483647;
}


function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this){
 var label=0;


 return 2147483647;
}


function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg_result,$this){
 var label=0;


 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg_result,1,45);
 return;
}


function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNSt3__110moneypunctIwLb1EED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__110moneypunctIwLb1EED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this){
 var label=0;


 return 2147483647;
}


function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this){
 var label=0;


 return 2147483647;
}


function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg_result,$this){
 var label=0;


 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg_result,1,45);
 return;
}


function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(120);
 var $__wn=(sp)+(128);
 var $__loc=(sp)+(136);
 var $__neg=(sp)+(144);
 var $1=(sp)+(152);
 var $__atoms=(sp)+(160);
 var $__nbuf=(sp)+(176);
 var $2=(($__wbuf)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 var $3=(($__wb)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=(($__wb+4)|0);
 HEAP32[(($4)>>2)]=420;
 var $5=(($__wbuf+100)|0);
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=14;break; }
 case 2: 
 var $7=(($__loc)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$__p_i_i_i_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $10=HEAP32[((13432)>>2)];
 var $11=($10|0)==-1;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 var $13=(($__p_i_i_i_i)|0);
 HEAP32[(($13)>>2)]=13432;
 var $14=(($__p_i_i_i_i+4)|0);
 HEAP32[(($14)>>2)]=(26);
 var $15=(($__p_i_i_i_i+8)|0);
 HEAP32[(($15)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13432,$9,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=15;break; }
 case 4: 
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $16=HEAP32[((13436)>>2)];
 var $17=((($16)-(1))|0);
 var $18=(($8+12)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($8+8)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$19;
 var $23=$21;
 var $24=((($22)-($23))|0);
 var $25=$24>>2;
 var $26=($25>>>0)>($17>>>0);
 if($26){label=5;break;}else{label=6;break;}
 case 5: 
 var $27=(($21+($17<<2))|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($28|0)==0;
 if($29){label=6;break;}else{label=8;break;}
 case 6: 
 var $30=___cxa_allocate_exception(4);
 var $31=$30;
 __ZNSt8bad_castC2Ev($31);
 (function() { try { __THREW__ = 0; return ___cxa_throw($30,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=15;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $33=$28;
 HEAP8[($__neg)]=0;
 var $34=(($__e)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($1)|0);
 HEAP32[(($36)>>2)]=$35;
 var $37=(($__iob+4)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$1,$__intl,$__loc,$38,$__err,$__neg,$33,$__wb,$__wn,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=15;break; }
 case 9: 
 if($39){label=10;break;}else{label=34;break;}
 case 10: 
 var $42=(($__atoms)|0);
 var $43=$28;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+32)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$46]($33,2208,2218,$42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=15;break; }
 case 11: 
 var $48=(($__nbuf)|0);
 var $$etemp$3$0=100;
 var $$etemp$3$1=0;

 var $49=HEAP32[(($__wn)>>2)];
 var $50=HEAP32[(($3)>>2)];
 var $51=$49;
 var $52=$50;
 var $53=((($51)-($52))|0);
 var $54=($53|0)>98;
 if($54){label=12;break;}else{var $__nc_0=$48;var $75=0;label=19;break;}
 case 12: 
 var $55=((($53)+(2))|0);
 var $56=_malloc($55);
 var $57=($56|0)==0;
 if($57){label=13;break;}else{var $__nc_0=$56;var $75=$56;label=19;break;}
 case 13: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__nc_0=0;var $75=0;label=19;break; } else { var $67=0;label=16;break; }
 case 14: 
 var $59$0 = ___cxa_find_matching_catch(-1, -1); var $59$1 = tempRet0;
 var $60=$59$0;
 var $61=$59$1;
 HEAP32[(($3)>>2)]=0;
 var $167=$2;var $_1215=$61;var $_117=$60;var $166=420;label=55;break;
 case 15: 
 var $63$0 = ___cxa_find_matching_catch(-1, -1); var $63$1 = tempRet0;
 var $64=$63$0;
 var $65=$63$1;
 var $_0=$64;var $_01=$65;label=53;break;
 case 16: 
 var $67;
 var $68$0 = ___cxa_find_matching_catch(-1, -1); var $68$1 = tempRet0;
 var $eh_lpad_body$1=$68$1;var $eh_lpad_body$0=$68$0;var $69=$67;label=17;break;
 case 17: 
 var $69;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $70=$eh_lpad_body$0;
 var $71=$eh_lpad_body$1;
 var $72=($69|0)==0;
 if($72){var $_0=$70;var $_01=$71;label=53;break;}else{label=18;break;}
 case 18: 
 _free($69);
 var $_0=$70;var $_01=$71;label=53;break;
 case 19: 
 var $75;
 var $__nc_0;
 var $76=HEAP8[($__neg)];
 var $77=(($76<<24)>>24)==0;
 if($77){var $__nc_1=$__nc_0;label=21;break;}else{label=20;break;}
 case 20: 
 var $79=(($__nc_0+1)|0);
 HEAP8[($__nc_0)]=45;
 var $__nc_1=$79;label=21;break;
 case 21: 
 var $__nc_1;
 var $81=($50>>>0)<($49>>>0);
 if($81){label=22;break;}else{var $__nc_2_lcssa=$__nc_1;label=27;break;}
 case 22: 
 var $82=(($__atoms+10)|0);
 var $83=$__atoms;
 var $__nc_211=$__nc_1;var $__w_012=$50;label=23;break;
 case 23: 
 var $__w_012;
 var $__nc_211;
 var $85=HEAP8[($__w_012)];
 var $_01_i=$42;label=25;break;
 case 24: 
 var $87=($91|0)==($82|0);
 if($87){var $_0_lcssa_i=$82;label=26;break;}else{var $_01_i=$91;label=25;break;}
 case 25: 
 var $_01_i;
 var $89=HEAP8[($_01_i)];
 var $90=(($89<<24)>>24)==(($85<<24)>>24);
 var $91=(($_01_i+1)|0);
 if($90){var $_0_lcssa_i=$_01_i;label=26;break;}else{label=24;break;}
 case 26: 
 var $_0_lcssa_i;
 var $92=$_0_lcssa_i;
 var $93=((($92)-($83))|0);
 var $94=((2208+$93)|0);
 var $95=HEAP8[($94)];
 HEAP8[($__nc_211)]=$95;
 var $96=(($__w_012+1)|0);
 var $97=(($__nc_211+1)|0);
 var $98=HEAP32[(($__wn)>>2)];
 var $99=($96>>>0)<($98>>>0);
 if($99){var $__nc_211=$97;var $__w_012=$96;label=23;break;}else{var $__nc_2_lcssa=$97;label=27;break;}
 case 27: 
 var $__nc_2_lcssa;
 HEAP8[($__nc_2_lcssa)]=0;
 var $100=_sscanf($48,872,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $101=($100|0)==1;
 if($101){label=32;break;}else{label=28;break;}
 case 28: 
 var $103=___cxa_allocate_exception(8);
 var $104=$103;
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($104,592) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=31;break; }
 case 29: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($103,8216,(42)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { var $67=$75;label=16;break; }
 case 30: 
 throw "Reached an unreachable!";
 case 31: 
 var $107$0 = ___cxa_find_matching_catch(-1, -1); var $107$1 = tempRet0;
 ___cxa_free_exception($103);
 var $eh_lpad_body$1=$107$1;var $eh_lpad_body$0=$107$0;var $69=$75;label=17;break;
 case 32: 
 var $109=($75|0)==0;
 if($109){label=34;break;}else{label=33;break;}
 case 33: 
 _free($75);
 label=34;break;
 case 34: 
 var $111=(($__b)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=($112|0)==0;
 if($113){var $127=0;label=40;break;}else{label=35;break;}
 case 35: 
 var $115=(($112+12)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=(($112+16)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=($116|0)==($118|0);
 if($119){label=36;break;}else{var $127=$112;label=40;break;}
 case 36: 
 var $120=$112;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+36)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=15;break; }
 case 37: 
 var $125=($124|0)==-1;
 if($125){label=39;break;}else{label=38;break;}
 case 38: 
 var $_pre_i_i_i=HEAP32[(($111)>>2)];
 var $127=$_pre_i_i_i;label=40;break;
 case 39: 
 HEAP32[(($111)>>2)]=0;
 var $127=0;label=40;break;
 case 40: 
 var $127;
 var $128=($127|0)==0;
 var $129=HEAP32[(($34)>>2)];
 var $130=($129|0)==0;
 if($130){label=46;break;}else{label=41;break;}
 case 41: 
 var $132=(($129+12)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=(($129+16)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=($133|0)==($135|0);
 if($136){label=43;break;}else{label=42;break;}
 case 42: 
 if($128){label=49;break;}else{label=48;break;}
 case 43: 
 var $137=$129;
 var $138=HEAP32[(($137)>>2)];
 var $139=(($138+36)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$140]($129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=15;break; }
 case 44: 
 var $142=($141|0)==-1;
 if($142){label=45;break;}else{label=47;break;}
 case 45: 
 HEAP32[(($34)>>2)]=0;
 label=46;break;
 case 46: 
 if($128){label=48;break;}else{label=49;break;}
 case 47: 
 if($128){label=49;break;}else{label=48;break;}
 case 48: 
 var $145=HEAP32[(($__err)>>2)];
 var $146=$145|2;
 HEAP32[(($__err)>>2)]=$146;
 label=49;break;
 case 49: 
 var $148=HEAP32[(($111)>>2)];
 var $149=(($agg_result)|0);
 HEAP32[(($149)>>2)]=$148;
 var $150=HEAP32[(($7)>>2)];
 var $151=(($150)|0);
 var $152=__ZNSt3__114__shared_count16__release_sharedEv($151);
 var $153=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $154=($153|0)==0;
 if($154){label=52;break;}else{label=50;break;}
 case 50: 
 var $156=HEAP32[(($4)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$156]($153) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=51;break; }
 case 51: 
 var $158$0 = ___cxa_find_matching_catch(-1, -1,0); var $158$1 = tempRet0;
 var $159=$158$0;
 ___clang_call_terminate($159);
 throw "Reached an unreachable!";
 case 52: 
 var $$etemp$4$0=100;
 var $$etemp$4$1=0;

 STACKTOP=sp;return;
 case 53: 
 var $_01;
 var $_0;
 var $161=HEAP32[(($7)>>2)];
 var $162=(($161)|0);
 var $163=__ZNSt3__114__shared_count16__release_sharedEv($162);
 var $_pre=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $164=($_pre|0)==0;
 if($164){var $_1216=$_01;var $_118=$_0;label=57;break;}else{label=54;break;}
 case 54: 
 var $_pre20=HEAP32[(($4)>>2)];
 var $167=$_pre;var $_1215=$_01;var $_117=$_0;var $166=$_pre20;label=55;break;
 case 55: 
 var $166;
 var $_117;
 var $_1215;
 var $167;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$166]($167) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_1216=$_1215;var $_118=$_117;label=57;break; } else { label=56;break; }
 case 56: 
 var $169$0 = ___cxa_find_matching_catch(-1, -1,0); var $169$1 = tempRet0;
 var $170=$169$0;
 ___clang_call_terminate($170);
 throw "Reached an unreachable!";
 case 57: 
 var $_118;
 var $_1216;
 var $171$0=$_118;
 var $171$1=0;
 var $172$0=$171$0;
 var $172$1=$_1216;
 ___resumeException($172$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__do_nothingEPv($0){
 var label=0;


 return;
}


function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+408)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__gbuf=sp;
 var $__pat=(sp)+(400);
 var $tmpcast=$__pat;
 var $__dp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__ts=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__grp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__psn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__nsn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__spaces=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=$__gbuf;
 var $$etemp$0$0=400;
 var $$etemp$0$1=0;

 var $2=(($__gbuf)|0);
 HEAP32[(($__pat)>>2)]=0;
 var $this2_i_i_i=$__grp;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $this2_i_i_i13=$__sym;
 HEAP32[(($this2_i_i_i13)>>2)]=0; HEAP32[((($this2_i_i_i13)+(4))>>2)]=0; HEAP32[((($this2_i_i_i13)+(8))>>2)]=0;
 var $this2_i_i_i15=$__psn;
 HEAP32[(($this2_i_i_i15)>>2)]=0; HEAP32[((($this2_i_i_i15)+(4))>>2)]=0; HEAP32[((($this2_i_i_i15)+(8))>>2)]=0;
 var $this2_i_i_i18=$__nsn;
 HEAP32[(($this2_i_i_i18)>>2)]=0; HEAP32[((($this2_i_i_i18)+(4))>>2)]=0; HEAP32[((($this2_i_i_i18)+(8))>>2)]=0;
 var $this2_i_i_i19=$__spaces;
 HEAP32[(($this2_i_i_i19)>>2)]=0; HEAP32[((($this2_i_i_i19)+(4))>>2)]=0; HEAP32[((($this2_i_i_i19)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$tmpcast,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=24;break; }
 case 2: 
 var $4=(($__gbuf+400)|0);
 var $5=(($__wb)|0);
 var $6=HEAP32[(($5)>>2)];
 HEAP32[(($__wn)>>2)]=$6;
 var $7=(($__b)|0);
 var $8=(($__e)|0);
 var $9=$__pat;
 var $10=(($__ct+8)|0);
 var $11=$__nsn;
 var $12=(($11+1)|0);
 var $13=(($__nsn+4)|0);
 var $14=(($__nsn+8)|0);
 var $15=$__psn;
 var $16=(($15+1)|0);
 var $17=(($__psn+4)|0);
 var $18=(($__psn+8)|0);
 var $19=$__flags&512;
 var $20=($19|0)!=0;
 var $21=$__sym;
 var $22=(($21+1)|0);
 var $23=(($__sym+8)|0);
 var $24=(($__sym+4)|0);
 var $25=$__spaces;
 var $26=(($25+1)|0);
 var $27=(($__spaces+8)|0);
 var $28=(($__spaces+4)|0);
 var $29=(($9+3)|0);
 var $30=(($__wb+4)|0);
 var $31=(($__grp+4)|0);
 var $__we240386=$__we;var $free226389=420;var $35=$2;var $34=$2;var $33=$4;var $__p_0393=0;var $__trailing_sign_0395=0;label=3;break;
 case 3: 
 var $__trailing_sign_0395;
 var $__p_0393;
 var $33;
 var $34;
 var $35;
 var $free226389;
 var $__we240386;
 var $36=HEAP32[(($7)>>2)];
 var $37=($36|0)==0;
 if($37){var $51=0;label=9;break;}else{label=4;break;}
 case 4: 
 var $39=(($36+12)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($36+16)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($40|0)==($42|0);
 if($43){label=5;break;}else{var $51=$36;label=9;break;}
 case 5: 
 var $44=$36;
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+36)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$47]($36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { var $_ph_ph267_ph_ph_ph_ph=$35;var $free230_ph_ph266_ph_ph_ph_ph=$free226389;label=23;break; }
 case 6: 
 var $49=($48|0)==-1;
 if($49){label=8;break;}else{label=7;break;}
 case 7: 
 var $_pre_i_i_i27=HEAP32[(($7)>>2)];
 var $51=$_pre_i_i_i27;label=9;break;
 case 8: 
 HEAP32[(($7)>>2)]=0;
 var $51=0;label=9;break;
 case 9: 
 var $51;
 var $52=($51|0)==0;
 var $53=HEAP32[(($8)>>2)];
 var $54=($53|0)==0;
 if($54){label=15;break;}else{label=10;break;}
 case 10: 
 var $56=(($53+12)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($53+16)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=($57|0)==($59|0);
 if($60){label=12;break;}else{label=11;break;}
 case 11: 
 if($52){var $70=$53;label=17;break;}else{var $free226_lcssa=$free226389;var $_lcssa330=$35;var $_lcssa346=$34;var $__trailing_sign_0_lcssa=$__trailing_sign_0395;label=309;break;}
 case 12: 
 var $61=$53;
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+36)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$64]($53) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { var $_ph_ph267_ph_ph_ph_ph=$35;var $free230_ph_ph266_ph_ph_ph_ph=$free226389;label=23;break; }
 case 13: 
 var $66=($65|0)==-1;
 if($66){label=14;break;}else{label=16;break;}
 case 14: 
 HEAP32[(($8)>>2)]=0;
 label=15;break;
 case 15: 
 if($52){var $free226_lcssa=$free226389;var $_lcssa330=$35;var $_lcssa346=$34;var $__trailing_sign_0_lcssa=$__trailing_sign_0395;label=309;break;}else{var $70=0;label=17;break;}
 case 16: 
 if($52){var $70=$53;label=17;break;}else{var $free226_lcssa=$free226389;var $_lcssa330=$35;var $_lcssa346=$34;var $__trailing_sign_0_lcssa=$__trailing_sign_0395;label=309;break;}
 case 17: 
 var $70;
 var $71=(($9+$__p_0393)|0);
 var $72=HEAP8[($71)];
 var $73=(($72<<24)>>24);
 switch(($73|0)){case 2:{ label=137;break;}case 4:{ var $__ng_0=0;var $587=$33;var $586=$34;var $585=$35;var $free225=$free226389;var $__we239=$__we240386;label=190;break;}case 1:{ label=29;break;}case 0:{ label=42;break;}case 3:{ label=68;break;}default:{var $__trailing_sign_1=$__trailing_sign_0395;var $959=$33;var $958=$34;var $957=$35;var $free227=$free226389;var $__we241=$__we240386;label=308;break;}}break;
 case 18: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;var $74=$_lcssa330;var $free230=$free226_lcssa;label=25;break;
 case 19: 
 var $free230_ph_ph;
 var $_ph_ph;
 var $lpad_loopexit268$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit268$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit268$1;var $lpad_phi$0=$lpad_loopexit268$0;var $74=$_ph_ph;var $free230=$free230_ph_ph;label=25;break;
 case 20: 
 var $lpad_loopexit293$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit293$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit293$1;var $lpad_phi$0=$lpad_loopexit293$0;var $74=$758;var $free230=$free228;label=25;break;
 case 21: 
 var $lpad_loopexit301$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit301$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit301$1;var $lpad_phi$0=$lpad_loopexit301$0;var $74=$35;var $free230=$free226389;label=25;break;
 case 22: 
 var $lpad_loopexit307$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit307$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit307$1;var $lpad_phi$0=$lpad_loopexit307$0;var $74=$35;var $free230=$free226389;label=25;break;
 case 23: 
 var $free230_ph_ph266_ph_ph_ph_ph;
 var $_ph_ph267_ph_ph_ph_ph;
 var $lpad_loopexit309$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit309$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit309$1;var $lpad_phi$0=$lpad_loopexit309$0;var $74=$_ph_ph267_ph_ph_ph_ph;var $free230=$free230_ph_ph266_ph_ph_ph_ph;label=25;break;
 case 24: 
 var $lpad_nonloopexit310$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit310$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit310$1;var $lpad_phi$0=$lpad_nonloopexit310$0;var $74=$2;var $free230=420;label=25;break;
 case 25: 
 var $free230;
 var $74;
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $75=($74|0)==0;
 if($75){label=28;break;}else{label=26;break;}
 case 26: 
 var $77=$74;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$free230]($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=27;break; }
 case 27: 
 var $79$0 = ___cxa_find_matching_catch(-1, -1,0); var $79$1 = tempRet0;
 var $80=$79$0;
 ___clang_call_terminate($80);
 throw "Reached an unreachable!";
 case 28: 
 ___resumeException($lpad_phi$0)
 case 29: 
 var $cond=($__p_0393|0)==3;
 if($cond){var $free226_lcssa=$free226389;var $_lcssa330=$35;var $_lcssa346=$34;var $__trailing_sign_0_lcssa=$__trailing_sign_0395;label=309;break;}else{label=30;break;}
 case 30: 
 var $83=HEAP32[(($7)>>2)];
 var $84=(($83+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(($83+16)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=($85|0)==($87|0);
 if($88){label=31;break;}else{label=33;break;}
 case 31: 
 var $90=$83;
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+36)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$93]($83) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { var $_ph_ph267_ph_ph_ph_ph=$35;var $free230_ph_ph266_ph_ph_ph_ph=$free226389;label=23;break; }
 case 32: 
 var $extract_t_i37=(($94)&255);
 var $_0_i_off0_i38=$extract_t_i37;label=34;break;
 case 33: 
 var $96=HEAP8[($85)];
 var $_0_i_off0_i38=$96;label=34;break;
 case 34: 
 var $_0_i_off0_i38;
 var $isascii1_i=(($_0_i_off0_i38<<24)>>24)>-1;
 if($isascii1_i){label=35;break;}else{label=41;break;}
 case 35: 
 var $97=(($_0_i_off0_i38<<24)>>24);
 var $98=HEAP32[(($10)>>2)];
 var $99=(($98+($97<<1))|0);
 var $100=HEAP16[(($99)>>1)];
 var $101=$100&8192;
 var $102=(($101<<16)>>16)==0;
 if($102){label=41;break;}else{label=36;break;}
 case 36: 
 var $104=HEAP32[(($7)>>2)];
 var $105=(($104+12)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(($104+16)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=($106|0)==($108|0);
 if($109){label=37;break;}else{label=39;break;}
 case 37: 
 var $111=$104;
 var $112=HEAP32[(($111)>>2)];
 var $113=(($112+40)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$114]($104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { var $_ph_ph267_ph_ph_ph_ph=$35;var $free230_ph_ph266_ph_ph_ph_ph=$free226389;label=23;break; }
 case 38: 
 var $extract_t_i41=(($115)&255);
 var $_0_i_off0_i43=$extract_t_i41;label=40;break;
 case 39: 
 var $117=(($106+1)|0);
 HEAP32[(($105)>>2)]=$117;
 var $118=HEAP8[($106)];
 var $_0_i_off0_i43=$118;label=40;break;
 case 40: 
 var $_0_i_off0_i43;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces,$_0_i_off0_i43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { var $_ph_ph267_ph_ph_ph_ph=$35;var $free230_ph_ph266_ph_ph_ph_ph=$free226389;label=23;break; }
 case 41: 
 var $119=HEAP32[(($__err)>>2)];
 var $120=$119|4;
 HEAP32[(($__err)>>2)]=$120;
 var $_0=0;var $1114=$35;var $free232=$free226389;label=359;break;
 case 42: 
 var $122=($__p_0393|0)==3;
 if($122){var $free226_lcssa=$free226389;var $_lcssa330=$35;var $_lcssa346=$34;var $__trailing_sign_0_lcssa=$__trailing_sign_0395;label=309;break;}else{var $123=$70;var $_pre_i2_i_i50=$70;label=43;break;}
 case 43: 
 var $_pre_i2_i_i50;
 var $123;
 var $124=HEAP32[(($7)>>2)];
 var $125=($124|0)==0;
 if($125){var $139=0;label=49;break;}else{label=44;break;}
 case 44: 
 var $127=(($124+12)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=(($124+16)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=($128|0)==($130|0);
 if($131){label=45;break;}else{var $139=$124;label=49;break;}
 case 45: 
 var $132=$124;
 var $133=HEAP32[(($132)>>2)];
 var $134=(($133+36)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$135]($124) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=22;break; }
 case 46: 
 var $137=($136|0)==-1;
 if($137){label=48;break;}else{label=47;break;}
 case 47: 
 var $_pre_i_i_i46=HEAP32[(($7)>>2)];
 var $139=$_pre_i_i_i46;label=49;break;
 case 48: 
 HEAP32[(($7)>>2)]=0;
 var $139=0;label=49;break;
 case 49: 
 var $139;
 var $140=($139|0)==0;
 var $141=($123|0)==0;
 if($141){var $_pre_i2_i_i50462=$_pre_i2_i_i50;label=55;break;}else{label=50;break;}
 case 50: 
 var $143=(($123+12)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=(($123+16)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=($144|0)==($146|0);
 if($147){label=52;break;}else{label=51;break;}
 case 51: 
 if($140){var $158=$123;var $_pre_i2_i_i50464=$_pre_i2_i_i50;label=57;break;}else{var $__trailing_sign_1=$__trailing_sign_0395;var $959=$33;var $958=$34;var $957=$35;var $free227=$free226389;var $__we241=$__we240386;label=308;break;}
 case 52: 
 var $148=$123;
 var $149=HEAP32[(($148)>>2)];
 var $150=(($149+36)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$151]($123) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=22;break; }
 case 53: 
 var $153=($152|0)==-1;
 if($153){label=54;break;}else{label=56;break;}
 case 54: 
 HEAP32[(($8)>>2)]=0;
 var $_pre_i2_i_i50462=0;label=55;break;
 case 55: 
 var $_pre_i2_i_i50462;
 if($140){var $__trailing_sign_1=$__trailing_sign_0395;var $959=$33;var $958=$34;var $957=$35;var $free227=$free226389;var $__we241=$__we240386;label=308;break;}else{var $158=0;var $_pre_i2_i_i50464=$_pre_i2_i_i50462;label=57;break;}
 case 56: 
 var $156=($_pre_i2_i_i50|0)==0;
 var $tmp_i_i52=$140^$156;
 if($tmp_i_i52){var $158=$_pre_i2_i_i50;var $_pre_i2_i_i50464=$_pre_i2_i_i50;label=57;break;}else{var $__trailing_sign_1=$__trailing_sign_0395;var $959=$33;var $958=$34;var $957=$35;var $free227=$free226389;var $__we241=$__we240386;label=308;break;}
 case 57: 
 var $_pre_i2_i_i50464;
 var $158;
 var $159=HEAP32[(($7)>>2)];
 var $160=(($159+12)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($159+16)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($161|0)==($163|0);
 if($164){label=58;break;}else{label=60;break;}
 case 58: 
 var $166=$159;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+36)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($159) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=22;break; }
 case 59: 
 var $extract_t_i56=(($170)&255);
 var $_0_i_off0_i57=$extract_t_i56;label=61;break;
 case 60: 
 var $172=HEAP8[($161)];
 var $_0_i_off0_i57=$172;label=61;break;
 case 61: 
 var $_0_i_off0_i57;
 var $isascii1_i60=(($_0_i_off0_i57<<24)>>24)>-1;
 if($isascii1_i60){label=62;break;}else{var $__trailing_sign_1=$__trailing_sign_0395;var $959=$33;var $958=$34;var $957=$35;var $free227=$free226389;var $__we241=$__we240386;label=308;break;}
 case 62: 
 var $173=(($_0_i_off0_i57<<24)>>24);
 var $174=HEAP32[(($10)>>2)];
 var $175=(($174+($173<<1))|0);
 var $176=HEAP16[(($175)>>1)];
 var $177=$176&8192;
 var $178=(($177<<16)>>16)==0;
 if($178){var $__trailing_sign_1=$__trailing_sign_0395;var $959=$33;var $958=$34;var $957=$35;var $free227=$free226389;var $__we241=$__we240386;label=308;break;}else{label=63;break;}
 case 63: 
 var $180=HEAP32[(($7)>>2)];
 var $181=(($180+12)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=(($180+16)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=($182|0)==($184|0);
 if($185){label=64;break;}else{label=66;break;}
 case 64: 
 var $187=$180;
 var $188=HEAP32[(($187)>>2)];
 var $189=(($188+40)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$190]($180) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=22;break; }
 case 65: 
 var $extract_t_i62=(($191)&255);
 var $_0_i_off0_i64=$extract_t_i62;label=67;break;
 case 66: 
 var $193=(($182+1)|0);
 HEAP32[(($181)>>2)]=$193;
 var $194=HEAP8[($182)];
 var $_0_i_off0_i64=$194;label=67;break;
 case 67: 
 var $_0_i_off0_i64;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces,$_0_i_off0_i64) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $123=$158;var $_pre_i2_i_i50=$_pre_i2_i_i50464;label=43;break; } else { label=22;break; }
 case 68: 
 var $196=HEAP8[($this2_i_i_i15)];
 var $197=$196&1;
 var $198=(($197<<24)>>24)==0;
 if($198){label=70;break;}else{label=69;break;}
 case 69: 
 var $200=HEAP32[(($17)>>2)];
 var $204=$200;label=71;break;
 case 70: 
 var $202=($196&255);
 var $203=$202>>>1;
 var $204=$203;label=71;break;
 case 71: 
 var $204;
 var $205=HEAP8[($this2_i_i_i18)];
 var $206=$205&1;
 var $207=(($206<<24)>>24)==0;
 if($207){label=73;break;}else{label=72;break;}
 case 72: 
 var $209=HEAP32[(($13)>>2)];
 var $213=$209;label=74;break;
 case 73: 
 var $211=($205&255);
 var $212=$211>>>1;
 var $213=$212;label=74;break;
 case 74: 
 var $213;
 var $214=(((-$213))|0);
 var $215=($204|0)==($214|0);
 if($215){var $__trailing_sign_1=$__trailing_sign_0395;var $959=$33;var $958=$34;var $957=$35;var $free227=$free226389;var $__we241=$__we240386;label=308;break;}else{label=75;break;}
 case 75: 
 if($198){label=77;break;}else{label=76;break;}
 case 76: 
 var $218=HEAP32[(($17)>>2)];
 var $222=$218;label=78;break;
 case 77: 
 var $220=($196&255);
 var $221=$220>>>1;
 var $222=$221;label=78;break;
 case 78: 
 var $222;
 var $223=($222|0)==0;
 if($223){label=83;break;}else{label=79;break;}
 case 79: 
 if($207){label=81;break;}else{label=80;break;}
 case 80: 
 var $226=HEAP32[(($13)>>2)];
 var $230=$226;label=82;break;
 case 81: 
 var $228=($205&255);
 var $229=$228>>>1;
 var $230=$229;label=82;break;
 case 82: 
 var $230;
 var $231=($230|0)==0;
 if($231){label=83;break;}else{label=112;break;}
 case 83: 
 if($198){label=85;break;}else{label=84;break;}
 case 84: 
 var $234=HEAP32[(($17)>>2)];
 var $238=$234;label=86;break;
 case 85: 
 var $236=($196&255);
 var $237=$236>>>1;
 var $238=$237;label=86;break;
 case 86: 
 var $238;
 var $239=($238|0)==0;
 var $240=HEAP32[(($7)>>2)];
 var $241=(($240+12)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=(($240+16)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=($242|0)==($244|0);
 if($239){label=100;break;}else{label=87;break;}
 case 87: 
 if($245){label=88;break;}else{label=90;break;}
 case 88: 
 var $248=$240;
 var $249=HEAP32[(($248)>>2)];
 var $250=(($249+36)|0);
 var $251=HEAP32[(($250)>>2)];
 var $252=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$251]($240) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=89;break; } else { var $_ph_ph267_ph_ph_ph_ph=$35;var $free230_ph_ph266_ph_ph_ph_ph=$free226389;label=23;break; }
 case 89: 
 var $extract_t_i91=(($252)&255);
 var $_pre465=HEAP8[($this2_i_i_i15)];
 var $_0_i_off0_i92=$extract_t_i91;var $255=$_pre465;label=91;break;
 case 90: 
 var $254=HEAP8[($242)];
 var $_0_i_off0_i92=$254;var $255=$196;label=91;break;
 case 91: 
 var $255;
 var $_0_i_off0_i92;
 var $256=$255&1;
 var $257=(($256<<24)>>24)==0;
 var $258=HEAP32[(($18)>>2)];
 var $_=($257?$16:$258);
 var $259=HEAP8[($_)];
 var $260=(($_0_i_off0_i92<<24)>>24)==(($259<<24)>>24);
 if($260){label=92;break;}else{label=99;break;}
 case 92: 
 var $262=HEAP32[(($7)>>2)];
 var $263=(($262+12)|0);
 var $264=HEAP32[(($263)>>2)];
 var $265=(($262+16)|0);
 var $266=HEAP32[(($265)>>2)];
 var $267=($264|0)==($266|0);
 if($267){label=93;break;}else{label=94;break;}
 case 93: 
 var $269=$262;
 var $270=HEAP32[(($269)>>2)];
 var $271=(($270+40)|0);
 var $272=HEAP32[(($271)>>2)];
 var $273=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$272]($262) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=95;break; } else { var $_ph_ph267_ph_ph_ph_ph=$35;var $free230_ph_ph266_ph_ph_ph_ph=$free226389;label=23;break; }
 case 94: 
 var $275=(($264+1)|0);
 HEAP32[(($263)>>2)]=$275;
 label=95;break;
 case 95: 
 var $276=HEAP8[($this2_i_i_i15)];
 var $277=$276&1;
 var $278=(($277<<24)>>24)==0;
 if($278){label=97;break;}else{label=96;break;}
 case 96: 
 var $280=HEAP32[(($17)>>2)];
 var $284=$280;label=98;break;
 case 97: 
 var $282=($276&255);
 var $283=$282>>>1;
 var $284=$283;label=98;break;
 case 98: 
 var $284;
 var $285=($284>>>0)>1;
 var $__psn___trailing_sign_0=($285?$__psn:$__trailing_sign_0395);
 var $__trailing_sign_1=$__psn___trailing_sign_0;var $959=$33;var $958=$34;var $957=$35;var $free227=$free226389;var $__we241=$__we240386;label=308;break;
 case 99: 
 HEAP8[($__neg)]=1;
 var $__trailing_sign_1=$__trailing_sign_0395;var $959=$33;var $958=$34;var $957=$35;var $free227=$free226389;var $__we241=$__we240386;label=308;break;
 case 100: 
 if($245){label=101;break;}else{label=103;break;}
 case 101: 
 var $289=$240;
 var $290=HEAP32[(($289)>>2)];
 var $291=(($290+36)|0);
 var $292=HEAP32[(($291)>>2)];
 var $293=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$292]($240) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=102;break; } else { var $_ph_ph267_ph_ph_ph_ph=$35;var $free230_ph_ph266_ph_ph_ph_ph=$free226389;label=23;break; }
 case 102: 
 var $extract_t_i100=(($293)&255);
 var $_pre=HEAP8[($this2_i_i_i18)];
 var $_0_i_off0_i101=$extract_t_i100;var $296=$_pre;label=104;break;
 case 103: 
 var $295=HEAP8[($242)];
 var $_0_i_off0_i101=$295;var $296=$205;label=104;break;
 case 104: 
 var $296;
 var $_0_i_off0_i101;
 var $297=$296&1;
 var $298=(($297<<24)>>24)==0;
 var $299=HEAP32[(($14)>>2)];
 var $_482=($298?$12:$299);
 var $300=HEAP8[($_482)];
 var $301=(($_0_i_off0_i101<<24)>>24)==(($300<<24)>>24);
 if($301){label=105;break;}else{var $__trailing_sign_1=$__trailing_sign_0395;var $959=$33;var $958=$34;var $957=$35;var $free227=$free226389;var $__we241=$__we240386;label=308;break;}
 case 105: 
 var $303=HEAP32[(($7)>>2)];
 var $304=(($303+12)|0);
 var $305=HEAP32[(($304)>>2)];
 var $306=(($303+16)|0);
 var $307=HEAP32[(($306)>>2)];
 var $308=($305|0)==($307|0);
 if($308){label=106;break;}else{label=107;break;}
 case 106: 
 var $310=$303;
 var $311=HEAP32[(($310)>>2)];
 var $312=(($311+40)|0);
 var $313=HEAP32[(($312)>>2)];
 var $314=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$313]($303) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=108;break; } else { var $_ph_ph267_ph_ph_ph_ph=$35;var $free230_ph_ph266_ph_ph_ph_ph=$free226389;label=23;break; }
 case 107: 
 var $316=(($305+1)|0);
 HEAP32[(($304)>>2)]=$316;
 label=108;break;
 case 108: 
 HEAP8[($__neg)]=1;
 var $317=HEAP8[($this2_i_i_i18)];
 var $318=$317&1;
 var $319=(($318<<24)>>24)==0;
 if($319){label=110;break;}else{label=109;break;}
 case 109: 
 var $321=HEAP32[(($13)>>2)];
 var $325=$321;label=111;break;
 case 110: 
 var $323=($317&255);
 var $324=$323>>>1;
 var $325=$324;label=111;break;
 case 111: 
 var $325;
 var $326=($325>>>0)>1;
 var $__nsn___trailing_sign_0=($326?$__nsn:$__trailing_sign_0395);
 var $__trailing_sign_1=$__nsn___trailing_sign_0;var $959=$33;var $958=$34;var $957=$35;var $free227=$free226389;var $__we241=$__we240386;label=308;break;
 case 112: 
 var $328=HEAP32[(($7)>>2)];
 var $329=(($328+12)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=(($328+16)|0);
 var $332=HEAP32[(($331)>>2)];
 var $333=($330|0)==($332|0);
 if($333){label=113;break;}else{label=115;break;}
 case 113: 
 var $335=$328;
 var $336=HEAP32[(($335)>>2)];
 var $337=(($336+36)|0);
 var $338=HEAP32[(($337)>>2)];
 var $339=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$338]($328) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=114;break; } else { var $_ph_ph267_ph_ph_ph_ph=$35;var $free230_ph_ph266_ph_ph_ph_ph=$free226389;label=23;break; }
 case 114: 
 var $extract_t_i123=(($339)&255);
 var $_pre466=HEAP8[($this2_i_i_i15)];
 var $_pre600=HEAP32[(($7)>>2)];
 var $_phi_trans_insert=(($_pre600+12)|0);
 var $_pre601=HEAP32[(($_phi_trans_insert)>>2)];
 var $_phi_trans_insert602=(($_pre600+16)|0);
 var $_pre603=HEAP32[(($_phi_trans_insert602)>>2)];
 var $_0_i_off0_i124=$extract_t_i123;var $345=$_pre466;var $344=$_pre600;var $343=$_pre601;var $342=$_pre603;label=116;break;
 case 115: 
 var $341=HEAP8[($330)];
 var $_0_i_off0_i124=$341;var $345=$196;var $344=$328;var $343=$330;var $342=$332;label=116;break;
 case 116: 
 var $342;
 var $343;
 var $344;
 var $345;
 var $_0_i_off0_i124;
 var $346=$345&1;
 var $347=(($346<<24)>>24)==0;
 var $348=HEAP32[(($18)>>2)];
 var $_483=($347?$16:$348);
 var $349=HEAP8[($_483)];
 var $350=(($_0_i_off0_i124<<24)>>24)==(($349<<24)>>24);
 var $351=(($344+12)|0);
 var $352=($343|0)==($342|0);
 if($350){label=117;break;}else{label=124;break;}
 case 117: 
 if($352){label=118;break;}else{label=119;break;}
 case 118: 
 var $355=$344;
 var $356=HEAP32[(($355)>>2)];
 var $357=(($356+40)|0);
 var $358=HEAP32[(($357)>>2)];
 var $359=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$358]($344) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=120;break; } else { var $_ph_ph267_ph_ph_ph_ph=$35;var $free230_ph_ph266_ph_ph_ph_ph=$free226389;label=23;break; }
 case 119: 
 var $361=(($343+1)|0);
 HEAP32[(($351)>>2)]=$361;
 label=120;break;
 case 120: 
 var $362=HEAP8[($this2_i_i_i15)];
 var $363=$362&1;
 var $364=(($363<<24)>>24)==0;
 if($364){label=122;break;}else{label=121;break;}
 case 121: 
 var $366=HEAP32[(($17)>>2)];
 var $370=$366;label=123;break;
 case 122: 
 var $368=($362&255);
 var $369=$368>>>1;
 var $370=$369;label=123;break;
 case 123: 
 var $370;
 var $371=($370>>>0)>1;
 var $__psn___trailing_sign_09=($371?$__psn:$__trailing_sign_0395);
 var $__trailing_sign_1=$__psn___trailing_sign_09;var $959=$33;var $958=$34;var $957=$35;var $free227=$free226389;var $__we241=$__we240386;label=308;break;
 case 124: 
 if($352){label=125;break;}else{label=127;break;}
 case 125: 
 var $374=$344;
 var $375=HEAP32[(($374)>>2)];
 var $376=(($375+36)|0);
 var $377=HEAP32[(($376)>>2)];
 var $378=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$377]($344) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=126;break; } else { var $_ph_ph267_ph_ph_ph_ph=$35;var $free230_ph_ph266_ph_ph_ph_ph=$free226389;label=23;break; }
 case 126: 
 var $extract_t_i136=(($378)&255);
 var $_0_i_off0_i137=$extract_t_i136;label=128;break;
 case 127: 
 var $380=HEAP8[($343)];
 var $_0_i_off0_i137=$380;label=128;break;
 case 128: 
 var $_0_i_off0_i137;
 var $381=HEAP8[($this2_i_i_i18)];
 var $382=$381&1;
 var $383=(($382<<24)>>24)==0;
 var $384=HEAP32[(($14)>>2)];
 var $_484=($383?$12:$384);
 var $385=HEAP8[($_484)];
 var $386=(($_0_i_off0_i137<<24)>>24)==(($385<<24)>>24);
 if($386){label=129;break;}else{label=136;break;}
 case 129: 
 var $388=HEAP32[(($7)>>2)];
 var $389=(($388+12)|0);
 var $390=HEAP32[(($389)>>2)];
 var $391=(($388+16)|0);
 var $392=HEAP32[(($391)>>2)];
 var $393=($390|0)==($392|0);
 if($393){label=130;break;}else{label=131;break;}
 case 130: 
 var $395=$388;
 var $396=HEAP32[(($395)>>2)];
 var $397=(($396+40)|0);
 var $398=HEAP32[(($397)>>2)];
 var $399=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$398]($388) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=132;break; } else { var $_ph_ph267_ph_ph_ph_ph=$35;var $free230_ph_ph266_ph_ph_ph_ph=$free226389;label=23;break; }
 case 131: 
 var $401=(($390+1)|0);
 HEAP32[(($389)>>2)]=$401;
 label=132;break;
 case 132: 
 HEAP8[($__neg)]=1;
 var $402=HEAP8[($this2_i_i_i18)];
 var $403=$402&1;
 var $404=(($403<<24)>>24)==0;
 if($404){label=134;break;}else{label=133;break;}
 case 133: 
 var $406=HEAP32[(($13)>>2)];
 var $410=$406;label=135;break;
 case 134: 
 var $408=($402&255);
 var $409=$408>>>1;
 var $410=$409;label=135;break;
 case 135: 
 var $410;
 var $411=($410>>>0)>1;
 var $__nsn___trailing_sign_010=($411?$__nsn:$__trailing_sign_0395);
 var $__trailing_sign_1=$__nsn___trailing_sign_010;var $959=$33;var $958=$34;var $957=$35;var $free227=$free226389;var $__we241=$__we240386;label=308;break;
 case 136: 
 var $413=HEAP32[(($__err)>>2)];
 var $414=$413|4;
 HEAP32[(($__err)>>2)]=$414;
 var $_0=0;var $1114=$35;var $free232=$free226389;label=359;break;
 case 137: 
 var $416=($__trailing_sign_0395|0)!=0;
 var $417=($__p_0393>>>0)<2;
 var $or_cond=$416|$417;
 if($or_cond){label=141;break;}else{label=138;break;}
 case 138: 
 var $419=($__p_0393|0)==2;
 if($419){label=139;break;}else{var $424=0;label=140;break;}
 case 139: 
 var $421=HEAP8[($29)];
 var $422=(($421<<24)>>24)!=0;
 var $424=$422;label=140;break;
 case 140: 
 var $424;
 var $brmerge=$20|$424;
 if($brmerge){label=141;break;}else{var $__trailing_sign_1=0;var $959=$33;var $958=$34;var $957=$35;var $free227=$free226389;var $__we241=$__we240386;label=308;break;}
 case 141: 
 var $425=HEAP8[($this2_i_i_i13)];
 var $426=$425&1;
 var $427=(($426<<24)>>24)==0;
 var $428=HEAP32[(($23)>>2)];
 var $_485=($427?$22:$428);
 var $429=($__p_0393|0)==0;
 if($429){var $487=$_485;var $486=$425;var $485=$70;var $_pre_i2_i_i203=$70;label=157;break;}else{label=142;break;}
 case 142: 
 var $431=((($__p_0393)-(1))|0);
 var $432=(($9+$431)|0);
 var $433=HEAP8[($432)];
 var $switch=($433&255)<2;
 if($switch){label=143;break;}else{var $487=$_485;var $486=$425;var $485=$70;var $_pre_i2_i_i203=$70;label=157;break;}
 case 143: 
 var $434=($425&255);
 var $435=$434>>>1;
 var $436=HEAP32[(($24)>>2)];
 var $_487=($427?$435:$436);
 var $437=(($_485+$_487)|0);
 var $438=$_485;label=144;break;
 case 144: 
 var $438;
 var $439=($438|0)==($437|0);
 if($439){var $_lcssa561=$437;label=147;break;}else{label=145;break;}
 case 145: 
 var $441=HEAP8[($438)];
 var $isascii1_i155=(($441<<24)>>24)>-1;
 if($isascii1_i155){label=146;break;}else{var $_lcssa561=$438;label=147;break;}
 case 146: 
 var $442=(($441<<24)>>24);
 var $443=HEAP32[(($10)>>2)];
 var $444=(($443+($442<<1))|0);
 var $445=HEAP16[(($444)>>1)];
 var $446=$445&8192;
 var $447=(($446<<16)>>16)==0;
 var $448=(($438+1)|0);
 if($447){var $_lcssa561=$438;label=147;break;}else{var $438=$448;label=144;break;}
 case 147: 
 var $_lcssa561;
 var $449=$_lcssa561;
 var $450=$_485;
 var $451=((($449)-($450))|0);
 var $452=HEAP8[($this2_i_i_i19)];
 var $453=$452&1;
 var $454=(($453<<24)>>24)==0;
 if($454){label=149;break;}else{label=148;break;}
 case 148: 
 var $456=HEAP32[(($28)>>2)];
 var $460=$456;label=150;break;
 case 149: 
 var $458=($452&255);
 var $459=$458>>>1;
 var $460=$459;label=150;break;
 case 150: 
 var $460;
 var $461=($451>>>0)>($460>>>0);
 if($461){var $487=$_485;var $486=$425;var $485=$70;var $_pre_i2_i_i203=$70;label=157;break;}else{label=151;break;}
 case 151: 
 if($454){label=153;break;}else{label=152;break;}
 case 152: 
 var $464=HEAP32[(($27)>>2)];
 var $465=HEAP32[(($28)>>2)];
 var $_sum=((($465)-($451))|0);
 var $466=(($464+$_sum)|0);
 var $473=$465;var $472=$464;var $471=$466;label=154;break;
 case 153: 
 var $468=($452&255);
 var $469=$468>>>1;
 var $_sum474=((($469)-($451))|0);
 var $470=(($25+1+$_sum474)|0);
 var $473=$469;var $472=$26;var $471=$470;label=154;break;
 case 154: 
 var $471;
 var $472;
 var $473;
 var $474=(($472+$473)|0);
 var $475=($471|0)==($474|0);
 if($475){var $487=$_lcssa561;var $486=$425;var $485=$70;var $_pre_i2_i_i203=$70;label=157;break;}else{var $477=$471;var $476=$_485;label=155;break;}
 case 155: 
 var $476;
 var $477;
 var $478=HEAP8[($477)];
 var $479=HEAP8[($476)];
 var $480=(($478<<24)>>24)==(($479<<24)>>24);
 if($480){label=156;break;}else{var $487=$_485;var $486=$425;var $485=$70;var $_pre_i2_i_i203=$70;label=157;break;}
 case 156: 
 var $482=(($477+1)|0);
 var $483=(($476+1)|0);
 var $484=($482|0)==($474|0);
 if($484){var $487=$_lcssa561;var $486=$425;var $485=$70;var $_pre_i2_i_i203=$70;label=157;break;}else{var $477=$482;var $476=$483;label=155;break;}
 case 157: 
 var $_pre_i2_i_i203;
 var $485;
 var $486;
 var $487;
 var $488=$486&1;
 var $489=(($488<<24)>>24)==0;
 if($489){label=159;break;}else{label=158;break;}
 case 158: 
 var $491=HEAP32[(($23)>>2)];
 var $492=HEAP32[(($24)>>2)];
 var $497=$492;var $496=$491;label=160;break;
 case 159: 
 var $494=($486&255);
 var $495=$494>>>1;
 var $497=$495;var $496=$22;label=160;break;
 case 160: 
 var $496;
 var $497;
 var $498=(($496+$497)|0);
 var $499=($487|0)==($498|0);
 if($499){label=184;break;}else{label=161;break;}
 case 161: 
 var $501=HEAP32[(($7)>>2)];
 var $502=($501|0)==0;
 if($502){var $516=0;label=167;break;}else{label=162;break;}
 case 162: 
 var $504=(($501+12)|0);
 var $505=HEAP32[(($504)>>2)];
 var $506=(($501+16)|0);
 var $507=HEAP32[(($506)>>2)];
 var $508=($505|0)==($507|0);
 if($508){label=163;break;}else{var $516=$501;label=167;break;}
 case 163: 
 var $509=$501;
 var $510=HEAP32[(($509)>>2)];
 var $511=(($510+36)|0);
 var $512=HEAP32[(($511)>>2)];
 var $513=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$512]($501) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=164;break; } else { label=21;break; }
 case 164: 
 var $514=($513|0)==-1;
 if($514){label=166;break;}else{label=165;break;}
 case 165: 
 var $_pre_i_i_i199=HEAP32[(($7)>>2)];
 var $516=$_pre_i_i_i199;label=167;break;
 case 166: 
 HEAP32[(($7)>>2)]=0;
 var $516=0;label=167;break;
 case 167: 
 var $516;
 var $517=($516|0)==0;
 var $518=($485|0)==0;
 if($518){var $_pre_i2_i_i203469=$_pre_i2_i_i203;label=173;break;}else{label=168;break;}
 case 168: 
 var $520=(($485+12)|0);
 var $521=HEAP32[(($520)>>2)];
 var $522=(($485+16)|0);
 var $523=HEAP32[(($522)>>2)];
 var $524=($521|0)==($523|0);
 if($524){label=170;break;}else{label=169;break;}
 case 169: 
 if($517){var $535=$485;var $_pre_i2_i_i203468=$_pre_i2_i_i203;label=175;break;}else{label=184;break;}
 case 170: 
 var $525=$485;
 var $526=HEAP32[(($525)>>2)];
 var $527=(($526+36)|0);
 var $528=HEAP32[(($527)>>2)];
 var $529=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$528]($485) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=171;break; } else { label=21;break; }
 case 171: 
 var $530=($529|0)==-1;
 if($530){label=172;break;}else{label=174;break;}
 case 172: 
 HEAP32[(($8)>>2)]=0;
 var $_pre_i2_i_i203469=0;label=173;break;
 case 173: 
 var $_pre_i2_i_i203469;
 if($517){label=184;break;}else{var $535=0;var $_pre_i2_i_i203468=$_pre_i2_i_i203469;label=175;break;}
 case 174: 
 var $533=($_pre_i2_i_i203|0)==0;
 var $tmp_i_i205=$517^$533;
 if($tmp_i_i205){var $535=$_pre_i2_i_i203;var $_pre_i2_i_i203468=$_pre_i2_i_i203;label=175;break;}else{label=184;break;}
 case 175: 
 var $_pre_i2_i_i203468;
 var $535;
 var $536=HEAP32[(($7)>>2)];
 var $537=(($536+12)|0);
 var $538=HEAP32[(($537)>>2)];
 var $539=(($536+16)|0);
 var $540=HEAP32[(($539)>>2)];
 var $541=($538|0)==($540|0);
 if($541){label=176;break;}else{label=178;break;}
 case 176: 
 var $543=$536;
 var $544=HEAP32[(($543)>>2)];
 var $545=(($544+36)|0);
 var $546=HEAP32[(($545)>>2)];
 var $547=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$546]($536) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=177;break; } else { label=21;break; }
 case 177: 
 var $extract_t_i193=(($547)&255);
 var $_0_i_off0_i194=$extract_t_i193;label=179;break;
 case 178: 
 var $549=HEAP8[($538)];
 var $_0_i_off0_i194=$549;label=179;break;
 case 179: 
 var $_0_i_off0_i194;
 var $550=HEAP8[($487)];
 var $551=(($_0_i_off0_i194<<24)>>24)==(($550<<24)>>24);
 if($551){label=180;break;}else{label=184;break;}
 case 180: 
 var $553=HEAP32[(($7)>>2)];
 var $554=(($553+12)|0);
 var $555=HEAP32[(($554)>>2)];
 var $556=(($553+16)|0);
 var $557=HEAP32[(($556)>>2)];
 var $558=($555|0)==($557|0);
 if($558){label=181;break;}else{label=182;break;}
 case 181: 
 var $560=$553;
 var $561=HEAP32[(($560)>>2)];
 var $562=(($561+40)|0);
 var $563=HEAP32[(($562)>>2)];
 var $564=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$563]($553) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=183;break; } else { label=21;break; }
 case 182: 
 var $566=(($555+1)|0);
 HEAP32[(($554)>>2)]=$566;
 label=183;break;
 case 183: 
 var $567=(($487+1)|0);
 var $_pre467=HEAP8[($this2_i_i_i13)];
 var $487=$567;var $486=$_pre467;var $485=$535;var $_pre_i2_i_i203=$_pre_i2_i_i203468;label=157;break;
 case 184: 
 if($20){label=185;break;}else{var $__trailing_sign_1=$__trailing_sign_0395;var $959=$33;var $958=$34;var $957=$35;var $free227=$free226389;var $__we241=$__we240386;label=308;break;}
 case 185: 
 var $569=HEAP8[($this2_i_i_i13)];
 var $570=$569&1;
 var $571=(($570<<24)>>24)==0;
 if($571){label=187;break;}else{label=186;break;}
 case 186: 
 var $573=HEAP32[(($23)>>2)];
 var $574=HEAP32[(($24)>>2)];
 var $579=$574;var $578=$573;label=188;break;
 case 187: 
 var $576=($569&255);
 var $577=$576>>>1;
 var $579=$577;var $578=$22;label=188;break;
 case 188: 
 var $578;
 var $579;
 var $580=(($578+$579)|0);
 var $581=($487|0)==($580|0);
 if($581){var $__trailing_sign_1=$__trailing_sign_0395;var $959=$33;var $958=$34;var $957=$35;var $free227=$free226389;var $__we241=$__we240386;label=308;break;}else{label=189;break;}
 case 189: 
 var $583=HEAP32[(($__err)>>2)];
 var $584=$583|4;
 HEAP32[(($__err)>>2)]=$584;
 var $_0=0;var $1114=$35;var $free232=$free226389;label=359;break;
 case 190: 
 var $__we239;
 var $free225;
 var $585;
 var $586;
 var $587;
 var $__ng_0;
 var $588=HEAP32[(($7)>>2)];
 var $589=($588|0)==0;
 if($589){var $603=0;label=196;break;}else{label=191;break;}
 case 191: 
 var $591=(($588+12)|0);
 var $592=HEAP32[(($591)>>2)];
 var $593=(($588+16)|0);
 var $594=HEAP32[(($593)>>2)];
 var $595=($592|0)==($594|0);
 if($595){label=192;break;}else{var $603=$588;label=196;break;}
 case 192: 
 var $596=$588;
 var $597=HEAP32[(($596)>>2)];
 var $598=(($597+36)|0);
 var $599=HEAP32[(($598)>>2)];
 var $600=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$599]($588) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=193;break; } else { var $_ph_ph=$585;var $free230_ph_ph=$free225;label=19;break; }
 case 193: 
 var $601=($600|0)==-1;
 if($601){label=195;break;}else{label=194;break;}
 case 194: 
 var $_pre_i_i_i176=HEAP32[(($7)>>2)];
 var $603=$_pre_i_i_i176;label=196;break;
 case 195: 
 HEAP32[(($7)>>2)]=0;
 var $603=0;label=196;break;
 case 196: 
 var $603;
 var $604=($603|0)==0;
 var $605=HEAP32[(($8)>>2)];
 var $606=($605|0)==0;
 if($606){label=202;break;}else{label=197;break;}
 case 197: 
 var $608=(($605+12)|0);
 var $609=HEAP32[(($608)>>2)];
 var $610=(($605+16)|0);
 var $611=HEAP32[(($610)>>2)];
 var $612=($609|0)==($611|0);
 if($612){label=199;break;}else{label=198;break;}
 case 198: 
 if($604){label=204;break;}else{label=235;break;}
 case 199: 
 var $613=$605;
 var $614=HEAP32[(($613)>>2)];
 var $615=(($614+36)|0);
 var $616=HEAP32[(($615)>>2)];
 var $617=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$616]($605) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=200;break; } else { var $_ph_ph=$585;var $free230_ph_ph=$free225;label=19;break; }
 case 200: 
 var $618=($617|0)==-1;
 if($618){label=201;break;}else{label=203;break;}
 case 201: 
 HEAP32[(($8)>>2)]=0;
 label=202;break;
 case 202: 
 if($604){label=235;break;}else{label=204;break;}
 case 203: 
 if($604){label=204;break;}else{label=235;break;}
 case 204: 
 var $622=HEAP32[(($7)>>2)];
 var $623=(($622+12)|0);
 var $624=HEAP32[(($623)>>2)];
 var $625=(($622+16)|0);
 var $626=HEAP32[(($625)>>2)];
 var $627=($624|0)==($626|0);
 if($627){label=205;break;}else{label=207;break;}
 case 205: 
 var $629=$622;
 var $630=HEAP32[(($629)>>2)];
 var $631=(($630+36)|0);
 var $632=HEAP32[(($631)>>2)];
 var $633=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$632]($622) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=206;break; } else { var $_ph_ph=$585;var $free230_ph_ph=$free225;label=19;break; }
 case 206: 
 var $extract_t_i171=(($633)&255);
 var $_0_i_off0_i172=$extract_t_i171;label=208;break;
 case 207: 
 var $635=HEAP8[($624)];
 var $_0_i_off0_i172=$635;label=208;break;
 case 208: 
 var $_0_i_off0_i172;
 var $isascii1_i169=(($_0_i_off0_i172<<24)>>24)>-1;
 if($isascii1_i169){label=209;break;}else{label=221;break;}
 case 209: 
 var $636=(($_0_i_off0_i172<<24)>>24);
 var $637=HEAP32[(($10)>>2)];
 var $638=(($637+($636<<1))|0);
 var $639=HEAP16[(($638)>>1)];
 var $640=$639&2048;
 var $641=(($640<<16)>>16)==0;
 if($641){label=221;break;}else{label=210;break;}
 case 210: 
 var $643=HEAP32[(($__wn)>>2)];
 var $644=($643|0)==($__we239|0);
 if($644){label=211;break;}else{var $__we238=$__we239;var $670=$643;label=220;break;}
 case 211: 
 var $646=HEAP32[(($30)>>2)];
 var $647=($646|0)!=((420)|0);
 var $648=HEAP32[(($5)>>2)];
 var $649=$__we239;
 var $650=$648;
 var $651=((($649)-($650))|0);
 var $652=($651>>>0)<2147483647;
 var $653=$651<<1;
 var $__i158=($652?$653:-1);
 var $654=($647?$648:0);
 var $655=_realloc($654,$__i158);
 var $656=($655|0)==0;
 if($656){label=212;break;}else{label=213;break;}
 case 212: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=213;break; } else { var $_ph_ph=$585;var $free230_ph_ph=$free225;label=19;break; }
 case 213: 
 if($647){label=214;break;}else{label=215;break;}
 case 214: 
 HEAP32[(($5)>>2)]=$655;
 var $665=$655;label=219;break;
 case 215: 
 var $_pr_i160=HEAP32[(($5)>>2)];
 HEAP32[(($5)>>2)]=$655;
 var $659=($_pr_i160|0)==0;
 if($659){var $665=$655;label=219;break;}else{label=216;break;}
 case 216: 
 var $661=HEAP32[(($30)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$661]($_pr_i160) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=217;break; } else { label=218;break; }
 case 217: 
 var $_pre_i161=HEAP32[(($5)>>2)];
 var $665=$_pre_i161;label=219;break;
 case 218: 
 var $663$0 = ___cxa_find_matching_catch(-1, -1,0); var $663$1 = tempRet0;
 var $664=$663$0;
 ___clang_call_terminate($664);
 throw "Reached an unreachable!";
 case 219: 
 var $665;
 HEAP32[(($30)>>2)]=222;
 var $666=(($665+$651)|0);
 HEAP32[(($__wn)>>2)]=$666;
 var $667=HEAP32[(($5)>>2)];
 var $668=(($667+$__i158)|0);
 var $__we238=$668;var $670=$666;label=220;break;
 case 220: 
 var $670;
 var $__we238;
 var $671=(($670+1)|0);
 HEAP32[(($__wn)>>2)]=$671;
 HEAP8[($670)]=$_0_i_off0_i172;
 var $672=((($__ng_0)+(1))|0);
 var $__ng_1=$672;var $714=$587;var $713=$586;var $712=$585;var $free=$free225;var $__we237=$__we238;label=232;break;
 case 221: 
 var $673=HEAP8[($this2_i_i_i)];
 var $674=$673&1;
 var $675=(($674<<24)>>24)==0;
 if($675){label=223;break;}else{label=222;break;}
 case 222: 
 var $677=HEAP32[(($31)>>2)];
 var $681=$677;label=224;break;
 case 223: 
 var $679=($673&255);
 var $680=$679>>>1;
 var $681=$680;label=224;break;
 case 224: 
 var $681;
 var $682=($681|0)!=0;
 var $683=($__ng_0|0)!=0;
 var $or_cond6=$682&$683;
 var $684=HEAP8[($__ts)];
 var $685=(($_0_i_off0_i172<<24)>>24)==(($684<<24)>>24);
 var $or_cond12=$or_cond6&$685;
 if($or_cond12){label=225;break;}else{label=235;break;}
 case 225: 
 var $687=($586|0)==($587|0);
 if($687){label=226;break;}else{var $709=$587;var $708=$586;var $707=$585;var $free224=$free225;label=231;break;}
 case 226: 
 var $689=($free225|0)==((420)|0);
 var $690=$586;
 var $691=$585;
 var $692=((($690)-($691))|0);
 var $693=($692>>>0)<2147483647;
 var $694=$692<<1;
 var $__i147=($693?$694:-1);
 var $695=$692>>2;
 if($689){var $698=0;label=228;break;}else{label=227;break;}
 case 227: 
 var $phitmp_i148=$585;
 var $698=$phitmp_i148;label=228;break;
 case 228: 
 var $698;
 var $699=_realloc($698,$__i147);
 var $700=$699;
 var $701=($699|0)==0;
 if($701){label=229;break;}else{label=230;break;}
 case 229: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=230;break; } else { var $_ph_ph=$585;var $free230_ph_ph=$free225;label=19;break; }
 case 230: 
 var $703=$__i147>>>2;
 var $704=(($700+($695<<2))|0);
 var $705=(($700+($703<<2))|0);
 var $709=$705;var $708=$704;var $707=$700;var $free224=222;label=231;break;
 case 231: 
 var $free224;
 var $707;
 var $708;
 var $709;
 var $710=(($708+4)|0);
 HEAP32[(($708)>>2)]=$__ng_0;
 var $__ng_1=0;var $714=$709;var $713=$710;var $712=$707;var $free=$free224;var $__we237=$__we239;label=232;break;
 case 232: 
 var $__we237;
 var $free;
 var $712;
 var $713;
 var $714;
 var $__ng_1;
 var $715=HEAP32[(($7)>>2)];
 var $716=(($715+12)|0);
 var $717=HEAP32[(($716)>>2)];
 var $718=(($715+16)|0);
 var $719=HEAP32[(($718)>>2)];
 var $720=($717|0)==($719|0);
 if($720){label=233;break;}else{label=234;break;}
 case 233: 
 var $722=$715;
 var $723=HEAP32[(($722)>>2)];
 var $724=(($723+40)|0);
 var $725=HEAP32[(($724)>>2)];
 var $726=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$725]($715) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__ng_0=$__ng_1;var $587=$714;var $586=$713;var $585=$712;var $free225=$free;var $__we239=$__we237;label=190;break; } else { var $_ph_ph=$712;var $free230_ph_ph=$free;label=19;break; }
 case 234: 
 var $728=(($717+1)|0);
 HEAP32[(($716)>>2)]=$728;
 var $__ng_0=$__ng_1;var $587=$714;var $586=$713;var $585=$712;var $free225=$free;var $__we239=$__we237;label=190;break;
 case 235: 
 var $730=($585|0)!=($586|0);
 var $731=($__ng_0|0)!=0;
 var $or_cond8=$730&$731;
 if($or_cond8){label=236;break;}else{var $760=$587;var $759=$586;var $758=$585;var $free228=$free225;label=243;break;}
 case 236: 
 var $733=($586|0)==($587|0);
 if($733){label=237;break;}else{var $755=$587;var $754=$586;var $753=$585;var $free229=$free225;label=242;break;}
 case 237: 
 var $735=($free225|0)==((420)|0);
 var $736=$586;
 var $737=$585;
 var $738=((($736)-($737))|0);
 var $739=($738>>>0)<2147483647;
 var $740=$738<<1;
 var $__i131=($739?$740:-1);
 var $741=$738>>2;
 if($735){var $744=0;label=239;break;}else{label=238;break;}
 case 238: 
 var $phitmp_i=$585;
 var $744=$phitmp_i;label=239;break;
 case 239: 
 var $744;
 var $745=_realloc($744,$__i131);
 var $746=$745;
 var $747=($745|0)==0;
 if($747){label=240;break;}else{label=241;break;}
 case 240: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=241;break; } else { var $_ph_ph267_ph_ph_ph_ph=$585;var $free230_ph_ph266_ph_ph_ph_ph=$free225;label=23;break; }
 case 241: 
 var $749=$__i131>>>2;
 var $750=(($746+($741<<2))|0);
 var $751=(($746+($749<<2))|0);
 var $755=$751;var $754=$750;var $753=$746;var $free229=222;label=242;break;
 case 242: 
 var $free229;
 var $753;
 var $754;
 var $755;
 var $756=(($754+4)|0);
 HEAP32[(($754)>>2)]=$__ng_0;
 var $760=$755;var $759=$756;var $758=$753;var $free228=$free229;label=243;break;
 case 243: 
 var $free228;
 var $758;
 var $759;
 var $760;
 var $761=HEAP32[(($__fd)>>2)];
 var $762=($761|0)>0;
 if($762){label=244;break;}else{var $__we242=$__we239;label=306;break;}
 case 244: 
 var $764=HEAP32[(($7)>>2)];
 var $765=($764|0)==0;
 if($765){var $779=0;label=250;break;}else{label=245;break;}
 case 245: 
 var $767=(($764+12)|0);
 var $768=HEAP32[(($767)>>2)];
 var $769=(($764+16)|0);
 var $770=HEAP32[(($769)>>2)];
 var $771=($768|0)==($770|0);
 if($771){label=246;break;}else{var $779=$764;label=250;break;}
 case 246: 
 var $772=$764;
 var $773=HEAP32[(($772)>>2)];
 var $774=(($773+36)|0);
 var $775=HEAP32[(($774)>>2)];
 var $776=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$775]($764) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=247;break; } else { var $_ph_ph267_ph_ph_ph_ph=$758;var $free230_ph_ph266_ph_ph_ph_ph=$free228;label=23;break; }
 case 247: 
 var $777=($776|0)==-1;
 if($777){label=249;break;}else{label=248;break;}
 case 248: 
 var $_pre_i_i_i113=HEAP32[(($7)>>2)];
 var $779=$_pre_i_i_i113;label=250;break;
 case 249: 
 HEAP32[(($7)>>2)]=0;
 var $779=0;label=250;break;
 case 250: 
 var $779;
 var $780=($779|0)==0;
 var $781=HEAP32[(($8)>>2)];
 var $782=($781|0)==0;
 if($782){label=256;break;}else{label=251;break;}
 case 251: 
 var $784=(($781+12)|0);
 var $785=HEAP32[(($784)>>2)];
 var $786=(($781+16)|0);
 var $787=HEAP32[(($786)>>2)];
 var $788=($785|0)==($787|0);
 if($788){label=253;break;}else{label=252;break;}
 case 252: 
 if($780){var $797=$781;label=258;break;}else{label=263;break;}
 case 253: 
 var $789=$781;
 var $790=HEAP32[(($789)>>2)];
 var $791=(($790+36)|0);
 var $792=HEAP32[(($791)>>2)];
 var $793=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$792]($781) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=254;break; } else { var $_ph_ph267_ph_ph_ph_ph=$758;var $free230_ph_ph266_ph_ph_ph_ph=$free228;label=23;break; }
 case 254: 
 var $794=($793|0)==-1;
 if($794){label=255;break;}else{label=257;break;}
 case 255: 
 HEAP32[(($8)>>2)]=0;
 label=256;break;
 case 256: 
 if($780){label=263;break;}else{var $797=0;label=258;break;}
 case 257: 
 if($780){var $797=$781;label=258;break;}else{label=263;break;}
 case 258: 
 var $797;
 var $798=HEAP32[(($7)>>2)];
 var $799=(($798+12)|0);
 var $800=HEAP32[(($799)>>2)];
 var $801=(($798+16)|0);
 var $802=HEAP32[(($801)>>2)];
 var $803=($800|0)==($802|0);
 if($803){label=259;break;}else{label=261;break;}
 case 259: 
 var $805=$798;
 var $806=HEAP32[(($805)>>2)];
 var $807=(($806+36)|0);
 var $808=HEAP32[(($807)>>2)];
 var $809=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$808]($798) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=260;break; } else { var $_ph_ph267_ph_ph_ph_ph=$758;var $free230_ph_ph266_ph_ph_ph_ph=$free228;label=23;break; }
 case 260: 
 var $extract_t_i105=(($809)&255);
 var $_0_i_off0_i106=$extract_t_i105;label=262;break;
 case 261: 
 var $811=HEAP8[($800)];
 var $_0_i_off0_i106=$811;label=262;break;
 case 262: 
 var $_0_i_off0_i106;
 var $812=HEAP8[($__dp)];
 var $813=(($_0_i_off0_i106<<24)>>24)==(($812<<24)>>24);
 if($813){label=264;break;}else{label=263;break;}
 case 263: 
 var $815=HEAP32[(($__err)>>2)];
 var $816=$815|4;
 HEAP32[(($__err)>>2)]=$816;
 var $_0=0;var $1114=$758;var $free232=$free228;label=359;break;
 case 264: 
 var $818=HEAP32[(($7)>>2)];
 var $819=(($818+12)|0);
 var $820=HEAP32[(($819)>>2)];
 var $821=(($818+16)|0);
 var $822=HEAP32[(($821)>>2)];
 var $823=($820|0)==($822|0);
 if($823){label=265;break;}else{label=266;break;}
 case 265: 
 var $825=$818;
 var $826=HEAP32[(($825)>>2)];
 var $827=(($826+40)|0);
 var $828=HEAP32[(($827)>>2)];
 var $829=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$828]($818) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__we243298=$__we239;var $832=$797;var $_pre_i2_i_i85=$797;label=267;break; } else { var $_ph_ph267_ph_ph_ph_ph=$758;var $free230_ph_ph266_ph_ph_ph_ph=$free228;label=23;break; }
 case 266: 
 var $831=(($820+1)|0);
 HEAP32[(($819)>>2)]=$831;
 var $__we243298=$__we239;var $832=$797;var $_pre_i2_i_i85=$797;label=267;break;
 case 267: 
 var $_pre_i2_i_i85;
 var $832;
 var $__we243298;
 var $833=HEAP32[(($7)>>2)];
 var $834=($833|0)==0;
 if($834){var $848=0;label=273;break;}else{label=268;break;}
 case 268: 
 var $836=(($833+12)|0);
 var $837=HEAP32[(($836)>>2)];
 var $838=(($833+16)|0);
 var $839=HEAP32[(($838)>>2)];
 var $840=($837|0)==($839|0);
 if($840){label=269;break;}else{var $848=$833;label=273;break;}
 case 269: 
 var $841=$833;
 var $842=HEAP32[(($841)>>2)];
 var $843=(($842+36)|0);
 var $844=HEAP32[(($843)>>2)];
 var $845=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$844]($833) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=270;break; } else { label=20;break; }
 case 270: 
 var $846=($845|0)==-1;
 if($846){label=272;break;}else{label=271;break;}
 case 271: 
 var $_pre_i_i_i81=HEAP32[(($7)>>2)];
 var $848=$_pre_i_i_i81;label=273;break;
 case 272: 
 HEAP32[(($7)>>2)]=0;
 var $848=0;label=273;break;
 case 273: 
 var $848;
 var $849=($848|0)==0;
 var $850=($832|0)==0;
 if($850){var $_pre_i2_i_i85473_ph=$_pre_i2_i_i85;label=279;break;}else{label=274;break;}
 case 274: 
 var $852=(($832+12)|0);
 var $853=HEAP32[(($852)>>2)];
 var $854=(($832+16)|0);
 var $855=HEAP32[(($854)>>2)];
 var $856=($853|0)==($855|0);
 if($856){label=276;break;}else{label=275;break;}
 case 275: 
 if($849){var $_pre_i2_i_i85473478=$_pre_i2_i_i85;var $866=$832;label=281;break;}else{label=287;break;}
 case 276: 
 var $857=$832;
 var $858=HEAP32[(($857)>>2)];
 var $859=(($858+36)|0);
 var $860=HEAP32[(($859)>>2)];
 var $861=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$860]($832) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=277;break; } else { label=20;break; }
 case 277: 
 var $862=($861|0)==-1;
 if($862){label=278;break;}else{label=280;break;}
 case 278: 
 HEAP32[(($8)>>2)]=0;
 var $_pre_i2_i_i85473_ph=0;label=279;break;
 case 279: 
 var $_pre_i2_i_i85473_ph;
 if($849){label=287;break;}else{var $_pre_i2_i_i85473478=$_pre_i2_i_i85473_ph;var $866=0;label=281;break;}
 case 280: 
 var $864=($_pre_i2_i_i85|0)==0;
 var $tmp_i_i87=$849^$864;
 if($tmp_i_i87){var $_pre_i2_i_i85473478=$_pre_i2_i_i85;var $866=$_pre_i2_i_i85;label=281;break;}else{label=287;break;}
 case 281: 
 var $866;
 var $_pre_i2_i_i85473478;
 var $867=HEAP32[(($7)>>2)];
 var $868=(($867+12)|0);
 var $869=HEAP32[(($868)>>2)];
 var $870=(($867+16)|0);
 var $871=HEAP32[(($870)>>2)];
 var $872=($869|0)==($871|0);
 if($872){label=282;break;}else{label=284;break;}
 case 282: 
 var $874=$867;
 var $875=HEAP32[(($874)>>2)];
 var $876=(($875+36)|0);
 var $877=HEAP32[(($876)>>2)];
 var $878=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$877]($867) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=283;break; } else { label=20;break; }
 case 283: 
 var $extract_t_i75=(($878)&255);
 var $_0_i_off0_i76=$extract_t_i75;label=285;break;
 case 284: 
 var $880=HEAP8[($869)];
 var $_0_i_off0_i76=$880;label=285;break;
 case 285: 
 var $_0_i_off0_i76;
 var $isascii1_i73=(($_0_i_off0_i76<<24)>>24)>-1;
 if($isascii1_i73){label=286;break;}else{label=287;break;}
 case 286: 
 var $881=(($_0_i_off0_i76<<24)>>24);
 var $882=HEAP32[(($10)>>2)];
 var $883=(($882+($881<<1))|0);
 var $884=HEAP16[(($883)>>1)];
 var $885=$884&2048;
 var $886=(($885<<16)>>16)==0;
 if($886){label=287;break;}else{label=288;break;}
 case 287: 
 var $887=HEAP32[(($__err)>>2)];
 var $888=$887|4;
 HEAP32[(($__err)>>2)]=$888;
 var $_0=0;var $1114=$758;var $free232=$free228;label=359;break;
 case 288: 
 var $890=HEAP32[(($__wn)>>2)];
 var $891=($890|0)==($__we243298|0);
 if($891){label=289;break;}else{var $__we244=$__we243298;var $917=$890;label=298;break;}
 case 289: 
 var $893=HEAP32[(($30)>>2)];
 var $894=($893|0)!=((420)|0);
 var $895=HEAP32[(($5)>>2)];
 var $896=$__we243298;
 var $897=$895;
 var $898=((($896)-($897))|0);
 var $899=($898>>>0)<2147483647;
 var $900=$898<<1;
 var $__i=($899?$900:-1);
 var $901=($894?$895:0);
 var $902=_realloc($901,$__i);
 var $903=($902|0)==0;
 if($903){label=290;break;}else{label=291;break;}
 case 290: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=291;break; } else { label=20;break; }
 case 291: 
 if($894){label=292;break;}else{label=293;break;}
 case 292: 
 HEAP32[(($5)>>2)]=$902;
 var $912=$902;label=297;break;
 case 293: 
 var $_pr_i=HEAP32[(($5)>>2)];
 HEAP32[(($5)>>2)]=$902;
 var $906=($_pr_i|0)==0;
 if($906){var $912=$902;label=297;break;}else{label=294;break;}
 case 294: 
 var $908=HEAP32[(($30)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$908]($_pr_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=295;break; } else { label=296;break; }
 case 295: 
 var $_pre_i67=HEAP32[(($5)>>2)];
 var $912=$_pre_i67;label=297;break;
 case 296: 
 var $910$0 = ___cxa_find_matching_catch(-1, -1,0); var $910$1 = tempRet0;
 var $911=$910$0;
 ___clang_call_terminate($911);
 throw "Reached an unreachable!";
 case 297: 
 var $912;
 HEAP32[(($30)>>2)]=222;
 var $913=(($912+$898)|0);
 HEAP32[(($__wn)>>2)]=$913;
 var $914=HEAP32[(($5)>>2)];
 var $915=(($914+$__i)|0);
 var $__we244=$915;var $917=$913;label=298;break;
 case 298: 
 var $917;
 var $__we244;
 var $918=HEAP32[(($7)>>2)];
 var $919=(($918+12)|0);
 var $920=HEAP32[(($919)>>2)];
 var $921=(($918+16)|0);
 var $922=HEAP32[(($921)>>2)];
 var $923=($920|0)==($922|0);
 if($923){label=299;break;}else{label=301;break;}
 case 299: 
 var $925=$918;
 var $926=HEAP32[(($925)>>2)];
 var $927=(($926+36)|0);
 var $928=HEAP32[(($927)>>2)];
 var $929=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$928]($918) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=300;break; } else { label=20;break; }
 case 300: 
 var $extract_t_i22=(($929)&255);
 var $_pre471=HEAP32[(($__wn)>>2)];
 var $_0_i_off0_i23=$extract_t_i22;var $932=$_pre471;label=302;break;
 case 301: 
 var $931=HEAP8[($920)];
 var $_0_i_off0_i23=$931;var $932=$917;label=302;break;
 case 302: 
 var $932;
 var $_0_i_off0_i23;
 var $933=(($932+1)|0);
 HEAP32[(($__wn)>>2)]=$933;
 HEAP8[($932)]=$_0_i_off0_i23;
 var $934=HEAP32[(($__fd)>>2)];
 var $935=((($934)-(1))|0);
 HEAP32[(($__fd)>>2)]=$935;
 var $936=HEAP32[(($7)>>2)];
 var $937=(($936+12)|0);
 var $938=HEAP32[(($937)>>2)];
 var $939=(($936+16)|0);
 var $940=HEAP32[(($939)>>2)];
 var $941=($938|0)==($940|0);
 if($941){label=303;break;}else{label=305;break;}
 case 303: 
 var $943=$936;
 var $944=HEAP32[(($943)>>2)];
 var $945=(($944+40)|0);
 var $946=HEAP32[(($945)>>2)];
 var $947=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$946]($936) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=304;break; } else { label=20;break; }
 case 304: 
 var $948=($935|0)>0;
 if($948){var $__we243298=$__we244;var $832=$866;var $_pre_i2_i_i85=$_pre_i2_i_i85473478;label=267;break;}else{var $__we242=$__we244;label=306;break;}
 case 305: 
 var $950=(($938+1)|0);
 HEAP32[(($937)>>2)]=$950;
 label=304;break;
 case 306: 
 var $__we242;
 var $951=HEAP32[(($__wn)>>2)];
 var $952=HEAP32[(($5)>>2)];
 var $953=($951|0)==($952|0);
 if($953){label=307;break;}else{var $__trailing_sign_1=$__trailing_sign_0395;var $959=$760;var $958=$759;var $957=$758;var $free227=$free228;var $__we241=$__we242;label=308;break;}
 case 307: 
 var $955=HEAP32[(($__err)>>2)];
 var $956=$955|4;
 HEAP32[(($__err)>>2)]=$956;
 var $_0=0;var $1114=$758;var $free232=$free228;label=359;break;
 case 308: 
 var $__we241;
 var $free227;
 var $957;
 var $958;
 var $959;
 var $__trailing_sign_1;
 var $960=((($__p_0393)+(1))|0);
 var $961=($960>>>0)<4;
 if($961){var $__we240386=$__we241;var $free226389=$free227;var $35=$957;var $34=$958;var $33=$959;var $__p_0393=$960;var $__trailing_sign_0395=$__trailing_sign_1;label=3;break;}else{var $free226_lcssa=$free227;var $_lcssa330=$957;var $_lcssa346=$958;var $__trailing_sign_0_lcssa=$__trailing_sign_1;label=309;break;}
 case 309: 
 var $__trailing_sign_0_lcssa;
 var $_lcssa346;
 var $_lcssa330;
 var $free226_lcssa;
 var $962=($__trailing_sign_0_lcssa|0)==0;
 if($962){label=340;break;}else{label=310;break;}
 case 310: 
 var $963=$__trailing_sign_0_lcssa;
 var $964=$__trailing_sign_0_lcssa;
 var $965=(($964+1)|0);
 var $966=(($__trailing_sign_0_lcssa+8)|0);
 var $967=(($__trailing_sign_0_lcssa+4)|0);
 var $__i_0=1;label=311;break;
 case 311: 
 var $__i_0;
 var $968=HEAP8[($963)];
 var $969=$968&1;
 var $970=(($969<<24)>>24)==0;
 if($970){label=313;break;}else{label=312;break;}
 case 312: 
 var $972=HEAP32[(($967)>>2)];
 var $976=$972;label=314;break;
 case 313: 
 var $974=($968&255);
 var $975=$974>>>1;
 var $976=$975;label=314;break;
 case 314: 
 var $976;
 var $977=($__i_0>>>0)<($976>>>0);
 if($977){label=315;break;}else{label=340;break;}
 case 315: 
 var $979=HEAP32[(($7)>>2)];
 var $980=($979|0)==0;
 if($980){var $994=0;label=321;break;}else{label=316;break;}
 case 316: 
 var $982=(($979+12)|0);
 var $983=HEAP32[(($982)>>2)];
 var $984=(($979+16)|0);
 var $985=HEAP32[(($984)>>2)];
 var $986=($983|0)==($985|0);
 if($986){label=317;break;}else{var $994=$979;label=321;break;}
 case 317: 
 var $987=$979;
 var $988=HEAP32[(($987)>>2)];
 var $989=(($988+36)|0);
 var $990=HEAP32[(($989)>>2)];
 var $991=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$990]($979) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=318;break; } else { label=18;break; }
 case 318: 
 var $992=($991|0)==-1;
 if($992){label=320;break;}else{label=319;break;}
 case 319: 
 var $_pre_i_i_i=HEAP32[(($7)>>2)];
 var $994=$_pre_i_i_i;label=321;break;
 case 320: 
 HEAP32[(($7)>>2)]=0;
 var $994=0;label=321;break;
 case 321: 
 var $994;
 var $995=($994|0)==0;
 var $996=HEAP32[(($8)>>2)];
 var $997=($996|0)==0;
 if($997){label=327;break;}else{label=322;break;}
 case 322: 
 var $999=(($996+12)|0);
 var $1000=HEAP32[(($999)>>2)];
 var $1001=(($996+16)|0);
 var $1002=HEAP32[(($1001)>>2)];
 var $1003=($1000|0)==($1002|0);
 if($1003){label=324;break;}else{label=323;break;}
 case 323: 
 if($995){label=329;break;}else{label=336;break;}
 case 324: 
 var $1004=$996;
 var $1005=HEAP32[(($1004)>>2)];
 var $1006=(($1005+36)|0);
 var $1007=HEAP32[(($1006)>>2)];
 var $1008=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1007]($996) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=325;break; } else { label=18;break; }
 case 325: 
 var $1009=($1008|0)==-1;
 if($1009){label=326;break;}else{label=328;break;}
 case 326: 
 HEAP32[(($8)>>2)]=0;
 label=327;break;
 case 327: 
 if($995){label=336;break;}else{label=329;break;}
 case 328: 
 if($995){label=329;break;}else{label=336;break;}
 case 329: 
 var $1012=HEAP32[(($7)>>2)];
 var $1013=(($1012+12)|0);
 var $1014=HEAP32[(($1013)>>2)];
 var $1015=(($1012+16)|0);
 var $1016=HEAP32[(($1015)>>2)];
 var $1017=($1014|0)==($1016|0);
 if($1017){label=330;break;}else{label=332;break;}
 case 330: 
 var $1019=$1012;
 var $1020=HEAP32[(($1019)>>2)];
 var $1021=(($1020+36)|0);
 var $1022=HEAP32[(($1021)>>2)];
 var $1023=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1022]($1012) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=331;break; } else { label=18;break; }
 case 331: 
 var $extract_t_i=(($1023)&255);
 var $_0_i_off0_i=$extract_t_i;label=333;break;
 case 332: 
 var $1025=HEAP8[($1014)];
 var $_0_i_off0_i=$1025;label=333;break;
 case 333: 
 var $_0_i_off0_i;
 var $1026=HEAP8[($963)];
 var $1027=$1026&1;
 var $1028=(($1027<<24)>>24)==0;
 if($1028){var $1031=$965;label=335;break;}else{label=334;break;}
 case 334: 
 var $1030=HEAP32[(($966)>>2)];
 var $1031=$1030;label=335;break;
 case 335: 
 var $1031;
 var $1032=(($1031+$__i_0)|0);
 var $1033=HEAP8[($1032)];
 var $1034=(($_0_i_off0_i<<24)>>24)==(($1033<<24)>>24);
 if($1034){label=337;break;}else{label=336;break;}
 case 336: 
 var $1036=HEAP32[(($__err)>>2)];
 var $1037=$1036|4;
 HEAP32[(($__err)>>2)]=$1037;
 var $_0=0;var $1114=$_lcssa330;var $free232=$free226_lcssa;label=359;break;
 case 337: 
 var $1039=((($__i_0)+(1))|0);
 var $1040=HEAP32[(($7)>>2)];
 var $1041=(($1040+12)|0);
 var $1042=HEAP32[(($1041)>>2)];
 var $1043=(($1040+16)|0);
 var $1044=HEAP32[(($1043)>>2)];
 var $1045=($1042|0)==($1044|0);
 if($1045){label=338;break;}else{label=339;break;}
 case 338: 
 var $1047=$1040;
 var $1048=HEAP32[(($1047)>>2)];
 var $1049=(($1048+40)|0);
 var $1050=HEAP32[(($1049)>>2)];
 var $1051=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1050]($1040) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__i_0=$1039;label=311;break; } else { label=18;break; }
 case 339: 
 var $1053=(($1042+1)|0);
 HEAP32[(($1041)>>2)]=$1053;
 var $__i_0=$1039;label=311;break;
 case 340: 
 var $1054=($_lcssa330|0)==($_lcssa346|0);
 if($1054){var $_0=1;var $1114=$_lcssa346;var $free232=$free226_lcssa;label=359;break;}else{label=341;break;}
 case 341: 
 var $1056=HEAP8[($this2_i_i_i)];
 var $1057=$1056&1;
 var $1058=(($1057<<24)>>24)==0;
 if($1058){label=343;break;}else{label=342;break;}
 case 342: 
 var $1060=HEAP32[(($31)>>2)];
 var $1064=$1060;label=344;break;
 case 343: 
 var $1062=($1056&255);
 var $1063=$1062>>>1;
 var $1064=$1063;label=344;break;
 case 344: 
 var $1064;
 var $1065=($1064|0)==0;
 if($1065){var $_0=1;var $1114=$_lcssa330;var $free232=$free226_lcssa;label=359;break;}else{label=345;break;}
 case 345: 
 var $1066=((($_lcssa346)-(4))|0);
 var $1067=($1066>>>0)>($_lcssa330>>>0);
 if($1067){var $_012_i_i_i=$_lcssa330;var $1068=$1066;label=346;break;}else{var $1074=$1056;label=348;break;}
 case 346: 
 var $1068;
 var $_012_i_i_i;
 var $1069=HEAP32[(($_012_i_i_i)>>2)];
 var $1070=HEAP32[(($1068)>>2)];
 HEAP32[(($_012_i_i_i)>>2)]=$1070;
 HEAP32[(($1068)>>2)]=$1069;
 var $1071=(($_012_i_i_i+4)|0);
 var $1072=((($1068)-(4))|0);
 var $1073=($1071>>>0)<($1072>>>0);
 if($1073){var $_012_i_i_i=$1071;var $1068=$1072;label=346;break;}else{label=347;break;}
 case 347: 
 var $_pre_i=HEAP8[($this2_i_i_i)];
 var $1074=$_pre_i;label=348;break;
 case 348: 
 var $1074;
 var $1075=$1074&1;
 var $1076=(($1075<<24)>>24)==0;
 if($1076){label=350;break;}else{label=349;break;}
 case 349: 
 var $1078=(($__grp+8)|0);
 var $1079=HEAP32[(($1078)>>2)];
 var $1080=HEAP32[(($31)>>2)];
 var $1087=$1080;var $1086=$1079;label=351;break;
 case 350: 
 var $1082=$__grp;
 var $1083=(($1082+1)|0);
 var $1084=($1074&255);
 var $1085=$1084>>>1;
 var $1087=$1085;var $1086=$1083;label=351;break;
 case 351: 
 var $1086;
 var $1087;
 var $1088=HEAP8[($1086)];
 var $_not9_i=(($1088<<24)>>24)<1;
 var $1089=(($1088<<24)>>24)==127;
 var $or_cond210_i=$_not9_i|$1089;
 if($1067){label=352;break;}else{var $_lcssa6_i=$1088;var $or_cond2_lcssa_i=$or_cond210_i;label=356;break;}
 case 352: 
 var $1090=(($1086+$1087)|0);
 var $1091=$1090;
 var $__ig_011_i=$1086;var $__r_012_i=$_lcssa330;var $1093=$1088;var $or_cond213_i=$or_cond210_i;label=353;break;
 case 353: 
 var $or_cond213_i;
 var $1093;
 var $__r_012_i;
 var $__ig_011_i;
 if($or_cond213_i){label=355;break;}else{label=354;break;}
 case 354: 
 var $1095=(($1093<<24)>>24);
 var $1096=HEAP32[(($__r_012_i)>>2)];
 var $1097=($1095|0)==($1096|0);
 if($1097){label=355;break;}else{label=358;break;}
 case 355: 
 var $1099=$__ig_011_i;
 var $1100=((($1091)-($1099))|0);
 var $1101=($1100|0)>1;
 var $1102=(($__ig_011_i+1)|0);
 var $___ig_0_i=($1101?$1102:$__ig_011_i);
 var $1103=(($__r_012_i+4)|0);
 var $1104=($1103>>>0)<($1066>>>0);
 var $1105=HEAP8[($___ig_0_i)];
 var $_not_i=(($1105<<24)>>24)<1;
 var $1106=(($1105<<24)>>24)==127;
 var $or_cond2_i=$_not_i|$1106;
 if($1104){var $__ig_011_i=$___ig_0_i;var $__r_012_i=$1103;var $1093=$1105;var $or_cond213_i=$or_cond2_i;label=353;break;}else{var $_lcssa6_i=$1105;var $or_cond2_lcssa_i=$or_cond2_i;label=356;break;}
 case 356: 
 var $or_cond2_lcssa_i;
 var $_lcssa6_i;
 if($or_cond2_lcssa_i){var $_0=1;var $1114=$_lcssa330;var $free232=$free226_lcssa;label=359;break;}else{label=357;break;}
 case 357: 
 var $1108=(($_lcssa6_i<<24)>>24);
 var $1109=HEAP32[(($1066)>>2)];
 var $1110=((($1109)-(1))|0);
 var $1111=($1110>>>0)<($1108>>>0);
 if($1111){var $_0=1;var $1114=$_lcssa330;var $free232=$free226_lcssa;label=359;break;}else{label=358;break;}
 case 358: 
 var $1112=HEAP32[(($__err)>>2)];
 var $1113=$1112|4;
 HEAP32[(($__err)>>2)]=$1113;
 var $_0=0;var $1114=$_lcssa330;var $free232=$free226_lcssa;label=359;break;
 case 359: 
 var $free232;
 var $1114;
 var $_0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $1115=($1114|0)==0;
 if($1115){label=362;break;}else{label=360;break;}
 case 360: 
 var $1117=$1114;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$free232]($1117) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=362;break; } else { label=361;break; }
 case 361: 
 var $1119$0 = ___cxa_find_matching_catch(-1, -1,0); var $1119$1 = tempRet0;
 var $1120=$1119$0;
 ___clang_call_terminate($1120);
 throw "Reached an unreachable!";
 case 362: 
 var $$etemp$1$0=400;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__121__throw_runtime_errorEPKc($msg){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=___cxa_allocate_exception(8);
 var $2=$1;
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($2,$msg) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 ___cxa_throw($1,8216,(42));
 throw "Reached an unreachable!";
 case 3: 
 var $5$0 = ___cxa_find_matching_catch(-1, -1); var $5$1 = tempRet0;
 ___cxa_free_exception($1);
 ___resumeException($5$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+160)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(120);
 var $__wn=(sp)+(128);
 var $__loc=(sp)+(136);
 var $__neg=(sp)+(144);
 var $1=(sp)+(152);
 var $2=(($__wbuf)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 var $3=(($__wb)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=(($__wb+4)|0);
 HEAP32[(($4)>>2)]=420;
 var $5=(($__wbuf+100)|0);
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=16;break; }
 case 2: 
 var $7=(($__loc)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$__p_i_i_i_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $10=HEAP32[((13432)>>2)];
 var $11=($10|0)==-1;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 var $13=(($__p_i_i_i_i)|0);
 HEAP32[(($13)>>2)]=13432;
 var $14=(($__p_i_i_i_i+4)|0);
 HEAP32[(($14)>>2)]=(26);
 var $15=(($__p_i_i_i_i+8)|0);
 HEAP32[(($15)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13432,$9,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=41;break; }
 case 4: 
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $16=HEAP32[((13436)>>2)];
 var $17=((($16)-(1))|0);
 var $18=(($8+12)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($8+8)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$19;
 var $23=$21;
 var $24=((($22)-($23))|0);
 var $25=$24>>2;
 var $26=($25>>>0)>($17>>>0);
 if($26){label=5;break;}else{label=6;break;}
 case 5: 
 var $27=(($21+($17<<2))|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($28|0)==0;
 if($29){label=6;break;}else{label=8;break;}
 case 6: 
 var $30=___cxa_allocate_exception(4);
 var $31=$30;
 __ZNSt8bad_castC2Ev($31);
 (function() { try { __THREW__ = 0; return ___cxa_throw($30,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=41;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $33=$28;
 HEAP8[($__neg)]=0;
 var $34=(($__e)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($1)|0);
 HEAP32[(($36)>>2)]=$35;
 var $37=(($__iob+4)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$1,$__intl,$__loc,$38,$__err,$__neg,$33,$__wb,$__wn,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=41;break; }
 case 9: 
 if($39){label=10;break;}else{label=22;break;}
 case 10: 
 var $42=$__v;
 var $43=HEAP8[($42)];
 var $44=$43&1;
 var $45=(($44<<24)>>24)==0;
 if($45){label=12;break;}else{label=11;break;}
 case 11: 
 var $47=(($__v+8)|0);
 var $48=HEAP32[(($47)>>2)];
 HEAP8[($48)]=0;
 var $49=(($__v+4)|0);
 HEAP32[(($49)>>2)]=0;
 label=13;break;
 case 12: 
 var $51=$__v;
 var $52=(($51+1)|0);
 HEAP8[($52)]=0;
 HEAP8[($42)]=0;
 label=13;break;
 case 13: 
 var $53=HEAP8[($__neg)];
 var $54=(($53<<24)>>24)==0;
 var $_pre13=$28;
 if($54){label=17;break;}else{label=14;break;}
 case 14: 
 var $56=HEAP32[(($_pre13)>>2)];
 var $57=(($56+28)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$58]($33,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=41;break; }
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__v,$59) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=41;break; }
 case 16: 
 var $60$0 = ___cxa_find_matching_catch(-1, -1); var $60$1 = tempRet0;
 var $61=$60$0;
 var $62=$60$1;
 HEAP32[(($3)>>2)]=0;
 var $136=$2;var $_0116=$62;var $_018=$61;label=42;break;
 case 17: 
 var $63=HEAP32[(($_pre13)>>2)];
 var $64=(($63+28)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$65]($33,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=41;break; }
 case 18: 
 var $67=HEAP32[(($3)>>2)];
 var $68=HEAP32[(($__wn)>>2)];
 var $69=((($68)-(1))|0);
 var $70=($67>>>0)<($69>>>0);
 if($70){var $__w_09=$67;label=20;break;}else{var $__w_0_lcssa=$67;label=21;break;}
 case 19: 
 var $72=($75>>>0)<($69>>>0);
 if($72){var $__w_09=$75;label=20;break;}else{var $__w_0_lcssa=$75;label=21;break;}
 case 20: 
 var $__w_09;
 var $73=HEAP8[($__w_09)];
 var $74=(($73<<24)>>24)==(($66<<24)>>24);
 var $75=(($__w_09+1)|0);
 if($74){label=19;break;}else{var $__w_0_lcssa=$__w_09;label=21;break;}
 case 21: 
 var $__w_0_lcssa;
 var $76=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v,$__w_0_lcssa,$68) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=41;break; }
 case 22: 
 var $78=(($__b)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=($79|0)==0;
 if($80){var $94=0;label=28;break;}else{label=23;break;}
 case 23: 
 var $82=(($79+12)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($79+16)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($83|0)==($85|0);
 if($86){label=24;break;}else{var $94=$79;label=28;break;}
 case 24: 
 var $87=$79;
 var $88=HEAP32[(($87)>>2)];
 var $89=(($88+36)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$90]($79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=41;break; }
 case 25: 
 var $92=($91|0)==-1;
 if($92){label=27;break;}else{label=26;break;}
 case 26: 
 var $_pre_i_i_i=HEAP32[(($78)>>2)];
 var $94=$_pre_i_i_i;label=28;break;
 case 27: 
 HEAP32[(($78)>>2)]=0;
 var $94=0;label=28;break;
 case 28: 
 var $94;
 var $95=($94|0)==0;
 var $96=($35|0)==0;
 if($96){label=34;break;}else{label=29;break;}
 case 29: 
 var $98=(($35+12)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=(($35+16)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($99|0)==($101|0);
 if($102){label=31;break;}else{label=30;break;}
 case 30: 
 if($95){label=37;break;}else{label=36;break;}
 case 31: 
 var $103=$35;
 var $104=HEAP32[(($103)>>2)];
 var $105=(($104+36)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$106]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=41;break; }
 case 32: 
 var $108=($107|0)==-1;
 if($108){label=33;break;}else{label=35;break;}
 case 33: 
 HEAP32[(($34)>>2)]=0;
 label=34;break;
 case 34: 
 if($95){label=36;break;}else{label=37;break;}
 case 35: 
 var $110=($35|0)==0;
 var $tmp_i_i=$95^$110;
 if($tmp_i_i){label=37;break;}else{label=36;break;}
 case 36: 
 var $112=HEAP32[(($__err)>>2)];
 var $113=$112|2;
 HEAP32[(($__err)>>2)]=$113;
 label=37;break;
 case 37: 
 var $115=HEAP32[(($78)>>2)];
 var $116=(($agg_result)|0);
 HEAP32[(($116)>>2)]=$115;
 var $117=HEAP32[(($7)>>2)];
 var $118=(($117)|0);
 var $119=__ZNSt3__114__shared_count16__release_sharedEv($118);
 var $120=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $121=($120|0)==0;
 if($121){label=40;break;}else{label=38;break;}
 case 38: 
 var $123=HEAP32[(($4)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=39;break; }
 case 39: 
 var $125$0 = ___cxa_find_matching_catch(-1, -1,0); var $125$1 = tempRet0;
 var $126=$125$0;
 ___clang_call_terminate($126);
 throw "Reached an unreachable!";
 case 40: 
 var $$etemp$3$0=100;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
 case 41: 
 var $128$0 = ___cxa_find_matching_catch(-1, -1); var $128$1 = tempRet0;
 var $129=$128$0;
 var $130=$128$1;
 var $131=HEAP32[(($7)>>2)];
 var $132=(($131)|0);
 var $133=__ZNSt3__114__shared_count16__release_sharedEv($132);
 var $_pre=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $134=($_pre|0)==0;
 if($134){var $_0117=$130;var $_019=$129;label=44;break;}else{var $136=$_pre;var $_0116=$130;var $_018=$129;label=42;break;}
 case 42: 
 var $_018;
 var $_0116;
 var $136;
 var $137=HEAP32[(($4)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$137]($136) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0117=$_0116;var $_019=$_018;label=44;break; } else { label=43;break; }
 case 43: 
 var $139$0 = ___cxa_find_matching_catch(-1, -1,0); var $139$1 = tempRet0;
 var $140=$139$0;
 ___clang_call_terminate($140);
 throw "Reached an unreachable!";
 case 44: 
 var $_019;
 var $_0117;
 var $141$0=$_019;
 var $141$1=0;
 var $142$0=$141$0;
 var $142$1=$_0117;
 ___resumeException($142$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i8=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $1=(sp)+(32);
 var $2=(sp)+(40);
 var $3=(sp)+(56);
 var $4=(sp)+(72);
 var $5=(sp)+(88);
 var $6=(sp)+(104);
 var $7=(sp)+(112);
 var $8=(sp)+(128);
 var $9=(sp)+(144);
 var $10=(sp)+(160);
 if($__intl){label=2;break;}else{label=28;break;}
 case 2: 
 var $tmpcast1=$1;
 var $12=(($__loc)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $15=HEAP32[((13904)>>2)];
 var $16=($15|0)==-1;
 if($16){label=4;break;}else{label=3;break;}
 case 3: 
 var $18=(($__p_i_i_i_i)|0);
 HEAP32[(($18)>>2)]=13904;
 var $19=(($__p_i_i_i_i+4)|0);
 HEAP32[(($19)>>2)]=(26);
 var $20=(($__p_i_i_i_i+8)|0);
 HEAP32[(($20)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(13904,$14,260);
 label=4;break;
 case 4: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $21=HEAP32[((13908)>>2)];
 var $22=((($21)-(1))|0);
 var $23=(($13+12)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($13+8)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=$24;
 var $28=$26;
 var $29=((($27)-($28))|0);
 var $30=$29>>2;
 var $31=($30>>>0)>($22>>>0);
 if($31){label=5;break;}else{label=6;break;}
 case 5: 
 var $32=(($26+($22<<2))|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)==0;
 if($34){label=6;break;}else{label=7;break;}
 case 6: 
 var $35=___cxa_allocate_exception(4);
 var $36=$35;
 __ZNSt8bad_castC2Ev($36);
 ___cxa_throw($35,8200,(356));
 throw "Reached an unreachable!";
 case 7: 
 var $37=$33;
 var $38=$33;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+44)|0);
 var $41=HEAP32[(($40)>>2)];
 FUNCTION_TABLE[$41]($tmpcast1,$37);
 var $42=$__pat;
 var $43=HEAP32[(($1)>>2)];
 tempBigInt=$43;HEAP8[($42)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($42)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($42)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($42)+(3))|0)]=tempBigInt&0xff;
 var $44=$33;
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+32)|0);
 var $47=HEAP32[(($46)>>2)];
 FUNCTION_TABLE[$47]($2,$37);
 var $48=$__nsn;
 var $49=HEAP8[($48)];
 var $50=$49&1;
 var $51=(($50<<24)>>24)==0;
 if($51){label=9;break;}else{label=8;break;}
 case 8: 
 var $53=(($__nsn+8)|0);
 var $54=HEAP32[(($53)>>2)];
 HEAP8[($54)]=0;
 var $55=(($__nsn+4)|0);
 HEAP32[(($55)>>2)]=0;
 label=10;break;
 case 9: 
 var $57=$__nsn;
 var $58=(($57+1)|0);
 HEAP8[($58)]=0;
 HEAP8[($48)]=0;
 label=10;break;
 case 10: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=11;break; }
 case 11: 
 var $60$0 = ___cxa_find_matching_catch(-1, -1,0); var $60$1 = tempRet0;
 var $61=$60$0;
 ___clang_call_terminate($61);
 throw "Reached an unreachable!";
 case 12: 
 var $62=$2;
 assert(12 % 1 === 0);HEAP32[(($48)>>2)]=HEAP32[(($62)>>2)];HEAP32[((($48)+(4))>>2)]=HEAP32[((($62)+(4))>>2)];HEAP32[((($48)+(8))>>2)]=HEAP32[((($62)+(8))>>2)];
 HEAP32[(($62)>>2)]=0; HEAP32[((($62)+(4))>>2)]=0; HEAP32[((($62)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $63=HEAP32[(($44)>>2)];
 var $64=(($63+28)|0);
 var $65=HEAP32[(($64)>>2)];
 FUNCTION_TABLE[$65]($3,$37);
 var $66=$__psn;
 var $67=HEAP8[($66)];
 var $68=$67&1;
 var $69=(($68<<24)>>24)==0;
 if($69){label=14;break;}else{label=13;break;}
 case 13: 
 var $71=(($__psn+8)|0);
 var $72=HEAP32[(($71)>>2)];
 HEAP8[($72)]=0;
 var $73=(($__psn+4)|0);
 HEAP32[(($73)>>2)]=0;
 label=15;break;
 case 14: 
 var $75=$__psn;
 var $76=(($75+1)|0);
 HEAP8[($76)]=0;
 HEAP8[($66)]=0;
 label=15;break;
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=16;break; }
 case 16: 
 var $78$0 = ___cxa_find_matching_catch(-1, -1,0); var $78$1 = tempRet0;
 var $79=$78$0;
 ___clang_call_terminate($79);
 throw "Reached an unreachable!";
 case 17: 
 var $80=$3;
 assert(12 % 1 === 0);HEAP32[(($66)>>2)]=HEAP32[(($80)>>2)];HEAP32[((($66)+(4))>>2)]=HEAP32[((($80)+(4))>>2)];HEAP32[((($66)+(8))>>2)]=HEAP32[((($80)+(8))>>2)];
 HEAP32[(($80)>>2)]=0; HEAP32[((($80)+(4))>>2)]=0; HEAP32[((($80)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
 var $81=$33;
 var $82=HEAP32[(($81)>>2)];
 var $83=(($82+12)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=FUNCTION_TABLE[$84]($37);
 HEAP8[($__dp)]=$85;
 var $86=HEAP32[(($81)>>2)];
 var $87=(($86+16)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=FUNCTION_TABLE[$88]($37);
 HEAP8[($__ts)]=$89;
 var $90=HEAP32[(($44)>>2)];
 var $91=(($90+20)|0);
 var $92=HEAP32[(($91)>>2)];
 FUNCTION_TABLE[$92]($4,$37);
 var $93=$__grp;
 var $94=HEAP8[($93)];
 var $95=$94&1;
 var $96=(($95<<24)>>24)==0;
 if($96){label=19;break;}else{label=18;break;}
 case 18: 
 var $98=(($__grp+8)|0);
 var $99=HEAP32[(($98)>>2)];
 HEAP8[($99)]=0;
 var $100=(($__grp+4)|0);
 HEAP32[(($100)>>2)]=0;
 label=20;break;
 case 19: 
 var $102=$__grp;
 var $103=(($102+1)|0);
 HEAP8[($103)]=0;
 HEAP8[($93)]=0;
 label=20;break;
 case 20: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=21;break; }
 case 21: 
 var $105$0 = ___cxa_find_matching_catch(-1, -1,0); var $105$1 = tempRet0;
 var $106=$105$0;
 ___clang_call_terminate($106);
 throw "Reached an unreachable!";
 case 22: 
 var $107=$4;
 assert(12 % 1 === 0);HEAP32[(($93)>>2)]=HEAP32[(($107)>>2)];HEAP32[((($93)+(4))>>2)]=HEAP32[((($107)+(4))>>2)];HEAP32[((($93)+(8))>>2)]=HEAP32[((($107)+(8))>>2)];
 HEAP32[(($107)>>2)]=0; HEAP32[((($107)+(4))>>2)]=0; HEAP32[((($107)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
 var $108=HEAP32[(($44)>>2)];
 var $109=(($108+24)|0);
 var $110=HEAP32[(($109)>>2)];
 FUNCTION_TABLE[$110]($5,$37);
 var $111=$__sym;
 var $112=HEAP8[($111)];
 var $113=$112&1;
 var $114=(($113<<24)>>24)==0;
 if($114){label=24;break;}else{label=23;break;}
 case 23: 
 var $116=(($__sym+8)|0);
 var $117=HEAP32[(($116)>>2)];
 HEAP8[($117)]=0;
 var $118=(($__sym+4)|0);
 HEAP32[(($118)>>2)]=0;
 label=25;break;
 case 24: 
 var $120=$__sym;
 var $121=(($120+1)|0);
 HEAP8[($121)]=0;
 HEAP8[($111)]=0;
 label=25;break;
 case 25: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=26;break; }
 case 26: 
 var $123$0 = ___cxa_find_matching_catch(-1, -1,0); var $123$1 = tempRet0;
 var $124=$123$0;
 ___clang_call_terminate($124);
 throw "Reached an unreachable!";
 case 27: 
 var $125=$5;
 assert(12 % 1 === 0);HEAP32[(($111)>>2)]=HEAP32[(($125)>>2)];HEAP32[((($111)+(4))>>2)]=HEAP32[((($125)+(4))>>2)];HEAP32[((($111)+(8))>>2)]=HEAP32[((($125)+(8))>>2)];
 HEAP32[(($125)>>2)]=0; HEAP32[((($125)+(4))>>2)]=0; HEAP32[((($125)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
 var $126=$33;
 var $127=HEAP32[(($126)>>2)];
 var $128=(($127+36)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=FUNCTION_TABLE[$129]($37);
 var $storemerge=$130;label=54;break;
 case 28: 
 var $tmpcast=$6;
 var $132=(($__loc)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=$__p_i_i_i_i8;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $135=HEAP32[((13912)>>2)];
 var $136=($135|0)==-1;
 if($136){label=30;break;}else{label=29;break;}
 case 29: 
 var $138=(($__p_i_i_i_i8)|0);
 HEAP32[(($138)>>2)]=13912;
 var $139=(($__p_i_i_i_i8+4)|0);
 HEAP32[(($139)>>2)]=(26);
 var $140=(($__p_i_i_i_i8+8)|0);
 HEAP32[(($140)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(13912,$134,260);
 label=30;break;
 case 30: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $141=HEAP32[((13916)>>2)];
 var $142=((($141)-(1))|0);
 var $143=(($133+12)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=(($133+8)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=$144;
 var $148=$146;
 var $149=((($147)-($148))|0);
 var $150=$149>>2;
 var $151=($150>>>0)>($142>>>0);
 if($151){label=31;break;}else{label=32;break;}
 case 31: 
 var $152=(($146+($142<<2))|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=($153|0)==0;
 if($154){label=32;break;}else{label=33;break;}
 case 32: 
 var $155=___cxa_allocate_exception(4);
 var $156=$155;
 __ZNSt8bad_castC2Ev($156);
 ___cxa_throw($155,8200,(356));
 throw "Reached an unreachable!";
 case 33: 
 var $157=$153;
 var $158=$153;
 var $159=HEAP32[(($158)>>2)];
 var $160=(($159+44)|0);
 var $161=HEAP32[(($160)>>2)];
 FUNCTION_TABLE[$161]($tmpcast,$157);
 var $162=$__pat;
 var $163=HEAP32[(($6)>>2)];
 tempBigInt=$163;HEAP8[($162)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($162)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($162)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($162)+(3))|0)]=tempBigInt&0xff;
 var $164=$153;
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+32)|0);
 var $167=HEAP32[(($166)>>2)];
 FUNCTION_TABLE[$167]($7,$157);
 var $168=$__nsn;
 var $169=HEAP8[($168)];
 var $170=$169&1;
 var $171=(($170<<24)>>24)==0;
 if($171){label=35;break;}else{label=34;break;}
 case 34: 
 var $173=(($__nsn+8)|0);
 var $174=HEAP32[(($173)>>2)];
 HEAP8[($174)]=0;
 var $175=(($__nsn+4)|0);
 HEAP32[(($175)>>2)]=0;
 label=36;break;
 case 35: 
 var $177=$__nsn;
 var $178=(($177+1)|0);
 HEAP8[($178)]=0;
 HEAP8[($168)]=0;
 label=36;break;
 case 36: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=37;break; }
 case 37: 
 var $180$0 = ___cxa_find_matching_catch(-1, -1,0); var $180$1 = tempRet0;
 var $181=$180$0;
 ___clang_call_terminate($181);
 throw "Reached an unreachable!";
 case 38: 
 var $182=$7;
 assert(12 % 1 === 0);HEAP32[(($168)>>2)]=HEAP32[(($182)>>2)];HEAP32[((($168)+(4))>>2)]=HEAP32[((($182)+(4))>>2)];HEAP32[((($168)+(8))>>2)]=HEAP32[((($182)+(8))>>2)];
 HEAP32[(($182)>>2)]=0; HEAP32[((($182)+(4))>>2)]=0; HEAP32[((($182)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
 var $183=HEAP32[(($164)>>2)];
 var $184=(($183+28)|0);
 var $185=HEAP32[(($184)>>2)];
 FUNCTION_TABLE[$185]($8,$157);
 var $186=$__psn;
 var $187=HEAP8[($186)];
 var $188=$187&1;
 var $189=(($188<<24)>>24)==0;
 if($189){label=40;break;}else{label=39;break;}
 case 39: 
 var $191=(($__psn+8)|0);
 var $192=HEAP32[(($191)>>2)];
 HEAP8[($192)]=0;
 var $193=(($__psn+4)|0);
 HEAP32[(($193)>>2)]=0;
 label=41;break;
 case 40: 
 var $195=$__psn;
 var $196=(($195+1)|0);
 HEAP8[($196)]=0;
 HEAP8[($186)]=0;
 label=41;break;
 case 41: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=42;break; }
 case 42: 
 var $198$0 = ___cxa_find_matching_catch(-1, -1,0); var $198$1 = tempRet0;
 var $199=$198$0;
 ___clang_call_terminate($199);
 throw "Reached an unreachable!";
 case 43: 
 var $200=$8;
 assert(12 % 1 === 0);HEAP32[(($186)>>2)]=HEAP32[(($200)>>2)];HEAP32[((($186)+(4))>>2)]=HEAP32[((($200)+(4))>>2)];HEAP32[((($186)+(8))>>2)]=HEAP32[((($200)+(8))>>2)];
 HEAP32[(($200)>>2)]=0; HEAP32[((($200)+(4))>>2)]=0; HEAP32[((($200)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
 var $201=$153;
 var $202=HEAP32[(($201)>>2)];
 var $203=(($202+12)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=FUNCTION_TABLE[$204]($157);
 HEAP8[($__dp)]=$205;
 var $206=HEAP32[(($201)>>2)];
 var $207=(($206+16)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=FUNCTION_TABLE[$208]($157);
 HEAP8[($__ts)]=$209;
 var $210=HEAP32[(($164)>>2)];
 var $211=(($210+20)|0);
 var $212=HEAP32[(($211)>>2)];
 FUNCTION_TABLE[$212]($9,$157);
 var $213=$__grp;
 var $214=HEAP8[($213)];
 var $215=$214&1;
 var $216=(($215<<24)>>24)==0;
 if($216){label=45;break;}else{label=44;break;}
 case 44: 
 var $218=(($__grp+8)|0);
 var $219=HEAP32[(($218)>>2)];
 HEAP8[($219)]=0;
 var $220=(($__grp+4)|0);
 HEAP32[(($220)>>2)]=0;
 label=46;break;
 case 45: 
 var $222=$__grp;
 var $223=(($222+1)|0);
 HEAP8[($223)]=0;
 HEAP8[($213)]=0;
 label=46;break;
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=47;break; }
 case 47: 
 var $225$0 = ___cxa_find_matching_catch(-1, -1,0); var $225$1 = tempRet0;
 var $226=$225$0;
 ___clang_call_terminate($226);
 throw "Reached an unreachable!";
 case 48: 
 var $227=$9;
 assert(12 % 1 === 0);HEAP32[(($213)>>2)]=HEAP32[(($227)>>2)];HEAP32[((($213)+(4))>>2)]=HEAP32[((($227)+(4))>>2)];HEAP32[((($213)+(8))>>2)]=HEAP32[((($227)+(8))>>2)];
 HEAP32[(($227)>>2)]=0; HEAP32[((($227)+(4))>>2)]=0; HEAP32[((($227)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
 var $228=HEAP32[(($164)>>2)];
 var $229=(($228+24)|0);
 var $230=HEAP32[(($229)>>2)];
 FUNCTION_TABLE[$230]($10,$157);
 var $231=$__sym;
 var $232=HEAP8[($231)];
 var $233=$232&1;
 var $234=(($233<<24)>>24)==0;
 if($234){label=50;break;}else{label=49;break;}
 case 49: 
 var $236=(($__sym+8)|0);
 var $237=HEAP32[(($236)>>2)];
 HEAP8[($237)]=0;
 var $238=(($__sym+4)|0);
 HEAP32[(($238)>>2)]=0;
 label=51;break;
 case 50: 
 var $240=$__sym;
 var $241=(($240+1)|0);
 HEAP8[($241)]=0;
 HEAP8[($231)]=0;
 label=51;break;
 case 51: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=52;break; }
 case 52: 
 var $243$0 = ___cxa_find_matching_catch(-1, -1,0); var $243$1 = tempRet0;
 var $244=$243$0;
 ___clang_call_terminate($244);
 throw "Reached an unreachable!";
 case 53: 
 var $245=$10;
 assert(12 % 1 === 0);HEAP32[(($231)>>2)]=HEAP32[(($245)>>2)];HEAP32[((($231)+(4))>>2)]=HEAP32[((($245)+(4))>>2)];HEAP32[((($231)+(8))>>2)]=HEAP32[((($245)+(8))>>2)];
 HEAP32[(($245)>>2)]=0; HEAP32[((($245)+(4))>>2)]=0; HEAP32[((($245)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
 var $246=$153;
 var $247=HEAP32[(($246)>>2)];
 var $248=(($247+36)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=FUNCTION_TABLE[$249]($157);
 var $storemerge=$250;label=54;break;
 case 54: 
 var $storemerge;
 HEAP32[(($__fd)>>2)]=$storemerge;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+600)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(416);
 var $__wn=(sp)+(424);
 var $__loc=(sp)+(432);
 var $__neg=(sp)+(440);
 var $1=(sp)+(448);
 var $__atoms=(sp)+(456);
 var $__nbuf=(sp)+(496);
 var $2=$__wbuf;
 var $$etemp$0$0=400;
 var $$etemp$0$1=0;

 var $3=(($__wbuf)|0);
 var $4=(($__wb)|0);
 HEAP32[(($4)>>2)]=$3;
 var $5=(($__wb+4)|0);
 HEAP32[(($5)>>2)]=420;
 var $6=(($__wbuf+400)|0);
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=14;break; }
 case 2: 
 var $8=(($__loc)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$__p_i_i_i_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $11=HEAP32[((13424)>>2)];
 var $12=($11|0)==-1;
 if($12){label=4;break;}else{label=3;break;}
 case 3: 
 var $14=(($__p_i_i_i_i)|0);
 HEAP32[(($14)>>2)]=13424;
 var $15=(($__p_i_i_i_i+4)|0);
 HEAP32[(($15)>>2)]=(26);
 var $16=(($__p_i_i_i_i+8)|0);
 HEAP32[(($16)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13424,$10,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=15;break; }
 case 4: 
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $17=HEAP32[((13428)>>2)];
 var $18=((($17)-(1))|0);
 var $19=(($9+12)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($9+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=$20;
 var $24=$22;
 var $25=((($23)-($24))|0);
 var $26=$25>>2;
 var $27=($26>>>0)>($18>>>0);
 if($27){label=5;break;}else{label=6;break;}
 case 5: 
 var $28=(($22+($18<<2))|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)==0;
 if($30){label=6;break;}else{label=8;break;}
 case 6: 
 var $31=___cxa_allocate_exception(4);
 var $32=$31;
 __ZNSt8bad_castC2Ev($32);
 (function() { try { __THREW__ = 0; return ___cxa_throw($31,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=15;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $34=$29;
 HEAP8[($__neg)]=0;
 var $35=(($__e)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=(($1)|0);
 HEAP32[(($37)>>2)]=$36;
 var $38=(($__iob+4)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$1,$__intl,$__loc,$39,$__err,$__neg,$34,$__wb,$__wn,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=15;break; }
 case 9: 
 if($40){label=10;break;}else{label=34;break;}
 case 10: 
 var $43=$__atoms;
 var $$etemp$3$0=40;
 var $$etemp$3$1=0;

 var $44=(($__atoms)|0);
 var $45=$29;
 var $46=HEAP32[(($45)>>2)];
 var $47=(($46+48)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$48]($34,2192,2202,$44) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=15;break; }
 case 11: 
 var $50=(($__nbuf)|0);
 var $$etemp$4$0=100;
 var $$etemp$4$1=0;

 var $51=HEAP32[(($__wn)>>2)];
 var $52=HEAP32[(($4)>>2)];
 var $53=$51;
 var $54=$52;
 var $55=((($53)-($54))|0);
 var $56=($55|0)>392;
 if($56){label=12;break;}else{var $__nc_0=$50;var $78=0;label=19;break;}
 case 12: 
 var $57=$55>>2;
 var $58=((($57)+(2))|0);
 var $59=_malloc($58);
 var $60=($59|0)==0;
 if($60){label=13;break;}else{var $__nc_0=$59;var $78=$59;label=19;break;}
 case 13: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__nc_0=0;var $78=0;label=19;break; } else { var $70=0;label=16;break; }
 case 14: 
 var $62$0 = ___cxa_find_matching_catch(-1, -1); var $62$1 = tempRet0;
 var $63=$62$0;
 var $64=$62$1;
 HEAP32[(($4)>>2)]=0;
 var $177=$3;var $_1213=$64;var $_115=$63;var $176=420;label=56;break;
 case 15: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 var $67=$66$0;
 var $68=$66$1;
 var $_0=$67;var $_01=$68;label=54;break;
 case 16: 
 var $70;
 var $71$0 = ___cxa_find_matching_catch(-1, -1); var $71$1 = tempRet0;
 var $eh_lpad_body$1=$71$1;var $eh_lpad_body$0=$71$0;var $72=$70;label=17;break;
 case 17: 
 var $72;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $73=$eh_lpad_body$0;
 var $74=$eh_lpad_body$1;
 var $75=($72|0)==0;
 if($75){var $_0=$73;var $_01=$74;label=54;break;}else{label=18;break;}
 case 18: 
 _free($72);
 var $_0=$73;var $_01=$74;label=54;break;
 case 19: 
 var $78;
 var $__nc_0;
 var $79=HEAP8[($__neg)];
 var $80=(($79<<24)>>24)==0;
 if($80){var $__nc_1=$__nc_0;label=21;break;}else{label=20;break;}
 case 20: 
 var $82=(($__nc_0+1)|0);
 HEAP8[($__nc_0)]=45;
 var $__nc_1=$82;label=21;break;
 case 21: 
 var $__nc_1;
 var $84=($52>>>0)<($51>>>0);
 if($84){label=22;break;}else{var $__nc_2_lcssa=$__nc_1;label=27;break;}
 case 22: 
 var $85=(($__atoms+40)|0);
 var $86=$__atoms;
 var $__nc_210=$__nc_1;var $__w_011=$52;label=23;break;
 case 23: 
 var $__w_011;
 var $__nc_210;
 var $88=HEAP32[(($__w_011)>>2)];
 var $_01_i=$44;label=25;break;
 case 24: 
 var $90=($94|0)==($85|0);
 if($90){var $_0_lcssa_i=$85;label=26;break;}else{var $_01_i=$94;label=25;break;}
 case 25: 
 var $_01_i;
 var $92=HEAP32[(($_01_i)>>2)];
 var $93=($92|0)==($88|0);
 var $94=(($_01_i+4)|0);
 if($93){var $_0_lcssa_i=$_01_i;label=26;break;}else{label=24;break;}
 case 26: 
 var $_0_lcssa_i;
 var $95=$_0_lcssa_i;
 var $96=((($95)-($86))|0);
 var $97=$96>>2;
 var $98=((2192+$97)|0);
 var $99=HEAP8[($98)];
 HEAP8[($__nc_210)]=$99;
 var $100=(($__w_011+4)|0);
 var $101=(($__nc_210+1)|0);
 var $102=HEAP32[(($__wn)>>2)];
 var $103=($100>>>0)<($102>>>0);
 if($103){var $__nc_210=$101;var $__w_011=$100;label=23;break;}else{var $__nc_2_lcssa=$101;label=27;break;}
 case 27: 
 var $__nc_2_lcssa;
 HEAP8[($__nc_2_lcssa)]=0;
 var $104=_sscanf($50,872,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $105=($104|0)==1;
 if($105){label=32;break;}else{label=28;break;}
 case 28: 
 var $107=___cxa_allocate_exception(8);
 var $108=$107;
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($108,592) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=31;break; }
 case 29: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($107,8216,(42)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { var $70=$78;label=16;break; }
 case 30: 
 throw "Reached an unreachable!";
 case 31: 
 var $111$0 = ___cxa_find_matching_catch(-1, -1); var $111$1 = tempRet0;
 ___cxa_free_exception($107);
 var $eh_lpad_body$1=$111$1;var $eh_lpad_body$0=$111$0;var $72=$78;label=17;break;
 case 32: 
 var $113=($78|0)==0;
 if($113){label=34;break;}else{label=33;break;}
 case 33: 
 _free($78);
 label=34;break;
 case 34: 
 var $115=(($__b)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=($116|0)==0;
 if($117){var $134=1;label=41;break;}else{label=35;break;}
 case 35: 
 var $119=(($116+12)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=(($116+16)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=($120|0)==($122|0);
 if($123){label=36;break;}else{label=37;break;}
 case 36: 
 var $125=$116;
 var $126=HEAP32[(($125)>>2)];
 var $127=(($126+36)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$128]($116) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$129;label=38;break; } else { label=15;break; }
 case 37: 
 var $131=HEAP32[(($120)>>2)];
 var $_0_i_i_i_i=$131;label=38;break;
 case 38: 
 var $_0_i_i_i_i;
 var $132=($_0_i_i_i_i|0)==-1;
 if($132){label=40;break;}else{label=39;break;}
 case 39: 
 var $_pre_i_i_i=HEAP32[(($115)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $134=$phitmp_i_i_i;label=41;break;
 case 40: 
 HEAP32[(($115)>>2)]=0;
 var $134=1;label=41;break;
 case 41: 
 var $134;
 var $135=HEAP32[(($35)>>2)];
 var $136=($135|0)==0;
 if($136){label=47;break;}else{label=42;break;}
 case 42: 
 var $138=(($135+12)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=(($135+16)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=($139|0)==($141|0);
 if($142){label=43;break;}else{label=44;break;}
 case 43: 
 var $144=$135;
 var $145=HEAP32[(($144)>>2)];
 var $146=(($145+36)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$147]($135) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$148;label=45;break; } else { label=15;break; }
 case 44: 
 var $150=HEAP32[(($139)>>2)];
 var $_0_i_i1_i_i=$150;label=45;break;
 case 45: 
 var $_0_i_i1_i_i;
 var $151=($_0_i_i1_i_i|0)==-1;
 if($151){label=46;break;}else{label=48;break;}
 case 46: 
 HEAP32[(($35)>>2)]=0;
 label=47;break;
 case 47: 
 if($134){label=49;break;}else{label=50;break;}
 case 48: 
 if($134){label=50;break;}else{label=49;break;}
 case 49: 
 var $154=HEAP32[(($__err)>>2)];
 var $155=$154|2;
 HEAP32[(($__err)>>2)]=$155;
 label=50;break;
 case 50: 
 var $157=HEAP32[(($115)>>2)];
 var $158=(($agg_result)|0);
 HEAP32[(($158)>>2)]=$157;
 var $159=HEAP32[(($8)>>2)];
 var $160=(($159)|0);
 var $161=__ZNSt3__114__shared_count16__release_sharedEv($160);
 var $162=HEAP32[(($4)>>2)];
 HEAP32[(($4)>>2)]=0;
 var $163=($162|0)==0;
 if($163){label=53;break;}else{label=51;break;}
 case 51: 
 var $165=HEAP32[(($5)>>2)];
 var $166=$162;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$165]($166) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=52;break; }
 case 52: 
 var $168$0 = ___cxa_find_matching_catch(-1, -1,0); var $168$1 = tempRet0;
 var $169=$168$0;
 ___clang_call_terminate($169);
 throw "Reached an unreachable!";
 case 53: 
 var $$etemp$5$0=400;
 var $$etemp$5$1=0;

 STACKTOP=sp;return;
 case 54: 
 var $_01;
 var $_0;
 var $171=HEAP32[(($8)>>2)];
 var $172=(($171)|0);
 var $173=__ZNSt3__114__shared_count16__release_sharedEv($172);
 var $_pre=HEAP32[(($4)>>2)];
 HEAP32[(($4)>>2)]=0;
 var $174=($_pre|0)==0;
 if($174){var $_1214=$_01;var $_116=$_0;label=58;break;}else{label=55;break;}
 case 55: 
 var $_pre18=HEAP32[(($5)>>2)];
 var $177=$_pre;var $_1213=$_01;var $_115=$_0;var $176=$_pre18;label=56;break;
 case 56: 
 var $176;
 var $_115;
 var $_1213;
 var $177;
 var $178=$177;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$176]($178) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_1214=$_1213;var $_116=$_115;label=58;break; } else { label=57;break; }
 case 57: 
 var $180$0 = ___cxa_find_matching_catch(-1, -1,0); var $180$1 = tempRet0;
 var $181=$180$0;
 ___clang_call_terminate($181);
 throw "Reached an unreachable!";
 case 58: 
 var $_116;
 var $_1214;
 var $182$0=$_116;
 var $182$1=0;
 var $183$0=$182$0;
 var $183$1=$_1214;
 ___resumeException($183$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+408)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__gbuf=sp;
 var $__pat=(sp)+(400);
 var $tmpcast=$__pat;
 var $__dp=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__ts=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__grp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__psn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__nsn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__spaces=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=$__gbuf;
 var $$etemp$0$0=400;
 var $$etemp$0$1=0;

 var $2=(($__gbuf)|0);
 HEAP32[(($__pat)>>2)]=0;
 var $this2_i_i_i=$__grp;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $this2_i_i_i13=$__sym;
 HEAP32[(($this2_i_i_i13)>>2)]=0; HEAP32[((($this2_i_i_i13)+(4))>>2)]=0; HEAP32[((($this2_i_i_i13)+(8))>>2)]=0;
 var $this2_i_i_i15=$__psn;
 HEAP32[(($this2_i_i_i15)>>2)]=0; HEAP32[((($this2_i_i_i15)+(4))>>2)]=0; HEAP32[((($this2_i_i_i15)+(8))>>2)]=0;
 var $this2_i_i_i18=$__nsn;
 HEAP32[(($this2_i_i_i18)>>2)]=0; HEAP32[((($this2_i_i_i18)+(4))>>2)]=0; HEAP32[((($this2_i_i_i18)+(8))>>2)]=0;
 var $this2_i_i_i19=$__spaces;
 HEAP32[(($this2_i_i_i19)>>2)]=0; HEAP32[((($this2_i_i_i19)+(4))>>2)]=0; HEAP32[((($this2_i_i_i19)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$tmpcast,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=26;break; }
 case 2: 
 var $4=(($__gbuf+400)|0);
 var $5=(($__wb)|0);
 var $6=HEAP32[(($5)>>2)];
 HEAP32[(($__wn)>>2)]=$6;
 var $7=(($__b)|0);
 var $8=(($__e)|0);
 var $9=$__pat;
 var $10=$__ct;
 var $11=(($__nsn+4)|0);
 var $12=(($__nsn+8)|0);
 var $13=(($__psn+4)|0);
 var $14=(($__psn+8)|0);
 var $15=$__flags&512;
 var $16=($15|0)!=0;
 var $17=(($__sym+4)|0);
 var $18=(($__sym+8)|0);
 var $19=(($__spaces+4)|0);
 var $20=(($__spaces+8)|0);
 var $21=(($9+3)|0);
 var $22=(($__wb+4)|0);
 var $23=(($__grp+4)|0);
 var $__we249395=$__we;var $free235398=420;var $27=$2;var $26=$2;var $25=$4;var $__p_0403=0;var $__trailing_sign_0405=0;label=3;break;
 case 3: 
 var $__trailing_sign_0405;
 var $__p_0403;
 var $25;
 var $26;
 var $27;
 var $free235398;
 var $__we249395;
 var $28=HEAP32[(($7)>>2)];
 var $29=($28|0)==0;
 if($29){var $46=1;label=10;break;}else{label=4;break;}
 case 4: 
 var $31=(($28+12)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($28+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=($32|0)==($34|0);
 if($35){label=5;break;}else{label=6;break;}
 case 5: 
 var $37=$28;
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+36)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$40]($28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i25=$41;label=7;break; } else { var $_ph_ph269_ph_ph_ph_ph_ph=$27;var $free239_ph_ph268_ph_ph_ph_ph_ph=$free235398;label=25;break; }
 case 6: 
 var $43=HEAP32[(($32)>>2)];
 var $_0_i_i_i_i25=$43;label=7;break;
 case 7: 
 var $_0_i_i_i_i25;
 var $44=($_0_i_i_i_i25|0)==-1;
 if($44){label=9;break;}else{label=8;break;}
 case 8: 
 var $_pre_i_i_i27=HEAP32[(($7)>>2)];
 var $phitmp_i_i_i28=($_pre_i_i_i27|0)==0;
 var $46=$phitmp_i_i_i28;label=10;break;
 case 9: 
 HEAP32[(($7)>>2)]=0;
 var $46=1;label=10;break;
 case 10: 
 var $46;
 var $47=HEAP32[(($8)>>2)];
 var $48=($47|0)==0;
 if($48){label=16;break;}else{label=11;break;}
 case 11: 
 var $50=(($47+12)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($47+16)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($51|0)==($53|0);
 if($54){label=12;break;}else{label=13;break;}
 case 12: 
 var $56=$47;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+36)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$59]($47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i31=$60;label=14;break; } else { var $_ph_ph269_ph_ph_ph_ph_ph=$27;var $free239_ph_ph268_ph_ph_ph_ph_ph=$free235398;label=25;break; }
 case 13: 
 var $62=HEAP32[(($51)>>2)];
 var $_0_i_i1_i_i31=$62;label=14;break;
 case 14: 
 var $_0_i_i1_i_i31;
 var $63=($_0_i_i1_i_i31|0)==-1;
 if($63){label=15;break;}else{label=17;break;}
 case 15: 
 HEAP32[(($8)>>2)]=0;
 label=16;break;
 case 16: 
 if($46){var $free235_lcssa=$free235398;var $_lcssa336=$27;var $_lcssa353=$26;var $__trailing_sign_0_lcssa=$__trailing_sign_0405;label=320;break;}else{var $67=0;label=18;break;}
 case 17: 
 if($46){var $67=$47;label=18;break;}else{var $free235_lcssa=$free235398;var $_lcssa336=$27;var $_lcssa353=$26;var $__trailing_sign_0_lcssa=$__trailing_sign_0405;label=320;break;}
 case 18: 
 var $67;
 var $68=(($9+$__p_0403)|0);
 var $69=HEAP8[($68)];
 var $70=(($69<<24)>>24);
 switch(($70|0)){case 2:{ label=135;break;}case 4:{ var $__ng_0=0;var $605=$25;var $604=$26;var $603=$27;var $free234=$free235398;var $__we248=$__we249395;label=193;break;}case 1:{ label=31;break;}case 0:{ label=42;break;}case 3:{ label=67;break;}default:{var $__trailing_sign_1=$__trailing_sign_0405;var $1006=$25;var $1005=$26;var $1004=$27;var $free236=$free235398;var $__we250=$__we249395;label=319;break;}}break;
 case 19: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;var $71=$_lcssa336;var $free239=$free235_lcssa;label=27;break;
 case 20: 
 var $free239_ph_ph;
 var $_ph_ph;
 var $lpad_loopexit270$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit270$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit270$1;var $lpad_phi$0=$lpad_loopexit270$0;var $71=$_ph_ph;var $free239=$free239_ph_ph;label=27;break;
 case 21: 
 var $lpad_loopexit295$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit295$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit295$1;var $lpad_phi$0=$lpad_loopexit295$0;var $71=$790;var $free239=$free237;label=27;break;
 case 22: 
 var $lpad_loopexit301$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit301$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit301$1;var $lpad_phi$0=$lpad_loopexit301$0;var $71=$27;var $free239=$free235398;label=27;break;
 case 23: 
 var $lpad_loopexit307$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit307$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit307$1;var $lpad_phi$0=$lpad_loopexit307$0;var $71=$27;var $free239=$free235398;label=27;break;
 case 24: 
 var $lpad_loopexit312$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit312$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit312$1;var $lpad_phi$0=$lpad_loopexit312$0;var $71=$27;var $free239=$free235398;label=27;break;
 case 25: 
 var $free239_ph_ph268_ph_ph_ph_ph_ph;
 var $_ph_ph269_ph_ph_ph_ph_ph;
 var $lpad_loopexit315$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit315$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit315$1;var $lpad_phi$0=$lpad_loopexit315$0;var $71=$_ph_ph269_ph_ph_ph_ph_ph;var $free239=$free239_ph_ph268_ph_ph_ph_ph_ph;label=27;break;
 case 26: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;var $71=$2;var $free239=420;label=27;break;
 case 27: 
 var $free239;
 var $71;
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $72=($71|0)==0;
 if($72){label=30;break;}else{label=28;break;}
 case 28: 
 var $74=$71;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$free239]($74) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=29;break; }
 case 29: 
 var $76$0 = ___cxa_find_matching_catch(-1, -1,0); var $76$1 = tempRet0;
 var $77=$76$0;
 ___clang_call_terminate($77);
 throw "Reached an unreachable!";
 case 30: 
 ___resumeException($lpad_phi$0)
 case 31: 
 var $cond=($__p_0403|0)==3;
 if($cond){var $free235_lcssa=$free235398;var $_lcssa336=$27;var $_lcssa353=$26;var $__trailing_sign_0_lcssa=$__trailing_sign_0405;label=320;break;}else{label=32;break;}
 case 32: 
 var $80=HEAP32[(($7)>>2)];
 var $81=(($80+12)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=(($80+16)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=($82|0)==($84|0);
 if($85){label=33;break;}else{label=34;break;}
 case 33: 
 var $87=$80;
 var $88=HEAP32[(($87)>>2)];
 var $89=(($88+36)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$90]($80) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i40=$91;label=35;break; } else { var $_ph_ph269_ph_ph_ph_ph_ph=$27;var $free239_ph_ph268_ph_ph_ph_ph_ph=$free235398;label=25;break; }
 case 34: 
 var $93=HEAP32[(($82)>>2)];
 var $_0_i_i40=$93;label=35;break;
 case 35: 
 var $_0_i_i40;
 var $94=HEAP32[(($10)>>2)];
 var $95=(($94+12)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$96]($__ct,8192,$_0_i_i40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { var $_ph_ph269_ph_ph_ph_ph_ph=$27;var $free239_ph_ph268_ph_ph_ph_ph_ph=$free235398;label=25;break; }
 case 36: 
 if($97){label=37;break;}else{label=41;break;}
 case 37: 
 var $99=HEAP32[(($7)>>2)];
 var $100=(($99+12)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=(($99+16)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($101|0)==($103|0);
 if($104){label=38;break;}else{label=39;break;}
 case 38: 
 var $106=$99;
 var $107=HEAP32[(($106)>>2)];
 var $108=(($107+40)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$109]($99) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i45=$110;label=40;break; } else { var $_ph_ph269_ph_ph_ph_ph_ph=$27;var $free239_ph_ph268_ph_ph_ph_ph_ph=$free235398;label=25;break; }
 case 39: 
 var $112=(($101+4)|0);
 HEAP32[(($100)>>2)]=$112;
 var $113=HEAP32[(($101)>>2)];
 var $_0_i_i45=$113;label=40;break;
 case 40: 
 var $_0_i_i45;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces,$_0_i_i45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { var $_ph_ph269_ph_ph_ph_ph_ph=$27;var $free239_ph_ph268_ph_ph_ph_ph_ph=$free235398;label=25;break; }
 case 41: 
 var $115=HEAP32[(($__err)>>2)];
 var $116=$115|4;
 HEAP32[(($__err)>>2)]=$116;
 var $_0=0;var $1166=$27;var $free241=$free235398;label=370;break;
 case 42: 
 var $118=($__p_0403|0)==3;
 if($118){var $free235_lcssa=$free235398;var $_lcssa336=$27;var $_lcssa353=$26;var $__trailing_sign_0_lcssa=$__trailing_sign_0405;label=320;break;}else{var $119=$67;var $_pre_i3_i_i55=$67;label=43;break;}
 case 43: 
 var $_pre_i3_i_i55;
 var $119;
 var $120=HEAP32[(($7)>>2)];
 var $121=($120|0)==0;
 if($121){var $138=1;label=50;break;}else{label=44;break;}
 case 44: 
 var $123=(($120+12)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=(($120+16)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=($124|0)==($126|0);
 if($127){label=45;break;}else{label=46;break;}
 case 45: 
 var $129=$120;
 var $130=HEAP32[(($129)>>2)];
 var $131=(($130+36)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$132]($120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i47=$133;label=47;break; } else { label=24;break; }
 case 46: 
 var $135=HEAP32[(($124)>>2)];
 var $_0_i_i_i_i47=$135;label=47;break;
 case 47: 
 var $_0_i_i_i_i47;
 var $136=($_0_i_i_i_i47|0)==-1;
 if($136){label=49;break;}else{label=48;break;}
 case 48: 
 var $_pre_i_i_i49=HEAP32[(($7)>>2)];
 var $phitmp_i_i_i50=($_pre_i_i_i49|0)==0;
 var $138=$phitmp_i_i_i50;label=50;break;
 case 49: 
 HEAP32[(($7)>>2)]=0;
 var $138=1;label=50;break;
 case 50: 
 var $138;
 var $139=($119|0)==0;
 if($139){var $_pre_i3_i_i55476=$_pre_i3_i_i55;label=56;break;}else{label=51;break;}
 case 51: 
 var $141=(($119+12)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(($119+16)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=($142|0)==($144|0);
 if($145){label=52;break;}else{label=53;break;}
 case 52: 
 var $147=$119;
 var $148=HEAP32[(($147)>>2)];
 var $149=(($148+36)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$150]($119) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i53=$151;label=54;break; } else { label=24;break; }
 case 53: 
 var $153=HEAP32[(($142)>>2)];
 var $_0_i_i1_i_i53=$153;label=54;break;
 case 54: 
 var $_0_i_i1_i_i53;
 var $154=($_0_i_i1_i_i53|0)==-1;
 if($154){label=55;break;}else{label=57;break;}
 case 55: 
 HEAP32[(($8)>>2)]=0;
 var $_pre_i3_i_i55476=0;label=56;break;
 case 56: 
 var $_pre_i3_i_i55476;
 if($138){var $__trailing_sign_1=$__trailing_sign_0405;var $1006=$25;var $1005=$26;var $1004=$27;var $free236=$free235398;var $__we250=$__we249395;label=319;break;}else{var $158=0;var $_pre_i3_i_i55478=$_pre_i3_i_i55476;label=58;break;}
 case 57: 
 var $phitmp_i4_i_i56=($_pre_i3_i_i55|0)==0;
 var $tmp_i_i58=$138^$phitmp_i4_i_i56;
 if($tmp_i_i58){var $158=$_pre_i3_i_i55;var $_pre_i3_i_i55478=$_pre_i3_i_i55;label=58;break;}else{var $__trailing_sign_1=$__trailing_sign_0405;var $1006=$25;var $1005=$26;var $1004=$27;var $free236=$free235398;var $__we250=$__we249395;label=319;break;}
 case 58: 
 var $_pre_i3_i_i55478;
 var $158;
 var $159=HEAP32[(($7)>>2)];
 var $160=(($159+12)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($159+16)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($161|0)==($163|0);
 if($164){label=59;break;}else{label=60;break;}
 case 59: 
 var $166=$159;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+36)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($159) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i62=$170;label=61;break; } else { label=24;break; }
 case 60: 
 var $172=HEAP32[(($161)>>2)];
 var $_0_i_i62=$172;label=61;break;
 case 61: 
 var $_0_i_i62;
 var $173=HEAP32[(($10)>>2)];
 var $174=(($173+12)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$175]($__ct,8192,$_0_i_i62) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=24;break; }
 case 62: 
 if($176){label=63;break;}else{var $__trailing_sign_1=$__trailing_sign_0405;var $1006=$25;var $1005=$26;var $1004=$27;var $free236=$free235398;var $__we250=$__we249395;label=319;break;}
 case 63: 
 var $178=HEAP32[(($7)>>2)];
 var $179=(($178+12)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=(($178+16)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=($180|0)==($182|0);
 if($183){label=64;break;}else{label=65;break;}
 case 64: 
 var $185=$178;
 var $186=HEAP32[(($185)>>2)];
 var $187=(($186+40)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$188]($178) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i68=$189;label=66;break; } else { label=24;break; }
 case 65: 
 var $191=(($180+4)|0);
 HEAP32[(($179)>>2)]=$191;
 var $192=HEAP32[(($180)>>2)];
 var $_0_i_i68=$192;label=66;break;
 case 66: 
 var $_0_i_i68;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces,$_0_i_i68) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $119=$158;var $_pre_i3_i_i55=$_pre_i3_i_i55478;label=43;break; } else { label=24;break; }
 case 67: 
 var $194=HEAP8[($this2_i_i_i15)];
 var $195=$194&1;
 var $196=(($195<<24)>>24)==0;
 if($196){label=69;break;}else{label=68;break;}
 case 68: 
 var $198=HEAP32[(($13)>>2)];
 var $202=$198;label=70;break;
 case 69: 
 var $200=($194&255);
 var $201=$200>>>1;
 var $202=$201;label=70;break;
 case 70: 
 var $202;
 var $203=HEAP8[($this2_i_i_i18)];
 var $204=$203&1;
 var $205=(($204<<24)>>24)==0;
 if($205){label=72;break;}else{label=71;break;}
 case 71: 
 var $207=HEAP32[(($11)>>2)];
 var $211=$207;label=73;break;
 case 72: 
 var $209=($203&255);
 var $210=$209>>>1;
 var $211=$210;label=73;break;
 case 73: 
 var $211;
 var $212=(((-$211))|0);
 var $213=($202|0)==($212|0);
 if($213){var $__trailing_sign_1=$__trailing_sign_0405;var $1006=$25;var $1005=$26;var $1004=$27;var $free236=$free235398;var $__we250=$__we249395;label=319;break;}else{label=74;break;}
 case 74: 
 if($196){label=76;break;}else{label=75;break;}
 case 75: 
 var $216=HEAP32[(($13)>>2)];
 var $220=$216;label=77;break;
 case 76: 
 var $218=($194&255);
 var $219=$218>>>1;
 var $220=$219;label=77;break;
 case 77: 
 var $220;
 var $221=($220|0)==0;
 if($221){label=82;break;}else{label=78;break;}
 case 78: 
 if($205){label=80;break;}else{label=79;break;}
 case 79: 
 var $224=HEAP32[(($11)>>2)];
 var $228=$224;label=81;break;
 case 80: 
 var $226=($203&255);
 var $227=$226>>>1;
 var $228=$227;label=81;break;
 case 81: 
 var $228;
 var $229=($228|0)==0;
 if($229){label=82;break;}else{label=111;break;}
 case 82: 
 if($196){label=84;break;}else{label=83;break;}
 case 83: 
 var $232=HEAP32[(($13)>>2)];
 var $236=$232;label=85;break;
 case 84: 
 var $234=($194&255);
 var $235=$234>>>1;
 var $236=$235;label=85;break;
 case 85: 
 var $236;
 var $237=($236|0)==0;
 var $238=HEAP32[(($7)>>2)];
 var $239=(($238+12)|0);
 var $240=HEAP32[(($239)>>2)];
 var $241=(($238+16)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=($240|0)==($242|0);
 if($237){label=99;break;}else{label=86;break;}
 case 86: 
 if($243){label=87;break;}else{label=89;break;}
 case 87: 
 var $246=$238;
 var $247=HEAP32[(($246)>>2)];
 var $248=(($247+36)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$249]($238) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=88;break; } else { var $_ph_ph269_ph_ph_ph_ph_ph=$27;var $free239_ph_ph268_ph_ph_ph_ph_ph=$free235398;label=25;break; }
 case 88: 
 var $_pre479=HEAP8[($this2_i_i_i15)];
 var $_0_i_i78=$250;var $253=$_pre479;label=90;break;
 case 89: 
 var $252=HEAP32[(($240)>>2)];
 var $_0_i_i78=$252;var $253=$194;label=90;break;
 case 90: 
 var $253;
 var $_0_i_i78;
 var $254=$253&1;
 var $255=(($254<<24)>>24)==0;
 var $256=HEAP32[(($14)>>2)];
 var $_=($255?$13:$256);
 var $257=HEAP32[(($_)>>2)];
 var $258=($_0_i_i78|0)==($257|0);
 if($258){label=91;break;}else{label=98;break;}
 case 91: 
 var $260=HEAP32[(($7)>>2)];
 var $261=(($260+12)|0);
 var $262=HEAP32[(($261)>>2)];
 var $263=(($260+16)|0);
 var $264=HEAP32[(($263)>>2)];
 var $265=($262|0)==($264|0);
 if($265){label=92;break;}else{label=93;break;}
 case 92: 
 var $267=$260;
 var $268=HEAP32[(($267)>>2)];
 var $269=(($268+40)|0);
 var $270=HEAP32[(($269)>>2)];
 var $271=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$270]($260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=94;break; } else { var $_ph_ph269_ph_ph_ph_ph_ph=$27;var $free239_ph_ph268_ph_ph_ph_ph_ph=$free235398;label=25;break; }
 case 93: 
 var $273=(($262+4)|0);
 HEAP32[(($261)>>2)]=$273;
 label=94;break;
 case 94: 
 var $274=HEAP8[($this2_i_i_i15)];
 var $275=$274&1;
 var $276=(($275<<24)>>24)==0;
 if($276){label=96;break;}else{label=95;break;}
 case 95: 
 var $278=HEAP32[(($13)>>2)];
 var $282=$278;label=97;break;
 case 96: 
 var $280=($274&255);
 var $281=$280>>>1;
 var $282=$281;label=97;break;
 case 97: 
 var $282;
 var $283=($282>>>0)>1;
 var $__psn___trailing_sign_0=($283?$__psn:$__trailing_sign_0405);
 var $__trailing_sign_1=$__psn___trailing_sign_0;var $1006=$25;var $1005=$26;var $1004=$27;var $free236=$free235398;var $__we250=$__we249395;label=319;break;
 case 98: 
 HEAP8[($__neg)]=1;
 var $__trailing_sign_1=$__trailing_sign_0405;var $1006=$25;var $1005=$26;var $1004=$27;var $free236=$free235398;var $__we250=$__we249395;label=319;break;
 case 99: 
 if($243){label=100;break;}else{label=102;break;}
 case 100: 
 var $287=$238;
 var $288=HEAP32[(($287)>>2)];
 var $289=(($288+36)|0);
 var $290=HEAP32[(($289)>>2)];
 var $291=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$290]($238) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=101;break; } else { var $_ph_ph269_ph_ph_ph_ph_ph=$27;var $free239_ph_ph268_ph_ph_ph_ph_ph=$free235398;label=25;break; }
 case 101: 
 var $_pre=HEAP8[($this2_i_i_i18)];
 var $_0_i_i89=$291;var $294=$_pre;label=103;break;
 case 102: 
 var $293=HEAP32[(($240)>>2)];
 var $_0_i_i89=$293;var $294=$203;label=103;break;
 case 103: 
 var $294;
 var $_0_i_i89;
 var $295=$294&1;
 var $296=(($295<<24)>>24)==0;
 var $297=HEAP32[(($12)>>2)];
 var $_496=($296?$11:$297);
 var $298=HEAP32[(($_496)>>2)];
 var $299=($_0_i_i89|0)==($298|0);
 if($299){label=104;break;}else{var $__trailing_sign_1=$__trailing_sign_0405;var $1006=$25;var $1005=$26;var $1004=$27;var $free236=$free235398;var $__we250=$__we249395;label=319;break;}
 case 104: 
 var $301=HEAP32[(($7)>>2)];
 var $302=(($301+12)|0);
 var $303=HEAP32[(($302)>>2)];
 var $304=(($301+16)|0);
 var $305=HEAP32[(($304)>>2)];
 var $306=($303|0)==($305|0);
 if($306){label=105;break;}else{label=106;break;}
 case 105: 
 var $308=$301;
 var $309=HEAP32[(($308)>>2)];
 var $310=(($309+40)|0);
 var $311=HEAP32[(($310)>>2)];
 var $312=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$311]($301) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=107;break; } else { var $_ph_ph269_ph_ph_ph_ph_ph=$27;var $free239_ph_ph268_ph_ph_ph_ph_ph=$free235398;label=25;break; }
 case 106: 
 var $314=(($303+4)|0);
 HEAP32[(($302)>>2)]=$314;
 label=107;break;
 case 107: 
 HEAP8[($__neg)]=1;
 var $315=HEAP8[($this2_i_i_i18)];
 var $316=$315&1;
 var $317=(($316<<24)>>24)==0;
 if($317){label=109;break;}else{label=108;break;}
 case 108: 
 var $319=HEAP32[(($11)>>2)];
 var $323=$319;label=110;break;
 case 109: 
 var $321=($315&255);
 var $322=$321>>>1;
 var $323=$322;label=110;break;
 case 110: 
 var $323;
 var $324=($323>>>0)>1;
 var $__nsn___trailing_sign_0=($324?$__nsn:$__trailing_sign_0405);
 var $__trailing_sign_1=$__nsn___trailing_sign_0;var $1006=$25;var $1005=$26;var $1004=$27;var $free236=$free235398;var $__we250=$__we249395;label=319;break;
 case 111: 
 var $326=HEAP32[(($7)>>2)];
 var $327=(($326+12)|0);
 var $328=HEAP32[(($327)>>2)];
 var $329=(($326+16)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=($328|0)==($330|0);
 if($331){label=112;break;}else{label=114;break;}
 case 112: 
 var $333=$326;
 var $334=HEAP32[(($333)>>2)];
 var $335=(($334+36)|0);
 var $336=HEAP32[(($335)>>2)];
 var $337=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$336]($326) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=113;break; } else { var $_ph_ph269_ph_ph_ph_ph_ph=$27;var $free239_ph_ph268_ph_ph_ph_ph_ph=$free235398;label=25;break; }
 case 113: 
 var $_pre480=HEAP8[($this2_i_i_i15)];
 var $_0_i_i111=$337;var $340=$_pre480;label=115;break;
 case 114: 
 var $339=HEAP32[(($328)>>2)];
 var $_0_i_i111=$339;var $340=$194;label=115;break;
 case 115: 
 var $340;
 var $_0_i_i111;
 var $341=$340&1;
 var $342=(($341<<24)>>24)==0;
 var $343=HEAP32[(($14)>>2)];
 var $_497=($342?$13:$343);
 var $344=HEAP32[(($_497)>>2)];
 var $345=($_0_i_i111|0)==($344|0);
 var $346=HEAP32[(($7)>>2)];
 var $347=(($346+12)|0);
 var $348=HEAP32[(($347)>>2)];
 var $349=(($346+16)|0);
 var $350=HEAP32[(($349)>>2)];
 var $351=($348|0)==($350|0);
 if($345){label=116;break;}else{label=123;break;}
 case 116: 
 if($351){label=117;break;}else{label=118;break;}
 case 117: 
 var $354=$346;
 var $355=HEAP32[(($354)>>2)];
 var $356=(($355+40)|0);
 var $357=HEAP32[(($356)>>2)];
 var $358=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$357]($346) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=119;break; } else { var $_ph_ph269_ph_ph_ph_ph_ph=$27;var $free239_ph_ph268_ph_ph_ph_ph_ph=$free235398;label=25;break; }
 case 118: 
 var $360=(($348+4)|0);
 HEAP32[(($347)>>2)]=$360;
 label=119;break;
 case 119: 
 var $361=HEAP8[($this2_i_i_i15)];
 var $362=$361&1;
 var $363=(($362<<24)>>24)==0;
 if($363){label=121;break;}else{label=120;break;}
 case 120: 
 var $365=HEAP32[(($13)>>2)];
 var $369=$365;label=122;break;
 case 121: 
 var $367=($361&255);
 var $368=$367>>>1;
 var $369=$368;label=122;break;
 case 122: 
 var $369;
 var $370=($369>>>0)>1;
 var $__psn___trailing_sign_09=($370?$__psn:$__trailing_sign_0405);
 var $__trailing_sign_1=$__psn___trailing_sign_09;var $1006=$25;var $1005=$26;var $1004=$27;var $free236=$free235398;var $__we250=$__we249395;label=319;break;
 case 123: 
 if($351){label=124;break;}else{label=125;break;}
 case 124: 
 var $373=$346;
 var $374=HEAP32[(($373)>>2)];
 var $375=(($374+36)|0);
 var $376=HEAP32[(($375)>>2)];
 var $377=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$376]($346) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i123=$377;label=126;break; } else { var $_ph_ph269_ph_ph_ph_ph_ph=$27;var $free239_ph_ph268_ph_ph_ph_ph_ph=$free235398;label=25;break; }
 case 125: 
 var $379=HEAP32[(($348)>>2)];
 var $_0_i_i123=$379;label=126;break;
 case 126: 
 var $_0_i_i123;
 var $380=HEAP8[($this2_i_i_i18)];
 var $381=$380&1;
 var $382=(($381<<24)>>24)==0;
 var $383=HEAP32[(($12)>>2)];
 var $_498=($382?$11:$383);
 var $384=HEAP32[(($_498)>>2)];
 var $385=($_0_i_i123|0)==($384|0);
 if($385){label=127;break;}else{label=134;break;}
 case 127: 
 var $387=HEAP32[(($7)>>2)];
 var $388=(($387+12)|0);
 var $389=HEAP32[(($388)>>2)];
 var $390=(($387+16)|0);
 var $391=HEAP32[(($390)>>2)];
 var $392=($389|0)==($391|0);
 if($392){label=128;break;}else{label=129;break;}
 case 128: 
 var $394=$387;
 var $395=HEAP32[(($394)>>2)];
 var $396=(($395+40)|0);
 var $397=HEAP32[(($396)>>2)];
 var $398=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$397]($387) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=130;break; } else { var $_ph_ph269_ph_ph_ph_ph_ph=$27;var $free239_ph_ph268_ph_ph_ph_ph_ph=$free235398;label=25;break; }
 case 129: 
 var $400=(($389+4)|0);
 HEAP32[(($388)>>2)]=$400;
 label=130;break;
 case 130: 
 HEAP8[($__neg)]=1;
 var $401=HEAP8[($this2_i_i_i18)];
 var $402=$401&1;
 var $403=(($402<<24)>>24)==0;
 if($403){label=132;break;}else{label=131;break;}
 case 131: 
 var $405=HEAP32[(($11)>>2)];
 var $409=$405;label=133;break;
 case 132: 
 var $407=($401&255);
 var $408=$407>>>1;
 var $409=$408;label=133;break;
 case 133: 
 var $409;
 var $410=($409>>>0)>1;
 var $__nsn___trailing_sign_010=($410?$__nsn:$__trailing_sign_0405);
 var $__trailing_sign_1=$__nsn___trailing_sign_010;var $1006=$25;var $1005=$26;var $1004=$27;var $free236=$free235398;var $__we250=$__we249395;label=319;break;
 case 134: 
 var $412=HEAP32[(($__err)>>2)];
 var $413=$412|4;
 HEAP32[(($__err)>>2)]=$413;
 var $_0=0;var $1166=$27;var $free241=$free235398;label=370;break;
 case 135: 
 var $415=($__trailing_sign_0405|0)!=0;
 var $416=($__p_0403>>>0)<2;
 var $or_cond=$415|$416;
 if($or_cond){label=139;break;}else{label=136;break;}
 case 136: 
 var $418=($__p_0403|0)==2;
 if($418){label=137;break;}else{var $423=0;label=138;break;}
 case 137: 
 var $420=HEAP8[($21)];
 var $421=(($420<<24)>>24)!=0;
 var $423=$421;label=138;break;
 case 138: 
 var $423;
 var $brmerge=$16|$423;
 if($brmerge){label=139;break;}else{var $__trailing_sign_1=0;var $1006=$25;var $1005=$26;var $1004=$27;var $free236=$free235398;var $__we250=$__we249395;label=319;break;}
 case 139: 
 var $424=HEAP8[($this2_i_i_i13)];
 var $425=$424&1;
 var $426=(($425<<24)>>24)==0;
 var $427=HEAP32[(($18)>>2)];
 var $_499=($426?$17:$427);
 var $428=($__p_0403|0)==0;
 if($428){var $501=$_499;var $500=$424;var $499=$67;var $_pre_i3_i_i210=$67;label=160;break;}else{label=140;break;}
 case 140: 
 var $430=((($__p_0403)-(1))|0);
 var $431=(($9+$430)|0);
 var $432=HEAP8[($431)];
 var $switch=($432&255)<2;
 if($switch){var $434=$_499;var $433=$424;label=141;break;}else{var $501=$_499;var $500=$424;var $499=$67;var $_pre_i3_i_i210=$67;label=160;break;}
 case 141: 
 var $433;
 var $434;
 var $435=$433&1;
 var $436=(($435<<24)>>24)==0;
 if($436){label=143;break;}else{label=142;break;}
 case 142: 
 var $438=HEAP32[(($18)>>2)];
 var $439=HEAP32[(($17)>>2)];
 var $444=$439;var $443=$438;label=144;break;
 case 143: 
 var $441=($433&255);
 var $442=$441>>>1;
 var $444=$442;var $443=$17;label=144;break;
 case 144: 
 var $443;
 var $444;
 var $445=(($443+($444<<2))|0);
 var $446=($434|0)==($445|0);
 if($446){var $454=$433;label=149;break;}else{label=145;break;}
 case 145: 
 var $448=HEAP32[(($434)>>2)];
 var $449=HEAP32[(($10)>>2)];
 var $450=(($449+12)|0);
 var $451=HEAP32[(($450)>>2)];
 var $452=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$451]($__ct,8192,$448) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=146;break; } else { label=22;break; }
 case 146: 
 if($452){label=148;break;}else{label=147;break;}
 case 147: 
 var $_pre482=HEAP8[($this2_i_i_i13)];
 var $454=$_pre482;label=149;break;
 case 148: 
 var $453=(($434+4)|0);
 var $_pre481=HEAP8[($this2_i_i_i13)];
 var $434=$453;var $433=$_pre481;label=141;break;
 case 149: 
 var $454;
 var $455=$454&1;
 var $456=(($455<<24)>>24)==0;
 var $457=HEAP32[(($18)>>2)];
 var $_500=($456?$17:$457);
 var $458=$434;
 var $459=$_500;
 var $460=((($458)-($459))|0);
 var $461=$460>>2;
 var $462=HEAP8[($this2_i_i_i19)];
 var $463=$462&1;
 var $464=(($463<<24)>>24)==0;
 if($464){label=151;break;}else{label=150;break;}
 case 150: 
 var $466=HEAP32[(($19)>>2)];
 var $470=$466;label=152;break;
 case 151: 
 var $468=($462&255);
 var $469=$468>>>1;
 var $470=$469;label=152;break;
 case 152: 
 var $470;
 var $471=($461>>>0)>($470>>>0);
 if($471){label=159;break;}else{label=153;break;}
 case 153: 
 if($464){label=155;break;}else{label=154;break;}
 case 154: 
 var $474=HEAP32[(($20)>>2)];
 var $475=HEAP32[(($19)>>2)];
 var $_sum=((($475)-($461))|0);
 var $476=(($474+($_sum<<2))|0);
 var $485=$475;var $484=$474;var $483=$476;label=156;break;
 case 155: 
 var $478=($462&255);
 var $479=$478>>>1;
 var $_sum490=((($479)-($461))|0);
 var $480=(($19+($_sum490<<2))|0);
 var $481=($462&255);
 var $482=$481>>>1;
 var $485=$482;var $484=$19;var $483=$480;label=156;break;
 case 156: 
 var $483;
 var $484;
 var $485;
 var $486=(($484+($485<<2))|0);
 var $487=HEAP32[(($18)>>2)];
 var $_501=($456?$17:$487);
 var $488=($483|0)==($486|0);
 if($488){var $501=$434;var $500=$454;var $499=$67;var $_pre_i3_i_i210=$67;label=160;break;}else{var $490=$483;var $489=$_501;label=157;break;}
 case 157: 
 var $489;
 var $490;
 var $491=HEAP32[(($490)>>2)];
 var $492=HEAP32[(($489)>>2)];
 var $493=($491|0)==($492|0);
 if($493){label=158;break;}else{label=159;break;}
 case 158: 
 var $495=(($490+4)|0);
 var $496=(($489+4)|0);
 var $497=($495|0)==($486|0);
 if($497){var $501=$434;var $500=$454;var $499=$67;var $_pre_i3_i_i210=$67;label=160;break;}else{var $490=$495;var $489=$496;label=157;break;}
 case 159: 
 var $498=HEAP32[(($18)>>2)];
 var $_502=($456?$17:$498);
 var $501=$_502;var $500=$454;var $499=$67;var $_pre_i3_i_i210=$67;label=160;break;
 case 160: 
 var $_pre_i3_i_i210;
 var $499;
 var $500;
 var $501;
 var $502=$500&1;
 var $503=(($502<<24)>>24)==0;
 if($503){label=162;break;}else{label=161;break;}
 case 161: 
 var $505=HEAP32[(($18)>>2)];
 var $506=HEAP32[(($17)>>2)];
 var $511=$506;var $510=$505;label=163;break;
 case 162: 
 var $508=($500&255);
 var $509=$508>>>1;
 var $511=$509;var $510=$17;label=163;break;
 case 163: 
 var $510;
 var $511;
 var $512=(($510+($511<<2))|0);
 var $513=($501|0)==($512|0);
 if($513){label=187;break;}else{label=164;break;}
 case 164: 
 var $515=HEAP32[(($7)>>2)];
 var $516=($515|0)==0;
 if($516){var $533=1;label=171;break;}else{label=165;break;}
 case 165: 
 var $518=(($515+12)|0);
 var $519=HEAP32[(($518)>>2)];
 var $520=(($515+16)|0);
 var $521=HEAP32[(($520)>>2)];
 var $522=($519|0)==($521|0);
 if($522){label=166;break;}else{label=167;break;}
 case 166: 
 var $524=$515;
 var $525=HEAP32[(($524)>>2)];
 var $526=(($525+36)|0);
 var $527=HEAP32[(($526)>>2)];
 var $528=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$527]($515) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i202=$528;label=168;break; } else { label=23;break; }
 case 167: 
 var $530=HEAP32[(($519)>>2)];
 var $_0_i_i_i_i202=$530;label=168;break;
 case 168: 
 var $_0_i_i_i_i202;
 var $531=($_0_i_i_i_i202|0)==-1;
 if($531){label=170;break;}else{label=169;break;}
 case 169: 
 var $_pre_i_i_i204=HEAP32[(($7)>>2)];
 var $phitmp_i_i_i205=($_pre_i_i_i204|0)==0;
 var $533=$phitmp_i_i_i205;label=171;break;
 case 170: 
 HEAP32[(($7)>>2)]=0;
 var $533=1;label=171;break;
 case 171: 
 var $533;
 var $534=($499|0)==0;
 if($534){var $_pre_i3_i_i210485=$_pre_i3_i_i210;label=177;break;}else{label=172;break;}
 case 172: 
 var $536=(($499+12)|0);
 var $537=HEAP32[(($536)>>2)];
 var $538=(($499+16)|0);
 var $539=HEAP32[(($538)>>2)];
 var $540=($537|0)==($539|0);
 if($540){label=173;break;}else{label=174;break;}
 case 173: 
 var $542=$499;
 var $543=HEAP32[(($542)>>2)];
 var $544=(($543+36)|0);
 var $545=HEAP32[(($544)>>2)];
 var $546=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$545]($499) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i208=$546;label=175;break; } else { label=23;break; }
 case 174: 
 var $548=HEAP32[(($537)>>2)];
 var $_0_i_i1_i_i208=$548;label=175;break;
 case 175: 
 var $_0_i_i1_i_i208;
 var $549=($_0_i_i1_i_i208|0)==-1;
 if($549){label=176;break;}else{label=178;break;}
 case 176: 
 HEAP32[(($8)>>2)]=0;
 var $_pre_i3_i_i210485=0;label=177;break;
 case 177: 
 var $_pre_i3_i_i210485;
 if($533){label=187;break;}else{var $553=0;var $_pre_i3_i_i210484=$_pre_i3_i_i210485;label=179;break;}
 case 178: 
 var $phitmp_i4_i_i211=($_pre_i3_i_i210|0)==0;
 var $tmp_i_i213=$533^$phitmp_i4_i_i211;
 if($tmp_i_i213){var $553=$_pre_i3_i_i210;var $_pre_i3_i_i210484=$_pre_i3_i_i210;label=179;break;}else{label=187;break;}
 case 179: 
 var $_pre_i3_i_i210484;
 var $553;
 var $554=HEAP32[(($7)>>2)];
 var $555=(($554+12)|0);
 var $556=HEAP32[(($555)>>2)];
 var $557=(($554+16)|0);
 var $558=HEAP32[(($557)>>2)];
 var $559=($556|0)==($558|0);
 if($559){label=180;break;}else{label=181;break;}
 case 180: 
 var $561=$554;
 var $562=HEAP32[(($561)>>2)];
 var $563=(($562+36)|0);
 var $564=HEAP32[(($563)>>2)];
 var $565=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$564]($554) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i217=$565;label=182;break; } else { label=23;break; }
 case 181: 
 var $567=HEAP32[(($556)>>2)];
 var $_0_i_i217=$567;label=182;break;
 case 182: 
 var $_0_i_i217;
 var $568=HEAP32[(($501)>>2)];
 var $569=($_0_i_i217|0)==($568|0);
 if($569){label=183;break;}else{label=187;break;}
 case 183: 
 var $571=HEAP32[(($7)>>2)];
 var $572=(($571+12)|0);
 var $573=HEAP32[(($572)>>2)];
 var $574=(($571+16)|0);
 var $575=HEAP32[(($574)>>2)];
 var $576=($573|0)==($575|0);
 if($576){label=184;break;}else{label=185;break;}
 case 184: 
 var $578=$571;
 var $579=HEAP32[(($578)>>2)];
 var $580=(($579+40)|0);
 var $581=HEAP32[(($580)>>2)];
 var $582=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$581]($571) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=186;break; } else { label=23;break; }
 case 185: 
 var $584=(($573+4)|0);
 HEAP32[(($572)>>2)]=$584;
 label=186;break;
 case 186: 
 var $585=(($501+4)|0);
 var $_pre483=HEAP8[($this2_i_i_i13)];
 var $501=$585;var $500=$_pre483;var $499=$553;var $_pre_i3_i_i210=$_pre_i3_i_i210484;label=160;break;
 case 187: 
 if($16){label=188;break;}else{var $__trailing_sign_1=$__trailing_sign_0405;var $1006=$25;var $1005=$26;var $1004=$27;var $free236=$free235398;var $__we250=$__we249395;label=319;break;}
 case 188: 
 var $587=HEAP8[($this2_i_i_i13)];
 var $588=$587&1;
 var $589=(($588<<24)>>24)==0;
 if($589){label=190;break;}else{label=189;break;}
 case 189: 
 var $591=HEAP32[(($18)>>2)];
 var $592=HEAP32[(($17)>>2)];
 var $597=$592;var $596=$591;label=191;break;
 case 190: 
 var $594=($587&255);
 var $595=$594>>>1;
 var $597=$595;var $596=$17;label=191;break;
 case 191: 
 var $596;
 var $597;
 var $598=(($596+($597<<2))|0);
 var $599=($501|0)==($598|0);
 if($599){var $__trailing_sign_1=$__trailing_sign_0405;var $1006=$25;var $1005=$26;var $1004=$27;var $free236=$free235398;var $__we250=$__we249395;label=319;break;}else{label=192;break;}
 case 192: 
 var $601=HEAP32[(($__err)>>2)];
 var $602=$601|4;
 HEAP32[(($__err)>>2)]=$602;
 var $_0=0;var $1166=$27;var $free241=$free235398;label=370;break;
 case 193: 
 var $__we248;
 var $free234;
 var $603;
 var $604;
 var $605;
 var $__ng_0;
 var $606=HEAP32[(($7)>>2)];
 var $607=($606|0)==0;
 if($607){var $624=1;label=200;break;}else{label=194;break;}
 case 194: 
 var $609=(($606+12)|0);
 var $610=HEAP32[(($609)>>2)];
 var $611=(($606+16)|0);
 var $612=HEAP32[(($611)>>2)];
 var $613=($610|0)==($612|0);
 if($613){label=195;break;}else{label=196;break;}
 case 195: 
 var $615=$606;
 var $616=HEAP32[(($615)>>2)];
 var $617=(($616+36)|0);
 var $618=HEAP32[(($617)>>2)];
 var $619=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$618]($606) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i183=$619;label=197;break; } else { var $_ph_ph=$603;var $free239_ph_ph=$free234;label=20;break; }
 case 196: 
 var $621=HEAP32[(($610)>>2)];
 var $_0_i_i_i_i183=$621;label=197;break;
 case 197: 
 var $_0_i_i_i_i183;
 var $622=($_0_i_i_i_i183|0)==-1;
 if($622){label=199;break;}else{label=198;break;}
 case 198: 
 var $_pre_i_i_i185=HEAP32[(($7)>>2)];
 var $phitmp_i_i_i186=($_pre_i_i_i185|0)==0;
 var $624=$phitmp_i_i_i186;label=200;break;
 case 199: 
 HEAP32[(($7)>>2)]=0;
 var $624=1;label=200;break;
 case 200: 
 var $624;
 var $625=HEAP32[(($8)>>2)];
 var $626=($625|0)==0;
 if($626){label=206;break;}else{label=201;break;}
 case 201: 
 var $628=(($625+12)|0);
 var $629=HEAP32[(($628)>>2)];
 var $630=(($625+16)|0);
 var $631=HEAP32[(($630)>>2)];
 var $632=($629|0)==($631|0);
 if($632){label=202;break;}else{label=203;break;}
 case 202: 
 var $634=$625;
 var $635=HEAP32[(($634)>>2)];
 var $636=(($635+36)|0);
 var $637=HEAP32[(($636)>>2)];
 var $638=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$637]($625) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i189=$638;label=204;break; } else { var $_ph_ph=$603;var $free239_ph_ph=$free234;label=20;break; }
 case 203: 
 var $640=HEAP32[(($629)>>2)];
 var $_0_i_i1_i_i189=$640;label=204;break;
 case 204: 
 var $_0_i_i1_i_i189;
 var $641=($_0_i_i1_i_i189|0)==-1;
 if($641){label=205;break;}else{label=207;break;}
 case 205: 
 HEAP32[(($8)>>2)]=0;
 label=206;break;
 case 206: 
 if($624){label=242;break;}else{label=208;break;}
 case 207: 
 if($624){label=208;break;}else{label=242;break;}
 case 208: 
 var $645=HEAP32[(($7)>>2)];
 var $646=(($645+12)|0);
 var $647=HEAP32[(($646)>>2)];
 var $648=(($645+16)|0);
 var $649=HEAP32[(($648)>>2)];
 var $650=($647|0)==($649|0);
 if($650){label=209;break;}else{label=210;break;}
 case 209: 
 var $652=$645;
 var $653=HEAP32[(($652)>>2)];
 var $654=(($653+36)|0);
 var $655=HEAP32[(($654)>>2)];
 var $656=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$655]($645) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i180=$656;label=211;break; } else { var $_ph_ph=$603;var $free239_ph_ph=$free234;label=20;break; }
 case 210: 
 var $658=HEAP32[(($647)>>2)];
 var $_0_i_i180=$658;label=211;break;
 case 211: 
 var $_0_i_i180;
 var $659=HEAP32[(($10)>>2)];
 var $660=(($659+12)|0);
 var $661=HEAP32[(($660)>>2)];
 var $662=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$661]($__ct,2048,$_0_i_i180) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=212;break; } else { var $_ph_ph=$603;var $free239_ph_ph=$free234;label=20;break; }
 case 212: 
 if($662){label=213;break;}else{label=226;break;}
 case 213: 
 var $664=HEAP32[(($__wn)>>2)];
 var $665=($664|0)==($__we248|0);
 if($665){label=214;break;}else{var $__we247=$__we248;var $697=$664;label=225;break;}
 case 214: 
 var $667=HEAP32[(($22)>>2)];
 var $668=($667|0)!=((420)|0);
 var $669=HEAP32[(($5)>>2)];
 var $670=$__we248;
 var $671=$669;
 var $672=((($670)-($671))|0);
 var $673=($672>>>0)<2147483647;
 var $674=$672<<1;
 var $__i166=($673?$674:-1);
 var $675=$672>>2;
 if($668){label=215;break;}else{var $678=0;label=216;break;}
 case 215: 
 var $phitmp_i167=$669;
 var $678=$phitmp_i167;label=216;break;
 case 216: 
 var $678;
 var $679=_realloc($678,$__i166);
 var $680=$679;
 var $681=($679|0)==0;
 if($681){label=217;break;}else{label=218;break;}
 case 217: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=218;break; } else { var $_ph_ph=$603;var $free239_ph_ph=$free234;label=20;break; }
 case 218: 
 if($668){label=219;break;}else{label=220;break;}
 case 219: 
 HEAP32[(($5)>>2)]=$680;
 var $691=$680;label=224;break;
 case 220: 
 var $_pr_i169=HEAP32[(($5)>>2)];
 HEAP32[(($5)>>2)]=$680;
 var $684=($_pr_i169|0)==0;
 if($684){var $691=$680;label=224;break;}else{label=221;break;}
 case 221: 
 var $686=HEAP32[(($22)>>2)];
 var $687=$_pr_i169;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$686]($687) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=222;break; } else { label=223;break; }
 case 222: 
 var $_pre_i170=HEAP32[(($5)>>2)];
 var $691=$_pre_i170;label=224;break;
 case 223: 
 var $689$0 = ___cxa_find_matching_catch(-1, -1,0); var $689$1 = tempRet0;
 var $690=$689$0;
 ___clang_call_terminate($690);
 throw "Reached an unreachable!";
 case 224: 
 var $691;
 HEAP32[(($22)>>2)]=222;
 var $692=$__i166>>>2;
 var $693=(($691+($675<<2))|0);
 HEAP32[(($__wn)>>2)]=$693;
 var $694=HEAP32[(($5)>>2)];
 var $695=(($694+($692<<2))|0);
 var $__we247=$695;var $697=$693;label=225;break;
 case 225: 
 var $697;
 var $__we247;
 var $698=(($697+4)|0);
 HEAP32[(($__wn)>>2)]=$698;
 HEAP32[(($697)>>2)]=$_0_i_i180;
 var $699=((($__ng_0)+(1))|0);
 var $__ng_1=$699;var $744=$605;var $743=$604;var $742=$603;var $free=$free234;var $__we246=$__we247;label=239;break;
 case 226: 
 var $701=HEAP8[($this2_i_i_i)];
 var $702=$701&1;
 var $703=(($702<<24)>>24)==0;
 if($703){label=228;break;}else{label=227;break;}
 case 227: 
 var $705=HEAP32[(($23)>>2)];
 var $709=$705;label=229;break;
 case 228: 
 var $707=($701&255);
 var $708=$707>>>1;
 var $709=$708;label=229;break;
 case 229: 
 var $709;
 var $710=($709|0)!=0;
 var $711=($__ng_0|0)!=0;
 var $or_cond6=$710&$711;
 var $712=HEAP32[(($__ts)>>2)];
 var $713=($_0_i_i180|0)==($712|0);
 var $or_cond12=$or_cond6&$713;
 if($or_cond12){label=230;break;}else{label=242;break;}
 case 230: 
 var $715=($604|0)==($605|0);
 if($715){label=231;break;}else{var $739=$605;var $738=$604;var $737=$603;var $free233=$free234;label=238;break;}
 case 231: 
 var $717=($free234|0)!=((420)|0);
 var $718=$604;
 var $719=$603;
 var $720=((($718)-($719))|0);
 var $721=($720>>>0)<2147483647;
 var $722=$720<<1;
 var $__i155=($721?$722:-1);
 var $723=$720>>2;
 if($717){label=232;break;}else{var $726=0;label=233;break;}
 case 232: 
 var $phitmp_i156=$603;
 var $726=$phitmp_i156;label=233;break;
 case 233: 
 var $726;
 var $727=_realloc($726,$__i155);
 var $728=$727;
 var $729=($727|0)==0;
 if($729){label=234;break;}else{label=235;break;}
 case 234: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=235;break; } else { var $_ph_ph=$603;var $free239_ph_ph=$free234;label=20;break; }
 case 235: 
 var $731=($603|0)==0;
 var $or_cond264=$717|$731;
 if($or_cond264){label=237;break;}else{label=236;break;}
 case 236: 
 label=237;break;
 case 237: 
 var $733=$__i155>>>2;
 var $734=(($728+($723<<2))|0);
 var $735=(($728+($733<<2))|0);
 var $739=$735;var $738=$734;var $737=$728;var $free233=222;label=238;break;
 case 238: 
 var $free233;
 var $737;
 var $738;
 var $739;
 var $740=(($738+4)|0);
 HEAP32[(($738)>>2)]=$__ng_0;
 var $__ng_1=0;var $744=$739;var $743=$740;var $742=$737;var $free=$free233;var $__we246=$__we248;label=239;break;
 case 239: 
 var $__we246;
 var $free;
 var $742;
 var $743;
 var $744;
 var $__ng_1;
 var $745=HEAP32[(($7)>>2)];
 var $746=(($745+12)|0);
 var $747=HEAP32[(($746)>>2)];
 var $748=(($745+16)|0);
 var $749=HEAP32[(($748)>>2)];
 var $750=($747|0)==($749|0);
 if($750){label=240;break;}else{label=241;break;}
 case 240: 
 var $752=$745;
 var $753=HEAP32[(($752)>>2)];
 var $754=(($753+40)|0);
 var $755=HEAP32[(($754)>>2)];
 var $756=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$755]($745) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__ng_0=$__ng_1;var $605=$744;var $604=$743;var $603=$742;var $free234=$free;var $__we248=$__we246;label=193;break; } else { var $_ph_ph=$742;var $free239_ph_ph=$free;label=20;break; }
 case 241: 
 var $758=(($747+4)|0);
 HEAP32[(($746)>>2)]=$758;
 var $__ng_0=$__ng_1;var $605=$744;var $604=$743;var $603=$742;var $free234=$free;var $__we248=$__we246;label=193;break;
 case 242: 
 var $760=($603|0)!=($604|0);
 var $761=($__ng_0|0)!=0;
 var $or_cond8=$760&$761;
 if($or_cond8){label=243;break;}else{var $792=$605;var $791=$604;var $790=$603;var $free237=$free234;label=252;break;}
 case 243: 
 var $763=($604|0)==($605|0);
 if($763){label=244;break;}else{var $787=$605;var $786=$604;var $785=$603;var $free238=$free234;label=251;break;}
 case 244: 
 var $765=($free234|0)!=((420)|0);
 var $766=$604;
 var $767=$603;
 var $768=((($766)-($767))|0);
 var $769=($768>>>0)<2147483647;
 var $770=$768<<1;
 var $__i145=($769?$770:-1);
 var $771=$768>>2;
 if($765){label=245;break;}else{var $774=0;label=246;break;}
 case 245: 
 var $phitmp_i146=$603;
 var $774=$phitmp_i146;label=246;break;
 case 246: 
 var $774;
 var $775=_realloc($774,$__i145);
 var $776=$775;
 var $777=($775|0)==0;
 if($777){label=247;break;}else{label=248;break;}
 case 247: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=248;break; } else { var $_ph_ph269_ph_ph_ph_ph_ph=$603;var $free239_ph_ph268_ph_ph_ph_ph_ph=$free234;label=25;break; }
 case 248: 
 var $779=($603|0)==0;
 var $or_cond265=$765|$779;
 if($or_cond265){label=250;break;}else{label=249;break;}
 case 249: 
 label=250;break;
 case 250: 
 var $781=$__i145>>>2;
 var $782=(($776+($771<<2))|0);
 var $783=(($776+($781<<2))|0);
 var $787=$783;var $786=$782;var $785=$776;var $free238=222;label=251;break;
 case 251: 
 var $free238;
 var $785;
 var $786;
 var $787;
 var $788=(($786+4)|0);
 HEAP32[(($786)>>2)]=$__ng_0;
 var $792=$787;var $791=$788;var $790=$785;var $free237=$free238;label=252;break;
 case 252: 
 var $free237;
 var $790;
 var $791;
 var $792;
 var $793=HEAP32[(($__fd)>>2)];
 var $794=($793|0)>0;
 if($794){label=253;break;}else{var $__we251=$__we248;label=317;break;}
 case 253: 
 var $796=HEAP32[(($7)>>2)];
 var $797=($796|0)==0;
 if($797){var $814=1;label=260;break;}else{label=254;break;}
 case 254: 
 var $799=(($796+12)|0);
 var $800=HEAP32[(($799)>>2)];
 var $801=(($796+16)|0);
 var $802=HEAP32[(($801)>>2)];
 var $803=($800|0)==($802|0);
 if($803){label=255;break;}else{label=256;break;}
 case 255: 
 var $805=$796;
 var $806=HEAP32[(($805)>>2)];
 var $807=(($806+36)|0);
 var $808=HEAP32[(($807)>>2)];
 var $809=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$808]($796) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i127=$809;label=257;break; } else { var $_ph_ph269_ph_ph_ph_ph_ph=$790;var $free239_ph_ph268_ph_ph_ph_ph_ph=$free237;label=25;break; }
 case 256: 
 var $811=HEAP32[(($800)>>2)];
 var $_0_i_i_i_i127=$811;label=257;break;
 case 257: 
 var $_0_i_i_i_i127;
 var $812=($_0_i_i_i_i127|0)==-1;
 if($812){label=259;break;}else{label=258;break;}
 case 258: 
 var $_pre_i_i_i129=HEAP32[(($7)>>2)];
 var $phitmp_i_i_i130=($_pre_i_i_i129|0)==0;
 var $814=$phitmp_i_i_i130;label=260;break;
 case 259: 
 HEAP32[(($7)>>2)]=0;
 var $814=1;label=260;break;
 case 260: 
 var $814;
 var $815=HEAP32[(($8)>>2)];
 var $816=($815|0)==0;
 if($816){label=266;break;}else{label=261;break;}
 case 261: 
 var $818=(($815+12)|0);
 var $819=HEAP32[(($818)>>2)];
 var $820=(($815+16)|0);
 var $821=HEAP32[(($820)>>2)];
 var $822=($819|0)==($821|0);
 if($822){label=262;break;}else{label=263;break;}
 case 262: 
 var $824=$815;
 var $825=HEAP32[(($824)>>2)];
 var $826=(($825+36)|0);
 var $827=HEAP32[(($826)>>2)];
 var $828=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$827]($815) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i133=$828;label=264;break; } else { var $_ph_ph269_ph_ph_ph_ph_ph=$790;var $free239_ph_ph268_ph_ph_ph_ph_ph=$free237;label=25;break; }
 case 263: 
 var $830=HEAP32[(($819)>>2)];
 var $_0_i_i1_i_i133=$830;label=264;break;
 case 264: 
 var $_0_i_i1_i_i133;
 var $831=($_0_i_i1_i_i133|0)==-1;
 if($831){label=265;break;}else{label=267;break;}
 case 265: 
 HEAP32[(($8)>>2)]=0;
 label=266;break;
 case 266: 
 if($814){label=272;break;}else{var $834=0;label=268;break;}
 case 267: 
 if($814){var $834=$815;label=268;break;}else{label=272;break;}
 case 268: 
 var $834;
 var $835=HEAP32[(($7)>>2)];
 var $836=(($835+12)|0);
 var $837=HEAP32[(($836)>>2)];
 var $838=(($835+16)|0);
 var $839=HEAP32[(($838)>>2)];
 var $840=($837|0)==($839|0);
 if($840){label=269;break;}else{label=270;break;}
 case 269: 
 var $842=$835;
 var $843=HEAP32[(($842)>>2)];
 var $844=(($843+36)|0);
 var $845=HEAP32[(($844)>>2)];
 var $846=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$845]($835) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i120=$846;label=271;break; } else { var $_ph_ph269_ph_ph_ph_ph_ph=$790;var $free239_ph_ph268_ph_ph_ph_ph_ph=$free237;label=25;break; }
 case 270: 
 var $848=HEAP32[(($837)>>2)];
 var $_0_i_i120=$848;label=271;break;
 case 271: 
 var $_0_i_i120;
 var $849=HEAP32[(($__dp)>>2)];
 var $850=($_0_i_i120|0)==($849|0);
 if($850){label=273;break;}else{label=272;break;}
 case 272: 
 var $852=HEAP32[(($__err)>>2)];
 var $853=$852|4;
 HEAP32[(($__err)>>2)]=$853;
 var $_0=0;var $1166=$790;var $free241=$free237;label=370;break;
 case 273: 
 var $855=HEAP32[(($7)>>2)];
 var $856=(($855+12)|0);
 var $857=HEAP32[(($856)>>2)];
 var $858=(($855+16)|0);
 var $859=HEAP32[(($858)>>2)];
 var $860=($857|0)==($859|0);
 if($860){label=274;break;}else{label=275;break;}
 case 274: 
 var $862=$855;
 var $863=HEAP32[(($862)>>2)];
 var $864=(($863+40)|0);
 var $865=HEAP32[(($864)>>2)];
 var $866=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$865]($855) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__we252300=$__we248;var $870=$834;var $869=$793;var $_pre_i3_i_i101=$834;label=276;break; } else { var $_ph_ph269_ph_ph_ph_ph_ph=$790;var $free239_ph_ph268_ph_ph_ph_ph_ph=$free237;label=25;break; }
 case 275: 
 var $868=(($857+4)|0);
 HEAP32[(($856)>>2)]=$868;
 var $__we252300=$__we248;var $870=$834;var $869=$793;var $_pre_i3_i_i101=$834;label=276;break;
 case 276: 
 var $_pre_i3_i_i101;
 var $869;
 var $870;
 var $__we252300;
 var $871=HEAP32[(($7)>>2)];
 var $872=($871|0)==0;
 if($872){var $889=1;label=283;break;}else{label=277;break;}
 case 277: 
 var $874=(($871+12)|0);
 var $875=HEAP32[(($874)>>2)];
 var $876=(($871+16)|0);
 var $877=HEAP32[(($876)>>2)];
 var $878=($875|0)==($877|0);
 if($878){label=278;break;}else{label=279;break;}
 case 278: 
 var $880=$871;
 var $881=HEAP32[(($880)>>2)];
 var $882=(($881+36)|0);
 var $883=HEAP32[(($882)>>2)];
 var $884=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$883]($871) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i93=$884;label=280;break; } else { label=21;break; }
 case 279: 
 var $886=HEAP32[(($875)>>2)];
 var $_0_i_i_i_i93=$886;label=280;break;
 case 280: 
 var $_0_i_i_i_i93;
 var $887=($_0_i_i_i_i93|0)==-1;
 if($887){label=282;break;}else{label=281;break;}
 case 281: 
 var $_pre_i_i_i95=HEAP32[(($7)>>2)];
 var $phitmp_i_i_i96=($_pre_i_i_i95|0)==0;
 var $889=$phitmp_i_i_i96;label=283;break;
 case 282: 
 HEAP32[(($7)>>2)]=0;
 var $889=1;label=283;break;
 case 283: 
 var $889;
 var $890=($870|0)==0;
 if($890){var $_pre_i3_i_i101489_ph=$_pre_i3_i_i101;label=289;break;}else{label=284;break;}
 case 284: 
 var $892=(($870+12)|0);
 var $893=HEAP32[(($892)>>2)];
 var $894=(($870+16)|0);
 var $895=HEAP32[(($894)>>2)];
 var $896=($893|0)==($895|0);
 if($896){label=285;break;}else{label=286;break;}
 case 285: 
 var $898=$870;
 var $899=HEAP32[(($898)>>2)];
 var $900=(($899+36)|0);
 var $901=HEAP32[(($900)>>2)];
 var $902=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$901]($870) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i99=$902;label=287;break; } else { label=21;break; }
 case 286: 
 var $904=HEAP32[(($893)>>2)];
 var $_0_i_i1_i_i99=$904;label=287;break;
 case 287: 
 var $_0_i_i1_i_i99;
 var $905=($_0_i_i1_i_i99|0)==-1;
 if($905){label=288;break;}else{label=290;break;}
 case 288: 
 HEAP32[(($8)>>2)]=0;
 var $_pre_i3_i_i101489_ph=0;label=289;break;
 case 289: 
 var $_pre_i3_i_i101489_ph;
 if($889){label=296;break;}else{var $_pre_i3_i_i101489494=$_pre_i3_i_i101489_ph;var $909=0;label=291;break;}
 case 290: 
 var $phitmp_i4_i_i102=($_pre_i3_i_i101|0)==0;
 var $tmp_i_i104=$889^$phitmp_i4_i_i102;
 if($tmp_i_i104){var $_pre_i3_i_i101489494=$_pre_i3_i_i101;var $909=$_pre_i3_i_i101;label=291;break;}else{label=296;break;}
 case 291: 
 var $909;
 var $_pre_i3_i_i101489494;
 var $910=HEAP32[(($7)>>2)];
 var $911=(($910+12)|0);
 var $912=HEAP32[(($911)>>2)];
 var $913=(($910+16)|0);
 var $914=HEAP32[(($913)>>2)];
 var $915=($912|0)==($914|0);
 if($915){label=292;break;}else{label=293;break;}
 case 292: 
 var $917=$910;
 var $918=HEAP32[(($917)>>2)];
 var $919=(($918+36)|0);
 var $920=HEAP32[(($919)>>2)];
 var $921=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$920]($910) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i86=$921;label=294;break; } else { label=21;break; }
 case 293: 
 var $923=HEAP32[(($912)>>2)];
 var $_0_i_i86=$923;label=294;break;
 case 294: 
 var $_0_i_i86;
 var $924=HEAP32[(($10)>>2)];
 var $925=(($924+12)|0);
 var $926=HEAP32[(($925)>>2)];
 var $927=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$926]($__ct,2048,$_0_i_i86) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=295;break; } else { label=21;break; }
 case 295: 
 if($927){label=297;break;}else{label=296;break;}
 case 296: 
 var $929=HEAP32[(($__err)>>2)];
 var $930=$929|4;
 HEAP32[(($__err)>>2)]=$930;
 var $_0=0;var $1166=$790;var $free241=$free237;label=370;break;
 case 297: 
 var $932=HEAP32[(($__wn)>>2)];
 var $933=($932|0)==($__we252300|0);
 if($933){label=298;break;}else{var $__we253=$__we252300;var $965=$932;label=309;break;}
 case 298: 
 var $935=HEAP32[(($22)>>2)];
 var $936=($935|0)!=((420)|0);
 var $937=HEAP32[(($5)>>2)];
 var $938=$__we252300;
 var $939=$937;
 var $940=((($938)-($939))|0);
 var $941=($940>>>0)<2147483647;
 var $942=$940<<1;
 var $__i=($941?$942:-1);
 var $943=$940>>2;
 if($936){label=299;break;}else{var $946=0;label=300;break;}
 case 299: 
 var $phitmp_i=$937;
 var $946=$phitmp_i;label=300;break;
 case 300: 
 var $946;
 var $947=_realloc($946,$__i);
 var $948=$947;
 var $949=($947|0)==0;
 if($949){label=301;break;}else{label=302;break;}
 case 301: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=302;break; } else { label=21;break; }
 case 302: 
 if($936){label=303;break;}else{label=304;break;}
 case 303: 
 HEAP32[(($5)>>2)]=$948;
 var $959=$948;label=308;break;
 case 304: 
 var $_pr_i=HEAP32[(($5)>>2)];
 HEAP32[(($5)>>2)]=$948;
 var $952=($_pr_i|0)==0;
 if($952){var $959=$948;label=308;break;}else{label=305;break;}
 case 305: 
 var $954=HEAP32[(($22)>>2)];
 var $955=$_pr_i;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$954]($955) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=306;break; } else { label=307;break; }
 case 306: 
 var $_pre_i73=HEAP32[(($5)>>2)];
 var $959=$_pre_i73;label=308;break;
 case 307: 
 var $957$0 = ___cxa_find_matching_catch(-1, -1,0); var $957$1 = tempRet0;
 var $958=$957$0;
 ___clang_call_terminate($958);
 throw "Reached an unreachable!";
 case 308: 
 var $959;
 HEAP32[(($22)>>2)]=222;
 var $960=$__i>>>2;
 var $961=(($959+($943<<2))|0);
 HEAP32[(($__wn)>>2)]=$961;
 var $962=HEAP32[(($5)>>2)];
 var $963=(($962+($960<<2))|0);
 var $__we253=$963;var $965=$961;label=309;break;
 case 309: 
 var $965;
 var $__we253;
 var $966=HEAP32[(($7)>>2)];
 var $967=(($966+12)|0);
 var $968=HEAP32[(($967)>>2)];
 var $969=(($966+16)|0);
 var $970=HEAP32[(($969)>>2)];
 var $971=($968|0)==($970|0);
 if($971){label=310;break;}else{label=312;break;}
 case 310: 
 var $973=$966;
 var $974=HEAP32[(($973)>>2)];
 var $975=(($974+36)|0);
 var $976=HEAP32[(($975)>>2)];
 var $977=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$976]($966) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=311;break; } else { label=21;break; }
 case 311: 
 var $_pre487=HEAP32[(($__wn)>>2)];
 var $_0_i_i22=$977;var $980=$_pre487;label=313;break;
 case 312: 
 var $979=HEAP32[(($968)>>2)];
 var $_0_i_i22=$979;var $980=$965;label=313;break;
 case 313: 
 var $980;
 var $_0_i_i22;
 var $981=(($980+4)|0);
 HEAP32[(($__wn)>>2)]=$981;
 HEAP32[(($980)>>2)]=$_0_i_i22;
 var $982=((($869)-(1))|0);
 HEAP32[(($__fd)>>2)]=$982;
 var $983=HEAP32[(($7)>>2)];
 var $984=(($983+12)|0);
 var $985=HEAP32[(($984)>>2)];
 var $986=(($983+16)|0);
 var $987=HEAP32[(($986)>>2)];
 var $988=($985|0)==($987|0);
 if($988){label=314;break;}else{label=316;break;}
 case 314: 
 var $990=$983;
 var $991=HEAP32[(($990)>>2)];
 var $992=(($991+40)|0);
 var $993=HEAP32[(($992)>>2)];
 var $994=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$993]($983) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=315;break; } else { label=21;break; }
 case 315: 
 var $995=($982|0)>0;
 if($995){var $__we252300=$__we253;var $870=$909;var $869=$982;var $_pre_i3_i_i101=$_pre_i3_i_i101489494;label=276;break;}else{var $__we251=$__we253;label=317;break;}
 case 316: 
 var $997=(($985+4)|0);
 HEAP32[(($984)>>2)]=$997;
 label=315;break;
 case 317: 
 var $__we251;
 var $998=HEAP32[(($__wn)>>2)];
 var $999=HEAP32[(($5)>>2)];
 var $1000=($998|0)==($999|0);
 if($1000){label=318;break;}else{var $__trailing_sign_1=$__trailing_sign_0405;var $1006=$792;var $1005=$791;var $1004=$790;var $free236=$free237;var $__we250=$__we251;label=319;break;}
 case 318: 
 var $1002=HEAP32[(($__err)>>2)];
 var $1003=$1002|4;
 HEAP32[(($__err)>>2)]=$1003;
 var $_0=0;var $1166=$790;var $free241=$free237;label=370;break;
 case 319: 
 var $__we250;
 var $free236;
 var $1004;
 var $1005;
 var $1006;
 var $__trailing_sign_1;
 var $1007=((($__p_0403)+(1))|0);
 var $1008=($1007>>>0)<4;
 if($1008){var $__we249395=$__we250;var $free235398=$free236;var $27=$1004;var $26=$1005;var $25=$1006;var $__p_0403=$1007;var $__trailing_sign_0405=$__trailing_sign_1;label=3;break;}else{var $free235_lcssa=$free236;var $_lcssa336=$1004;var $_lcssa353=$1005;var $__trailing_sign_0_lcssa=$__trailing_sign_1;label=320;break;}
 case 320: 
 var $__trailing_sign_0_lcssa;
 var $_lcssa353;
 var $_lcssa336;
 var $free235_lcssa;
 var $1009=($__trailing_sign_0_lcssa|0)==0;
 if($1009){label=351;break;}else{label=321;break;}
 case 321: 
 var $1010=$__trailing_sign_0_lcssa;
 var $1011=(($__trailing_sign_0_lcssa+4)|0);
 var $1012=(($__trailing_sign_0_lcssa+8)|0);
 var $__i_0=1;label=322;break;
 case 322: 
 var $__i_0;
 var $1013=HEAP8[($1010)];
 var $1014=$1013&1;
 var $1015=(($1014<<24)>>24)==0;
 if($1015){label=324;break;}else{label=323;break;}
 case 323: 
 var $1017=HEAP32[(($1011)>>2)];
 var $1021=$1017;label=325;break;
 case 324: 
 var $1019=($1013&255);
 var $1020=$1019>>>1;
 var $1021=$1020;label=325;break;
 case 325: 
 var $1021;
 var $1022=($__i_0>>>0)<($1021>>>0);
 if($1022){label=326;break;}else{label=351;break;}
 case 326: 
 var $1024=HEAP32[(($7)>>2)];
 var $1025=($1024|0)==0;
 if($1025){var $1042=1;label=333;break;}else{label=327;break;}
 case 327: 
 var $1027=(($1024+12)|0);
 var $1028=HEAP32[(($1027)>>2)];
 var $1029=(($1024+16)|0);
 var $1030=HEAP32[(($1029)>>2)];
 var $1031=($1028|0)==($1030|0);
 if($1031){label=328;break;}else{label=329;break;}
 case 328: 
 var $1033=$1024;
 var $1034=HEAP32[(($1033)>>2)];
 var $1035=(($1034+36)|0);
 var $1036=HEAP32[(($1035)>>2)];
 var $1037=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1036]($1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$1037;label=330;break; } else { label=19;break; }
 case 329: 
 var $1039=HEAP32[(($1028)>>2)];
 var $_0_i_i_i_i=$1039;label=330;break;
 case 330: 
 var $_0_i_i_i_i;
 var $1040=($_0_i_i_i_i|0)==-1;
 if($1040){label=332;break;}else{label=331;break;}
 case 331: 
 var $_pre_i_i_i=HEAP32[(($7)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $1042=$phitmp_i_i_i;label=333;break;
 case 332: 
 HEAP32[(($7)>>2)]=0;
 var $1042=1;label=333;break;
 case 333: 
 var $1042;
 var $1043=HEAP32[(($8)>>2)];
 var $1044=($1043|0)==0;
 if($1044){label=339;break;}else{label=334;break;}
 case 334: 
 var $1046=(($1043+12)|0);
 var $1047=HEAP32[(($1046)>>2)];
 var $1048=(($1043+16)|0);
 var $1049=HEAP32[(($1048)>>2)];
 var $1050=($1047|0)==($1049|0);
 if($1050){label=335;break;}else{label=336;break;}
 case 335: 
 var $1052=$1043;
 var $1053=HEAP32[(($1052)>>2)];
 var $1054=(($1053+36)|0);
 var $1055=HEAP32[(($1054)>>2)];
 var $1056=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1055]($1043) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$1056;label=337;break; } else { label=19;break; }
 case 336: 
 var $1058=HEAP32[(($1047)>>2)];
 var $_0_i_i1_i_i=$1058;label=337;break;
 case 337: 
 var $_0_i_i1_i_i;
 var $1059=($_0_i_i1_i_i|0)==-1;
 if($1059){label=338;break;}else{label=340;break;}
 case 338: 
 HEAP32[(($8)>>2)]=0;
 label=339;break;
 case 339: 
 if($1042){label=347;break;}else{label=341;break;}
 case 340: 
 if($1042){label=341;break;}else{label=347;break;}
 case 341: 
 var $1062=HEAP32[(($7)>>2)];
 var $1063=(($1062+12)|0);
 var $1064=HEAP32[(($1063)>>2)];
 var $1065=(($1062+16)|0);
 var $1066=HEAP32[(($1065)>>2)];
 var $1067=($1064|0)==($1066|0);
 if($1067){label=342;break;}else{label=343;break;}
 case 342: 
 var $1069=$1062;
 var $1070=HEAP32[(($1069)>>2)];
 var $1071=(($1070+36)|0);
 var $1072=HEAP32[(($1071)>>2)];
 var $1073=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1072]($1062) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$1073;label=344;break; } else { label=19;break; }
 case 343: 
 var $1075=HEAP32[(($1064)>>2)];
 var $_0_i_i=$1075;label=344;break;
 case 344: 
 var $_0_i_i;
 var $1076=HEAP8[($1010)];
 var $1077=$1076&1;
 var $1078=(($1077<<24)>>24)==0;
 if($1078){var $1081=$1011;label=346;break;}else{label=345;break;}
 case 345: 
 var $1080=HEAP32[(($1012)>>2)];
 var $1081=$1080;label=346;break;
 case 346: 
 var $1081;
 var $1082=(($1081+($__i_0<<2))|0);
 var $1083=HEAP32[(($1082)>>2)];
 var $1084=($_0_i_i|0)==($1083|0);
 if($1084){label=348;break;}else{label=347;break;}
 case 347: 
 var $1086=HEAP32[(($__err)>>2)];
 var $1087=$1086|4;
 HEAP32[(($__err)>>2)]=$1087;
 var $_0=0;var $1166=$_lcssa336;var $free241=$free235_lcssa;label=370;break;
 case 348: 
 var $1089=((($__i_0)+(1))|0);
 var $1090=HEAP32[(($7)>>2)];
 var $1091=(($1090+12)|0);
 var $1092=HEAP32[(($1091)>>2)];
 var $1093=(($1090+16)|0);
 var $1094=HEAP32[(($1093)>>2)];
 var $1095=($1092|0)==($1094|0);
 if($1095){label=349;break;}else{label=350;break;}
 case 349: 
 var $1097=$1090;
 var $1098=HEAP32[(($1097)>>2)];
 var $1099=(($1098+40)|0);
 var $1100=HEAP32[(($1099)>>2)];
 var $1101=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1100]($1090) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__i_0=$1089;label=322;break; } else { label=19;break; }
 case 350: 
 var $1103=(($1092+4)|0);
 HEAP32[(($1091)>>2)]=$1103;
 var $__i_0=$1089;label=322;break;
 case 351: 
 var $1104=($_lcssa336|0)==($_lcssa353|0);
 if($1104){var $_0=1;var $1166=$_lcssa353;var $free241=$free235_lcssa;label=370;break;}else{label=352;break;}
 case 352: 
 var $1106=HEAP8[($this2_i_i_i)];
 var $1107=$1106&1;
 var $1108=(($1107<<24)>>24)==0;
 if($1108){label=354;break;}else{label=353;break;}
 case 353: 
 var $1110=HEAP32[(($23)>>2)];
 var $1114=$1110;label=355;break;
 case 354: 
 var $1112=($1106&255);
 var $1113=$1112>>>1;
 var $1114=$1113;label=355;break;
 case 355: 
 var $1114;
 var $1115=($1114|0)==0;
 if($1115){var $_0=1;var $1166=$_lcssa336;var $free241=$free235_lcssa;label=370;break;}else{label=356;break;}
 case 356: 
 var $1116=((($_lcssa353)-(4))|0);
 var $1117=($1116>>>0)>($_lcssa336>>>0);
 if($1117){var $_012_i_i_i=$_lcssa336;var $1118=$1116;label=357;break;}else{var $1124=$1106;label=359;break;}
 case 357: 
 var $1118;
 var $_012_i_i_i;
 var $1119=HEAP32[(($_012_i_i_i)>>2)];
 var $1120=HEAP32[(($1118)>>2)];
 HEAP32[(($_012_i_i_i)>>2)]=$1120;
 HEAP32[(($1118)>>2)]=$1119;
 var $1121=(($_012_i_i_i+4)|0);
 var $1122=((($1118)-(4))|0);
 var $1123=($1121>>>0)<($1122>>>0);
 if($1123){var $_012_i_i_i=$1121;var $1118=$1122;label=357;break;}else{label=358;break;}
 case 358: 
 var $_pre_i=HEAP8[($this2_i_i_i)];
 var $1124=$_pre_i;label=359;break;
 case 359: 
 var $1124;
 var $1125=$1124&1;
 var $1126=(($1125<<24)>>24)==0;
 if($1126){label=361;break;}else{label=360;break;}
 case 360: 
 var $1128=(($__grp+8)|0);
 var $1129=HEAP32[(($1128)>>2)];
 var $1130=HEAP32[(($23)>>2)];
 var $1137=$1130;var $1136=$1129;label=362;break;
 case 361: 
 var $1132=$__grp;
 var $1133=(($1132+1)|0);
 var $1134=($1124&255);
 var $1135=$1134>>>1;
 var $1137=$1135;var $1136=$1133;label=362;break;
 case 362: 
 var $1136;
 var $1137;
 var $1138=((($_lcssa353)-(4))|0);
 var $1139=($1138>>>0)>($_lcssa336>>>0);
 var $1140=HEAP8[($1136)];
 var $_not9_i=(($1140<<24)>>24)<1;
 var $1141=(($1140<<24)>>24)==127;
 var $or_cond210_i=$_not9_i|$1141;
 if($1139){label=363;break;}else{var $_lcssa6_i=$1140;var $or_cond2_lcssa_i=$or_cond210_i;label=367;break;}
 case 363: 
 var $1142=(($1136+$1137)|0);
 var $1143=$1142;
 var $__ig_011_i=$1136;var $__r_012_i=$_lcssa336;var $1145=$1140;var $or_cond213_i=$or_cond210_i;label=364;break;
 case 364: 
 var $or_cond213_i;
 var $1145;
 var $__r_012_i;
 var $__ig_011_i;
 if($or_cond213_i){label=366;break;}else{label=365;break;}
 case 365: 
 var $1147=(($1145<<24)>>24);
 var $1148=HEAP32[(($__r_012_i)>>2)];
 var $1149=($1147|0)==($1148|0);
 if($1149){label=366;break;}else{label=369;break;}
 case 366: 
 var $1151=$__ig_011_i;
 var $1152=((($1143)-($1151))|0);
 var $1153=($1152|0)>1;
 var $1154=(($__ig_011_i+1)|0);
 var $___ig_0_i=($1153?$1154:$__ig_011_i);
 var $1155=(($__r_012_i+4)|0);
 var $1156=($1155>>>0)<($1138>>>0);
 var $1157=HEAP8[($___ig_0_i)];
 var $_not_i=(($1157<<24)>>24)<1;
 var $1158=(($1157<<24)>>24)==127;
 var $or_cond2_i=$_not_i|$1158;
 if($1156){var $__ig_011_i=$___ig_0_i;var $__r_012_i=$1155;var $1145=$1157;var $or_cond213_i=$or_cond2_i;label=364;break;}else{var $_lcssa6_i=$1157;var $or_cond2_lcssa_i=$or_cond2_i;label=367;break;}
 case 367: 
 var $or_cond2_lcssa_i;
 var $_lcssa6_i;
 if($or_cond2_lcssa_i){var $_0=1;var $1166=$_lcssa336;var $free241=$free235_lcssa;label=370;break;}else{label=368;break;}
 case 368: 
 var $1160=(($_lcssa6_i<<24)>>24);
 var $1161=HEAP32[(($1138)>>2)];
 var $1162=((($1161)-(1))|0);
 var $1163=($1162>>>0)<($1160>>>0);
 if($1163){var $_0=1;var $1166=$_lcssa336;var $free241=$free235_lcssa;label=370;break;}else{label=369;break;}
 case 369: 
 var $1164=HEAP32[(($__err)>>2)];
 var $1165=$1164|4;
 HEAP32[(($__err)>>2)]=$1165;
 var $_0=0;var $1166=$_lcssa336;var $free241=$free235_lcssa;label=370;break;
 case 370: 
 var $free241;
 var $1166;
 var $_0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $1167=($1166|0)==0;
 if($1167){label=373;break;}else{label=371;break;}
 case 371: 
 var $1169=$1166;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$free241]($1169) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=373;break; } else { label=372;break; }
 case 372: 
 var $1171$0 = ___cxa_find_matching_catch(-1, -1,0); var $1171$1 = tempRet0;
 var $1172=$1171$0;
 ___clang_call_terminate($1172);
 throw "Reached an unreachable!";
 case 373: 
 var $$etemp$1$0=400;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+456)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(416);
 var $__wn=(sp)+(424);
 var $__loc=(sp)+(432);
 var $__neg=(sp)+(440);
 var $1=(sp)+(448);
 var $2=$__wbuf;
 var $$etemp$0$0=400;
 var $$etemp$0$1=0;

 var $3=(($__wbuf)|0);
 var $4=(($__wb)|0);
 HEAP32[(($4)>>2)]=$3;
 var $5=(($__wb+4)|0);
 HEAP32[(($5)>>2)]=420;
 var $6=(($__wbuf+400)|0);
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=16;break; }
 case 2: 
 var $8=(($__loc)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$__p_i_i_i_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $11=HEAP32[((13424)>>2)];
 var $12=($11|0)==-1;
 if($12){label=4;break;}else{label=3;break;}
 case 3: 
 var $14=(($__p_i_i_i_i)|0);
 HEAP32[(($14)>>2)]=13424;
 var $15=(($__p_i_i_i_i+4)|0);
 HEAP32[(($15)>>2)]=(26);
 var $16=(($__p_i_i_i_i+8)|0);
 HEAP32[(($16)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13424,$10,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=42;break; }
 case 4: 
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $17=HEAP32[((13428)>>2)];
 var $18=((($17)-(1))|0);
 var $19=(($9+12)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($9+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=$20;
 var $24=$22;
 var $25=((($23)-($24))|0);
 var $26=$25>>2;
 var $27=($26>>>0)>($18>>>0);
 if($27){label=5;break;}else{label=6;break;}
 case 5: 
 var $28=(($22+($18<<2))|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)==0;
 if($30){label=6;break;}else{label=8;break;}
 case 6: 
 var $31=___cxa_allocate_exception(4);
 var $32=$31;
 __ZNSt8bad_castC2Ev($32);
 (function() { try { __THREW__ = 0; return ___cxa_throw($31,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=42;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $34=$29;
 HEAP8[($__neg)]=0;
 var $35=(($__e)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=(($1)|0);
 HEAP32[(($37)>>2)]=$36;
 var $38=(($__iob+4)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$1,$__intl,$__loc,$39,$__err,$__neg,$34,$__wb,$__wn,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=42;break; }
 case 9: 
 if($40){label=10;break;}else{label=22;break;}
 case 10: 
 var $43=$__v;
 var $44=HEAP8[($43)];
 var $45=$44&1;
 var $46=(($45<<24)>>24)==0;
 if($46){label=12;break;}else{label=11;break;}
 case 11: 
 var $48=(($__v+8)|0);
 var $49=HEAP32[(($48)>>2)];
 HEAP32[(($49)>>2)]=0;
 var $50=(($__v+4)|0);
 HEAP32[(($50)>>2)]=0;
 label=13;break;
 case 12: 
 var $52=(($__v+4)|0);
 HEAP32[(($52)>>2)]=0;
 HEAP8[($43)]=0;
 label=13;break;
 case 13: 
 var $53=HEAP8[($__neg)];
 var $54=(($53<<24)>>24)==0;
 var $_pre13=$29;
 if($54){label=17;break;}else{label=14;break;}
 case 14: 
 var $56=HEAP32[(($_pre13)>>2)];
 var $57=(($56+44)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$58]($34,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=42;break; }
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__v,$59) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=42;break; }
 case 16: 
 var $60$0 = ___cxa_find_matching_catch(-1, -1); var $60$1 = tempRet0;
 var $61=$60$0;
 var $62=$60$1;
 HEAP32[(($4)>>2)]=0;
 var $141=$3;var $_0115=$62;var $_017=$61;label=43;break;
 case 17: 
 var $63=HEAP32[(($_pre13)>>2)];
 var $64=(($63+44)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$65]($34,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=42;break; }
 case 18: 
 var $67=HEAP32[(($4)>>2)];
 var $68=HEAP32[(($__wn)>>2)];
 var $69=((($68)-(4))|0);
 var $70=($67>>>0)<($69>>>0);
 if($70){var $__w_09=$67;label=20;break;}else{var $__w_0_lcssa=$67;label=21;break;}
 case 19: 
 var $72=($75>>>0)<($69>>>0);
 if($72){var $__w_09=$75;label=20;break;}else{var $__w_0_lcssa=$75;label=21;break;}
 case 20: 
 var $__w_09;
 var $73=HEAP32[(($__w_09)>>2)];
 var $74=($73|0)==($66|0);
 var $75=(($__w_09+4)|0);
 if($74){label=19;break;}else{var $__w_0_lcssa=$__w_09;label=21;break;}
 case 21: 
 var $__w_0_lcssa;
 var $76=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v,$__w_0_lcssa,$68) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=42;break; }
 case 22: 
 var $78=(($__b)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=($79|0)==0;
 if($80){var $97=1;label=29;break;}else{label=23;break;}
 case 23: 
 var $82=(($79+12)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($79+16)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($83|0)==($85|0);
 if($86){label=24;break;}else{label=25;break;}
 case 24: 
 var $88=$79;
 var $89=HEAP32[(($88)>>2)];
 var $90=(($89+36)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$91]($79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$92;label=26;break; } else { label=42;break; }
 case 25: 
 var $94=HEAP32[(($83)>>2)];
 var $_0_i_i_i_i=$94;label=26;break;
 case 26: 
 var $_0_i_i_i_i;
 var $95=($_0_i_i_i_i|0)==-1;
 if($95){label=28;break;}else{label=27;break;}
 case 27: 
 var $_pre_i_i_i=HEAP32[(($78)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $97=$phitmp_i_i_i;label=29;break;
 case 28: 
 HEAP32[(($78)>>2)]=0;
 var $97=1;label=29;break;
 case 29: 
 var $97;
 var $98=($36|0)==0;
 if($98){label=35;break;}else{label=30;break;}
 case 30: 
 var $100=(($36+12)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=(($36+16)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($101|0)==($103|0);
 if($104){label=31;break;}else{label=32;break;}
 case 31: 
 var $106=$36;
 var $107=HEAP32[(($106)>>2)];
 var $108=(($107+36)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$109]($36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$110;label=33;break; } else { label=42;break; }
 case 32: 
 var $112=HEAP32[(($101)>>2)];
 var $_0_i_i1_i_i=$112;label=33;break;
 case 33: 
 var $_0_i_i1_i_i;
 var $113=($_0_i_i1_i_i|0)==-1;
 if($113){label=34;break;}else{label=36;break;}
 case 34: 
 HEAP32[(($35)>>2)]=0;
 label=35;break;
 case 35: 
 if($97){label=37;break;}else{label=38;break;}
 case 36: 
 if($97){label=38;break;}else{label=37;break;}
 case 37: 
 var $116=HEAP32[(($__err)>>2)];
 var $117=$116|2;
 HEAP32[(($__err)>>2)]=$117;
 label=38;break;
 case 38: 
 var $119=HEAP32[(($78)>>2)];
 var $120=(($agg_result)|0);
 HEAP32[(($120)>>2)]=$119;
 var $121=HEAP32[(($8)>>2)];
 var $122=(($121)|0);
 var $123=__ZNSt3__114__shared_count16__release_sharedEv($122);
 var $124=HEAP32[(($4)>>2)];
 HEAP32[(($4)>>2)]=0;
 var $125=($124|0)==0;
 if($125){label=41;break;}else{label=39;break;}
 case 39: 
 var $127=HEAP32[(($5)>>2)];
 var $128=$124;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=40;break; }
 case 40: 
 var $130$0 = ___cxa_find_matching_catch(-1, -1,0); var $130$1 = tempRet0;
 var $131=$130$0;
 ___clang_call_terminate($131);
 throw "Reached an unreachable!";
 case 41: 
 var $$etemp$3$0=400;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
 case 42: 
 var $133$0 = ___cxa_find_matching_catch(-1, -1); var $133$1 = tempRet0;
 var $134=$133$0;
 var $135=$133$1;
 var $136=HEAP32[(($8)>>2)];
 var $137=(($136)|0);
 var $138=__ZNSt3__114__shared_count16__release_sharedEv($137);
 var $_pre=HEAP32[(($4)>>2)];
 HEAP32[(($4)>>2)]=0;
 var $139=($_pre|0)==0;
 if($139){var $_0116=$135;var $_018=$134;label=45;break;}else{var $141=$_pre;var $_0115=$135;var $_017=$134;label=43;break;}
 case 43: 
 var $_017;
 var $_0115;
 var $141;
 var $142=HEAP32[(($5)>>2)];
 var $143=$141;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$142]($143) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0116=$_0115;var $_018=$_017;label=45;break; } else { label=44;break; }
 case 44: 
 var $145$0 = ___cxa_find_matching_catch(-1, -1,0); var $145$1 = tempRet0;
 var $146=$145$0;
 ___clang_call_terminate($146);
 throw "Reached an unreachable!";
 case 45: 
 var $_018;
 var $_0116;
 var $147$0=$_018;
 var $147$1=0;
 var $148$0=$147$0;
 var $148$1=$_0116;
 ___resumeException($148$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i6=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $1=(sp)+(32);
 var $2=(sp)+(40);
 var $3=(sp)+(56);
 var $4=(sp)+(72);
 var $5=(sp)+(88);
 var $6=(sp)+(104);
 var $7=(sp)+(112);
 var $8=(sp)+(128);
 var $9=(sp)+(144);
 var $10=(sp)+(160);
 if($__intl){label=2;break;}else{label=28;break;}
 case 2: 
 var $tmpcast1=$1;
 var $12=(($__loc)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $15=HEAP32[((13888)>>2)];
 var $16=($15|0)==-1;
 if($16){label=4;break;}else{label=3;break;}
 case 3: 
 var $18=(($__p_i_i_i_i)|0);
 HEAP32[(($18)>>2)]=13888;
 var $19=(($__p_i_i_i_i+4)|0);
 HEAP32[(($19)>>2)]=(26);
 var $20=(($__p_i_i_i_i+8)|0);
 HEAP32[(($20)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(13888,$14,260);
 label=4;break;
 case 4: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $21=HEAP32[((13892)>>2)];
 var $22=((($21)-(1))|0);
 var $23=(($13+12)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($13+8)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=$24;
 var $28=$26;
 var $29=((($27)-($28))|0);
 var $30=$29>>2;
 var $31=($30>>>0)>($22>>>0);
 if($31){label=5;break;}else{label=6;break;}
 case 5: 
 var $32=(($26+($22<<2))|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)==0;
 if($34){label=6;break;}else{label=7;break;}
 case 6: 
 var $35=___cxa_allocate_exception(4);
 var $36=$35;
 __ZNSt8bad_castC2Ev($36);
 ___cxa_throw($35,8200,(356));
 throw "Reached an unreachable!";
 case 7: 
 var $37=$33;
 var $38=$33;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+44)|0);
 var $41=HEAP32[(($40)>>2)];
 FUNCTION_TABLE[$41]($tmpcast1,$37);
 var $42=$__pat;
 var $43=HEAP32[(($1)>>2)];
 tempBigInt=$43;HEAP8[($42)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($42)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($42)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($42)+(3))|0)]=tempBigInt&0xff;
 var $44=$33;
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+32)|0);
 var $47=HEAP32[(($46)>>2)];
 FUNCTION_TABLE[$47]($2,$37);
 var $48=$__nsn;
 var $49=HEAP8[($48)];
 var $50=$49&1;
 var $51=(($50<<24)>>24)==0;
 if($51){label=9;break;}else{label=8;break;}
 case 8: 
 var $53=(($__nsn+8)|0);
 var $54=HEAP32[(($53)>>2)];
 HEAP32[(($54)>>2)]=0;
 var $55=(($__nsn+4)|0);
 HEAP32[(($55)>>2)]=0;
 label=10;break;
 case 9: 
 var $57=(($__nsn+4)|0);
 HEAP32[(($57)>>2)]=0;
 HEAP8[($48)]=0;
 label=10;break;
 case 10: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=11;break; }
 case 11: 
 var $59$0 = ___cxa_find_matching_catch(-1, -1,0); var $59$1 = tempRet0;
 var $60=$59$0;
 ___clang_call_terminate($60);
 throw "Reached an unreachable!";
 case 12: 
 var $61=$2;
 assert(12 % 1 === 0);HEAP32[(($48)>>2)]=HEAP32[(($61)>>2)];HEAP32[((($48)+(4))>>2)]=HEAP32[((($61)+(4))>>2)];HEAP32[((($48)+(8))>>2)]=HEAP32[((($61)+(8))>>2)];
 HEAP32[(($61)>>2)]=0; HEAP32[((($61)+(4))>>2)]=0; HEAP32[((($61)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2);
 var $62=HEAP32[(($44)>>2)];
 var $63=(($62+28)|0);
 var $64=HEAP32[(($63)>>2)];
 FUNCTION_TABLE[$64]($3,$37);
 var $65=$__psn;
 var $66=HEAP8[($65)];
 var $67=$66&1;
 var $68=(($67<<24)>>24)==0;
 if($68){label=14;break;}else{label=13;break;}
 case 13: 
 var $70=(($__psn+8)|0);
 var $71=HEAP32[(($70)>>2)];
 HEAP32[(($71)>>2)]=0;
 var $72=(($__psn+4)|0);
 HEAP32[(($72)>>2)]=0;
 label=15;break;
 case 14: 
 var $74=(($__psn+4)|0);
 HEAP32[(($74)>>2)]=0;
 HEAP8[($65)]=0;
 label=15;break;
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=16;break; }
 case 16: 
 var $76$0 = ___cxa_find_matching_catch(-1, -1,0); var $76$1 = tempRet0;
 var $77=$76$0;
 ___clang_call_terminate($77);
 throw "Reached an unreachable!";
 case 17: 
 var $78=$3;
 assert(12 % 1 === 0);HEAP32[(($65)>>2)]=HEAP32[(($78)>>2)];HEAP32[((($65)+(4))>>2)]=HEAP32[((($78)+(4))>>2)];HEAP32[((($65)+(8))>>2)]=HEAP32[((($78)+(8))>>2)];
 HEAP32[(($78)>>2)]=0; HEAP32[((($78)+(4))>>2)]=0; HEAP32[((($78)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($3);
 var $79=$33;
 var $80=HEAP32[(($79)>>2)];
 var $81=(($80+12)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=FUNCTION_TABLE[$82]($37);
 HEAP32[(($__dp)>>2)]=$83;
 var $84=HEAP32[(($79)>>2)];
 var $85=(($84+16)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=FUNCTION_TABLE[$86]($37);
 HEAP32[(($__ts)>>2)]=$87;
 var $88=$33;
 var $89=HEAP32[(($88)>>2)];
 var $90=(($89+20)|0);
 var $91=HEAP32[(($90)>>2)];
 FUNCTION_TABLE[$91]($4,$37);
 var $92=$__grp;
 var $93=HEAP8[($92)];
 var $94=$93&1;
 var $95=(($94<<24)>>24)==0;
 if($95){label=19;break;}else{label=18;break;}
 case 18: 
 var $97=(($__grp+8)|0);
 var $98=HEAP32[(($97)>>2)];
 HEAP8[($98)]=0;
 var $99=(($__grp+4)|0);
 HEAP32[(($99)>>2)]=0;
 label=20;break;
 case 19: 
 var $101=$__grp;
 var $102=(($101+1)|0);
 HEAP8[($102)]=0;
 HEAP8[($92)]=0;
 label=20;break;
 case 20: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=21;break; }
 case 21: 
 var $104$0 = ___cxa_find_matching_catch(-1, -1,0); var $104$1 = tempRet0;
 var $105=$104$0;
 ___clang_call_terminate($105);
 throw "Reached an unreachable!";
 case 22: 
 var $106=$4;
 assert(12 % 1 === 0);HEAP32[(($92)>>2)]=HEAP32[(($106)>>2)];HEAP32[((($92)+(4))>>2)]=HEAP32[((($106)+(4))>>2)];HEAP32[((($92)+(8))>>2)]=HEAP32[((($106)+(8))>>2)];
 HEAP32[(($106)>>2)]=0; HEAP32[((($106)+(4))>>2)]=0; HEAP32[((($106)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
 var $107=HEAP32[(($44)>>2)];
 var $108=(($107+24)|0);
 var $109=HEAP32[(($108)>>2)];
 FUNCTION_TABLE[$109]($5,$37);
 var $110=$__sym;
 var $111=HEAP8[($110)];
 var $112=$111&1;
 var $113=(($112<<24)>>24)==0;
 if($113){label=24;break;}else{label=23;break;}
 case 23: 
 var $115=(($__sym+8)|0);
 var $116=HEAP32[(($115)>>2)];
 HEAP32[(($116)>>2)]=0;
 var $117=(($__sym+4)|0);
 HEAP32[(($117)>>2)]=0;
 label=25;break;
 case 24: 
 var $119=(($__sym+4)|0);
 HEAP32[(($119)>>2)]=0;
 HEAP8[($110)]=0;
 label=25;break;
 case 25: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=26;break; }
 case 26: 
 var $121$0 = ___cxa_find_matching_catch(-1, -1,0); var $121$1 = tempRet0;
 var $122=$121$0;
 ___clang_call_terminate($122);
 throw "Reached an unreachable!";
 case 27: 
 var $123=$5;
 assert(12 % 1 === 0);HEAP32[(($110)>>2)]=HEAP32[(($123)>>2)];HEAP32[((($110)+(4))>>2)]=HEAP32[((($123)+(4))>>2)];HEAP32[((($110)+(8))>>2)]=HEAP32[((($123)+(8))>>2)];
 HEAP32[(($123)>>2)]=0; HEAP32[((($123)+(4))>>2)]=0; HEAP32[((($123)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($5);
 var $124=HEAP32[(($79)>>2)];
 var $125=(($124+36)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=FUNCTION_TABLE[$126]($37);
 var $storemerge=$127;label=54;break;
 case 28: 
 var $tmpcast=$6;
 var $129=(($__loc)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=$__p_i_i_i_i6;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $132=HEAP32[((13896)>>2)];
 var $133=($132|0)==-1;
 if($133){label=30;break;}else{label=29;break;}
 case 29: 
 var $135=(($__p_i_i_i_i6)|0);
 HEAP32[(($135)>>2)]=13896;
 var $136=(($__p_i_i_i_i6+4)|0);
 HEAP32[(($136)>>2)]=(26);
 var $137=(($__p_i_i_i_i6+8)|0);
 HEAP32[(($137)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(13896,$131,260);
 label=30;break;
 case 30: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $138=HEAP32[((13900)>>2)];
 var $139=((($138)-(1))|0);
 var $140=(($130+12)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=(($130+8)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=$141;
 var $145=$143;
 var $146=((($144)-($145))|0);
 var $147=$146>>2;
 var $148=($147>>>0)>($139>>>0);
 if($148){label=31;break;}else{label=32;break;}
 case 31: 
 var $149=(($143+($139<<2))|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=($150|0)==0;
 if($151){label=32;break;}else{label=33;break;}
 case 32: 
 var $152=___cxa_allocate_exception(4);
 var $153=$152;
 __ZNSt8bad_castC2Ev($153);
 ___cxa_throw($152,8200,(356));
 throw "Reached an unreachable!";
 case 33: 
 var $154=$150;
 var $155=$150;
 var $156=HEAP32[(($155)>>2)];
 var $157=(($156+44)|0);
 var $158=HEAP32[(($157)>>2)];
 FUNCTION_TABLE[$158]($tmpcast,$154);
 var $159=$__pat;
 var $160=HEAP32[(($6)>>2)];
 tempBigInt=$160;HEAP8[($159)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($159)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($159)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($159)+(3))|0)]=tempBigInt&0xff;
 var $161=$150;
 var $162=HEAP32[(($161)>>2)];
 var $163=(($162+32)|0);
 var $164=HEAP32[(($163)>>2)];
 FUNCTION_TABLE[$164]($7,$154);
 var $165=$__nsn;
 var $166=HEAP8[($165)];
 var $167=$166&1;
 var $168=(($167<<24)>>24)==0;
 if($168){label=35;break;}else{label=34;break;}
 case 34: 
 var $170=(($__nsn+8)|0);
 var $171=HEAP32[(($170)>>2)];
 HEAP32[(($171)>>2)]=0;
 var $172=(($__nsn+4)|0);
 HEAP32[(($172)>>2)]=0;
 label=36;break;
 case 35: 
 var $174=(($__nsn+4)|0);
 HEAP32[(($174)>>2)]=0;
 HEAP8[($165)]=0;
 label=36;break;
 case 36: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=37;break; }
 case 37: 
 var $176$0 = ___cxa_find_matching_catch(-1, -1,0); var $176$1 = tempRet0;
 var $177=$176$0;
 ___clang_call_terminate($177);
 throw "Reached an unreachable!";
 case 38: 
 var $178=$7;
 assert(12 % 1 === 0);HEAP32[(($165)>>2)]=HEAP32[(($178)>>2)];HEAP32[((($165)+(4))>>2)]=HEAP32[((($178)+(4))>>2)];HEAP32[((($165)+(8))>>2)]=HEAP32[((($178)+(8))>>2)];
 HEAP32[(($178)>>2)]=0; HEAP32[((($178)+(4))>>2)]=0; HEAP32[((($178)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7);
 var $179=HEAP32[(($161)>>2)];
 var $180=(($179+28)|0);
 var $181=HEAP32[(($180)>>2)];
 FUNCTION_TABLE[$181]($8,$154);
 var $182=$__psn;
 var $183=HEAP8[($182)];
 var $184=$183&1;
 var $185=(($184<<24)>>24)==0;
 if($185){label=40;break;}else{label=39;break;}
 case 39: 
 var $187=(($__psn+8)|0);
 var $188=HEAP32[(($187)>>2)];
 HEAP32[(($188)>>2)]=0;
 var $189=(($__psn+4)|0);
 HEAP32[(($189)>>2)]=0;
 label=41;break;
 case 40: 
 var $191=(($__psn+4)|0);
 HEAP32[(($191)>>2)]=0;
 HEAP8[($182)]=0;
 label=41;break;
 case 41: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=42;break; }
 case 42: 
 var $193$0 = ___cxa_find_matching_catch(-1, -1,0); var $193$1 = tempRet0;
 var $194=$193$0;
 ___clang_call_terminate($194);
 throw "Reached an unreachable!";
 case 43: 
 var $195=$8;
 assert(12 % 1 === 0);HEAP32[(($182)>>2)]=HEAP32[(($195)>>2)];HEAP32[((($182)+(4))>>2)]=HEAP32[((($195)+(4))>>2)];HEAP32[((($182)+(8))>>2)]=HEAP32[((($195)+(8))>>2)];
 HEAP32[(($195)>>2)]=0; HEAP32[((($195)+(4))>>2)]=0; HEAP32[((($195)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($8);
 var $196=$150;
 var $197=HEAP32[(($196)>>2)];
 var $198=(($197+12)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=FUNCTION_TABLE[$199]($154);
 HEAP32[(($__dp)>>2)]=$200;
 var $201=HEAP32[(($196)>>2)];
 var $202=(($201+16)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=FUNCTION_TABLE[$203]($154);
 HEAP32[(($__ts)>>2)]=$204;
 var $205=$150;
 var $206=HEAP32[(($205)>>2)];
 var $207=(($206+20)|0);
 var $208=HEAP32[(($207)>>2)];
 FUNCTION_TABLE[$208]($9,$154);
 var $209=$__grp;
 var $210=HEAP8[($209)];
 var $211=$210&1;
 var $212=(($211<<24)>>24)==0;
 if($212){label=45;break;}else{label=44;break;}
 case 44: 
 var $214=(($__grp+8)|0);
 var $215=HEAP32[(($214)>>2)];
 HEAP8[($215)]=0;
 var $216=(($__grp+4)|0);
 HEAP32[(($216)>>2)]=0;
 label=46;break;
 case 45: 
 var $218=$__grp;
 var $219=(($218+1)|0);
 HEAP8[($219)]=0;
 HEAP8[($209)]=0;
 label=46;break;
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=47;break; }
 case 47: 
 var $221$0 = ___cxa_find_matching_catch(-1, -1,0); var $221$1 = tempRet0;
 var $222=$221$0;
 ___clang_call_terminate($222);
 throw "Reached an unreachable!";
 case 48: 
 var $223=$9;
 assert(12 % 1 === 0);HEAP32[(($209)>>2)]=HEAP32[(($223)>>2)];HEAP32[((($209)+(4))>>2)]=HEAP32[((($223)+(4))>>2)];HEAP32[((($209)+(8))>>2)]=HEAP32[((($223)+(8))>>2)];
 HEAP32[(($223)>>2)]=0; HEAP32[((($223)+(4))>>2)]=0; HEAP32[((($223)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
 var $224=HEAP32[(($161)>>2)];
 var $225=(($224+24)|0);
 var $226=HEAP32[(($225)>>2)];
 FUNCTION_TABLE[$226]($10,$154);
 var $227=$__sym;
 var $228=HEAP8[($227)];
 var $229=$228&1;
 var $230=(($229<<24)>>24)==0;
 if($230){label=50;break;}else{label=49;break;}
 case 49: 
 var $232=(($__sym+8)|0);
 var $233=HEAP32[(($232)>>2)];
 HEAP32[(($233)>>2)]=0;
 var $234=(($__sym+4)|0);
 HEAP32[(($234)>>2)]=0;
 label=51;break;
 case 50: 
 var $236=(($__sym+4)|0);
 HEAP32[(($236)>>2)]=0;
 HEAP8[($227)]=0;
 label=51;break;
 case 51: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=52;break; }
 case 52: 
 var $238$0 = ___cxa_find_matching_catch(-1, -1,0); var $238$1 = tempRet0;
 var $239=$238$0;
 ___clang_call_terminate($239);
 throw "Reached an unreachable!";
 case 53: 
 var $240=$10;
 assert(12 % 1 === 0);HEAP32[(($227)>>2)]=HEAP32[(($240)>>2)];HEAP32[((($227)+(4))>>2)]=HEAP32[((($240)+(4))>>2)];HEAP32[((($227)+(8))>>2)]=HEAP32[((($240)+(8))>>2)];
 HEAP32[(($240)>>2)]=0; HEAP32[((($240)+(4))>>2)]=0; HEAP32[((($240)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($10);
 var $241=HEAP32[(($196)>>2)];
 var $242=(($241+36)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=FUNCTION_TABLE[$243]($154);
 var $storemerge=$244;label=54;break;
 case 54: 
 var $storemerge;
 HEAP32[(($__fd)>>2)]=$storemerge;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__units){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+248)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__buf=(sp)+(16);
 var $__bb=(sp)+(120);
 var $__digits=(sp)+(128);
 var $__loc=(sp)+(232);
 var $__pat=(sp)+(240);
 var $tmpcast=$__pat;
 var $__dp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__ts=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__grp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 100)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__buf)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 HEAP32[(($__bb)>>2)]=$2;
 var $3=(($__digits)|0);
 var $$etemp$1$0=100;
 var $$etemp$1$1=0;

 var $4=_snprintf($2,100,408,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)); STACKTOP=tempVarArgs;
 var $5=($4>>>0)>99;
 if($5){label=2;break;}else{var $__db_0=$3;var $__n_0=$4;var $38=0;var $37=0;label=15;break;}
 case 2: 
 var $7=HEAP8[(13992)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=3;break;}else{label=7;break;}
 case 3: 
 var $10=___cxa_guard_acquire(13992);
 var $11=($10|0)==0;
 if($11){label=7;break;}else{label=4;break;}
 case 4: 
 var $13=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((11888)>>2)]=$13;

 label=7;break;
 case 6: 
 var $16$0 = ___cxa_find_matching_catch(-1, -1); var $16$1 = tempRet0;

 var $eh_lpad_body$1=$16$1;var $eh_lpad_body$0=$16$0;var $29=0;var $28=0;label=12;break;
 case 7: 
 var $18=HEAP32[((11888)>>2)];
 var $19=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb,$18,408,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=8;break; } else { var $26=0;var $25=0;label=11;break; }
 case 8: 
 var $21=HEAP32[(($__bb)>>2)];
 var $22=($21|0)==0;
 if($22){label=9;break;}else{var $32=$21;label=13;break;}
 case 9: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { var $26=0;var $25=0;label=11;break; }
 case 10: 
 var $_pre=HEAP32[(($__bb)>>2)];
 var $32=$_pre;label=13;break;
 case 11: 
 var $25;
 var $26;
 var $27$0 = ___cxa_find_matching_catch(-1, -1); var $27$1 = tempRet0;
 var $eh_lpad_body$1=$27$1;var $eh_lpad_body$0=$27$0;var $29=$26;var $28=$25;label=12;break;
 case 12: 
 var $28;
 var $29;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $30=$eh_lpad_body$0;
 var $31=$eh_lpad_body$1;
 var $_2=$30;var $_23=$31;var $186=$29;var $185=$28;label=60;break;
 case 13: 
 var $32;
 var $33=_malloc($19);
 var $34=($33|0)==0;
 if($34){label=14;break;}else{var $__db_0=$33;var $__n_0=$19;var $38=$33;var $37=$32;label=15;break;}
 case 14: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__db_0=0;var $__n_0=$19;var $38=0;var $37=$32;label=15;break; } else { var $26=0;var $25=$32;label=11;break; }
 case 15: 
 var $37;
 var $38;
 var $__n_0;
 var $__db_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { var $26=$38;var $25=$37;label=11;break; }
 case 16: 
 var $40=(($__loc)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=$__p_i_i_i_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $43=HEAP32[((13432)>>2)];
 var $44=($43|0)==-1;
 if($44){label=18;break;}else{label=17;break;}
 case 17: 
 var $46=(($__p_i_i_i_i)|0);
 HEAP32[(($46)>>2)]=13432;
 var $47=(($__p_i_i_i_i+4)|0);
 HEAP32[(($47)>>2)]=(26);
 var $48=(($__p_i_i_i_i+8)|0);
 HEAP32[(($48)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13432,$42,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=45;break; }
 case 18: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $49=HEAP32[((13436)>>2)];
 var $50=((($49)-(1))|0);
 var $51=(($41+12)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($41+8)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=$52;
 var $56=$54;
 var $57=((($55)-($56))|0);
 var $58=$57>>2;
 var $59=($58>>>0)>($50>>>0);
 if($59){label=19;break;}else{label=20;break;}
 case 19: 
 var $60=(($54+($50<<2))|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=($61|0)==0;
 if($62){label=20;break;}else{label=22;break;}
 case 20: 
 var $63=___cxa_allocate_exception(4);
 var $64=$63;
 __ZNSt8bad_castC2Ev($64);
 (function() { try { __THREW__ = 0; return ___cxa_throw($63,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=45;break; }
 case 21: 
 throw "Reached an unreachable!";
 case 22: 
 var $66=$61;
 var $67=HEAP32[(($__bb)>>2)];
 var $68=(($67+$__n_0)|0);
 var $69=$61;
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+32)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]($66,$67,$68,$__db_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=45;break; }
 case 23: 
 var $74=($__n_0|0)==0;
 if($74){var $80=0;label=25;break;}else{label=24;break;}
 case 24: 
 var $76=HEAP32[(($__bb)>>2)];
 var $77=HEAP8[($76)];
 var $78=(($77<<24)>>24)==45;
 var $80=$78;label=25;break;
 case 25: 
 var $80;
 HEAP32[(($__pat)>>2)]=0;
 var $this2_i_i_i=$__grp;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $this2_i_i_i7=$__sym;
 HEAP32[(($this2_i_i_i7)>>2)]=0; HEAP32[((($this2_i_i_i7)+(4))>>2)]=0; HEAP32[((($this2_i_i_i7)+(8))>>2)]=0;
 var $this2_i_i_i8=$__sn;
 HEAP32[(($this2_i_i_i8)>>2)]=0; HEAP32[((($this2_i_i_i8)+(4))>>2)]=0; HEAP32[((($this2_i_i_i8)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$80,$__loc,$tmpcast,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=46;break; }
 case 26: 
 var $82=(($__mbuf)|0);
 var $$etemp$4$0=100;
 var $$etemp$4$1=0;

 var $83=HEAP32[(($__fd)>>2)];
 var $84=($__n_0|0)>($83|0);
 if($84){label=27;break;}else{label=34;break;}
 case 27: 
 var $86=((($__n_0)-($83))|0);
 var $87=$86<<1;
 var $88=HEAP8[($this2_i_i_i8)];
 var $89=$88&1;
 var $90=(($89<<24)>>24)==0;
 if($90){label=29;break;}else{label=28;break;}
 case 28: 
 var $92=(($__sn+4)|0);
 var $93=HEAP32[(($92)>>2)];
 var $97=$93;label=30;break;
 case 29: 
 var $95=($88&255);
 var $96=$95>>>1;
 var $97=$96;label=30;break;
 case 30: 
 var $97;
 var $98=HEAP8[($this2_i_i_i7)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=32;break;}else{label=31;break;}
 case 31: 
 var $102=(($__sym+4)|0);
 var $103=HEAP32[(($102)>>2)];
 var $107=$103;label=33;break;
 case 32: 
 var $105=($98&255);
 var $106=$105>>>1;
 var $107=$106;label=33;break;
 case 33: 
 var $107;
 var $108=$87|1;
 var $109=((($97)+($108))|0);
 var $110=((($109)+($107))|0);
 var $_pn=$110;label=41;break;
 case 34: 
 var $112=HEAP8[($this2_i_i_i8)];
 var $113=$112&1;
 var $114=(($113<<24)>>24)==0;
 if($114){label=36;break;}else{label=35;break;}
 case 35: 
 var $116=(($__sn+4)|0);
 var $117=HEAP32[(($116)>>2)];
 var $121=$117;label=37;break;
 case 36: 
 var $119=($112&255);
 var $120=$119>>>1;
 var $121=$120;label=37;break;
 case 37: 
 var $121;
 var $122=HEAP8[($this2_i_i_i7)];
 var $123=$122&1;
 var $124=(($123<<24)>>24)==0;
 if($124){label=39;break;}else{label=38;break;}
 case 38: 
 var $126=(($__sym+4)|0);
 var $127=HEAP32[(($126)>>2)];
 var $131=$127;label=40;break;
 case 39: 
 var $129=($122&255);
 var $130=$129>>>1;
 var $131=$130;label=40;break;
 case 40: 
 var $131;
 var $132=((($121)+(2))|0);
 var $133=((($132)+($131))|0);
 var $_pn=$133;label=41;break;
 case 41: 
 var $_pn;
 var $135=((($_pn)+($83))|0);
 var $136=($135>>>0)>100;
 if($136){label=42;break;}else{var $__mb_0=$82;var $158=0;label=49;break;}
 case 42: 
 var $137=_malloc($135);
 var $138=($137|0)==0;
 if($138){label=43;break;}else{var $__mb_0=$137;var $158=$137;label=49;break;}
 case 43: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__mb_0=0;var $158=0;label=49;break; } else { label=44;break; }
 case 44: 
 var $140$0 = ___cxa_find_matching_catch(-1, -1); var $140$1 = tempRet0;
 var $141=$140$0;
 var $142=$140$1;
 var $_0=$141;var $_01=$142;label=58;break;
 case 45: 
 var $144$0 = ___cxa_find_matching_catch(-1, -1); var $144$1 = tempRet0;
 var $145=$144$0;
 var $146=$144$1;
 var $_1=$145;var $_12=$146;label=59;break;
 case 46: 
 var $148$0 = ___cxa_find_matching_catch(-1, -1); var $148$1 = tempRet0;
 var $149=$148$0;
 var $150=$148$1;
 var $_0=$149;var $_01=$150;label=58;break;
 case 47: 
 var $152$0 = ___cxa_find_matching_catch(-1, -1); var $152$1 = tempRet0;
 var $153=$152$0;
 var $154=$152$1;
 var $155=($158|0)==0;
 if($155){var $_0=$153;var $_01=$154;label=58;break;}else{label=48;break;}
 case 48: 
 _free($158);
 var $_0=$153;var $_01=$154;label=58;break;
 case 49: 
 var $158;
 var $__mb_0;
 var $159=(($__iob+4)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=(($__db_0+$__n_0)|0);
 var $162=HEAP8[($__dp)];
 var $163=HEAP8[($__ts)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb_0,$__mi,$__me,$160,$__db_0,$161,$66,$80,$tmpcast,$162,$163,$__grp,$__sym,$__sn,$83) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=47;break; }
 case 50: 
 var $165=(($__s)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(($1)|0);
 HEAP32[(($167)>>2)]=$166;
 var $168=HEAP32[(($__mi)>>2)];
 var $169=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$1,$__mb_0,$168,$169,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=47;break; }
 case 51: 
 var $171=($158|0)==0;
 if($171){label=53;break;}else{label=52;break;}
 case 52: 
 _free($158);
 label=53;break;
 case 53: 
 var $$etemp$5$0=100;
 var $$etemp$5$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $173=HEAP32[(($40)>>2)];
 var $174=(($173)|0);
 var $175=__ZNSt3__114__shared_count16__release_sharedEv($174);
 var $176=($38|0)==0;
 if($176){label=55;break;}else{label=54;break;}
 case 54: 
 _free($38);
 label=55;break;
 case 55: 
 var $178=($37|0)==0;
 if($178){label=57;break;}else{label=56;break;}
 case 56: 
 _free($37);
 label=57;break;
 case 57: 
 var $$etemp$6$0=100;
 var $$etemp$6$1=0;

 var $$etemp$7$0=100;
 var $$etemp$7$1=0;

 STACKTOP=sp;return;
 case 58: 
 var $_01;
 var $_0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $_1=$_0;var $_12=$_01;label=59;break;
 case 59: 
 var $_12;
 var $_1;
 var $181=HEAP32[(($40)>>2)];
 var $182=(($181)|0);
 var $183=__ZNSt3__114__shared_count16__release_sharedEv($182);
 var $_2=$_1;var $_23=$_12;var $186=$38;var $185=$37;label=60;break;
 case 60: 
 var $185;
 var $186;
 var $_23;
 var $_2;
 var $187=($186|0)==0;
 if($187){label=62;break;}else{label=61;break;}
 case 61: 
 _free($186);
 label=62;break;
 case 62: 
 var $189=($185|0)==0;
 if($189){label=64;break;}else{label=63;break;}
 case 63: 
 _free($185);
 label=64;break;
 case 64: 
 var $191$0=$_2;
 var $191$1=0;
 var $192$0=$191$0;
 var $192$1=$_23;
 ___resumeException($192$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i10=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $1=(sp)+(32);
 var $tmpcast3=$1;
 var $2=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast2=$3;
 var $4=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $5=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $6=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $7=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast1=$7;
 var $8=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $9=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast=$9;
 var $10=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $11=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $12=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $13=(($__loc)|0);
 var $14=HEAP32[(($13)>>2)];
 if($__intl){label=2;break;}else{label=31;break;}
 case 2: 
 var $16=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $17=HEAP32[((13904)>>2)];
 var $18=($17|0)==-1;
 if($18){label=4;break;}else{label=3;break;}
 case 3: 
 var $20=(($__p_i_i_i_i)|0);
 HEAP32[(($20)>>2)]=13904;
 var $21=(($__p_i_i_i_i+4)|0);
 HEAP32[(($21)>>2)]=(26);
 var $22=(($__p_i_i_i_i+8)|0);
 HEAP32[(($22)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(13904,$16,260);
 label=4;break;
 case 4: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $23=HEAP32[((13908)>>2)];
 var $24=((($23)-(1))|0);
 var $25=(($14+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($14+8)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$26;
 var $30=$28;
 var $31=((($29)-($30))|0);
 var $32=$31>>2;
 var $33=($32>>>0)>($24>>>0);
 if($33){label=5;break;}else{label=6;break;}
 case 5: 
 var $34=(($28+($24<<2))|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==0;
 if($36){label=6;break;}else{label=7;break;}
 case 6: 
 var $37=___cxa_allocate_exception(4);
 var $38=$37;
 __ZNSt8bad_castC2Ev($38);
 ___cxa_throw($37,8200,(356));
 throw "Reached an unreachable!";
 case 7: 
 var $39=$35;
 var $40=$35;
 var $41=HEAP32[(($40)>>2)];
 if($__neg){label=8;break;}else{label=14;break;}
 case 8: 
 var $43=(($41+44)|0);
 var $44=HEAP32[(($43)>>2)];
 FUNCTION_TABLE[$44]($tmpcast3,$39);
 var $45=$__pat;
 var $46=HEAP32[(($1)>>2)];
 tempBigInt=$46;HEAP8[($45)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($45)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($45)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($45)+(3))|0)]=tempBigInt&0xff;
 var $47=$35;
 var $48=HEAP32[(($47)>>2)];
 var $49=(($48+32)|0);
 var $50=HEAP32[(($49)>>2)];
 FUNCTION_TABLE[$50]($2,$39);
 var $51=$__sn;
 var $52=HEAP8[($51)];
 var $53=$52&1;
 var $54=(($53<<24)>>24)==0;
 if($54){label=10;break;}else{label=9;break;}
 case 9: 
 var $56=(($__sn+8)|0);
 var $57=HEAP32[(($56)>>2)];
 HEAP8[($57)]=0;
 var $58=(($__sn+4)|0);
 HEAP32[(($58)>>2)]=0;
 label=11;break;
 case 10: 
 var $60=$__sn;
 var $61=(($60+1)|0);
 HEAP8[($61)]=0;
 HEAP8[($51)]=0;
 label=11;break;
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=12;break; }
 case 12: 
 var $63$0 = ___cxa_find_matching_catch(-1, -1,0); var $63$1 = tempRet0;
 var $64=$63$0;
 ___clang_call_terminate($64);
 throw "Reached an unreachable!";
 case 13: 
 var $65=$2;
 assert(12 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[(($65)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((($65)+(4))>>2)];HEAP32[((($51)+(8))>>2)]=HEAP32[((($65)+(8))>>2)];
 HEAP32[(($65)>>2)]=0; HEAP32[((($65)+(4))>>2)]=0; HEAP32[((($65)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 label=20;break;
 case 14: 
 var $67=(($41+40)|0);
 var $68=HEAP32[(($67)>>2)];
 FUNCTION_TABLE[$68]($tmpcast2,$39);
 var $69=$__pat;
 var $70=HEAP32[(($3)>>2)];
 tempBigInt=$70;HEAP8[($69)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($69)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($69)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($69)+(3))|0)]=tempBigInt&0xff;
 var $71=$35;
 var $72=HEAP32[(($71)>>2)];
 var $73=(($72+28)|0);
 var $74=HEAP32[(($73)>>2)];
 FUNCTION_TABLE[$74]($4,$39);
 var $75=$__sn;
 var $76=HEAP8[($75)];
 var $77=$76&1;
 var $78=(($77<<24)>>24)==0;
 if($78){label=16;break;}else{label=15;break;}
 case 15: 
 var $80=(($__sn+8)|0);
 var $81=HEAP32[(($80)>>2)];
 HEAP8[($81)]=0;
 var $82=(($__sn+4)|0);
 HEAP32[(($82)>>2)]=0;
 label=17;break;
 case 16: 
 var $84=$__sn;
 var $85=(($84+1)|0);
 HEAP8[($85)]=0;
 HEAP8[($75)]=0;
 label=17;break;
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=18;break; }
 case 18: 
 var $87$0 = ___cxa_find_matching_catch(-1, -1,0); var $87$1 = tempRet0;
 var $88=$87$0;
 ___clang_call_terminate($88);
 throw "Reached an unreachable!";
 case 19: 
 var $89=$4;
 assert(12 % 1 === 0);HEAP32[(($75)>>2)]=HEAP32[(($89)>>2)];HEAP32[((($75)+(4))>>2)]=HEAP32[((($89)+(4))>>2)];HEAP32[((($75)+(8))>>2)]=HEAP32[((($89)+(8))>>2)];
 HEAP32[(($89)>>2)]=0; HEAP32[((($89)+(4))>>2)]=0; HEAP32[((($89)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
 label=20;break;
 case 20: 
 var $91=$35;
 var $92=HEAP32[(($91)>>2)];
 var $93=(($92+12)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=FUNCTION_TABLE[$94]($39);
 HEAP8[($__dp)]=$95;
 var $96=HEAP32[(($91)>>2)];
 var $97=(($96+16)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=FUNCTION_TABLE[$98]($39);
 HEAP8[($__ts)]=$99;
 var $100=$35;
 var $101=HEAP32[(($100)>>2)];
 var $102=(($101+20)|0);
 var $103=HEAP32[(($102)>>2)];
 FUNCTION_TABLE[$103]($5,$39);
 var $104=$__grp;
 var $105=HEAP8[($104)];
 var $106=$105&1;
 var $107=(($106<<24)>>24)==0;
 if($107){label=22;break;}else{label=21;break;}
 case 21: 
 var $109=(($__grp+8)|0);
 var $110=HEAP32[(($109)>>2)];
 HEAP8[($110)]=0;
 var $111=(($__grp+4)|0);
 HEAP32[(($111)>>2)]=0;
 label=23;break;
 case 22: 
 var $113=$__grp;
 var $114=(($113+1)|0);
 HEAP8[($114)]=0;
 HEAP8[($104)]=0;
 label=23;break;
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=24;break; }
 case 24: 
 var $116$0 = ___cxa_find_matching_catch(-1, -1,0); var $116$1 = tempRet0;
 var $117=$116$0;
 ___clang_call_terminate($117);
 throw "Reached an unreachable!";
 case 25: 
 var $118=$5;
 assert(12 % 1 === 0);HEAP32[(($104)>>2)]=HEAP32[(($118)>>2)];HEAP32[((($104)+(4))>>2)]=HEAP32[((($118)+(4))>>2)];HEAP32[((($104)+(8))>>2)]=HEAP32[((($118)+(8))>>2)];
 HEAP32[(($118)>>2)]=0; HEAP32[((($118)+(4))>>2)]=0; HEAP32[((($118)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
 var $119=HEAP32[(($100)>>2)];
 var $120=(($119+24)|0);
 var $121=HEAP32[(($120)>>2)];
 FUNCTION_TABLE[$121]($6,$39);
 var $122=$__sym;
 var $123=HEAP8[($122)];
 var $124=$123&1;
 var $125=(($124<<24)>>24)==0;
 if($125){label=27;break;}else{label=26;break;}
 case 26: 
 var $127=(($__sym+8)|0);
 var $128=HEAP32[(($127)>>2)];
 HEAP8[($128)]=0;
 var $129=(($__sym+4)|0);
 HEAP32[(($129)>>2)]=0;
 label=28;break;
 case 27: 
 var $131=$__sym;
 var $132=(($131+1)|0);
 HEAP8[($132)]=0;
 HEAP8[($122)]=0;
 label=28;break;
 case 28: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=29;break; }
 case 29: 
 var $134$0 = ___cxa_find_matching_catch(-1, -1,0); var $134$1 = tempRet0;
 var $135=$134$0;
 ___clang_call_terminate($135);
 throw "Reached an unreachable!";
 case 30: 
 var $136=$6;
 assert(12 % 1 === 0);HEAP32[(($122)>>2)]=HEAP32[(($136)>>2)];HEAP32[((($122)+(4))>>2)]=HEAP32[((($136)+(4))>>2)];HEAP32[((($122)+(8))>>2)]=HEAP32[((($136)+(8))>>2)];
 HEAP32[(($136)>>2)]=0; HEAP32[((($136)+(4))>>2)]=0; HEAP32[((($136)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6);
 var $137=$35;
 var $138=HEAP32[(($137)>>2)];
 var $139=(($138+36)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=FUNCTION_TABLE[$140]($39);
 var $storemerge=$141;label=60;break;
 case 31: 
 var $143=$__p_i_i_i_i10;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $144=HEAP32[((13912)>>2)];
 var $145=($144|0)==-1;
 if($145){label=33;break;}else{label=32;break;}
 case 32: 
 var $147=(($__p_i_i_i_i10)|0);
 HEAP32[(($147)>>2)]=13912;
 var $148=(($__p_i_i_i_i10+4)|0);
 HEAP32[(($148)>>2)]=(26);
 var $149=(($__p_i_i_i_i10+8)|0);
 HEAP32[(($149)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(13912,$143,260);
 label=33;break;
 case 33: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $150=HEAP32[((13916)>>2)];
 var $151=((($150)-(1))|0);
 var $152=(($14+12)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=(($14+8)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=$153;
 var $157=$155;
 var $158=((($156)-($157))|0);
 var $159=$158>>2;
 var $160=($159>>>0)>($151>>>0);
 if($160){label=34;break;}else{label=35;break;}
 case 34: 
 var $161=(($155+($151<<2))|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=($162|0)==0;
 if($163){label=35;break;}else{label=36;break;}
 case 35: 
 var $164=___cxa_allocate_exception(4);
 var $165=$164;
 __ZNSt8bad_castC2Ev($165);
 ___cxa_throw($164,8200,(356));
 throw "Reached an unreachable!";
 case 36: 
 var $166=$162;
 var $167=$162;
 var $168=HEAP32[(($167)>>2)];
 if($__neg){label=37;break;}else{label=43;break;}
 case 37: 
 var $170=(($168+44)|0);
 var $171=HEAP32[(($170)>>2)];
 FUNCTION_TABLE[$171]($tmpcast1,$166);
 var $172=$__pat;
 var $173=HEAP32[(($7)>>2)];
 tempBigInt=$173;HEAP8[($172)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($172)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($172)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($172)+(3))|0)]=tempBigInt&0xff;
 var $174=$162;
 var $175=HEAP32[(($174)>>2)];
 var $176=(($175+32)|0);
 var $177=HEAP32[(($176)>>2)];
 FUNCTION_TABLE[$177]($8,$166);
 var $178=$__sn;
 var $179=HEAP8[($178)];
 var $180=$179&1;
 var $181=(($180<<24)>>24)==0;
 if($181){label=39;break;}else{label=38;break;}
 case 38: 
 var $183=(($__sn+8)|0);
 var $184=HEAP32[(($183)>>2)];
 HEAP8[($184)]=0;
 var $185=(($__sn+4)|0);
 HEAP32[(($185)>>2)]=0;
 label=40;break;
 case 39: 
 var $187=$__sn;
 var $188=(($187+1)|0);
 HEAP8[($188)]=0;
 HEAP8[($178)]=0;
 label=40;break;
 case 40: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=41;break; }
 case 41: 
 var $190$0 = ___cxa_find_matching_catch(-1, -1,0); var $190$1 = tempRet0;
 var $191=$190$0;
 ___clang_call_terminate($191);
 throw "Reached an unreachable!";
 case 42: 
 var $192=$8;
 assert(12 % 1 === 0);HEAP32[(($178)>>2)]=HEAP32[(($192)>>2)];HEAP32[((($178)+(4))>>2)]=HEAP32[((($192)+(4))>>2)];HEAP32[((($178)+(8))>>2)]=HEAP32[((($192)+(8))>>2)];
 HEAP32[(($192)>>2)]=0; HEAP32[((($192)+(4))>>2)]=0; HEAP32[((($192)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
 label=49;break;
 case 43: 
 var $194=(($168+40)|0);
 var $195=HEAP32[(($194)>>2)];
 FUNCTION_TABLE[$195]($tmpcast,$166);
 var $196=$__pat;
 var $197=HEAP32[(($9)>>2)];
 tempBigInt=$197;HEAP8[($196)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($196)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($196)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($196)+(3))|0)]=tempBigInt&0xff;
 var $198=$162;
 var $199=HEAP32[(($198)>>2)];
 var $200=(($199+28)|0);
 var $201=HEAP32[(($200)>>2)];
 FUNCTION_TABLE[$201]($10,$166);
 var $202=$__sn;
 var $203=HEAP8[($202)];
 var $204=$203&1;
 var $205=(($204<<24)>>24)==0;
 if($205){label=45;break;}else{label=44;break;}
 case 44: 
 var $207=(($__sn+8)|0);
 var $208=HEAP32[(($207)>>2)];
 HEAP8[($208)]=0;
 var $209=(($__sn+4)|0);
 HEAP32[(($209)>>2)]=0;
 label=46;break;
 case 45: 
 var $211=$__sn;
 var $212=(($211+1)|0);
 HEAP8[($212)]=0;
 HEAP8[($202)]=0;
 label=46;break;
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=47;break; }
 case 47: 
 var $214$0 = ___cxa_find_matching_catch(-1, -1,0); var $214$1 = tempRet0;
 var $215=$214$0;
 ___clang_call_terminate($215);
 throw "Reached an unreachable!";
 case 48: 
 var $216=$10;
 assert(12 % 1 === 0);HEAP32[(($202)>>2)]=HEAP32[(($216)>>2)];HEAP32[((($202)+(4))>>2)]=HEAP32[((($216)+(4))>>2)];HEAP32[((($202)+(8))>>2)]=HEAP32[((($216)+(8))>>2)];
 HEAP32[(($216)>>2)]=0; HEAP32[((($216)+(4))>>2)]=0; HEAP32[((($216)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
 label=49;break;
 case 49: 
 var $218=$162;
 var $219=HEAP32[(($218)>>2)];
 var $220=(($219+12)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=FUNCTION_TABLE[$221]($166);
 HEAP8[($__dp)]=$222;
 var $223=HEAP32[(($218)>>2)];
 var $224=(($223+16)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=FUNCTION_TABLE[$225]($166);
 HEAP8[($__ts)]=$226;
 var $227=$162;
 var $228=HEAP32[(($227)>>2)];
 var $229=(($228+20)|0);
 var $230=HEAP32[(($229)>>2)];
 FUNCTION_TABLE[$230]($11,$166);
 var $231=$__grp;
 var $232=HEAP8[($231)];
 var $233=$232&1;
 var $234=(($233<<24)>>24)==0;
 if($234){label=51;break;}else{label=50;break;}
 case 50: 
 var $236=(($__grp+8)|0);
 var $237=HEAP32[(($236)>>2)];
 HEAP8[($237)]=0;
 var $238=(($__grp+4)|0);
 HEAP32[(($238)>>2)]=0;
 label=52;break;
 case 51: 
 var $240=$__grp;
 var $241=(($240+1)|0);
 HEAP8[($241)]=0;
 HEAP8[($231)]=0;
 label=52;break;
 case 52: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=53;break; }
 case 53: 
 var $243$0 = ___cxa_find_matching_catch(-1, -1,0); var $243$1 = tempRet0;
 var $244=$243$0;
 ___clang_call_terminate($244);
 throw "Reached an unreachable!";
 case 54: 
 var $245=$11;
 assert(12 % 1 === 0);HEAP32[(($231)>>2)]=HEAP32[(($245)>>2)];HEAP32[((($231)+(4))>>2)]=HEAP32[((($245)+(4))>>2)];HEAP32[((($231)+(8))>>2)]=HEAP32[((($245)+(8))>>2)];
 HEAP32[(($245)>>2)]=0; HEAP32[((($245)+(4))>>2)]=0; HEAP32[((($245)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($11);
 var $246=HEAP32[(($227)>>2)];
 var $247=(($246+24)|0);
 var $248=HEAP32[(($247)>>2)];
 FUNCTION_TABLE[$248]($12,$166);
 var $249=$__sym;
 var $250=HEAP8[($249)];
 var $251=$250&1;
 var $252=(($251<<24)>>24)==0;
 if($252){label=56;break;}else{label=55;break;}
 case 55: 
 var $254=(($__sym+8)|0);
 var $255=HEAP32[(($254)>>2)];
 HEAP8[($255)]=0;
 var $256=(($__sym+4)|0);
 HEAP32[(($256)>>2)]=0;
 label=57;break;
 case 56: 
 var $258=$__sym;
 var $259=(($258+1)|0);
 HEAP8[($259)]=0;
 HEAP8[($249)]=0;
 label=57;break;
 case 57: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=58;break; }
 case 58: 
 var $261$0 = ___cxa_find_matching_catch(-1, -1,0); var $261$1 = tempRet0;
 var $262=$261$0;
 ___clang_call_terminate($262);
 throw "Reached an unreachable!";
 case 59: 
 var $263=$12;
 assert(12 % 1 === 0);HEAP32[(($249)>>2)]=HEAP32[(($263)>>2)];HEAP32[((($249)+(4))>>2)]=HEAP32[((($263)+(4))>>2)];HEAP32[((($249)+(8))>>2)]=HEAP32[((($263)+(8))>>2)];
 HEAP32[(($263)>>2)]=0; HEAP32[((($263)+(4))>>2)]=0; HEAP32[((($263)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($12);
 var $264=$162;
 var $265=HEAP32[(($264)>>2)];
 var $266=(($265+36)|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=FUNCTION_TABLE[$267]($166);
 var $storemerge=$268;label=60;break;
 case 60: 
 var $storemerge;
 HEAP32[(($__fd)>>2)]=$storemerge;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($__me)>>2)]=$__mb;
 var $1=$__ct;
 var $2=$__sn;
 var $3=$__sn;
 var $4=(($3+1)|0);
 var $5=(($__sn+8)|0);
 var $6=(($__sn+4)|0);
 var $7=$__sym;
 var $8=$__flags&512;
 var $9=($8|0)==0;
 var $10=$__sym;
 var $11=(($10+1)|0);
 var $12=(($__sym+8)|0);
 var $13=(($__sym+4)|0);
 var $14=($__fd|0)>0;
 var $15=$__grp;
 var $16=$__grp;
 var $17=(($16+1)|0);
 var $18=(($__grp+8)|0);
 var $19=(($__grp+4)|0);
 var $20=(($__ct+8)|0);
 var $21=(((-$__fd))|0);
 var $__p_054=0;var $_055=$__db;label=2;break;
 case 2: 
 var $_055;
 var $__p_054;
 var $23=(($__pat+$__p_054)|0);
 var $24=HEAP8[($23)];
 var $25=(($24<<24)>>24);
 switch(($25|0)){case 2:{ label=12;break;}case 4:{ label=22;break;}case 0:{ label=3;break;}case 1:{ label=4;break;}case 3:{ label=5;break;}default:{var $_2=$_055;label=60;break;}}break;
 case 3: 
 var $27=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$27;
 var $_2=$_055;label=60;break;
 case 4: 
 var $29=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$29;
 var $30=HEAP32[(($1)>>2)];
 var $31=(($30+28)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=FUNCTION_TABLE[$32]($__ct,32);
 var $34=HEAP32[(($__me)>>2)];
 var $35=(($34+1)|0);
 HEAP32[(($__me)>>2)]=$35;
 HEAP8[($34)]=$33;
 var $_2=$_055;label=60;break;
 case 5: 
 var $37=HEAP8[($2)];
 var $38=$37&1;
 var $39=(($38<<24)>>24)==0;
 if($39){label=7;break;}else{label=6;break;}
 case 6: 
 var $41=HEAP32[(($6)>>2)];
 var $45=$41;label=8;break;
 case 7: 
 var $43=($37&255);
 var $44=$43>>>1;
 var $45=$44;label=8;break;
 case 8: 
 var $45;
 var $46=($45|0)==0;
 if($46){var $_2=$_055;label=60;break;}else{label=9;break;}
 case 9: 
 if($39){var $50=$4;label=11;break;}else{label=10;break;}
 case 10: 
 var $49=HEAP32[(($5)>>2)];
 var $50=$49;label=11;break;
 case 11: 
 var $50;
 var $51=HEAP8[($50)];
 var $52=HEAP32[(($__me)>>2)];
 var $53=(($52+1)|0);
 HEAP32[(($__me)>>2)]=$53;
 HEAP8[($52)]=$51;
 var $_2=$_055;label=60;break;
 case 12: 
 var $55=HEAP8[($7)];
 var $56=$55&1;
 var $57=(($56<<24)>>24)==0;
 if($57){label=14;break;}else{label=13;break;}
 case 13: 
 var $59=HEAP32[(($13)>>2)];
 var $63=$59;label=15;break;
 case 14: 
 var $61=($55&255);
 var $62=$61>>>1;
 var $63=$62;label=15;break;
 case 15: 
 var $63;
 var $64=($63|0)==0;
 var $or_cond3=$64|$9;
 if($or_cond3){var $_2=$_055;label=60;break;}else{label=16;break;}
 case 16: 
 if($57){label=18;break;}else{label=17;break;}
 case 17: 
 var $67=HEAP32[(($12)>>2)];
 var $68=HEAP32[(($13)>>2)];
 var $74=$68;var $73=$67;var $72=$67;label=19;break;
 case 18: 
 var $70=($55&255);
 var $71=$70>>>1;
 var $74=$71;var $73=$11;var $72=$11;label=19;break;
 case 19: 
 var $72;
 var $73;
 var $74;
 var $75=(($73+$74)|0);
 var $76=HEAP32[(($__me)>>2)];
 var $77=($72|0)==($75|0);
 if($77){var $_0_lcssa_i_i20=$76;label=21;break;}else{var $_01_i_i18=$76;var $78=$72;label=20;break;}
 case 20: 
 var $78;
 var $_01_i_i18;
 var $79=HEAP8[($78)];
 HEAP8[($_01_i_i18)]=$79;
 var $80=(($78+1)|0);
 var $81=(($_01_i_i18+1)|0);
 var $82=($80|0)==($75|0);
 if($82){var $_0_lcssa_i_i20=$81;label=21;break;}else{var $_01_i_i18=$81;var $78=$80;label=20;break;}
 case 21: 
 var $_0_lcssa_i_i20;
 HEAP32[(($__me)>>2)]=$_0_lcssa_i_i20;
 var $_2=$_055;label=60;break;
 case 22: 
 var $84=HEAP32[(($__me)>>2)];
 var $85=(($_055+1)|0);
 var $__0=($__neg?$85:$_055);
 var $86=($__0>>>0)<($__de>>>0);
 if($86){var $__d_032=$__0;label=24;break;}else{var $__d_0_lcssa=$__0;label=26;break;}
 case 23: 
 var $88=($96>>>0)<($__de>>>0);
 if($88){var $__d_032=$96;label=24;break;}else{var $__d_0_lcssa=$96;label=26;break;}
 case 24: 
 var $__d_032;
 var $89=HEAP8[($__d_032)];
 var $isascii1_i=(($89<<24)>>24)>-1;
 if($isascii1_i){label=25;break;}else{var $__d_0_lcssa=$__d_032;label=26;break;}
 case 25: 
 var $90=(($89<<24)>>24);
 var $91=HEAP32[(($20)>>2)];
 var $92=(($91+($90<<1))|0);
 var $93=HEAP16[(($92)>>1)];
 var $94=$93&2048;
 var $95=(($94<<16)>>16)==0;
 var $96=(($__d_032+1)|0);
 if($95){var $__d_0_lcssa=$__d_032;label=26;break;}else{label=23;break;}
 case 26: 
 var $__d_0_lcssa;
 var $__d_0_lcssa63=$__d_0_lcssa;
 if($14){label=27;break;}else{var $__d_2=$__d_0_lcssa;label=36;break;}
 case 27: 
 var $97=($__d_0_lcssa>>>0)>($__0>>>0);
 if($97){label=28;break;}else{var $__f_0_lcssa76=$__fd;var $__d_1_lcssa78=$__d_0_lcssa;label=32;break;}
 case 28: 
 var $98=$__0;
 var $99=((($98)-($__d_0_lcssa63))|0);
 var $100=($99>>>0)<($21>>>0);
 var $umax=($100?$21:$99);
 var $umax65=$umax;
 var $scevgep66=(($umax65+$__fd)|0);
 var $scevgep6667=$scevgep66;
 var $__d_135=$__d_0_lcssa;var $__f_036=$__fd;var $102=$84;label=29;break;
 case 29: 
 var $102;
 var $__f_036;
 var $__d_135;
 var $103=((($__d_135)-(1))|0);
 var $104=HEAP8[($103)];
 var $105=(($102+1)|0);
 HEAP32[(($__me)>>2)]=$105;
 HEAP8[($102)]=$104;
 var $106=((($__f_036)-(1))|0);
 var $107=($103>>>0)>($__0>>>0);
 var $108=($106|0)>0;
 var $or_cond=$107&$108;
 if($or_cond){label=30;break;}else{label=31;break;}
 case 30: 
 var $_pre=HEAP32[(($__me)>>2)];
 var $__d_135=$103;var $__f_036=$106;var $102=$_pre;label=29;break;
 case 31: 
 var $scevgep68=(($__d_0_lcssa+$umax)|0);
 if($108){var $__f_0_lcssa76=$scevgep6667;var $__d_1_lcssa78=$scevgep68;label=32;break;}else{var $115=0;var $__f_0_lcssa75=$scevgep6667;var $__d_1_lcssa77=$scevgep68;label=33;break;}
 case 32: 
 var $__d_1_lcssa78;
 var $__f_0_lcssa76;
 var $110=HEAP32[(($1)>>2)];
 var $111=(($110+28)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=FUNCTION_TABLE[$112]($__ct,48);
 var $115=$113;var $__f_0_lcssa75=$__f_0_lcssa76;var $__d_1_lcssa77=$__d_1_lcssa78;label=33;break;
 case 33: 
 var $__d_1_lcssa77;
 var $__f_0_lcssa75;
 var $115;
 var $116=($__f_0_lcssa75|0)>0;
 var $117=HEAP32[(($__me)>>2)];
 var $118=(($117+1)|0);
 HEAP32[(($__me)>>2)]=$118;
 if($116){var $__f_142=$__f_0_lcssa75;var $119=$117;label=34;break;}else{var $_lcssa41=$117;label=35;break;}
 case 34: 
 var $119;
 var $__f_142;
 HEAP8[($119)]=$115;
 var $120=((($__f_142)-(1))|0);
 var $121=($120|0)>0;
 var $122=HEAP32[(($__me)>>2)];
 var $123=(($122+1)|0);
 HEAP32[(($__me)>>2)]=$123;
 if($121){var $__f_142=$120;var $119=$122;label=34;break;}else{var $_lcssa41=$122;label=35;break;}
 case 35: 
 var $_lcssa41;
 HEAP8[($_lcssa41)]=$__dp;
 var $__d_2=$__d_1_lcssa77;label=36;break;
 case 36: 
 var $__d_2;
 var $125=($__d_2|0)==($__0|0);
 if($125){label=37;break;}else{label=38;break;}
 case 37: 
 var $127=HEAP32[(($1)>>2)];
 var $128=(($127+28)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=FUNCTION_TABLE[$129]($__ct,48);
 var $131=HEAP32[(($__me)>>2)];
 var $132=(($131+1)|0);
 HEAP32[(($__me)>>2)]=$132;
 HEAP8[($131)]=$130;
 label=57;break;
 case 38: 
 var $134=HEAP8[($15)];
 var $135=$134&1;
 var $136=(($135<<24)>>24)==0;
 if($136){label=40;break;}else{label=39;break;}
 case 39: 
 var $138=HEAP32[(($19)>>2)];
 var $142=$138;label=41;break;
 case 40: 
 var $140=($134&255);
 var $141=$140>>>1;
 var $142=$141;label=41;break;
 case 41: 
 var $142;
 var $143=($142|0)==0;
 if($143){var $__d_348=$__d_2;var $__ng_049=0;var $__ig_050=0;var $__gl_051=-1;label=45;break;}else{label=42;break;}
 case 42: 
 if($136){var $147=$17;label=44;break;}else{label=43;break;}
 case 43: 
 var $146=HEAP32[(($18)>>2)];
 var $147=$146;label=44;break;
 case 44: 
 var $147;
 var $148=HEAP8[($147)];
 var $149=(($148<<24)>>24);
 var $__d_348=$__d_2;var $__ng_049=0;var $__ig_050=0;var $__gl_051=$149;label=45;break;
 case 45: 
 var $__gl_051;
 var $__ig_050;
 var $__ng_049;
 var $__d_348;
 var $150=($__ng_049|0)==($__gl_051|0);
 if($150){label=46;break;}else{var $__gl_1=$__gl_051;var $__ig_1=$__ig_050;var $__ng_1=$__ng_049;label=56;break;}
 case 46: 
 var $152=HEAP32[(($__me)>>2)];
 var $153=(($152+1)|0);
 HEAP32[(($__me)>>2)]=$153;
 HEAP8[($152)]=$__ts;
 var $154=((($__ig_050)+(1))|0);
 var $155=HEAP8[($15)];
 var $156=$155&1;
 var $157=(($156<<24)>>24)==0;
 if($157){label=48;break;}else{label=47;break;}
 case 47: 
 var $159=HEAP32[(($19)>>2)];
 var $163=$159;label=49;break;
 case 48: 
 var $161=($155&255);
 var $162=$161>>>1;
 var $163=$162;label=49;break;
 case 49: 
 var $163;
 var $164=($154>>>0)<($163>>>0);
 if($164){label=50;break;}else{var $__gl_1=$__gl_051;var $__ig_1=$154;var $__ng_1=0;label=56;break;}
 case 50: 
 if($157){var $168=$17;label=52;break;}else{label=51;break;}
 case 51: 
 var $167=HEAP32[(($18)>>2)];
 var $168=$167;label=52;break;
 case 52: 
 var $168;
 var $169=(($168+$154)|0);
 var $170=HEAP8[($169)];
 var $171=(($170<<24)>>24)==127;
 if($171){var $__gl_1=-1;var $__ig_1=$154;var $__ng_1=0;label=56;break;}else{label=53;break;}
 case 53: 
 if($157){var $175=$17;label=55;break;}else{label=54;break;}
 case 54: 
 var $174=HEAP32[(($18)>>2)];
 var $175=$174;label=55;break;
 case 55: 
 var $175;
 var $176=(($175+$154)|0);
 var $177=HEAP8[($176)];
 var $178=(($177<<24)>>24);
 var $__gl_1=$178;var $__ig_1=$154;var $__ng_1=0;label=56;break;
 case 56: 
 var $__ng_1;
 var $__ig_1;
 var $__gl_1;
 var $180=((($__d_348)-(1))|0);
 var $181=HEAP8[($180)];
 var $182=HEAP32[(($__me)>>2)];
 var $183=(($182+1)|0);
 HEAP32[(($__me)>>2)]=$183;
 HEAP8[($182)]=$181;
 var $184=((($__ng_1)+(1))|0);
 var $185=($180|0)==($__0|0);
 if($185){label=57;break;}else{var $__d_348=$180;var $__ng_049=$184;var $__ig_050=$__ig_1;var $__gl_051=$__gl_1;label=45;break;}
 case 57: 
 var $186=HEAP32[(($__me)>>2)];
 var $187=($84|0)==($186|0);
 if($187){var $_2=$__0;label=60;break;}else{label=58;break;}
 case 58: 
 var $188=((($186)-(1))|0);
 var $189=($188>>>0)>($84>>>0);
 if($189){var $_012_i_i=$84;var $190=$188;label=59;break;}else{var $_2=$__0;label=60;break;}
 case 59: 
 var $190;
 var $_012_i_i;
 var $191=HEAP8[($_012_i_i)];
 var $192=HEAP8[($190)];
 HEAP8[($_012_i_i)]=$192;
 HEAP8[($190)]=$191;
 var $193=(($_012_i_i+1)|0);
 var $194=((($190)-(1))|0);
 var $195=($193>>>0)<($194>>>0);
 if($195){var $_012_i_i=$193;var $190=$194;label=59;break;}else{var $_2=$__0;label=60;break;}
 case 60: 
 var $_2;
 var $196=((($__p_054)+(1))|0);
 var $197=($196>>>0)<4;
 if($197){var $__p_054=$196;var $_055=$_2;label=2;break;}else{label=61;break;}
 case 61: 
 var $199=HEAP8[($2)];
 var $200=$199&1;
 var $201=(($200<<24)>>24)==0;
 if($201){label=63;break;}else{label=62;break;}
 case 62: 
 var $203=HEAP32[(($6)>>2)];
 var $207=$203;label=64;break;
 case 63: 
 var $205=($199&255);
 var $206=$205>>>1;
 var $207=$206;label=64;break;
 case 64: 
 var $207;
 var $208=($207>>>0)>1;
 if($208){label=65;break;}else{label=71;break;}
 case 65: 
 if($201){label=67;break;}else{label=66;break;}
 case 66: 
 var $211=HEAP32[(($5)>>2)];
 var $212=HEAP32[(($6)>>2)];
 var $217=$212;var $216=$211;var $_pn=$211;label=68;break;
 case 67: 
 var $214=($199&255);
 var $215=$214>>>1;
 var $217=$215;var $216=$4;var $_pn=$4;label=68;break;
 case 68: 
 var $_pn;
 var $216;
 var $217;
 var $218=(($_pn+1)|0);
 var $219=(($216+$217)|0);
 var $220=HEAP32[(($__me)>>2)];
 var $221=($218|0)==($219|0);
 if($221){var $_0_lcssa_i_i=$220;label=70;break;}else{var $_01_i_i=$220;var $222=$218;label=69;break;}
 case 69: 
 var $222;
 var $_01_i_i;
 var $223=HEAP8[($222)];
 HEAP8[($_01_i_i)]=$223;
 var $224=(($222+1)|0);
 var $225=(($_01_i_i+1)|0);
 var $226=($224|0)==($219|0);
 if($226){var $_0_lcssa_i_i=$225;label=70;break;}else{var $_01_i_i=$225;var $222=$224;label=69;break;}
 case 70: 
 var $_0_lcssa_i_i;
 HEAP32[(($__me)>>2)]=$_0_lcssa_i_i;
 label=71;break;
 case 71: 
 var $228=$__flags&176;
 if(($228|0)==32){ label=72;break;}else if(($228|0)==16){ label=74;break;}else{label=73;break;}
 case 72: 
 var $230=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$230;
 label=74;break;
 case 73: 
 HEAP32[(($__mi)>>2)]=$__mb;
 label=74;break;
 case 74: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__digits){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__loc=(sp)+(16);
 var $__pat=(sp)+(24);
 var $tmpcast=$__pat;
 var $__dp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__ts=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__grp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 100)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $2=(($__loc)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $5=HEAP32[((13432)>>2)];
 var $6=($5|0)==-1;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($__p_i_i_i_i)|0);
 HEAP32[(($8)>>2)]=13432;
 var $9=(($__p_i_i_i_i+4)|0);
 HEAP32[(($9)>>2)]=(26);
 var $10=(($__p_i_i_i_i+8)|0);
 HEAP32[(($10)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13432,$4,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=43;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $11=HEAP32[((13436)>>2)];
 var $12=((($11)-(1))|0);
 var $13=(($3+12)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($3+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$14;
 var $18=$16;
 var $19=((($17)-($18))|0);
 var $20=$19>>2;
 var $21=($20>>>0)>($12>>>0);
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=(($16+($12<<2))|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==0;
 if($24){label=5;break;}else{label=7;break;}
 case 5: 
 var $25=___cxa_allocate_exception(4);
 var $26=$25;
 __ZNSt8bad_castC2Ev($26);
 (function() { try { __THREW__ = 0; return ___cxa_throw($25,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=43;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $28=$23;
 var $29=$__digits;
 var $30=HEAP8[($29)];
 var $31=$30&1;
 var $32=(($31<<24)>>24)==0;
 if($32){label=9;break;}else{label=8;break;}
 case 8: 
 var $34=(($__digits+4)|0);
 var $35=HEAP32[(($34)>>2)];
 var $39=$35;label=10;break;
 case 9: 
 var $37=($30&255);
 var $38=$37>>>1;
 var $39=$38;label=10;break;
 case 10: 
 var $39;
 var $40=($39|0)==0;
 if($40){var $57=0;label=16;break;}else{label=11;break;}
 case 11: 
 if($32){label=13;break;}else{label=12;break;}
 case 12: 
 var $43=(($__digits+8)|0);
 var $44=HEAP32[(($43)>>2)];
 var $48=$44;label=14;break;
 case 13: 
 var $46=$__digits;
 var $47=(($46+1)|0);
 var $48=$47;label=14;break;
 case 14: 
 var $48;
 var $49=HEAP8[($48)];
 var $50=$23;
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+28)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$53]($28,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=43;break; }
 case 15: 
 var $55=(($49<<24)>>24)==(($54<<24)>>24);
 var $57=$55;label=16;break;
 case 16: 
 var $57;
 HEAP32[(($__pat)>>2)]=0;
 var $this2_i_i_i=$__grp;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $this2_i_i_i5=$__sym;
 HEAP32[(($this2_i_i_i5)>>2)]=0; HEAP32[((($this2_i_i_i5)+(4))>>2)]=0; HEAP32[((($this2_i_i_i5)+(8))>>2)]=0;
 var $this2_i_i_i6=$__sn;
 HEAP32[(($this2_i_i_i6)>>2)]=0; HEAP32[((($this2_i_i_i6)+(4))>>2)]=0; HEAP32[((($this2_i_i_i6)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$57,$__loc,$tmpcast,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=44;break; }
 case 17: 
 var $59=(($__mbuf)|0);
 var $$etemp$2$0=100;
 var $$etemp$2$1=0;

 var $60=HEAP8[($29)];
 var $61=$60&1;
 var $62=(($61<<24)>>24)==0;
 if($62){label=19;break;}else{label=18;break;}
 case 18: 
 var $64=(($__digits+4)|0);
 var $65=HEAP32[(($64)>>2)];
 var $69=$65;label=20;break;
 case 19: 
 var $67=($60&255);
 var $68=$67>>>1;
 var $69=$68;label=20;break;
 case 20: 
 var $69;
 var $70=HEAP32[(($__fd)>>2)];
 var $71=($69|0)>($70|0);
 if($71){label=21;break;}else{label=31;break;}
 case 21: 
 if($62){label=23;break;}else{label=22;break;}
 case 22: 
 var $74=(($__digits+4)|0);
 var $75=HEAP32[(($74)>>2)];
 var $79=$75;label=24;break;
 case 23: 
 var $77=($60&255);
 var $78=$77>>>1;
 var $79=$78;label=24;break;
 case 24: 
 var $79;
 var $80=((($79)-($70))|0);
 var $81=$80<<1;
 var $82=HEAP8[($this2_i_i_i6)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){label=26;break;}else{label=25;break;}
 case 25: 
 var $86=(($__sn+4)|0);
 var $87=HEAP32[(($86)>>2)];
 var $91=$87;label=27;break;
 case 26: 
 var $89=($82&255);
 var $90=$89>>>1;
 var $91=$90;label=27;break;
 case 27: 
 var $91;
 var $92=HEAP8[($this2_i_i_i5)];
 var $93=$92&1;
 var $94=(($93<<24)>>24)==0;
 if($94){label=29;break;}else{label=28;break;}
 case 28: 
 var $96=(($__sym+4)|0);
 var $97=HEAP32[(($96)>>2)];
 var $101=$97;label=30;break;
 case 29: 
 var $99=($92&255);
 var $100=$99>>>1;
 var $101=$100;label=30;break;
 case 30: 
 var $101;
 var $102=$81|1;
 var $103=((($91)+($102))|0);
 var $104=((($103)+($101))|0);
 var $_pn=$104;label=38;break;
 case 31: 
 var $106=HEAP8[($this2_i_i_i6)];
 var $107=$106&1;
 var $108=(($107<<24)>>24)==0;
 if($108){label=33;break;}else{label=32;break;}
 case 32: 
 var $110=(($__sn+4)|0);
 var $111=HEAP32[(($110)>>2)];
 var $115=$111;label=34;break;
 case 33: 
 var $113=($106&255);
 var $114=$113>>>1;
 var $115=$114;label=34;break;
 case 34: 
 var $115;
 var $116=HEAP8[($this2_i_i_i5)];
 var $117=$116&1;
 var $118=(($117<<24)>>24)==0;
 if($118){label=36;break;}else{label=35;break;}
 case 35: 
 var $120=(($__sym+4)|0);
 var $121=HEAP32[(($120)>>2)];
 var $125=$121;label=37;break;
 case 36: 
 var $123=($116&255);
 var $124=$123>>>1;
 var $125=$124;label=37;break;
 case 37: 
 var $125;
 var $126=((($115)+(2))|0);
 var $127=((($126)+($125))|0);
 var $_pn=$127;label=38;break;
 case 38: 
 var $_pn;
 var $129=((($_pn)+($70))|0);
 var $130=($129>>>0)>100;
 if($130){label=39;break;}else{var $__mb_0=$59;var $153=0;var $152=$60;label=47;break;}
 case 39: 
 var $131=_malloc($129);
 var $132=($131|0)==0;
 if($132){label=40;break;}else{var $__mb_0=$131;var $153=$131;var $152=$60;label=47;break;}
 case 40: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 var $_pre=HEAP8[($29)];
 var $__mb_0=0;var $153=0;var $152=$_pre;label=47;break;
 case 42: 
 var $134$0 = ___cxa_find_matching_catch(-1, -1); var $134$1 = tempRet0;
 var $135=$134$0;
 var $136=$134$1;
 var $_0=$135;var $_01=$136;label=55;break;
 case 43: 
 var $138$0 = ___cxa_find_matching_catch(-1, -1); var $138$1 = tempRet0;
 var $139=$138$0;
 var $140=$138$1;
 var $_1=$139;var $_12=$140;label=56;break;
 case 44: 
 var $142$0 = ___cxa_find_matching_catch(-1, -1); var $142$1 = tempRet0;
 var $143=$142$0;
 var $144=$142$1;
 var $_0=$143;var $_01=$144;label=55;break;
 case 45: 
 var $146$0 = ___cxa_find_matching_catch(-1, -1); var $146$1 = tempRet0;
 var $147=$146$0;
 var $148=$146$1;
 var $149=($153|0)==0;
 if($149){var $_0=$147;var $_01=$148;label=55;break;}else{label=46;break;}
 case 46: 
 _free($153);
 var $_0=$147;var $_01=$148;label=55;break;
 case 47: 
 var $152;
 var $153;
 var $__mb_0;
 var $154=(($__iob+4)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=$152&1;
 var $157=(($156<<24)>>24)==0;
 if($157){label=49;break;}else{label=48;break;}
 case 48: 
 var $159=(($__digits+8)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=(($__digits+4)|0);
 var $162=HEAP32[(($161)>>2)];
 var $169=$162;var $168=$160;label=50;break;
 case 49: 
 var $164=$__digits;
 var $165=(($164+1)|0);
 var $166=($152&255);
 var $167=$166>>>1;
 var $169=$167;var $168=$165;label=50;break;
 case 50: 
 var $168;
 var $169;
 var $170=(($168+$169)|0);
 var $171=HEAP8[($__dp)];
 var $172=HEAP8[($__ts)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb_0,$__mi,$__me,$155,$168,$170,$28,$57,$tmpcast,$171,$172,$__grp,$__sym,$__sn,$70) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=45;break; }
 case 51: 
 var $174=(($__s)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(($1)|0);
 HEAP32[(($176)>>2)]=$175;
 var $177=HEAP32[(($__mi)>>2)];
 var $178=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$1,$__mb_0,$177,$178,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=45;break; }
 case 52: 
 var $180=($153|0)==0;
 if($180){label=54;break;}else{label=53;break;}
 case 53: 
 _free($153);
 label=54;break;
 case 54: 
 var $$etemp$3$0=100;
 var $$etemp$3$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $182=HEAP32[(($2)>>2)];
 var $183=(($182)|0);
 var $184=__ZNSt3__114__shared_count16__release_sharedEv($183);
 STACKTOP=sp;return;
 case 55: 
 var $_01;
 var $_0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $_1=$_0;var $_12=$_01;label=56;break;
 case 56: 
 var $_12;
 var $_1;
 var $186=HEAP32[(($2)>>2)];
 var $187=(($186)|0);
 var $188=__ZNSt3__114__shared_count16__release_sharedEv($187);
 var $189$0=$_1;
 var $189$1=0;
 var $190$0=$189$0;
 var $190$1=$_12;
 ___resumeException($190$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__units){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+544)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__buf=(sp)+(16);
 var $__bb=(sp)+(120);
 var $__digits=(sp)+(128);
 var $__loc=(sp)+(528);
 var $__pat=(sp)+(536);
 var $tmpcast=$__pat;
 var $__dp=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__ts=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__grp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 400)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__buf)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 HEAP32[(($__bb)>>2)]=$2;
 var $3=$__digits;
 var $$etemp$1$0=400;
 var $$etemp$1$1=0;

 var $4=(($__digits)|0);
 var $5=_snprintf($2,100,408,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)); STACKTOP=tempVarArgs;
 var $6=($5>>>0)>99;
 if($6){label=2;break;}else{var $__db_0=$4;var $__n_0=$5;var $41=0;var $40=0;label=15;break;}
 case 2: 
 var $8=HEAP8[(13992)];
 var $9=(($8<<24)>>24)==0;
 if($9){label=3;break;}else{label=7;break;}
 case 3: 
 var $11=___cxa_guard_acquire(13992);
 var $12=($11|0)==0;
 if($12){label=7;break;}else{label=4;break;}
 case 4: 
 var $14=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((11888)>>2)]=$14;

 label=7;break;
 case 6: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1); var $17$1 = tempRet0;

 var $eh_lpad_body$1=$17$1;var $eh_lpad_body$0=$17$0;var $30=0;var $29=0;label=12;break;
 case 7: 
 var $19=HEAP32[((11888)>>2)];
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb,$19,408,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=8;break; } else { var $27=0;var $26=0;label=11;break; }
 case 8: 
 var $22=HEAP32[(($__bb)>>2)];
 var $23=($22|0)==0;
 if($23){label=9;break;}else{var $33=$22;label=13;break;}
 case 9: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { var $27=0;var $26=0;label=11;break; }
 case 10: 
 var $_pre=HEAP32[(($__bb)>>2)];
 var $33=$_pre;label=13;break;
 case 11: 
 var $26;
 var $27;
 var $28$0 = ___cxa_find_matching_catch(-1, -1); var $28$1 = tempRet0;
 var $eh_lpad_body$1=$28$1;var $eh_lpad_body$0=$28$0;var $30=$27;var $29=$26;label=12;break;
 case 12: 
 var $29;
 var $30;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $31=$eh_lpad_body$0;
 var $32=$eh_lpad_body$1;
 var $_2=$31;var $_23=$32;var $195=$30;var $194=$29;label=60;break;
 case 13: 
 var $33;
 var $34=$20<<2;
 var $35=_malloc($34);
 var $36=$35;
 var $37=($35|0)==0;
 if($37){label=14;break;}else{var $__db_0=$36;var $__n_0=$20;var $41=$36;var $40=$33;label=15;break;}
 case 14: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__db_0=0;var $__n_0=$20;var $41=0;var $40=$33;label=15;break; } else { var $27=0;var $26=$33;label=11;break; }
 case 15: 
 var $40;
 var $41;
 var $__n_0;
 var $__db_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { var $27=$41;var $26=$40;label=11;break; }
 case 16: 
 var $43=(($__loc)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=$__p_i_i_i_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $46=HEAP32[((13424)>>2)];
 var $47=($46|0)==-1;
 if($47){label=18;break;}else{label=17;break;}
 case 17: 
 var $49=(($__p_i_i_i_i)|0);
 HEAP32[(($49)>>2)]=13424;
 var $50=(($__p_i_i_i_i+4)|0);
 HEAP32[(($50)>>2)]=(26);
 var $51=(($__p_i_i_i_i+8)|0);
 HEAP32[(($51)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13424,$45,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=45;break; }
 case 18: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $52=HEAP32[((13428)>>2)];
 var $53=((($52)-(1))|0);
 var $54=(($44+12)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($44+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=$55;
 var $59=$57;
 var $60=((($58)-($59))|0);
 var $61=$60>>2;
 var $62=($61>>>0)>($53>>>0);
 if($62){label=19;break;}else{label=20;break;}
 case 19: 
 var $63=(($57+($53<<2))|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=($64|0)==0;
 if($65){label=20;break;}else{label=22;break;}
 case 20: 
 var $66=___cxa_allocate_exception(4);
 var $67=$66;
 __ZNSt8bad_castC2Ev($67);
 (function() { try { __THREW__ = 0; return ___cxa_throw($66,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=45;break; }
 case 21: 
 throw "Reached an unreachable!";
 case 22: 
 var $69=$64;
 var $70=HEAP32[(($__bb)>>2)];
 var $71=(($70+$__n_0)|0);
 var $72=$64;
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+48)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$75]($69,$70,$71,$__db_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=45;break; }
 case 23: 
 var $77=($__n_0|0)==0;
 if($77){var $83=0;label=25;break;}else{label=24;break;}
 case 24: 
 var $79=HEAP32[(($__bb)>>2)];
 var $80=HEAP8[($79)];
 var $81=(($80<<24)>>24)==45;
 var $83=$81;label=25;break;
 case 25: 
 var $83;
 HEAP32[(($__pat)>>2)]=0;
 var $this2_i_i_i=$__grp;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $this2_i_i_i6=$__sym;
 HEAP32[(($this2_i_i_i6)>>2)]=0; HEAP32[((($this2_i_i_i6)+(4))>>2)]=0; HEAP32[((($this2_i_i_i6)+(8))>>2)]=0;
 var $this2_i_i_i7=$__sn;
 HEAP32[(($this2_i_i_i7)>>2)]=0; HEAP32[((($this2_i_i_i7)+(4))>>2)]=0; HEAP32[((($this2_i_i_i7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$83,$__loc,$tmpcast,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=46;break; }
 case 26: 
 var $85=$__mbuf;
 var $$etemp$4$0=400;
 var $$etemp$4$1=0;

 var $86=(($__mbuf)|0);
 var $87=HEAP32[(($__fd)>>2)];
 var $88=($__n_0|0)>($87|0);
 if($88){label=27;break;}else{label=34;break;}
 case 27: 
 var $90=((($__n_0)-($87))|0);
 var $91=$90<<1;
 var $92=HEAP8[($this2_i_i_i7)];
 var $93=$92&1;
 var $94=(($93<<24)>>24)==0;
 if($94){label=29;break;}else{label=28;break;}
 case 28: 
 var $96=(($__sn+4)|0);
 var $97=HEAP32[(($96)>>2)];
 var $101=$97;label=30;break;
 case 29: 
 var $99=($92&255);
 var $100=$99>>>1;
 var $101=$100;label=30;break;
 case 30: 
 var $101;
 var $102=HEAP8[($this2_i_i_i6)];
 var $103=$102&1;
 var $104=(($103<<24)>>24)==0;
 if($104){label=32;break;}else{label=31;break;}
 case 31: 
 var $106=(($__sym+4)|0);
 var $107=HEAP32[(($106)>>2)];
 var $111=$107;label=33;break;
 case 32: 
 var $109=($102&255);
 var $110=$109>>>1;
 var $111=$110;label=33;break;
 case 33: 
 var $111;
 var $112=$91|1;
 var $113=((($101)+($112))|0);
 var $114=((($113)+($111))|0);
 var $_pn=$114;label=41;break;
 case 34: 
 var $116=HEAP8[($this2_i_i_i7)];
 var $117=$116&1;
 var $118=(($117<<24)>>24)==0;
 if($118){label=36;break;}else{label=35;break;}
 case 35: 
 var $120=(($__sn+4)|0);
 var $121=HEAP32[(($120)>>2)];
 var $125=$121;label=37;break;
 case 36: 
 var $123=($116&255);
 var $124=$123>>>1;
 var $125=$124;label=37;break;
 case 37: 
 var $125;
 var $126=HEAP8[($this2_i_i_i6)];
 var $127=$126&1;
 var $128=(($127<<24)>>24)==0;
 if($128){label=39;break;}else{label=38;break;}
 case 38: 
 var $130=(($__sym+4)|0);
 var $131=HEAP32[(($130)>>2)];
 var $135=$131;label=40;break;
 case 39: 
 var $133=($126&255);
 var $134=$133>>>1;
 var $135=$134;label=40;break;
 case 40: 
 var $135;
 var $136=((($125)+(2))|0);
 var $137=((($136)+($135))|0);
 var $_pn=$137;label=41;break;
 case 41: 
 var $_pn;
 var $139=((($_pn)+($87))|0);
 var $140=($139>>>0)>100;
 if($140){label=42;break;}else{var $__mb_0=$86;var $165=0;label=49;break;}
 case 42: 
 var $141=$139<<2;
 var $142=_malloc($141);
 var $143=$142;
 var $144=($142|0)==0;
 if($144){label=43;break;}else{var $__mb_0=$143;var $165=$143;label=49;break;}
 case 43: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__mb_0=0;var $165=0;label=49;break; } else { label=44;break; }
 case 44: 
 var $146$0 = ___cxa_find_matching_catch(-1, -1); var $146$1 = tempRet0;
 var $147=$146$0;
 var $148=$146$1;
 var $_0=$147;var $_01=$148;label=58;break;
 case 45: 
 var $150$0 = ___cxa_find_matching_catch(-1, -1); var $150$1 = tempRet0;
 var $151=$150$0;
 var $152=$150$1;
 var $_1=$151;var $_12=$152;label=59;break;
 case 46: 
 var $154$0 = ___cxa_find_matching_catch(-1, -1); var $154$1 = tempRet0;
 var $155=$154$0;
 var $156=$154$1;
 var $_0=$155;var $_01=$156;label=58;break;
 case 47: 
 var $158$0 = ___cxa_find_matching_catch(-1, -1); var $158$1 = tempRet0;
 var $159=$158$0;
 var $160=$158$1;
 var $161=($165|0)==0;
 if($161){var $_0=$159;var $_01=$160;label=58;break;}else{label=48;break;}
 case 48: 
 var $163=$165;
 _free($163);
 var $_0=$159;var $_01=$160;label=58;break;
 case 49: 
 var $165;
 var $__mb_0;
 var $166=(($__iob+4)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(($__db_0+($__n_0<<2))|0);
 var $169=HEAP32[(($__dp)>>2)];
 var $170=HEAP32[(($__ts)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb_0,$__mi,$__me,$167,$__db_0,$168,$69,$83,$tmpcast,$169,$170,$__grp,$__sym,$__sn,$87) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=47;break; }
 case 50: 
 var $172=(($__s)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($1)|0);
 HEAP32[(($174)>>2)]=$173;
 var $175=HEAP32[(($__mi)>>2)];
 var $176=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$1,$__mb_0,$175,$176,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=47;break; }
 case 51: 
 var $178=($165|0)==0;
 if($178){label=53;break;}else{label=52;break;}
 case 52: 
 var $180=$165;
 _free($180);
 label=53;break;
 case 53: 
 var $$etemp$5$0=400;
 var $$etemp$5$1=0;

 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $181=HEAP32[(($43)>>2)];
 var $182=(($181)|0);
 var $183=__ZNSt3__114__shared_count16__release_sharedEv($182);
 var $184=($41|0)==0;
 if($184){label=55;break;}else{label=54;break;}
 case 54: 
 var $186=$41;
 _free($186);
 label=55;break;
 case 55: 
 var $187=($40|0)==0;
 if($187){label=57;break;}else{label=56;break;}
 case 56: 
 _free($40);
 label=57;break;
 case 57: 
 var $$etemp$6$0=400;
 var $$etemp$6$1=0;

 var $$etemp$7$0=100;
 var $$etemp$7$1=0;

 STACKTOP=sp;return;
 case 58: 
 var $_01;
 var $_0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $_1=$_0;var $_12=$_01;label=59;break;
 case 59: 
 var $_12;
 var $_1;
 var $190=HEAP32[(($43)>>2)];
 var $191=(($190)|0);
 var $192=__ZNSt3__114__shared_count16__release_sharedEv($191);
 var $_2=$_1;var $_23=$_12;var $195=$41;var $194=$40;label=60;break;
 case 60: 
 var $194;
 var $195;
 var $_23;
 var $_2;
 var $196=($195|0)==0;
 if($196){label=62;break;}else{label=61;break;}
 case 61: 
 var $198=$195;
 _free($198);
 label=62;break;
 case 62: 
 var $199=($194|0)==0;
 if($199){label=64;break;}else{label=63;break;}
 case 63: 
 _free($194);
 label=64;break;
 case 64: 
 var $201$0=$_2;
 var $201$1=0;
 var $202$0=$201$0;
 var $202$1=$_23;
 ___resumeException($202$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i8=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $1=(sp)+(32);
 var $tmpcast3=$1;
 var $2=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast2=$3;
 var $4=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $5=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $6=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $7=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast1=$7;
 var $8=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $9=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast=$9;
 var $10=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $11=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $12=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $13=(($__loc)|0);
 var $14=HEAP32[(($13)>>2)];
 if($__intl){label=2;break;}else{label=31;break;}
 case 2: 
 var $16=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $17=HEAP32[((13888)>>2)];
 var $18=($17|0)==-1;
 if($18){label=4;break;}else{label=3;break;}
 case 3: 
 var $20=(($__p_i_i_i_i)|0);
 HEAP32[(($20)>>2)]=13888;
 var $21=(($__p_i_i_i_i+4)|0);
 HEAP32[(($21)>>2)]=(26);
 var $22=(($__p_i_i_i_i+8)|0);
 HEAP32[(($22)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(13888,$16,260);
 label=4;break;
 case 4: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $23=HEAP32[((13892)>>2)];
 var $24=((($23)-(1))|0);
 var $25=(($14+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($14+8)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$26;
 var $30=$28;
 var $31=((($29)-($30))|0);
 var $32=$31>>2;
 var $33=($32>>>0)>($24>>>0);
 if($33){label=5;break;}else{label=6;break;}
 case 5: 
 var $34=(($28+($24<<2))|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==0;
 if($36){label=6;break;}else{label=7;break;}
 case 6: 
 var $37=___cxa_allocate_exception(4);
 var $38=$37;
 __ZNSt8bad_castC2Ev($38);
 ___cxa_throw($37,8200,(356));
 throw "Reached an unreachable!";
 case 7: 
 var $39=$35;
 var $40=$35;
 var $41=HEAP32[(($40)>>2)];
 if($__neg){label=8;break;}else{label=14;break;}
 case 8: 
 var $43=(($41+44)|0);
 var $44=HEAP32[(($43)>>2)];
 FUNCTION_TABLE[$44]($tmpcast3,$39);
 var $45=$__pat;
 var $46=HEAP32[(($1)>>2)];
 tempBigInt=$46;HEAP8[($45)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($45)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($45)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($45)+(3))|0)]=tempBigInt&0xff;
 var $47=$35;
 var $48=HEAP32[(($47)>>2)];
 var $49=(($48+32)|0);
 var $50=HEAP32[(($49)>>2)];
 FUNCTION_TABLE[$50]($2,$39);
 var $51=$__sn;
 var $52=HEAP8[($51)];
 var $53=$52&1;
 var $54=(($53<<24)>>24)==0;
 if($54){label=10;break;}else{label=9;break;}
 case 9: 
 var $56=(($__sn+8)|0);
 var $57=HEAP32[(($56)>>2)];
 HEAP32[(($57)>>2)]=0;
 var $58=(($__sn+4)|0);
 HEAP32[(($58)>>2)]=0;
 label=11;break;
 case 10: 
 var $60=(($__sn+4)|0);
 HEAP32[(($60)>>2)]=0;
 HEAP8[($51)]=0;
 label=11;break;
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=12;break; }
 case 12: 
 var $62$0 = ___cxa_find_matching_catch(-1, -1,0); var $62$1 = tempRet0;
 var $63=$62$0;
 ___clang_call_terminate($63);
 throw "Reached an unreachable!";
 case 13: 
 var $64=$2;
 assert(12 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[(($64)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((($64)+(4))>>2)];HEAP32[((($51)+(8))>>2)]=HEAP32[((($64)+(8))>>2)];
 HEAP32[(($64)>>2)]=0; HEAP32[((($64)+(4))>>2)]=0; HEAP32[((($64)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2);
 label=20;break;
 case 14: 
 var $66=(($41+40)|0);
 var $67=HEAP32[(($66)>>2)];
 FUNCTION_TABLE[$67]($tmpcast2,$39);
 var $68=$__pat;
 var $69=HEAP32[(($3)>>2)];
 tempBigInt=$69;HEAP8[($68)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($68)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($68)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($68)+(3))|0)]=tempBigInt&0xff;
 var $70=$35;
 var $71=HEAP32[(($70)>>2)];
 var $72=(($71+28)|0);
 var $73=HEAP32[(($72)>>2)];
 FUNCTION_TABLE[$73]($4,$39);
 var $74=$__sn;
 var $75=HEAP8[($74)];
 var $76=$75&1;
 var $77=(($76<<24)>>24)==0;
 if($77){label=16;break;}else{label=15;break;}
 case 15: 
 var $79=(($__sn+8)|0);
 var $80=HEAP32[(($79)>>2)];
 HEAP32[(($80)>>2)]=0;
 var $81=(($__sn+4)|0);
 HEAP32[(($81)>>2)]=0;
 label=17;break;
 case 16: 
 var $83=(($__sn+4)|0);
 HEAP32[(($83)>>2)]=0;
 HEAP8[($74)]=0;
 label=17;break;
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=18;break; }
 case 18: 
 var $85$0 = ___cxa_find_matching_catch(-1, -1,0); var $85$1 = tempRet0;
 var $86=$85$0;
 ___clang_call_terminate($86);
 throw "Reached an unreachable!";
 case 19: 
 var $87=$4;
 assert(12 % 1 === 0);HEAP32[(($74)>>2)]=HEAP32[(($87)>>2)];HEAP32[((($74)+(4))>>2)]=HEAP32[((($87)+(4))>>2)];HEAP32[((($74)+(8))>>2)]=HEAP32[((($87)+(8))>>2)];
 HEAP32[(($87)>>2)]=0; HEAP32[((($87)+(4))>>2)]=0; HEAP32[((($87)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($4);
 label=20;break;
 case 20: 
 var $89=$35;
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+12)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=FUNCTION_TABLE[$92]($39);
 HEAP32[(($__dp)>>2)]=$93;
 var $94=HEAP32[(($89)>>2)];
 var $95=(($94+16)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=FUNCTION_TABLE[$96]($39);
 HEAP32[(($__ts)>>2)]=$97;
 var $98=$35;
 var $99=HEAP32[(($98)>>2)];
 var $100=(($99+20)|0);
 var $101=HEAP32[(($100)>>2)];
 FUNCTION_TABLE[$101]($5,$39);
 var $102=$__grp;
 var $103=HEAP8[($102)];
 var $104=$103&1;
 var $105=(($104<<24)>>24)==0;
 if($105){label=22;break;}else{label=21;break;}
 case 21: 
 var $107=(($__grp+8)|0);
 var $108=HEAP32[(($107)>>2)];
 HEAP8[($108)]=0;
 var $109=(($__grp+4)|0);
 HEAP32[(($109)>>2)]=0;
 label=23;break;
 case 22: 
 var $111=$__grp;
 var $112=(($111+1)|0);
 HEAP8[($112)]=0;
 HEAP8[($102)]=0;
 label=23;break;
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=24;break; }
 case 24: 
 var $114$0 = ___cxa_find_matching_catch(-1, -1,0); var $114$1 = tempRet0;
 var $115=$114$0;
 ___clang_call_terminate($115);
 throw "Reached an unreachable!";
 case 25: 
 var $116=$5;
 assert(12 % 1 === 0);HEAP32[(($102)>>2)]=HEAP32[(($116)>>2)];HEAP32[((($102)+(4))>>2)]=HEAP32[((($116)+(4))>>2)];HEAP32[((($102)+(8))>>2)]=HEAP32[((($116)+(8))>>2)];
 HEAP32[(($116)>>2)]=0; HEAP32[((($116)+(4))>>2)]=0; HEAP32[((($116)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
 var $117=$35;
 var $118=HEAP32[(($117)>>2)];
 var $119=(($118+24)|0);
 var $120=HEAP32[(($119)>>2)];
 FUNCTION_TABLE[$120]($6,$39);
 var $121=$__sym;
 var $122=HEAP8[($121)];
 var $123=$122&1;
 var $124=(($123<<24)>>24)==0;
 if($124){label=27;break;}else{label=26;break;}
 case 26: 
 var $126=(($__sym+8)|0);
 var $127=HEAP32[(($126)>>2)];
 HEAP32[(($127)>>2)]=0;
 var $128=(($__sym+4)|0);
 HEAP32[(($128)>>2)]=0;
 label=28;break;
 case 27: 
 var $130=(($__sym+4)|0);
 HEAP32[(($130)>>2)]=0;
 HEAP8[($121)]=0;
 label=28;break;
 case 28: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=29;break; }
 case 29: 
 var $132$0 = ___cxa_find_matching_catch(-1, -1,0); var $132$1 = tempRet0;
 var $133=$132$0;
 ___clang_call_terminate($133);
 throw "Reached an unreachable!";
 case 30: 
 var $134=$6;
 assert(12 % 1 === 0);HEAP32[(($121)>>2)]=HEAP32[(($134)>>2)];HEAP32[((($121)+(4))>>2)]=HEAP32[((($134)+(4))>>2)];HEAP32[((($121)+(8))>>2)]=HEAP32[((($134)+(8))>>2)];
 HEAP32[(($134)>>2)]=0; HEAP32[((($134)+(4))>>2)]=0; HEAP32[((($134)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($6);
 var $135=HEAP32[(($89)>>2)];
 var $136=(($135+36)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=FUNCTION_TABLE[$137]($39);
 var $storemerge=$138;label=60;break;
 case 31: 
 var $140=$__p_i_i_i_i8;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $141=HEAP32[((13896)>>2)];
 var $142=($141|0)==-1;
 if($142){label=33;break;}else{label=32;break;}
 case 32: 
 var $144=(($__p_i_i_i_i8)|0);
 HEAP32[(($144)>>2)]=13896;
 var $145=(($__p_i_i_i_i8+4)|0);
 HEAP32[(($145)>>2)]=(26);
 var $146=(($__p_i_i_i_i8+8)|0);
 HEAP32[(($146)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(13896,$140,260);
 label=33;break;
 case 33: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $147=HEAP32[((13900)>>2)];
 var $148=((($147)-(1))|0);
 var $149=(($14+12)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=(($14+8)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=$150;
 var $154=$152;
 var $155=((($153)-($154))|0);
 var $156=$155>>2;
 var $157=($156>>>0)>($148>>>0);
 if($157){label=34;break;}else{label=35;break;}
 case 34: 
 var $158=(($152+($148<<2))|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=($159|0)==0;
 if($160){label=35;break;}else{label=36;break;}
 case 35: 
 var $161=___cxa_allocate_exception(4);
 var $162=$161;
 __ZNSt8bad_castC2Ev($162);
 ___cxa_throw($161,8200,(356));
 throw "Reached an unreachable!";
 case 36: 
 var $163=$159;
 var $164=$159;
 var $165=HEAP32[(($164)>>2)];
 if($__neg){label=37;break;}else{label=43;break;}
 case 37: 
 var $167=(($165+44)|0);
 var $168=HEAP32[(($167)>>2)];
 FUNCTION_TABLE[$168]($tmpcast1,$163);
 var $169=$__pat;
 var $170=HEAP32[(($7)>>2)];
 tempBigInt=$170;HEAP8[($169)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($169)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($169)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($169)+(3))|0)]=tempBigInt&0xff;
 var $171=$159;
 var $172=HEAP32[(($171)>>2)];
 var $173=(($172+32)|0);
 var $174=HEAP32[(($173)>>2)];
 FUNCTION_TABLE[$174]($8,$163);
 var $175=$__sn;
 var $176=HEAP8[($175)];
 var $177=$176&1;
 var $178=(($177<<24)>>24)==0;
 if($178){label=39;break;}else{label=38;break;}
 case 38: 
 var $180=(($__sn+8)|0);
 var $181=HEAP32[(($180)>>2)];
 HEAP32[(($181)>>2)]=0;
 var $182=(($__sn+4)|0);
 HEAP32[(($182)>>2)]=0;
 label=40;break;
 case 39: 
 var $184=(($__sn+4)|0);
 HEAP32[(($184)>>2)]=0;
 HEAP8[($175)]=0;
 label=40;break;
 case 40: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=41;break; }
 case 41: 
 var $186$0 = ___cxa_find_matching_catch(-1, -1,0); var $186$1 = tempRet0;
 var $187=$186$0;
 ___clang_call_terminate($187);
 throw "Reached an unreachable!";
 case 42: 
 var $188=$8;
 assert(12 % 1 === 0);HEAP32[(($175)>>2)]=HEAP32[(($188)>>2)];HEAP32[((($175)+(4))>>2)]=HEAP32[((($188)+(4))>>2)];HEAP32[((($175)+(8))>>2)]=HEAP32[((($188)+(8))>>2)];
 HEAP32[(($188)>>2)]=0; HEAP32[((($188)+(4))>>2)]=0; HEAP32[((($188)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($8);
 label=49;break;
 case 43: 
 var $190=(($165+40)|0);
 var $191=HEAP32[(($190)>>2)];
 FUNCTION_TABLE[$191]($tmpcast,$163);
 var $192=$__pat;
 var $193=HEAP32[(($9)>>2)];
 tempBigInt=$193;HEAP8[($192)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($192)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($192)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($192)+(3))|0)]=tempBigInt&0xff;
 var $194=$159;
 var $195=HEAP32[(($194)>>2)];
 var $196=(($195+28)|0);
 var $197=HEAP32[(($196)>>2)];
 FUNCTION_TABLE[$197]($10,$163);
 var $198=$__sn;
 var $199=HEAP8[($198)];
 var $200=$199&1;
 var $201=(($200<<24)>>24)==0;
 if($201){label=45;break;}else{label=44;break;}
 case 44: 
 var $203=(($__sn+8)|0);
 var $204=HEAP32[(($203)>>2)];
 HEAP32[(($204)>>2)]=0;
 var $205=(($__sn+4)|0);
 HEAP32[(($205)>>2)]=0;
 label=46;break;
 case 45: 
 var $207=(($__sn+4)|0);
 HEAP32[(($207)>>2)]=0;
 HEAP8[($198)]=0;
 label=46;break;
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=47;break; }
 case 47: 
 var $209$0 = ___cxa_find_matching_catch(-1, -1,0); var $209$1 = tempRet0;
 var $210=$209$0;
 ___clang_call_terminate($210);
 throw "Reached an unreachable!";
 case 48: 
 var $211=$10;
 assert(12 % 1 === 0);HEAP32[(($198)>>2)]=HEAP32[(($211)>>2)];HEAP32[((($198)+(4))>>2)]=HEAP32[((($211)+(4))>>2)];HEAP32[((($198)+(8))>>2)]=HEAP32[((($211)+(8))>>2)];
 HEAP32[(($211)>>2)]=0; HEAP32[((($211)+(4))>>2)]=0; HEAP32[((($211)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($10);
 label=49;break;
 case 49: 
 var $213=$159;
 var $214=HEAP32[(($213)>>2)];
 var $215=(($214+12)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=FUNCTION_TABLE[$216]($163);
 HEAP32[(($__dp)>>2)]=$217;
 var $218=HEAP32[(($213)>>2)];
 var $219=(($218+16)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=FUNCTION_TABLE[$220]($163);
 HEAP32[(($__ts)>>2)]=$221;
 var $222=$159;
 var $223=HEAP32[(($222)>>2)];
 var $224=(($223+20)|0);
 var $225=HEAP32[(($224)>>2)];
 FUNCTION_TABLE[$225]($11,$163);
 var $226=$__grp;
 var $227=HEAP8[($226)];
 var $228=$227&1;
 var $229=(($228<<24)>>24)==0;
 if($229){label=51;break;}else{label=50;break;}
 case 50: 
 var $231=(($__grp+8)|0);
 var $232=HEAP32[(($231)>>2)];
 HEAP8[($232)]=0;
 var $233=(($__grp+4)|0);
 HEAP32[(($233)>>2)]=0;
 label=52;break;
 case 51: 
 var $235=$__grp;
 var $236=(($235+1)|0);
 HEAP8[($236)]=0;
 HEAP8[($226)]=0;
 label=52;break;
 case 52: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=53;break; }
 case 53: 
 var $238$0 = ___cxa_find_matching_catch(-1, -1,0); var $238$1 = tempRet0;
 var $239=$238$0;
 ___clang_call_terminate($239);
 throw "Reached an unreachable!";
 case 54: 
 var $240=$11;
 assert(12 % 1 === 0);HEAP32[(($226)>>2)]=HEAP32[(($240)>>2)];HEAP32[((($226)+(4))>>2)]=HEAP32[((($240)+(4))>>2)];HEAP32[((($226)+(8))>>2)]=HEAP32[((($240)+(8))>>2)];
 HEAP32[(($240)>>2)]=0; HEAP32[((($240)+(4))>>2)]=0; HEAP32[((($240)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($11);
 var $241=$159;
 var $242=HEAP32[(($241)>>2)];
 var $243=(($242+24)|0);
 var $244=HEAP32[(($243)>>2)];
 FUNCTION_TABLE[$244]($12,$163);
 var $245=$__sym;
 var $246=HEAP8[($245)];
 var $247=$246&1;
 var $248=(($247<<24)>>24)==0;
 if($248){label=56;break;}else{label=55;break;}
 case 55: 
 var $250=(($__sym+8)|0);
 var $251=HEAP32[(($250)>>2)];
 HEAP32[(($251)>>2)]=0;
 var $252=(($__sym+4)|0);
 HEAP32[(($252)>>2)]=0;
 label=57;break;
 case 56: 
 var $254=(($__sym+4)|0);
 HEAP32[(($254)>>2)]=0;
 HEAP8[($245)]=0;
 label=57;break;
 case 57: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=58;break; }
 case 58: 
 var $256$0 = ___cxa_find_matching_catch(-1, -1,0); var $256$1 = tempRet0;
 var $257=$256$0;
 ___clang_call_terminate($257);
 throw "Reached an unreachable!";
 case 59: 
 var $258=$12;
 assert(12 % 1 === 0);HEAP32[(($245)>>2)]=HEAP32[(($258)>>2)];HEAP32[((($245)+(4))>>2)]=HEAP32[((($258)+(4))>>2)];HEAP32[((($245)+(8))>>2)]=HEAP32[((($258)+(8))>>2)];
 HEAP32[(($258)>>2)]=0; HEAP32[((($258)+(4))>>2)]=0; HEAP32[((($258)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($12);
 var $259=HEAP32[(($213)>>2)];
 var $260=(($259+36)|0);
 var $261=HEAP32[(($260)>>2)];
 var $262=FUNCTION_TABLE[$261]($163);
 var $storemerge=$262;label=60;break;
 case 60: 
 var $storemerge;
 HEAP32[(($__fd)>>2)]=$storemerge;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($__me)>>2)]=$__mb;
 var $1=$__ct;
 var $2=$__sn;
 var $3=(($__sn+4)|0);
 var $4=(($__sn+8)|0);
 var $5=$__sym;
 var $6=$__flags&512;
 var $7=($6|0)==0;
 var $8=(($__sym+4)|0);
 var $9=(($__sym+8)|0);
 var $10=($__fd|0)>0;
 var $11=$__grp;
 var $12=$__grp;
 var $13=(($12+1)|0);
 var $14=(($__grp+8)|0);
 var $15=(($__grp+4)|0);
 var $16=$__ct;
 var $__p_059=0;var $_060=$__db;label=2;break;
 case 2: 
 var $_060;
 var $__p_059;
 var $18=(($__pat+$__p_059)|0);
 var $19=HEAP8[($18)];
 var $20=(($19<<24)>>24);
 switch(($20|0)){case 2:{ label=12;break;}case 4:{ label=24;break;}case 0:{ label=3;break;}case 1:{ label=4;break;}case 3:{ label=5;break;}default:{var $_2=$_060;label=61;break;}}break;
 case 3: 
 var $22=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$22;
 var $_2=$_060;label=61;break;
 case 4: 
 var $24=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$24;
 var $25=HEAP32[(($1)>>2)];
 var $26=(($25+44)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=FUNCTION_TABLE[$27]($__ct,32);
 var $29=HEAP32[(($__me)>>2)];
 var $30=(($29+4)|0);
 HEAP32[(($__me)>>2)]=$30;
 HEAP32[(($29)>>2)]=$28;
 var $_2=$_060;label=61;break;
 case 5: 
 var $32=HEAP8[($2)];
 var $33=$32&1;
 var $34=(($33<<24)>>24)==0;
 if($34){label=7;break;}else{label=6;break;}
 case 6: 
 var $36=HEAP32[(($3)>>2)];
 var $40=$36;label=8;break;
 case 7: 
 var $38=($32&255);
 var $39=$38>>>1;
 var $40=$39;label=8;break;
 case 8: 
 var $40;
 var $41=($40|0)==0;
 if($41){var $_2=$_060;label=61;break;}else{label=9;break;}
 case 9: 
 if($34){var $45=$3;label=11;break;}else{label=10;break;}
 case 10: 
 var $44=HEAP32[(($4)>>2)];
 var $45=$44;label=11;break;
 case 11: 
 var $45;
 var $46=HEAP32[(($45)>>2)];
 var $47=HEAP32[(($__me)>>2)];
 var $48=(($47+4)|0);
 HEAP32[(($__me)>>2)]=$48;
 HEAP32[(($47)>>2)]=$46;
 var $_2=$_060;label=61;break;
 case 12: 
 var $50=HEAP8[($5)];
 var $51=$50&1;
 var $52=(($51<<24)>>24)==0;
 if($52){label=14;break;}else{label=13;break;}
 case 13: 
 var $54=HEAP32[(($8)>>2)];
 var $58=$54;label=15;break;
 case 14: 
 var $56=($50&255);
 var $57=$56>>>1;
 var $58=$57;label=15;break;
 case 15: 
 var $58;
 var $59=($58|0)==0;
 var $or_cond3=$59|$7;
 if($or_cond3){var $_2=$_060;label=61;break;}else{label=16;break;}
 case 16: 
 if($52){label=18;break;}else{label=17;break;}
 case 17: 
 var $62=HEAP32[(($9)>>2)];
 var $63=HEAP32[(($8)>>2)];
 var $69=$63;var $68=$62;var $67=$62;label=19;break;
 case 18: 
 var $65=($50&255);
 var $66=$65>>>1;
 var $69=$66;var $68=$8;var $67=$8;label=19;break;
 case 19: 
 var $67;
 var $68;
 var $69;
 var $70=(($68+($69<<2))|0);
 var $71=HEAP32[(($__me)>>2)];
 var $72=($67|0)==($70|0);
 if($72){var $_0_lcssa_i_i22=$71;label=23;break;}else{label=20;break;}
 case 20: 
 var $_promoted4_i_i16=$67;
 var $_sum33=((($69)-(1))|0);
 var $scevgep_i_i17=(($68+($_sum33<<2))|0);
 var $73=$scevgep_i_i17;
 var $74=((($73)-($_promoted4_i_i16))|0);
 var $75=$74>>>2;
 var $_01_i_i19=$71;var $77=$67;label=21;break;
 case 21: 
 var $77;
 var $_01_i_i19;
 var $78=HEAP32[(($77)>>2)];
 HEAP32[(($_01_i_i19)>>2)]=$78;
 var $79=(($77+4)|0);
 var $80=(($_01_i_i19+4)|0);
 var $81=($79|0)==($70|0);
 if($81){label=22;break;}else{var $_01_i_i19=$80;var $77=$79;label=21;break;}
 case 22: 
 var $82=((($75)+(1))|0);
 var $scevgep6_i_i20=(($71+($82<<2))|0);
 var $_0_lcssa_i_i22=$scevgep6_i_i20;label=23;break;
 case 23: 
 var $_0_lcssa_i_i22;
 HEAP32[(($__me)>>2)]=$_0_lcssa_i_i22;
 var $_2=$_060;label=61;break;
 case 24: 
 var $84=HEAP32[(($__me)>>2)];
 var $85=(($_060+4)|0);
 var $__0=($__neg?$85:$_060);
 var $86=($__0>>>0)<($__de>>>0);
 if($86){var $__d_034=$__0;label=26;break;}else{var $__d_0_lcssa=$__0;label=27;break;}
 case 25: 
 var $88=($94>>>0)<($__de>>>0);
 if($88){var $__d_034=$94;label=26;break;}else{var $__d_0_lcssa=$94;label=27;break;}
 case 26: 
 var $__d_034;
 var $89=HEAP32[(($__d_034)>>2)];
 var $90=HEAP32[(($16)>>2)];
 var $91=(($90+12)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=FUNCTION_TABLE[$92]($__ct,2048,$89);
 var $94=(($__d_034+4)|0);
 if($93){label=25;break;}else{var $__d_0_lcssa=$__d_034;label=27;break;}
 case 27: 
 var $__d_0_lcssa;
 if($10){label=28;break;}else{var $__d_2=$__d_0_lcssa;label=37;break;}
 case 28: 
 var $95=($__d_0_lcssa>>>0)>($__0>>>0);
 if($95){label=29;break;}else{var $__f_0_lcssa77=$__fd;var $__d_1_lcssa79=$__d_0_lcssa;label=33;break;}
 case 29: 
 var $__me_promoted=HEAP32[(($__me)>>2)];
 var $__d_137=$__d_0_lcssa;var $__f_038=$__fd;var $97=$__me_promoted;label=30;break;
 case 30: 
 var $97;
 var $__f_038;
 var $__d_137;
 var $98=((($__d_137)-(4))|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=(($97+4)|0);
 HEAP32[(($97)>>2)]=$99;
 var $101=((($__f_038)-(1))|0);
 var $102=($98>>>0)>($__0>>>0);
 var $103=($101|0)>0;
 var $or_cond=$102&$103;
 if($or_cond){var $__d_137=$98;var $__f_038=$101;var $97=$100;label=30;break;}else{label=31;break;}
 case 31: 
 HEAP32[(($__me)>>2)]=$100;
 if($103){var $__f_0_lcssa77=$101;var $__d_1_lcssa79=$98;label=33;break;}else{label=32;break;}
 case 32: 
 var $105=HEAP32[(($__me)>>2)];
 var $106=(($105+4)|0);
 HEAP32[(($__me)>>2)]=$106;
 var $_lcssa45=$105;var $__d_1_lcssa7881=$98;label=36;break;
 case 33: 
 var $__d_1_lcssa79;
 var $__f_0_lcssa77;
 var $107=HEAP32[(($1)>>2)];
 var $108=(($107+44)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=FUNCTION_TABLE[$109]($__ct,48);
 var $111=($__f_0_lcssa77|0)>0;
 var $112=HEAP32[(($__me)>>2)];
 var $113=(($112+4)|0);
 HEAP32[(($__me)>>2)]=$113;
 if($111){var $__f_146=$__f_0_lcssa77;var $115=$112;var $114=$113;label=34;break;}else{var $_lcssa45=$112;var $__d_1_lcssa7881=$__d_1_lcssa79;label=36;break;}
 case 34: 
 var $114;
 var $115;
 var $__f_146;
 HEAP32[(($115)>>2)]=$110;
 var $116=((($__f_146)-(1))|0);
 var $117=($116|0)>0;
 var $118=(($114+4)|0);
 if($117){var $__f_146=$116;var $115=$114;var $114=$118;label=34;break;}else{label=35;break;}
 case 35: 
 var $_sum75=((($__f_0_lcssa77)+(1))|0);
 var $scevgep=(($112+($_sum75<<2))|0);
 var $scevgep71=(($112+($__f_0_lcssa77<<2))|0);
 HEAP32[(($__me)>>2)]=$scevgep;
 var $_lcssa45=$scevgep71;var $__d_1_lcssa7881=$__d_1_lcssa79;label=36;break;
 case 36: 
 var $__d_1_lcssa7881;
 var $_lcssa45;
 HEAP32[(($_lcssa45)>>2)]=$__dp;
 var $__d_2=$__d_1_lcssa7881;label=37;break;
 case 37: 
 var $__d_2;
 var $121=($__d_2|0)==($__0|0);
 if($121){label=38;break;}else{label=39;break;}
 case 38: 
 var $123=HEAP32[(($1)>>2)];
 var $124=(($123+44)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=FUNCTION_TABLE[$125]($__ct,48);
 var $127=HEAP32[(($__me)>>2)];
 var $128=(($127+4)|0);
 HEAP32[(($__me)>>2)]=$128;
 HEAP32[(($127)>>2)]=$126;
 var $181=$128;label=58;break;
 case 39: 
 var $130=HEAP8[($11)];
 var $131=$130&1;
 var $132=(($131<<24)>>24)==0;
 if($132){label=41;break;}else{label=40;break;}
 case 40: 
 var $134=HEAP32[(($15)>>2)];
 var $138=$134;label=42;break;
 case 41: 
 var $136=($130&255);
 var $137=$136>>>1;
 var $138=$137;label=42;break;
 case 42: 
 var $138;
 var $139=($138|0)==0;
 if($139){var $__d_354=$__d_2;var $__ng_055=0;var $__ig_056=0;var $__gl_057=-1;label=46;break;}else{label=43;break;}
 case 43: 
 if($132){var $143=$13;label=45;break;}else{label=44;break;}
 case 44: 
 var $142=HEAP32[(($14)>>2)];
 var $143=$142;label=45;break;
 case 45: 
 var $143;
 var $144=HEAP8[($143)];
 var $145=(($144<<24)>>24);
 var $__d_354=$__d_2;var $__ng_055=0;var $__ig_056=0;var $__gl_057=$145;label=46;break;
 case 46: 
 var $__gl_057;
 var $__ig_056;
 var $__ng_055;
 var $__d_354;
 var $146=($__ng_055|0)==($__gl_057|0);
 var $147=HEAP32[(($__me)>>2)];
 if($146){label=47;break;}else{var $__gl_1=$__gl_057;var $__ig_1=$__ig_056;var $__ng_1=$__ng_055;var $175=$147;label=57;break;}
 case 47: 
 var $149=(($147+4)|0);
 HEAP32[(($__me)>>2)]=$149;
 HEAP32[(($147)>>2)]=$__ts;
 var $150=((($__ig_056)+(1))|0);
 var $151=HEAP8[($11)];
 var $152=$151&1;
 var $153=(($152<<24)>>24)==0;
 if($153){label=49;break;}else{label=48;break;}
 case 48: 
 var $155=HEAP32[(($15)>>2)];
 var $159=$155;label=50;break;
 case 49: 
 var $157=($151&255);
 var $158=$157>>>1;
 var $159=$158;label=50;break;
 case 50: 
 var $159;
 var $160=($150>>>0)<($159>>>0);
 if($160){label=51;break;}else{var $__gl_1=$__gl_057;var $__ig_1=$150;var $__ng_1=0;var $175=$149;label=57;break;}
 case 51: 
 if($153){var $164=$13;label=53;break;}else{label=52;break;}
 case 52: 
 var $163=HEAP32[(($14)>>2)];
 var $164=$163;label=53;break;
 case 53: 
 var $164;
 var $165=(($164+$150)|0);
 var $166=HEAP8[($165)];
 var $167=(($166<<24)>>24)==127;
 if($167){var $__gl_1=-1;var $__ig_1=$150;var $__ng_1=0;var $175=$149;label=57;break;}else{label=54;break;}
 case 54: 
 if($153){var $171=$13;label=56;break;}else{label=55;break;}
 case 55: 
 var $170=HEAP32[(($14)>>2)];
 var $171=$170;label=56;break;
 case 56: 
 var $171;
 var $172=(($171+$150)|0);
 var $173=HEAP8[($172)];
 var $174=(($173<<24)>>24);
 var $__gl_1=$174;var $__ig_1=$150;var $__ng_1=0;var $175=$149;label=57;break;
 case 57: 
 var $175;
 var $__ng_1;
 var $__ig_1;
 var $__gl_1;
 var $176=((($__d_354)-(4))|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($175+4)|0);
 HEAP32[(($__me)>>2)]=$178;
 HEAP32[(($175)>>2)]=$177;
 var $179=((($__ng_1)+(1))|0);
 var $180=($176|0)==($__0|0);
 if($180){var $181=$178;label=58;break;}else{var $__d_354=$176;var $__ng_055=$179;var $__ig_056=$__ig_1;var $__gl_057=$__gl_1;label=46;break;}
 case 58: 
 var $181;
 var $182=($84|0)==($181|0);
 if($182){var $_2=$__0;label=61;break;}else{label=59;break;}
 case 59: 
 var $183=((($181)-(4))|0);
 var $184=($183>>>0)>($84>>>0);
 if($184){var $_012_i_i=$84;var $185=$183;label=60;break;}else{var $_2=$__0;label=61;break;}
 case 60: 
 var $185;
 var $_012_i_i;
 var $186=HEAP32[(($_012_i_i)>>2)];
 var $187=HEAP32[(($185)>>2)];
 HEAP32[(($_012_i_i)>>2)]=$187;
 HEAP32[(($185)>>2)]=$186;
 var $188=(($_012_i_i+4)|0);
 var $189=((($185)-(4))|0);
 var $190=($188>>>0)<($189>>>0);
 if($190){var $_012_i_i=$188;var $185=$189;label=60;break;}else{var $_2=$__0;label=61;break;}
 case 61: 
 var $_2;
 var $191=((($__p_059)+(1))|0);
 var $192=($191>>>0)<4;
 if($192){var $__p_059=$191;var $_060=$_2;label=2;break;}else{label=62;break;}
 case 62: 
 var $194=HEAP8[($2)];
 var $195=$194&1;
 var $196=(($195<<24)>>24)==0;
 if($196){label=64;break;}else{label=63;break;}
 case 63: 
 var $198=HEAP32[(($3)>>2)];
 var $202=$198;label=65;break;
 case 64: 
 var $200=($194&255);
 var $201=$200>>>1;
 var $202=$201;label=65;break;
 case 65: 
 var $202;
 var $203=($202>>>0)>1;
 if($203){label=66;break;}else{label=74;break;}
 case 66: 
 if($196){label=68;break;}else{label=67;break;}
 case 67: 
 var $206=HEAP32[(($4)>>2)];
 var $207=HEAP32[(($3)>>2)];
 var $212=$207;var $211=$206;var $_pn=$206;label=69;break;
 case 68: 
 var $209=($194&255);
 var $210=$209>>>1;
 var $212=$210;var $211=$3;var $_pn=$3;label=69;break;
 case 69: 
 var $_pn;
 var $211;
 var $212;
 var $213=(($_pn+4)|0);
 var $214=(($211+($212<<2))|0);
 var $215=HEAP32[(($__me)>>2)];
 var $216=($213|0)==($214|0);
 if($216){var $_0_lcssa_i_i=$215;label=73;break;}else{label=70;break;}
 case 70: 
 var $_promoted4_i_i=$213;
 var $_sum=((($212)-(1))|0);
 var $scevgep_i_i=(($211+($_sum<<2))|0);
 var $217=$scevgep_i_i;
 var $218=((($217)-($_promoted4_i_i))|0);
 var $219=$218>>>2;
 var $_01_i_i=$215;var $221=$213;label=71;break;
 case 71: 
 var $221;
 var $_01_i_i;
 var $222=HEAP32[(($221)>>2)];
 HEAP32[(($_01_i_i)>>2)]=$222;
 var $223=(($221+4)|0);
 var $224=(($_01_i_i+4)|0);
 var $225=($223|0)==($214|0);
 if($225){label=72;break;}else{var $_01_i_i=$224;var $221=$223;label=71;break;}
 case 72: 
 var $226=((($219)+(1))|0);
 var $scevgep6_i_i=(($215+($226<<2))|0);
 var $_0_lcssa_i_i=$scevgep6_i_i;label=73;break;
 case 73: 
 var $_0_lcssa_i_i;
 HEAP32[(($__me)>>2)]=$_0_lcssa_i_i;
 label=74;break;
 case 74: 
 var $228=$__flags&176;
 if(($228|0)==32){ label=75;break;}else if(($228|0)==16){ label=77;break;}else{label=76;break;}
 case 75: 
 var $230=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$230;
 label=77;break;
 case 76: 
 HEAP32[(($__mi)>>2)]=$__mb;
 label=77;break;
 case 77: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__digits){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__loc=(sp)+(16);
 var $__pat=(sp)+(24);
 var $tmpcast=$__pat;
 var $__dp=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__ts=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__grp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 400)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $2=(($__loc)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $5=HEAP32[((13424)>>2)];
 var $6=($5|0)==-1;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($__p_i_i_i_i)|0);
 HEAP32[(($8)>>2)]=13424;
 var $9=(($__p_i_i_i_i+4)|0);
 HEAP32[(($9)>>2)]=(26);
 var $10=(($__p_i_i_i_i+8)|0);
 HEAP32[(($10)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13424,$4,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=43;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $11=HEAP32[((13428)>>2)];
 var $12=((($11)-(1))|0);
 var $13=(($3+12)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($3+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$14;
 var $18=$16;
 var $19=((($17)-($18))|0);
 var $20=$19>>2;
 var $21=($20>>>0)>($12>>>0);
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=(($16+($12<<2))|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==0;
 if($24){label=5;break;}else{label=7;break;}
 case 5: 
 var $25=___cxa_allocate_exception(4);
 var $26=$25;
 __ZNSt8bad_castC2Ev($26);
 (function() { try { __THREW__ = 0; return ___cxa_throw($25,8200,(356)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=43;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $28=$23;
 var $29=$__digits;
 var $30=HEAP8[($29)];
 var $31=$30&1;
 var $32=(($31<<24)>>24)==0;
 if($32){label=9;break;}else{label=8;break;}
 case 8: 
 var $34=(($__digits+4)|0);
 var $35=HEAP32[(($34)>>2)];
 var $39=$35;label=10;break;
 case 9: 
 var $37=($30&255);
 var $38=$37>>>1;
 var $39=$38;label=10;break;
 case 10: 
 var $39;
 var $40=($39|0)==0;
 if($40){var $56=0;label=16;break;}else{label=11;break;}
 case 11: 
 if($32){label=13;break;}else{label=12;break;}
 case 12: 
 var $43=(($__digits+8)|0);
 var $44=HEAP32[(($43)>>2)];
 var $47=$44;label=14;break;
 case 13: 
 var $46=(($__digits+4)|0);
 var $47=$46;label=14;break;
 case 14: 
 var $47;
 var $48=HEAP32[(($47)>>2)];
 var $49=$23;
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+44)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$52]($28,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=43;break; }
 case 15: 
 var $54=($48|0)==($53|0);
 var $56=$54;label=16;break;
 case 16: 
 var $56;
 HEAP32[(($__pat)>>2)]=0;
 var $this2_i_i_i=$__grp;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $this2_i_i_i5=$__sym;
 HEAP32[(($this2_i_i_i5)>>2)]=0; HEAP32[((($this2_i_i_i5)+(4))>>2)]=0; HEAP32[((($this2_i_i_i5)+(8))>>2)]=0;
 var $this2_i_i_i6=$__sn;
 HEAP32[(($this2_i_i_i6)>>2)]=0; HEAP32[((($this2_i_i_i6)+(4))>>2)]=0; HEAP32[((($this2_i_i_i6)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$56,$__loc,$tmpcast,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=44;break; }
 case 17: 
 var $58=$__mbuf;
 var $$etemp$2$0=400;
 var $$etemp$2$1=0;

 var $59=(($__mbuf)|0);
 var $60=HEAP8[($29)];
 var $61=$60&1;
 var $62=(($61<<24)>>24)==0;
 if($62){label=19;break;}else{label=18;break;}
 case 18: 
 var $64=(($__digits+4)|0);
 var $65=HEAP32[(($64)>>2)];
 var $69=$65;label=20;break;
 case 19: 
 var $67=($60&255);
 var $68=$67>>>1;
 var $69=$68;label=20;break;
 case 20: 
 var $69;
 var $70=HEAP32[(($__fd)>>2)];
 var $71=($69|0)>($70|0);
 if($71){label=21;break;}else{label=31;break;}
 case 21: 
 if($62){label=23;break;}else{label=22;break;}
 case 22: 
 var $74=(($__digits+4)|0);
 var $75=HEAP32[(($74)>>2)];
 var $79=$75;label=24;break;
 case 23: 
 var $77=($60&255);
 var $78=$77>>>1;
 var $79=$78;label=24;break;
 case 24: 
 var $79;
 var $80=((($79)-($70))|0);
 var $81=$80<<1;
 var $82=HEAP8[($this2_i_i_i6)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){label=26;break;}else{label=25;break;}
 case 25: 
 var $86=(($__sn+4)|0);
 var $87=HEAP32[(($86)>>2)];
 var $91=$87;label=27;break;
 case 26: 
 var $89=($82&255);
 var $90=$89>>>1;
 var $91=$90;label=27;break;
 case 27: 
 var $91;
 var $92=HEAP8[($this2_i_i_i5)];
 var $93=$92&1;
 var $94=(($93<<24)>>24)==0;
 if($94){label=29;break;}else{label=28;break;}
 case 28: 
 var $96=(($__sym+4)|0);
 var $97=HEAP32[(($96)>>2)];
 var $101=$97;label=30;break;
 case 29: 
 var $99=($92&255);
 var $100=$99>>>1;
 var $101=$100;label=30;break;
 case 30: 
 var $101;
 var $102=$81|1;
 var $103=((($91)+($102))|0);
 var $104=((($103)+($101))|0);
 var $_pn=$104;label=38;break;
 case 31: 
 var $106=HEAP8[($this2_i_i_i6)];
 var $107=$106&1;
 var $108=(($107<<24)>>24)==0;
 if($108){label=33;break;}else{label=32;break;}
 case 32: 
 var $110=(($__sn+4)|0);
 var $111=HEAP32[(($110)>>2)];
 var $115=$111;label=34;break;
 case 33: 
 var $113=($106&255);
 var $114=$113>>>1;
 var $115=$114;label=34;break;
 case 34: 
 var $115;
 var $116=HEAP8[($this2_i_i_i5)];
 var $117=$116&1;
 var $118=(($117<<24)>>24)==0;
 if($118){label=36;break;}else{label=35;break;}
 case 35: 
 var $120=(($__sym+4)|0);
 var $121=HEAP32[(($120)>>2)];
 var $125=$121;label=37;break;
 case 36: 
 var $123=($116&255);
 var $124=$123>>>1;
 var $125=$124;label=37;break;
 case 37: 
 var $125;
 var $126=((($115)+(2))|0);
 var $127=((($126)+($125))|0);
 var $_pn=$127;label=38;break;
 case 38: 
 var $_pn;
 var $129=((($_pn)+($70))|0);
 var $130=($129>>>0)>100;
 if($130){label=39;break;}else{var $__mb_0=$59;var $156=0;var $155=$60;label=47;break;}
 case 39: 
 var $131=$129<<2;
 var $132=_malloc($131);
 var $133=$132;
 var $134=($132|0)==0;
 if($134){label=40;break;}else{var $__mb_0=$133;var $156=$133;var $155=$60;label=47;break;}
 case 40: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 var $_pre=HEAP8[($29)];
 var $__mb_0=0;var $156=0;var $155=$_pre;label=47;break;
 case 42: 
 var $136$0 = ___cxa_find_matching_catch(-1, -1); var $136$1 = tempRet0;
 var $137=$136$0;
 var $138=$136$1;
 var $_0=$137;var $_01=$138;label=55;break;
 case 43: 
 var $140$0 = ___cxa_find_matching_catch(-1, -1); var $140$1 = tempRet0;
 var $141=$140$0;
 var $142=$140$1;
 var $_1=$141;var $_12=$142;label=56;break;
 case 44: 
 var $144$0 = ___cxa_find_matching_catch(-1, -1); var $144$1 = tempRet0;
 var $145=$144$0;
 var $146=$144$1;
 var $_0=$145;var $_01=$146;label=55;break;
 case 45: 
 var $148$0 = ___cxa_find_matching_catch(-1, -1); var $148$1 = tempRet0;
 var $149=$148$0;
 var $150=$148$1;
 var $151=($156|0)==0;
 if($151){var $_0=$149;var $_01=$150;label=55;break;}else{label=46;break;}
 case 46: 
 var $153=$156;
 _free($153);
 var $_0=$149;var $_01=$150;label=55;break;
 case 47: 
 var $155;
 var $156;
 var $__mb_0;
 var $157=(($__iob+4)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=$155&1;
 var $160=(($159<<24)>>24)==0;
 if($160){label=49;break;}else{label=48;break;}
 case 48: 
 var $162=(($__digits+8)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(($__digits+4)|0);
 var $165=HEAP32[(($164)>>2)];
 var $171=$165;var $170=$163;label=50;break;
 case 49: 
 var $167=(($__digits+4)|0);
 var $168=($155&255);
 var $169=$168>>>1;
 var $171=$169;var $170=$167;label=50;break;
 case 50: 
 var $170;
 var $171;
 var $172=(($170+($171<<2))|0);
 var $173=HEAP32[(($__dp)>>2)];
 var $174=HEAP32[(($__ts)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb_0,$__mi,$__me,$158,$170,$172,$28,$56,$tmpcast,$173,$174,$__grp,$__sym,$__sn,$70) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=45;break; }
 case 51: 
 var $176=(($__s)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($1)|0);
 HEAP32[(($178)>>2)]=$177;
 var $179=HEAP32[(($__mi)>>2)];
 var $180=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$1,$__mb_0,$179,$180,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=45;break; }
 case 52: 
 var $182=($156|0)==0;
 if($182){label=54;break;}else{label=53;break;}
 case 53: 
 var $184=$156;
 _free($184);
 label=54;break;
 case 54: 
 var $$etemp$3$0=400;
 var $$etemp$3$1=0;

 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $185=HEAP32[(($2)>>2)];
 var $186=(($185)|0);
 var $187=__ZNSt3__114__shared_count16__release_sharedEv($186);
 STACKTOP=sp;return;
 case 55: 
 var $_01;
 var $_0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $_1=$_0;var $_12=$_01;label=56;break;
 case 56: 
 var $_12;
 var $_1;
 var $189=HEAP32[(($2)>>2)];
 var $190=(($189)|0);
 var $191=__ZNSt3__114__shared_count16__release_sharedEv($190);
 var $192$0=$_1;
 var $192$1=0;
 var $193$0=$192$0;
 var $193$1=$_12;
 ___resumeException($193$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18messagesIcED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__18messagesIcED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=$__nm;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__nm+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $12=$8;label=4;break;
 case 3: 
 var $10=$__nm;
 var $11=(($10+1)|0);
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=_catopen($12,1);
 var $14=$13;
 var $not_=($13|0)!=-1;
 var $15=($not_&1);
 var $_=$14>>>($15>>>0);
 return $_;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg_result,$this,$__c,$__set,$__msgid,$__dflt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__ndflt=sp;
 var $this2_i_i_i=$__ndflt;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $1=$__dflt;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($__dflt+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($__dflt+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $19=$9;var $18=$7;var $17=$7;label=4;break;
 case 3: 
 var $11=$__dflt;
 var $12=(($11+1)|0);
 var $13=$__dflt;
 var $14=(($13+1)|0);
 var $15=($2&255);
 var $16=$15>>>1;
 var $19=$16;var $18=$12;var $17=$14;label=4;break;
 case 4: 
 var $17;
 var $18;
 var $19;
 var $20=(($17+$19)|0);
 var $21=($18>>>0)<($20>>>0);
 if($21){var $_01_i7=$18;label=6;break;}else{label=5;break;}
 case 5: 
 var $22=($__c|0)==-1;
 var $23=$__c<<1;
 var $24=$23;
 var $25=($22?-1:$24);
 var $37=$25;label=10;break;
 case 6: 
 var $_01_i7;
 var $26=HEAP8[($_01_i7)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt,$26) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=12;break; }
 case 7: 
 var $27=(($_01_i7+1)|0);
 var $28=($27>>>0)<($20>>>0);
 if($28){var $_01_i7=$27;label=6;break;}else{label=8;break;}
 case 8: 
 var $_pre=HEAP8[($this2_i_i_i)];
 var $phitmp=$_pre&1;
 var $phitmp17=(($phitmp<<24)>>24)==0;
 var $29=($__c|0)==-1;
 var $30=$__c<<1;
 var $31=$30;
 var $32=($29?-1:$31);
 if($phitmp17){var $37=$32;label=10;break;}else{label=9;break;}
 case 9: 
 var $34=(($__ndflt+8)|0);
 var $35=HEAP32[(($34)>>2)];
 var $41=$35;var $40=$32;label=11;break;
 case 10: 
 var $37;
 var $38=$__ndflt;
 var $39=(($38+1)|0);
 var $41=$39;var $40=$37;label=11;break;
 case 11: 
 var $40;
 var $41;
 var $42=(function() { try { __THREW__ = 0; return _catgets($40,$__set,$__msgid,$41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=13;break; }
 case 12: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=14;break;
 case 13: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=14;break;
 case 14: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $44=$lpad_phi$0;
 var $45=$lpad_phi$1;
 var $_01=$44;var $_02=$45;label=20;break;
 case 15: 
 var $this2_i_i_i4=$agg_result;
 HEAP32[(($this2_i_i_i4)>>2)]=0; HEAP32[((($this2_i_i_i4)+(4))>>2)]=0; HEAP32[((($this2_i_i_i4)+(8))>>2)]=0;
 var $47=_strlen($42);
 var $48=(($42+$47)|0);
 var $49=($47|0)>0;
 if($49){var $_01_i=$42;label=16;break;}else{label=19;break;}
 case 16: 
 var $_01_i;
 var $50=HEAP8[($_01_i)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($agg_result,$50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=18;break; }
 case 17: 
 var $51=(($_01_i+1)|0);
 var $52=($51>>>0)<($48>>>0);
 if($52){var $_01_i=$51;label=16;break;}else{label=19;break;}
 case 18: 
 var $54$0 = ___cxa_find_matching_catch(-1, -1); var $54$1 = tempRet0;
 var $55=$54$0;
 var $56=$54$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg_result);
 var $_01=$55;var $_02=$56;label=20;break;
 case 19: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 STACKTOP=sp;return;
 case 20: 
 var $_02;
 var $_01;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 var $58$0=$_01;
 var $58$1=0;
 var $59$0=$58$0;
 var $59$1=$_02;
 ___resumeException($59$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c){
 var label=0;


 var $1=($__c|0)==-1;
 var $2=$__c<<1;
 var $3=$2;
 var $4=($1?-1:$3);
 var $5=_catclose($4);
 return;
}


function __ZNSt3__18messagesIwED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__18messagesIwED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}


function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=$__nm;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__nm+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $12=$8;label=4;break;
 case 3: 
 var $10=$__nm;
 var $11=(($10+1)|0);
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=_catopen($12,1);
 var $14=$13;
 var $not_=($13|0)!=-1;
 var $15=($not_&1);
 var $_=$14>>>($15>>>0);
 return $_;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg_result,$this,$__c,$__set,$__msgid,$__dflt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+240)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__mb_i11=sp;
 var $__buf_i13=(sp)+(8);
 var $__bn_i14=(sp)+(40);
 var $__wn_i=(sp)+(48);
 var $__mb_i=(sp)+(56);
 var $__buf_i=(sp)+(64);
 var $__bn_i=(sp)+(192);
 var $__nn_i=(sp)+(200);
 var $__ndflt=(sp)+(208);
 var $1=(sp)+(224);
 var $2=(sp)+(232);
 var $this2_i_i_i=$__ndflt;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $3=(($1+4)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($1)|0);
 HEAP32[(($4)>>2)]=4200;
 var $5=$__dflt;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__dflt+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($__dflt+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $21=$13;var $20=$11;var $19=$11;label=4;break;
 case 3: 
 var $15=(($__dflt+4)|0);
 var $16=(($__dflt+4)|0);
 var $17=($6&255);
 var $18=$17>>>1;
 var $21=$18;var $20=$15;var $19=$16;label=4;break;
 case 4: 
 var $19;
 var $20;
 var $21;
 var $22=(($19+($21<<2))|0);
 var $23=$__mb_i11;
 var $$etemp$0$0=8;
 var $$etemp$0$1=0;

 var $24=(($__buf_i13)|0);
 var $$etemp$1$0=32;
 var $$etemp$1$1=0;

 var $25=$__bn_i14;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $26=$__wn_i;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $tmpcast_i12=$__mb_i11;
 var $$etemp$4$0=0;
 var $$etemp$4$1=0;
 var $st$5$0=(($__mb_i11)|0);
 HEAP32[(($st$5$0)>>2)]=$$etemp$4$0;
 var $st$6$1=(($__mb_i11+4)|0);
 HEAP32[(($st$6$1)>>2)]=$$etemp$4$1;
 var $27=($20>>>0)<($22>>>0);
 if($27){label=5;break;}else{label=16;break;}
 case 5: 
 var $28=(($1)|0);
 var $29=$1;
 var $30=(($__buf_i13+32)|0);
 var $_05_i16=$20;var $32=4200;label=6;break;
 case 6: 
 var $32;
 var $_05_i16;
 HEAP32[(($__wn_i)>>2)]=$_05_i16;
 var $33=(($32+12)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$34]($28,$tmpcast_i12,$_05_i16,$22,$__wn_i,$24,$30,$__bn_i14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=22;break; }
 case 7: 
 var $36=($35|0)==2;
 var $37=HEAP32[(($__wn_i)>>2)];
 var $38=($37|0)==($_05_i16|0);
 var $or_cond3_i17=$36|$38;
 if($or_cond3_i17){label=9;break;}else{label=8;break;}
 case 8: 
 var $39=HEAP32[(($__bn_i14)>>2)];
 var $40=($24>>>0)<($39>>>0);
 if($40){var $__p_04_i20=$24;label=11;break;}else{var $47=$37;label=14;break;}
 case 9: 
 (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(1064) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=23;break; }
 case 10: 
 throw "Reached an unreachable!";
 case 11: 
 var $__p_04_i20;
 var $42=HEAP8[($__p_04_i20)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt,$42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=21;break; }
 case 12: 
 var $43=(($__p_04_i20+1)|0);
 var $44=HEAP32[(($__bn_i14)>>2)];
 var $45=($43>>>0)<($44>>>0);
 if($45){var $__p_04_i20=$43;label=11;break;}else{label=13;break;}
 case 13: 
 var $_pre_i21=HEAP32[(($__wn_i)>>2)];
 var $47=$_pre_i21;label=14;break;
 case 14: 
 var $47;
 var $48=($47>>>0)<($22>>>0);
 if($48){label=15;break;}else{label=16;break;}
 case 15: 
 var $_pre=HEAP32[(($29)>>2)];
 var $_05_i16=$47;var $32=$_pre;label=6;break;
 case 16: 
 var $$etemp$7$0=8;
 var $$etemp$7$1=0;

 var $$etemp$8$0=32;
 var $$etemp$8$1=0;

 var $$etemp$9$0=4;
 var $$etemp$9$1=0;

 var $$etemp$10$0=4;
 var $$etemp$10$1=0;

 var $49=(($1)|0);
 __ZNSt3__114__shared_countD2Ev($49);
 var $50=($__c|0)==-1;
 var $51=$__c<<1;
 var $52=$51;
 var $53=($50?-1:$52);
 var $54=HEAP8[($this2_i_i_i)];
 var $55=$54&1;
 var $56=(($55<<24)>>24)==0;
 if($56){label=18;break;}else{label=17;break;}
 case 17: 
 var $58=(($__ndflt+8)|0);
 var $59=HEAP32[(($58)>>2)];
 var $63=$59;label=19;break;
 case 18: 
 var $61=$__ndflt;
 var $62=(($61+1)|0);
 var $63=$62;label=19;break;
 case 19: 
 var $63;
 var $64=(function() { try { __THREW__ = 0; return _catgets($53,$__set,$__msgid,$63) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=20;break; }
 case 20: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 var $67=$66$0;
 var $68=$66$1;
 var $_1=$67;var $_13=$68;label=42;break;
 case 21: 
 var $lpad_loopexit37$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit37$1 = tempRet0;
 var $lpad_phi38$1=$lpad_loopexit37$1;var $lpad_phi38$0=$lpad_loopexit37$0;label=24;break;
 case 22: 
 var $lpad_loopexit39$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit39$1 = tempRet0;
 var $lpad_phi38$1=$lpad_loopexit39$1;var $lpad_phi38$0=$lpad_loopexit39$0;label=24;break;
 case 23: 
 var $lpad_nonloopexit40$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit40$1 = tempRet0;
 var $lpad_phi38$1=$lpad_nonloopexit40$1;var $lpad_phi38$0=$lpad_nonloopexit40$0;label=24;break;
 case 24: 
 var $lpad_phi38$0;
 var $lpad_phi38$1;
 var $69=$lpad_phi38$0;
 var $70=$lpad_phi38$1;
 var $71=(($1)|0);
 __ZNSt3__114__shared_countD2Ev($71);
 var $_1=$69;var $_13=$70;label=42;break;
 case 25: 
 var $this2_i_i_i8=$agg_result;
 HEAP32[(($this2_i_i_i8)>>2)]=0; HEAP32[((($this2_i_i_i8)+(4))>>2)]=0; HEAP32[((($this2_i_i_i8)+(8))>>2)]=0;
 var $73=(($2+4)|0);
 HEAP32[(($73)>>2)]=0;
 var $74=(($2)|0);
 HEAP32[(($74)>>2)]=4144;
 var $75=_strlen($64);
 var $76=(($64+$75)|0);
 var $77=$__mb_i;
 var $$etemp$11$0=8;
 var $$etemp$11$1=0;

 var $78=$__bn_i;
 var $$etemp$12$0=4;
 var $$etemp$12$1=0;

 var $79=$__nn_i;
 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $tmpcast_i=$__mb_i;
 var $$etemp$14$0=0;
 var $$etemp$14$1=0;
 var $st$15$0=(($__mb_i)|0);
 HEAP32[(($st$15$0)>>2)]=$$etemp$14$0;
 var $st$16$1=(($__mb_i+4)|0);
 HEAP32[(($st$16$1)>>2)]=$$etemp$14$1;
 var $80=($75|0)>0;
 if($80){label=26;break;}else{label=37;break;}
 case 26: 
 var $81=$__buf_i;
 var $82=(($2)|0);
 var $83=$2;
 var $84=$76;
 var $85=(($__buf_i)|0);
 var $86=(($__buf_i+128)|0);
 var $_05_i=$64;var $88=4144;label=27;break;
 case 27: 
 var $88;
 var $_05_i;
 var $$etemp$17$0=128;
 var $$etemp$17$1=0;

 HEAP32[(($__nn_i)>>2)]=$_05_i;
 var $89=(($88+16)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=$_05_i;
 var $92=((($84)-($91))|0);
 var $93=($92|0)>32;
 var $94=(($_05_i+32)|0);
 var $95=($93?$94:$76);
 var $96=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$90]($82,$tmpcast_i,$_05_i,$95,$__nn_i,$85,$86,$__bn_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=39;break; }
 case 28: 
 var $97=($96|0)==2;
 var $98=HEAP32[(($__nn_i)>>2)];
 var $99=($98|0)==($_05_i|0);
 var $or_cond3_i=$97|$99;
 if($or_cond3_i){label=30;break;}else{label=29;break;}
 case 29: 
 var $100=HEAP32[(($__bn_i)>>2)];
 var $101=($85>>>0)<($100>>>0);
 if($101){var $__p_04_i=$85;label=32;break;}else{var $108=$98;label=35;break;}
 case 30: 
 (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(1064) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=40;break; }
 case 31: 
 throw "Reached an unreachable!";
 case 32: 
 var $__p_04_i;
 var $103=HEAP32[(($__p_04_i)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($agg_result,$103) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=38;break; }
 case 33: 
 var $104=(($__p_04_i+4)|0);
 var $105=HEAP32[(($__bn_i)>>2)];
 var $106=($104>>>0)<($105>>>0);
 if($106){var $__p_04_i=$104;label=32;break;}else{label=34;break;}
 case 34: 
 var $_pre9_i=HEAP32[(($__nn_i)>>2)];
 var $108=$_pre9_i;label=35;break;
 case 35: 
 var $108;
 var $$etemp$18$0=128;
 var $$etemp$18$1=0;

 var $109=($108>>>0)<($76>>>0);
 if($109){label=36;break;}else{label=37;break;}
 case 36: 
 var $_pre44=HEAP32[(($83)>>2)];
 var $_05_i=$108;var $88=$_pre44;label=27;break;
 case 37: 
 var $$etemp$19$0=8;
 var $$etemp$19$1=0;

 var $$etemp$20$0=4;
 var $$etemp$20$1=0;

 var $$etemp$21$0=4;
 var $$etemp$21$1=0;

 var $110=(($2)|0);
 __ZNSt3__114__shared_countD2Ev($110);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 STACKTOP=sp;return;
 case 38: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=41;break;
 case 39: 
 var $lpad_loopexit31$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit31$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit31$1;var $lpad_phi$0=$lpad_loopexit31$0;label=41;break;
 case 40: 
 var $lpad_nonloopexit32$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit32$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit32$1;var $lpad_phi$0=$lpad_nonloopexit32$0;label=41;break;
 case 41: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $111=$lpad_phi$0;
 var $112=$lpad_phi$1;
 var $113=(($2)|0);
 __ZNSt3__114__shared_countD2Ev($113);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($agg_result);
 var $_1=$111;var $_13=$112;label=42;break;
 case 42: 
 var $_13;
 var $_1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 var $115$0=$_1;
 var $115$1=0;
 var $116$0=$115$0;
 var $116$1=$_13;
 ___resumeException($116$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c){
 var label=0;


 var $1=($__c|0)==-1;
 var $2=$__c<<1;
 var $3=$2;
 var $4=($1?-1:$3);
 var $5=_catclose($4);
 return;
}


function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=___cxa_allocate_exception(8);
 var $2=$1;
 (function() { try { __THREW__ = 0; return __ZNSt11logic_errorC2EPKc($2,296) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $4=$1;
 HEAP32[(($4)>>2)]=2600;
 ___cxa_throw($1,8232,(72));
 throw "Reached an unreachable!";
 case 3: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1); var $6$1 = tempRet0;
 ___cxa_free_exception($1);
 ___resumeException($6$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale5__impC2Ej($this,$refs){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+448)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i118=sp;
 var $__p_i_i_i114=(sp)+(16);
 var $__p_i_i_i107=(sp)+(32);
 var $__p_i_i_i101=(sp)+(48);
 var $__p_i_i_i97=(sp)+(64);
 var $__p_i_i_i93=(sp)+(80);
 var $__p_i_i_i89=(sp)+(96);
 var $__p_i_i_i85=(sp)+(112);
 var $__p_i_i_i81=(sp)+(128);
 var $__p_i_i_i77=(sp)+(144);
 var $__p_i_i_i73=(sp)+(160);
 var $__p_i_i_i69=(sp)+(176);
 var $__p_i_i_i65=(sp)+(192);
 var $__p_i_i_i61=(sp)+(208);
 var $__p_i_i_i57=(sp)+(224);
 var $__p_i_i_i53=(sp)+(240);
 var $__p_i_i_i49=(sp)+(256);
 var $__p_i_i_i45=(sp)+(272);
 var $__p_i_i_i41=(sp)+(288);
 var $__p_i_i_i37=(sp)+(304);
 var $__p_i_i_i33=(sp)+(320);
 var $__p_i_i_i29=(sp)+(336);
 var $__p_i_i_i25=(sp)+(352);
 var $__p_i_i_i21=(sp)+(368);
 var $__p_i_i_i17=(sp)+(384);
 var $__p_i_i_i13=(sp)+(400);
 var $__p_i_i_i9=(sp)+(416);
 var $__p_i_i_i=(sp)+(432);
 var $1=((($refs)-(1))|0);
 var $2=(($this+4)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($this)|0);
 HEAP32[(($3)>>2)]=3920;
 var $4=(($this+8)|0);
 var $5=(($this+12)|0);
 var $6=(($this+16)|0);
 var $7=(($this+136)|0);
 var $8=(($this+24)|0);
 HEAP8[($7)]=1;
 var $9=$8;
 HEAP32[(($5)>>2)]=$9;
 HEAP32[(($4)>>2)]=$9;
 var $10=$7;
 HEAP32[(($6)>>2)]=$10;
 var $_0_i_i=28;var $12=$9;label=2;break;
 case 2: 
 var $12;
 var $_0_i_i;
 var $13=($12|0)==0;
 if($13){var $15=0;label=4;break;}else{label=3;break;}
 case 3: 
 HEAP32[(($12)>>2)]=0;
 var $_pre1_i_i=HEAP32[(($5)>>2)];
 var $15=$_pre1_i_i;label=4;break;
 case 4: 
 var $15;
 var $16=(($15+4)|0);
 HEAP32[(($5)>>2)]=$16;
 var $17=((($_0_i_i)-(1))|0);
 var $18=($17|0)==0;
 if($18){label=5;break;}else{var $_0_i_i=$17;var $12=$16;label=2;break;}
 case 5: 
 var $19=(($this+144)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($19,152,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=110;break; }
 case 6: 
 var $20=HEAP32[(($4)>>2)];
 var $21=HEAP32[(($5)>>2)];
 var $22=($21|0)==($20|0);
 if($22){label=8;break;}else{label=7;break;}
 case 7: 
 var $__new_last2_i_i_i3=$20;
 var $scevgep_i_i_i4=((($21)-(4))|0);
 var $23=$scevgep_i_i_i4;
 var $24=((($23)-($__new_last2_i_i_i3))|0);
 var $25=$24>>>2;
 var $26=$25^-1;
 var $scevgep4_i_i_i5=(($21+($26<<2))|0);
 HEAP32[(($5)>>2)]=$scevgep4_i_i_i5;
 label=8;break;
 case 8: 
 HEAP32[((12116)>>2)]=0;
 HEAP32[((12112)>>2)]=3624;
 var $28=$__p_i_i_i9;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $29=HEAP32[((13112)>>2)];
 var $30=($29|0)==-1;
 if($30){label=10;break;}else{label=9;break;}
 case 9: 
 var $32=(($__p_i_i_i9)|0);
 HEAP32[(($32)>>2)]=13112;
 var $33=(($__p_i_i_i9+4)|0);
 HEAP32[(($33)>>2)]=(26);
 var $34=(($__p_i_i_i9+8)|0);
 HEAP32[(($34)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13112,$28,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=111;break; }
 case 10: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $35=HEAP32[((13116)>>2)];
 var $36=((($35)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12112,$36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=111;break; }
 case 11: 
 HEAP32[((12108)>>2)]=0;
 HEAP32[((12104)>>2)]=3584;
 var $38=$__p_i_i_i13;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $39=HEAP32[((13104)>>2)];
 var $40=($39|0)==-1;
 if($40){label=13;break;}else{label=12;break;}
 case 12: 
 var $42=(($__p_i_i_i13)|0);
 HEAP32[(($42)>>2)]=13104;
 var $43=(($__p_i_i_i13+4)|0);
 HEAP32[(($43)>>2)]=(26);
 var $44=(($__p_i_i_i13+8)|0);
 HEAP32[(($44)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13104,$38,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=111;break; }
 case 13: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $45=HEAP32[((13108)>>2)];
 var $46=((($45)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12104,$46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=111;break; }
 case 14: 
 HEAP32[((12332)>>2)]=0;
 HEAP32[((12328)>>2)]=4032;
 HEAP32[((12336)>>2)]=0;
 HEAP8[(12340)]=0;
 var $47=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=15;break; }
 case 15: 
 var $49$0 = ___cxa_find_matching_catch(-1, -1,0); var $49$1 = tempRet0;
 var $50=$49$0;
 ___clang_call_terminate($50);
 throw "Reached an unreachable!";
 case 16: 
 var $52=HEAP32[(($47)>>2)];
 HEAP32[((12336)>>2)]=$52;
 var $53=$__p_i_i_i17;
 var $$etemp$4$0=12;
 var $$etemp$4$1=0;

 var $54=HEAP32[((13432)>>2)];
 var $55=($54|0)==-1;
 if($55){label=18;break;}else{label=17;break;}
 case 17: 
 var $57=(($__p_i_i_i17)|0);
 HEAP32[(($57)>>2)]=13432;
 var $58=(($__p_i_i_i17+4)|0);
 HEAP32[(($58)>>2)]=(26);
 var $59=(($__p_i_i_i17+8)|0);
 HEAP32[(($59)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13432,$53,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=111;break; }
 case 18: 
 var $$etemp$5$0=12;
 var $$etemp$5$1=0;

 var $60=HEAP32[((13436)>>2)];
 var $61=((($60)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12328,$61) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=111;break; }
 case 19: 
 HEAP32[((12324)>>2)]=0;
 HEAP32[((12320)>>2)]=3952;
 var $63=$__p_i_i_i21;
 var $$etemp$6$0=12;
 var $$etemp$6$1=0;

 var $64=HEAP32[((13424)>>2)];
 var $65=($64|0)==-1;
 if($65){label=21;break;}else{label=20;break;}
 case 20: 
 var $67=(($__p_i_i_i21)|0);
 HEAP32[(($67)>>2)]=13424;
 var $68=(($__p_i_i_i21+4)|0);
 HEAP32[(($68)>>2)]=(26);
 var $69=(($__p_i_i_i21+8)|0);
 HEAP32[(($69)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13424,$63,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=111;break; }
 case 21: 
 var $$etemp$7$0=12;
 var $$etemp$7$1=0;

 var $70=HEAP32[((13428)>>2)];
 var $71=((($70)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12320,$71) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=111;break; }
 case 22: 
 HEAP32[((12140)>>2)]=0;
 HEAP32[((12136)>>2)]=3720;
 var $73=$__p_i_i_i25;
 var $$etemp$8$0=12;
 var $$etemp$8$1=0;

 var $74=HEAP32[((13128)>>2)];
 var $75=($74|0)==-1;
 if($75){label=24;break;}else{label=23;break;}
 case 23: 
 var $77=(($__p_i_i_i25)|0);
 HEAP32[(($77)>>2)]=13128;
 var $78=(($__p_i_i_i25+4)|0);
 HEAP32[(($78)>>2)]=(26);
 var $79=(($__p_i_i_i25+8)|0);
 HEAP32[(($79)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13128,$73,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=111;break; }
 case 24: 
 var $$etemp$9$0=12;
 var $$etemp$9$1=0;

 var $80=HEAP32[((13132)>>2)];
 var $81=((($80)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12136,$81) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=111;break; }
 case 25: 
 HEAP32[((12124)>>2)]=0;
 HEAP32[((12120)>>2)]=3664;
 var $82=HEAP8[(13992)];
 var $83=(($82<<24)>>24)==0;
 if($83){label=26;break;}else{label=30;break;}
 case 26: 
 var $85=___cxa_guard_acquire(13992);
 var $86=($85|0)==0;
 if($86){label=30;break;}else{label=27;break;}
 case 27: 
 var $88=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=29;break; }
 case 28: 
 HEAP32[((11888)>>2)]=$88;

 label=30;break;
 case 29: 
 var $90$0 = ___cxa_find_matching_catch(-1, -1); var $90$1 = tempRet0;

 __ZNSt3__114__shared_countD2Ev(12120);
 var $eh_lpad_body$1=$90$1;var $eh_lpad_body$0=$90$0;label=112;break;
 case 30: 
 var $92=HEAP32[((11888)>>2)];
 HEAP32[((12128)>>2)]=$92;
 var $93=$__p_i_i_i29;
 var $$etemp$10$0=12;
 var $$etemp$10$1=0;

 var $94=HEAP32[((13120)>>2)];
 var $95=($94|0)==-1;
 if($95){label=32;break;}else{label=31;break;}
 case 31: 
 var $97=(($__p_i_i_i29)|0);
 HEAP32[(($97)>>2)]=13120;
 var $98=(($__p_i_i_i29+4)|0);
 HEAP32[(($98)>>2)]=(26);
 var $99=(($__p_i_i_i29+8)|0);
 HEAP32[(($99)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13120,$93,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=111;break; }
 case 32: 
 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $100=HEAP32[((13124)>>2)];
 var $101=((($100)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12120,$101) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=111;break; }
 case 33: 
 HEAP32[((12148)>>2)]=0;
 HEAP32[((12144)>>2)]=3776;
 var $103=$__p_i_i_i33;
 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $104=HEAP32[((13136)>>2)];
 var $105=($104|0)==-1;
 if($105){label=35;break;}else{label=34;break;}
 case 34: 
 var $107=(($__p_i_i_i33)|0);
 HEAP32[(($107)>>2)]=13136;
 var $108=(($__p_i_i_i33+4)|0);
 HEAP32[(($108)>>2)]=(26);
 var $109=(($__p_i_i_i33+8)|0);
 HEAP32[(($109)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13136,$103,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=111;break; }
 case 35: 
 var $$etemp$13$0=12;
 var $$etemp$13$1=0;

 var $110=HEAP32[((13140)>>2)];
 var $111=((($110)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12144,$111) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=111;break; }
 case 36: 
 HEAP32[((12156)>>2)]=0;
 HEAP32[((12152)>>2)]=3832;
 var $113=$__p_i_i_i37;
 var $$etemp$14$0=12;
 var $$etemp$14$1=0;

 var $114=HEAP32[((13144)>>2)];
 var $115=($114|0)==-1;
 if($115){label=38;break;}else{label=37;break;}
 case 37: 
 var $117=(($__p_i_i_i37)|0);
 HEAP32[(($117)>>2)]=13144;
 var $118=(($__p_i_i_i37+4)|0);
 HEAP32[(($118)>>2)]=(26);
 var $119=(($__p_i_i_i37+8)|0);
 HEAP32[(($119)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13144,$113,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=111;break; }
 case 38: 
 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $120=HEAP32[((13148)>>2)];
 var $121=((($120)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12152,$121) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=111;break; }
 case 39: 
 HEAP32[((12036)>>2)]=0;
 HEAP32[((12032)>>2)]=3128;
 HEAP8[(12040)]=46;
 HEAP8[(12041)]=44;
 HEAP32[((12044)>>2)]=0; HEAP32[((12048)>>2)]=0; HEAP32[((12052)>>2)]=0;
 var $123=$__p_i_i_i41;
 var $$etemp$16$0=12;
 var $$etemp$16$1=0;

 var $124=HEAP32[((13048)>>2)];
 var $125=($124|0)==-1;
 if($125){label=41;break;}else{label=40;break;}
 case 40: 
 var $127=(($__p_i_i_i41)|0);
 HEAP32[(($127)>>2)]=13048;
 var $128=(($__p_i_i_i41+4)|0);
 HEAP32[(($128)>>2)]=(26);
 var $129=(($__p_i_i_i41+8)|0);
 HEAP32[(($129)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13048,$123,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=111;break; }
 case 41: 
 var $$etemp$17$0=12;
 var $$etemp$17$1=0;

 var $130=HEAP32[((13052)>>2)];
 var $131=((($130)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12032,$131) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=111;break; }
 case 42: 
 HEAP32[((12004)>>2)]=0;
 HEAP32[((12000)>>2)]=3080;
 HEAP32[((12008)>>2)]=46;
 HEAP32[((12012)>>2)]=44;
 HEAP32[((12016)>>2)]=0; HEAP32[((12020)>>2)]=0; HEAP32[((12024)>>2)]=0;
 var $133=$__p_i_i_i45;
 var $$etemp$18$0=12;
 var $$etemp$18$1=0;

 var $134=HEAP32[((13040)>>2)];
 var $135=($134|0)==-1;
 if($135){label=44;break;}else{label=43;break;}
 case 43: 
 var $137=(($__p_i_i_i45)|0);
 HEAP32[(($137)>>2)]=13040;
 var $138=(($__p_i_i_i45+4)|0);
 HEAP32[(($138)>>2)]=(26);
 var $139=(($__p_i_i_i45+8)|0);
 HEAP32[(($139)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13040,$133,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=111;break; }
 case 44: 
 var $$etemp$19$0=12;
 var $$etemp$19$1=0;

 var $140=HEAP32[((13044)>>2)];
 var $141=((($140)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12000,$141) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=111;break; }
 case 45: 
 HEAP32[((12100)>>2)]=0;
 HEAP32[((12096)>>2)]=3512;
 var $143=$__p_i_i_i49;
 var $$etemp$20$0=12;
 var $$etemp$20$1=0;

 var $144=HEAP32[((13096)>>2)];
 var $145=($144|0)==-1;
 if($145){label=47;break;}else{label=46;break;}
 case 46: 
 var $147=(($__p_i_i_i49)|0);
 HEAP32[(($147)>>2)]=13096;
 var $148=(($__p_i_i_i49+4)|0);
 HEAP32[(($148)>>2)]=(26);
 var $149=(($__p_i_i_i49+8)|0);
 HEAP32[(($149)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13096,$143,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=111;break; }
 case 47: 
 var $$etemp$21$0=12;
 var $$etemp$21$1=0;

 var $150=HEAP32[((13100)>>2)];
 var $151=((($150)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12096,$151) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=111;break; }
 case 48: 
 HEAP32[((12092)>>2)]=0;
 HEAP32[((12088)>>2)]=3440;
 var $153=$__p_i_i_i53;
 var $$etemp$22$0=12;
 var $$etemp$22$1=0;

 var $154=HEAP32[((13088)>>2)];
 var $155=($154|0)==-1;
 if($155){label=50;break;}else{label=49;break;}
 case 49: 
 var $157=(($__p_i_i_i53)|0);
 HEAP32[(($157)>>2)]=13088;
 var $158=(($__p_i_i_i53+4)|0);
 HEAP32[(($158)>>2)]=(26);
 var $159=(($__p_i_i_i53+8)|0);
 HEAP32[(($159)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13088,$153,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=111;break; }
 case 50: 
 var $$etemp$23$0=12;
 var $$etemp$23$1=0;

 var $160=HEAP32[((13092)>>2)];
 var $161=((($160)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12088,$161) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=111;break; }
 case 51: 
 HEAP32[((12084)>>2)]=0;
 HEAP32[((12080)>>2)]=3376;
 var $163=$__p_i_i_i57;
 var $$etemp$24$0=12;
 var $$etemp$24$1=0;

 var $164=HEAP32[((13080)>>2)];
 var $165=($164|0)==-1;
 if($165){label=53;break;}else{label=52;break;}
 case 52: 
 var $167=(($__p_i_i_i57)|0);
 HEAP32[(($167)>>2)]=13080;
 var $168=(($__p_i_i_i57+4)|0);
 HEAP32[(($168)>>2)]=(26);
 var $169=(($__p_i_i_i57+8)|0);
 HEAP32[(($169)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13080,$163,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=111;break; }
 case 53: 
 var $$etemp$25$0=12;
 var $$etemp$25$1=0;

 var $170=HEAP32[((13084)>>2)];
 var $171=((($170)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12080,$171) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=111;break; }
 case 54: 
 HEAP32[((12076)>>2)]=0;
 HEAP32[((12072)>>2)]=3312;
 var $173=$__p_i_i_i61;
 var $$etemp$26$0=12;
 var $$etemp$26$1=0;

 var $174=HEAP32[((13072)>>2)];
 var $175=($174|0)==-1;
 if($175){label=56;break;}else{label=55;break;}
 case 55: 
 var $177=(($__p_i_i_i61)|0);
 HEAP32[(($177)>>2)]=13072;
 var $178=(($__p_i_i_i61+4)|0);
 HEAP32[(($178)>>2)]=(26);
 var $179=(($__p_i_i_i61+8)|0);
 HEAP32[(($179)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13072,$173,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=111;break; }
 case 56: 
 var $$etemp$27$0=12;
 var $$etemp$27$1=0;

 var $180=HEAP32[((13076)>>2)];
 var $181=((($180)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12072,$181) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=111;break; }
 case 57: 
 HEAP32[((12372)>>2)]=0;
 HEAP32[((12368)>>2)]=4960;
 var $183=$__p_i_i_i65;
 var $$etemp$28$0=12;
 var $$etemp$28$1=0;

 var $184=HEAP32[((13912)>>2)];
 var $185=($184|0)==-1;
 if($185){label=59;break;}else{label=58;break;}
 case 58: 
 var $187=(($__p_i_i_i65)|0);
 HEAP32[(($187)>>2)]=13912;
 var $188=(($__p_i_i_i65+4)|0);
 HEAP32[(($188)>>2)]=(26);
 var $189=(($__p_i_i_i65+8)|0);
 HEAP32[(($189)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13912,$183,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=111;break; }
 case 59: 
 var $$etemp$29$0=12;
 var $$etemp$29$1=0;

 var $190=HEAP32[((13916)>>2)];
 var $191=((($190)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12368,$191) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=111;break; }
 case 60: 
 HEAP32[((12364)>>2)]=0;
 HEAP32[((12360)>>2)]=4896;
 var $193=$__p_i_i_i69;
 var $$etemp$30$0=12;
 var $$etemp$30$1=0;

 var $194=HEAP32[((13904)>>2)];
 var $195=($194|0)==-1;
 if($195){label=62;break;}else{label=61;break;}
 case 61: 
 var $197=(($__p_i_i_i69)|0);
 HEAP32[(($197)>>2)]=13904;
 var $198=(($__p_i_i_i69+4)|0);
 HEAP32[(($198)>>2)]=(26);
 var $199=(($__p_i_i_i69+8)|0);
 HEAP32[(($199)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13904,$193,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=111;break; }
 case 62: 
 var $$etemp$31$0=12;
 var $$etemp$31$1=0;

 var $200=HEAP32[((13908)>>2)];
 var $201=((($200)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12360,$201) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { label=111;break; }
 case 63: 
 HEAP32[((12356)>>2)]=0;
 HEAP32[((12352)>>2)]=4832;
 var $203=$__p_i_i_i73;
 var $$etemp$32$0=12;
 var $$etemp$32$1=0;

 var $204=HEAP32[((13896)>>2)];
 var $205=($204|0)==-1;
 if($205){label=65;break;}else{label=64;break;}
 case 64: 
 var $207=(($__p_i_i_i73)|0);
 HEAP32[(($207)>>2)]=13896;
 var $208=(($__p_i_i_i73+4)|0);
 HEAP32[(($208)>>2)]=(26);
 var $209=(($__p_i_i_i73+8)|0);
 HEAP32[(($209)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13896,$203,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=111;break; }
 case 65: 
 var $$etemp$33$0=12;
 var $$etemp$33$1=0;

 var $210=HEAP32[((13900)>>2)];
 var $211=((($210)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12352,$211) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=111;break; }
 case 66: 
 HEAP32[((12348)>>2)]=0;
 HEAP32[((12344)>>2)]=4768;
 var $213=$__p_i_i_i77;
 var $$etemp$34$0=12;
 var $$etemp$34$1=0;

 var $214=HEAP32[((13888)>>2)];
 var $215=($214|0)==-1;
 if($215){label=68;break;}else{label=67;break;}
 case 67: 
 var $217=(($__p_i_i_i77)|0);
 HEAP32[(($217)>>2)]=13888;
 var $218=(($__p_i_i_i77+4)|0);
 HEAP32[(($218)>>2)]=(26);
 var $219=(($__p_i_i_i77+8)|0);
 HEAP32[(($219)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13888,$213,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=111;break; }
 case 68: 
 var $$etemp$35$0=12;
 var $$etemp$35$1=0;

 var $220=HEAP32[((13892)>>2)];
 var $221=((($220)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12344,$221) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=69;break; } else { label=111;break; }
 case 69: 
 HEAP32[((11932)>>2)]=0;
 HEAP32[((11928)>>2)]=2784;
 var $223=$__p_i_i_i81;
 var $$etemp$36$0=12;
 var $$etemp$36$1=0;

 var $224=HEAP32[((13000)>>2)];
 var $225=($224|0)==-1;
 if($225){label=71;break;}else{label=70;break;}
 case 70: 
 var $227=(($__p_i_i_i81)|0);
 HEAP32[(($227)>>2)]=13000;
 var $228=(($__p_i_i_i81+4)|0);
 HEAP32[(($228)>>2)]=(26);
 var $229=(($__p_i_i_i81+8)|0);
 HEAP32[(($229)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13000,$223,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=111;break; }
 case 71: 
 var $$etemp$37$0=12;
 var $$etemp$37$1=0;

 var $230=HEAP32[((13004)>>2)];
 var $231=((($230)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11928,$231) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=111;break; }
 case 72: 
 HEAP32[((11924)>>2)]=0;
 HEAP32[((11920)>>2)]=2744;
 var $233=$__p_i_i_i85;
 var $$etemp$38$0=12;
 var $$etemp$38$1=0;

 var $234=HEAP32[((12992)>>2)];
 var $235=($234|0)==-1;
 if($235){label=74;break;}else{label=73;break;}
 case 73: 
 var $237=(($__p_i_i_i85)|0);
 HEAP32[(($237)>>2)]=12992;
 var $238=(($__p_i_i_i85+4)|0);
 HEAP32[(($238)>>2)]=(26);
 var $239=(($__p_i_i_i85+8)|0);
 HEAP32[(($239)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(12992,$233,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=111;break; }
 case 74: 
 var $$etemp$39$0=12;
 var $$etemp$39$1=0;

 var $240=HEAP32[((12996)>>2)];
 var $241=((($240)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11920,$241) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=75;break; } else { label=111;break; }
 case 75: 
 HEAP32[((11916)>>2)]=0;
 HEAP32[((11912)>>2)]=2704;
 var $243=$__p_i_i_i89;
 var $$etemp$40$0=12;
 var $$etemp$40$1=0;

 var $244=HEAP32[((12984)>>2)];
 var $245=($244|0)==-1;
 if($245){label=77;break;}else{label=76;break;}
 case 76: 
 var $247=(($__p_i_i_i89)|0);
 HEAP32[(($247)>>2)]=12984;
 var $248=(($__p_i_i_i89+4)|0);
 HEAP32[(($248)>>2)]=(26);
 var $249=(($__p_i_i_i89+8)|0);
 HEAP32[(($249)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(12984,$243,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=77;break; } else { label=111;break; }
 case 77: 
 var $$etemp$41$0=12;
 var $$etemp$41$1=0;

 var $250=HEAP32[((12988)>>2)];
 var $251=((($250)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11912,$251) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=78;break; } else { label=111;break; }
 case 78: 
 HEAP32[((11908)>>2)]=0;
 HEAP32[((11904)>>2)]=2664;
 var $253=$__p_i_i_i93;
 var $$etemp$42$0=12;
 var $$etemp$42$1=0;

 var $254=HEAP32[((12976)>>2)];
 var $255=($254|0)==-1;
 if($255){label=80;break;}else{label=79;break;}
 case 79: 
 var $257=(($__p_i_i_i93)|0);
 HEAP32[(($257)>>2)]=12976;
 var $258=(($__p_i_i_i93+4)|0);
 HEAP32[(($258)>>2)]=(26);
 var $259=(($__p_i_i_i93+8)|0);
 HEAP32[(($259)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(12976,$253,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=80;break; } else { label=111;break; }
 case 80: 
 var $$etemp$43$0=12;
 var $$etemp$43$1=0;

 var $260=HEAP32[((12980)>>2)];
 var $261=((($260)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11904,$261) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=81;break; } else { label=111;break; }
 case 81: 
 HEAP32[((11988)>>2)]=0;
 HEAP32[((11984)>>2)]=2984;
 HEAP32[((11992)>>2)]=3032;
 var $263=$__p_i_i_i97;
 var $$etemp$44$0=12;
 var $$etemp$44$1=0;

 var $264=HEAP32[((13032)>>2)];
 var $265=($264|0)==-1;
 if($265){label=83;break;}else{label=82;break;}
 case 82: 
 var $267=(($__p_i_i_i97)|0);
 HEAP32[(($267)>>2)]=13032;
 var $268=(($__p_i_i_i97+4)|0);
 HEAP32[(($268)>>2)]=(26);
 var $269=(($__p_i_i_i97+8)|0);
 HEAP32[(($269)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13032,$263,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=83;break; } else { label=111;break; }
 case 83: 
 var $$etemp$45$0=12;
 var $$etemp$45$1=0;

 var $270=HEAP32[((13036)>>2)];
 var $271=((($270)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11984,$271) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=84;break; } else { label=111;break; }
 case 84: 
 HEAP32[((11972)>>2)]=0;
 HEAP32[((11968)>>2)]=2888;
 HEAP32[((11976)>>2)]=2936;
 var $273=$__p_i_i_i101;
 var $$etemp$46$0=12;
 var $$etemp$46$1=0;

 var $274=HEAP32[((13024)>>2)];
 var $275=($274|0)==-1;
 if($275){label=86;break;}else{label=85;break;}
 case 85: 
 var $277=(($__p_i_i_i101)|0);
 HEAP32[(($277)>>2)]=13024;
 var $278=(($__p_i_i_i101+4)|0);
 HEAP32[(($278)>>2)]=(26);
 var $279=(($__p_i_i_i101+8)|0);
 HEAP32[(($279)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13024,$273,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=86;break; } else { label=111;break; }
 case 86: 
 var $$etemp$47$0=12;
 var $$etemp$47$1=0;

 var $280=HEAP32[((13028)>>2)];
 var $281=((($280)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11968,$281) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=87;break; } else { label=111;break; }
 case 87: 
 HEAP32[((11956)>>2)]=0;
 HEAP32[((11952)>>2)]=3888;
 var $282=HEAP8[(13992)];
 var $283=(($282<<24)>>24)==0;
 if($283){label=88;break;}else{label=92;break;}
 case 88: 
 var $285=___cxa_guard_acquire(13992);
 var $286=($285|0)==0;
 if($286){label=92;break;}else{label=89;break;}
 case 89: 
 var $288=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=90;break; } else { label=91;break; }
 case 90: 
 HEAP32[((11888)>>2)]=$288;

 label=92;break;
 case 91: 
 var $290$0 = ___cxa_find_matching_catch(-1, -1); var $290$1 = tempRet0;

 __ZNSt3__114__shared_countD2Ev(11952);
 var $eh_lpad_body$1=$290$1;var $eh_lpad_body$0=$290$0;label=112;break;
 case 92: 
 var $292=HEAP32[((11888)>>2)];
 HEAP32[((11960)>>2)]=$292;
 HEAP32[((11952)>>2)]=2856;
 var $293=$__p_i_i_i107;
 var $$etemp$48$0=12;
 var $$etemp$48$1=0;

 var $294=HEAP32[((13016)>>2)];
 var $295=($294|0)==-1;
 if($295){label=94;break;}else{label=93;break;}
 case 93: 
 var $297=(($__p_i_i_i107)|0);
 HEAP32[(($297)>>2)]=13016;
 var $298=(($__p_i_i_i107+4)|0);
 HEAP32[(($298)>>2)]=(26);
 var $299=(($__p_i_i_i107+8)|0);
 HEAP32[(($299)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13016,$293,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=94;break; } else { label=111;break; }
 case 94: 
 var $$etemp$49$0=12;
 var $$etemp$49$1=0;

 var $300=HEAP32[((13020)>>2)];
 var $301=((($300)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11952,$301) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=95;break; } else { label=111;break; }
 case 95: 
 HEAP32[((11940)>>2)]=0;
 HEAP32[((11936)>>2)]=3888;
 var $302=HEAP8[(13992)];
 var $303=(($302<<24)>>24)==0;
 if($303){label=96;break;}else{label=100;break;}
 case 96: 
 var $305=___cxa_guard_acquire(13992);
 var $306=($305|0)==0;
 if($306){label=100;break;}else{label=97;break;}
 case 97: 
 var $308=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=98;break; } else { label=99;break; }
 case 98: 
 HEAP32[((11888)>>2)]=$308;

 label=100;break;
 case 99: 
 var $310$0 = ___cxa_find_matching_catch(-1, -1); var $310$1 = tempRet0;

 __ZNSt3__114__shared_countD2Ev(11936);
 var $eh_lpad_body$1=$310$1;var $eh_lpad_body$0=$310$0;label=112;break;
 case 100: 
 var $312=HEAP32[((11888)>>2)];
 HEAP32[((11944)>>2)]=$312;
 HEAP32[((11936)>>2)]=2824;
 var $313=$__p_i_i_i114;
 var $$etemp$50$0=12;
 var $$etemp$50$1=0;

 var $314=HEAP32[((13008)>>2)];
 var $315=($314|0)==-1;
 if($315){label=102;break;}else{label=101;break;}
 case 101: 
 var $317=(($__p_i_i_i114)|0);
 HEAP32[(($317)>>2)]=13008;
 var $318=(($__p_i_i_i114+4)|0);
 HEAP32[(($318)>>2)]=(26);
 var $319=(($__p_i_i_i114+8)|0);
 HEAP32[(($319)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13008,$313,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=102;break; } else { label=111;break; }
 case 102: 
 var $$etemp$51$0=12;
 var $$etemp$51$1=0;

 var $320=HEAP32[((13012)>>2)];
 var $321=((($320)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11936,$321) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=103;break; } else { label=111;break; }
 case 103: 
 HEAP32[((12068)>>2)]=0;
 HEAP32[((12064)>>2)]=3216;
 var $323=$__p_i_i_i118;
 var $$etemp$52$0=12;
 var $$etemp$52$1=0;

 var $324=HEAP32[((13064)>>2)];
 var $325=($324|0)==-1;
 if($325){label=105;break;}else{label=104;break;}
 case 104: 
 var $327=(($__p_i_i_i118)|0);
 HEAP32[(($327)>>2)]=13064;
 var $328=(($__p_i_i_i118+4)|0);
 HEAP32[(($328)>>2)]=(26);
 var $329=(($__p_i_i_i118+8)|0);
 HEAP32[(($329)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13064,$323,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=105;break; } else { label=111;break; }
 case 105: 
 var $$etemp$53$0=12;
 var $$etemp$53$1=0;

 var $330=HEAP32[((13068)>>2)];
 var $331=((($330)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12064,$331) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=106;break; } else { label=111;break; }
 case 106: 
 HEAP32[((12060)>>2)]=0;
 HEAP32[((12056)>>2)]=3176;
 var $333=$__p_i_i_i;
 var $$etemp$54$0=12;
 var $$etemp$54$1=0;

 var $334=HEAP32[((13056)>>2)];
 var $335=($334|0)==-1;
 if($335){label=108;break;}else{label=107;break;}
 case 107: 
 var $337=(($__p_i_i_i)|0);
 HEAP32[(($337)>>2)]=13056;
 var $338=(($__p_i_i_i+4)|0);
 HEAP32[(($338)>>2)]=(26);
 var $339=(($__p_i_i_i+8)|0);
 HEAP32[(($339)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13056,$333,260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=108;break; } else { label=111;break; }
 case 108: 
 var $$etemp$55$0=12;
 var $$etemp$55$1=0;

 var $340=HEAP32[((13060)>>2)];
 var $341=((($340)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12056,$341) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=109;break; } else { label=111;break; }
 case 109: 
 STACKTOP=sp;return;
 case 110: 
 var $343$0 = ___cxa_find_matching_catch(-1, -1); var $343$1 = tempRet0;
 var $344=$343$0;
 var $345=$343$1;
 var $_0=$345;var $_01=$344;label=113;break;
 case 111: 
 var $347$0 = ___cxa_find_matching_catch(-1, -1); var $347$1 = tempRet0;
 var $eh_lpad_body$1=$347$1;var $eh_lpad_body$0=$347$0;label=112;break;
 case 112: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $348=$eh_lpad_body$0;
 var $349=$eh_lpad_body$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($19);
 var $_0=$349;var $_01=$348;label=113;break;
 case 113: 
 var $_01;
 var $_0;
 var $351=HEAP32[(($4)>>2)];
 var $352=($351|0)==0;
 if($352){label=119;break;}else{label=114;break;}
 case 114: 
 var $354=HEAP32[(($5)>>2)];
 var $355=($354|0)==($351|0);
 if($355){label=116;break;}else{label=115;break;}
 case 115: 
 var $__new_last2_i_i_i=$351;
 var $scevgep_i_i_i=((($354)-(4))|0);
 var $356=$scevgep_i_i_i;
 var $357=((($356)-($__new_last2_i_i_i))|0);
 var $358=$357>>>2;
 var $359=$358^-1;
 var $scevgep4_i_i_i=(($354+($359<<2))|0);
 HEAP32[(($5)>>2)]=$scevgep4_i_i_i;
 label=116;break;
 case 116: 
 var $360=($9|0)==($351|0);
 if($360){label=117;break;}else{label=118;break;}
 case 117: 
 HEAP8[($7)]=0;
 label=119;break;
 case 118: 
 var $363=$351;
 __ZdlPv($363);
 label=119;break;
 case 119: 
 var $364=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($364);
 var $365$0=$_01;
 var $365$1=0;
 var $366$0=$365$0;
 var $366$1=$_0;
 ___resumeException($366$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f)|0);
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 var $2=(($this+8)|0);
 var $3=(($this+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($2)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$4;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=$9>>2;
 var $11=($10>>>0)>($id>>>0);
 if($11){var $31=$6;label=11;break;}else{label=2;break;}
 case 2: 
 var $13=((($id)+(1))|0);
 var $14=($13>>>0)>($10>>>0);
 if($14){label=3;break;}else{label=5;break;}
 case 3: 
 var $16=((($13)-($10))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($2,$16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=8;break; }
 case 4: 
 var $_pre=HEAP32[(($5)>>2)];
 var $31=$_pre;label=11;break;
 case 5: 
 var $18=($13>>>0)<($10>>>0);
 if($18){label=6;break;}else{var $31=$6;label=11;break;}
 case 6: 
 var $20=(($6+($13<<2))|0);
 var $21=($4|0)==($20|0);
 if($21){var $31=$6;label=11;break;}else{label=7;break;}
 case 7: 
 var $__new_last2_i_i_i=$20;
 var $scevgep_i_i_i=((($4)-(4))|0);
 var $22=$scevgep_i_i_i;
 var $23=((($22)-($__new_last2_i_i_i))|0);
 var $24=$23>>>2;
 var $25=$24^-1;
 var $scevgep4_i_i_i=(($4+($25<<2))|0);
 HEAP32[(($3)>>2)]=$scevgep4_i_i_i;
 var $31=$6;label=11;break;
 case 8: 
 var $27$0 = ___cxa_find_matching_catch(-1, -1); var $27$1 = tempRet0;
 var $28=($f|0)==0;
 if($28){label=10;break;}else{label=9;break;}
 case 9: 
 var $30=__ZNSt3__114__shared_count16__release_sharedEv($1);
 label=10;break;
 case 10: 
 ___resumeException($27$0)
 case 11: 
 var $31;
 var $32=(($31+($id<<2))|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)==0;
 if($34){var $38=$31;label=13;break;}else{label=12;break;}
 case 12: 
 var $36=(($33)|0);
 var $37=__ZNSt3__114__shared_count16__release_sharedEv($36);
 var $_pre2=HEAP32[(($5)>>2)];
 var $38=$_pre2;label=13;break;
 case 13: 
 var $38;
 var $39=(($38+($id<<2))|0);
 HEAP32[(($39)>>2)]=$f;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale5__impD0Ev($this){
 var label=0;


 __ZNSt3__16locale5__impD2Ev($this);
 var $1=$this;
 __ZdlPv($1);
 return;
}


function __ZNSt3__16locale5__impD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=3920;
 var $2=(($this+12)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($this+8)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($3|0)==($5|0);
 if($6){label=5;break;}else{var $i_01=0;var $8=$5;var $7=$3;label=2;break;}
 case 2: 
 var $7;
 var $8;
 var $i_01;
 var $9=(($8+($i_01<<2))|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==0;
 if($11){var $17=$7;var $16=$8;label=4;break;}else{label=3;break;}
 case 3: 
 var $13=(($10)|0);
 var $14=__ZNSt3__114__shared_count16__release_sharedEv($13);
 var $_pre=HEAP32[(($2)>>2)];
 var $_pre2=HEAP32[(($4)>>2)];
 var $17=$_pre;var $16=$_pre2;label=4;break;
 case 4: 
 var $16;
 var $17;
 var $18=((($i_01)+(1))|0);
 var $19=$17;
 var $20=$16;
 var $21=((($19)-($20))|0);
 var $22=$21>>2;
 var $23=($18>>>0)<($22>>>0);
 if($23){var $i_01=$18;var $8=$16;var $7=$17;label=2;break;}else{label=5;break;}
 case 5: 
 var $24=(($this+144)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($24);
 var $25=HEAP32[(($4)>>2)];
 var $26=($25|0)==0;
 if($26){label=11;break;}else{label=6;break;}
 case 6: 
 var $28=HEAP32[(($2)>>2)];
 var $29=($28|0)==($25|0);
 if($29){label=8;break;}else{label=7;break;}
 case 7: 
 var $__new_last2_i_i_i=$25;
 var $scevgep_i_i_i=((($28)-(4))|0);
 var $30=$scevgep_i_i_i;
 var $31=((($30)-($__new_last2_i_i_i))|0);
 var $32=$31>>>2;
 var $33=$32^-1;
 var $scevgep4_i_i_i=(($28+($33<<2))|0);
 HEAP32[(($2)>>2)]=$scevgep4_i_i_i;
 label=8;break;
 case 8: 
 var $34=(($this+24)|0);
 var $35=$34;
 var $36=($35|0)==($25|0);
 if($36){label=9;break;}else{label=10;break;}
 case 9: 
 var $38=(($this+136)|0);
 HEAP8[($38)]=0;
 label=11;break;
 case 10: 
 var $40=$25;
 __ZdlPv($40);
 label=11;break;
 case 11: 
 var $41=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($41);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale8__globalEv(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(13976)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=8;break;}
 case 2: 
 var $4=___cxa_guard_acquire(13976);
 var $5=($4|0)==0;
 if($5){label=8;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(13984)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=7;break;}
 case 4: 
 var $10=___cxa_guard_acquire(13984);
 var $11=($10|0)==0;
 if($11){label=7;break;}else{label=5;break;}
 case 5: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__impC2Ej(12160,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 6: 
 HEAP32[((11872)>>2)]=12160;
 HEAP32[((11864)>>2)]=11872;

 label=7;break;
 case 7: 
 var $15=HEAP32[((11864)>>2)];
 var $16=(($15)|0);
 var $17=HEAP32[(($16)>>2)];
 HEAP32[((11880)>>2)]=$17;
 var $18=(($17)|0);
 __ZNSt3__114__shared_count12__add_sharedEv($18);
 HEAP32[((11856)>>2)]=11880;

 label=8;break;
 case 8: 
 var $20=HEAP32[((11856)>>2)];
 return $20;
 case 9: 
 var $21$0 = ___cxa_find_matching_catch(-1, -1); var $21$1 = tempRet0;


 ___resumeException($21$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16localeC2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(function() { try { __THREW__ = 0; return __ZNSt3__16locale8__globalEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $3=(($this)|0);
 var $4=(($1)|0);
 var $5=HEAP32[(($4)>>2)];
 HEAP32[(($3)>>2)]=$5;
 var $6=(($5)|0);
 __ZNSt3__114__shared_count12__add_sharedEv($6);
 return;
 case 3: 
 var $8$0 = ___cxa_find_matching_catch(-1, -1,0); var $8$1 = tempRet0;
 var $9=$8$0;
 ___clang_call_terminate($9);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16localeC2ERKS0_($this,$l){
 var label=0;


 var $1=(($this)|0);
 var $2=(($l)|0);
 var $3=HEAP32[(($2)>>2)];
 HEAP32[(($1)>>2)]=$3;
 var $4=(($3)|0);
 __ZNSt3__114__shared_count12__add_sharedEv($4);
 return;
}


function __ZNSt3__16localeD2Ev($this){
 var label=0;


 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=__ZNSt3__114__shared_count16__release_sharedEv($3);
 return;
}


function __ZNKSt3__16locale9use_facetERNS0_2idE($this,$x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i=sp;
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=(($x)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==-1;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($__p_i_i)|0);
 HEAP32[(($8)>>2)]=$x;
 var $9=(($__p_i_i+4)|0);
 HEAP32[(($9)>>2)]=(26);
 var $10=(($__p_i_i+8)|0);
 HEAP32[(($10)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E($4,$3,260);
 label=3;break;
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $11=(($x+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=((($12)-(1))|0);
 var $14=(($2+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($2+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$15;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($13>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($13<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=6;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 __ZNSt8bad_castC2Ev($27);
 ___cxa_throw($26,8200,(356));
 throw "Reached an unreachable!";
 case 6: 
 STACKTOP=sp;return $24;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale5facetD0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__16locale5facet16__on_zero_sharedEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+4)|0);
 var $6=HEAP32[(($5)>>2)];
 FUNCTION_TABLE[$6]($this);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale2id6__initEv($this){
 var label=0;


 var $1=(tempValue=HEAP32[((13152)>>2)],HEAP32[((13152)>>2)]=tempValue+1,tempValue);
 var $2=((($1)+(1))|0);
 var $3=(($this+4)|0);
 HEAP32[(($3)>>2)]=$2;
 return;
}


function __ZNSt3__15ctypeIwED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii=($c>>>0)<128;
 if($isascii){label=2;break;}else{var $12=0;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 var $5=$4$0;
 ___clang_call_terminate($5);
 throw "Reached an unreachable!";
 case 4: 
 var $6=HEAP32[(($2)>>2)];
 var $7=(($6+($c<<1))|0);
 var $8=HEAP16[(($7)>>1)];
 var $9=$8&$m;
 var $10=(($9<<16)>>16)!=0;
 var $12=$10;label=5;break;
 case 5: 
 var $12;
 return $12;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_01_lcssa=$low;label=7;break;}else{var $_013=$low;var $_04=$vec;label=2;break;}
 case 2: 
 var $_04;
 var $_013;
 var $2=HEAP32[(($_013)>>2)];
 var $isascii=($2>>>0)<128;
 if($isascii){label=3;break;}else{var $_off0=0;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 var $7=$6$0;
 ___clang_call_terminate($7);
 throw "Reached an unreachable!";
 case 5: 
 var $8=HEAP32[(($4)>>2)];
 var $9=(($8+($2<<1))|0);
 var $10=HEAP16[(($9)>>1)];
 var $_off0=$10;label=6;break;
 case 6: 
 var $_off0;
 HEAP16[(($_04)>>1)]=$_off0;
 var $12=(($_013+4)|0);
 var $13=(($_04+2)|0);
 var $14=($12|0)==($high|0);
 if($14){var $_01_lcssa=$high;label=7;break;}else{var $_013=$12;var $_04=$13;label=2;break;}
 case 7: 
 var $_01_lcssa;
 return $_01_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_02=$low;label=2;break;}
 case 2: 
 var $_02;
 var $2=HEAP32[(($_02)>>2)];
 var $isascii=($2>>>0)<128;
 if($isascii){label=3;break;}else{label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 var $7=$6$0;
 ___clang_call_terminate($7);
 throw "Reached an unreachable!";
 case 5: 
 var $8=HEAP32[(($4)>>2)];
 var $9=(($8+($2<<1))|0);
 var $10=HEAP16[(($9)>>1)];
 var $11=$10&$m;
 var $12=(($11<<16)>>16)==0;
 if($12){label=6;break;}else{var $_0_lcssa=$_02;label=7;break;}
 case 6: 
 var $14=(($_02+4)|0);
 var $15=($14|0)==($high|0);
 if($15){var $_0_lcssa=$high;label=7;break;}else{var $_02=$14;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_02=$low;label=3;break;}
 case 2: 
 var $3=($15|0)==($high|0);
 if($3){var $_0_lcssa=$high;label=7;break;}else{var $_02=$15;label=3;break;}
 case 3: 
 var $_02;
 var $4=HEAP32[(($_02)>>2)];
 var $isascii=($4>>>0)<128;
 if($isascii){label=4;break;}else{var $_0_lcssa=$_02;label=7;break;}
 case 4: 
 var $6=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=5;break; }
 case 5: 
 var $8$0 = ___cxa_find_matching_catch(-1, -1,0); var $8$1 = tempRet0;
 var $9=$8$0;
 ___clang_call_terminate($9);
 throw "Reached an unreachable!";
 case 6: 
 var $10=HEAP32[(($6)>>2)];
 var $11=(($10+($4<<1))|0);
 var $12=HEAP16[(($11)>>1)];
 var $13=$12&$m;
 var $14=(($13<<16)>>16)==0;
 var $15=(($_02+4)|0);
 if($14){var $_0_lcssa=$_02;label=7;break;}else{label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii=($c>>>0)<128;
 if($isascii){label=2;break;}else{var $10=$c;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 var $5=$4$0;
 ___clang_call_terminate($5);
 throw "Reached an unreachable!";
 case 4: 
 var $6=HEAP32[(($2)>>2)];
 var $7=(($6+($c<<2))|0);
 var $8=HEAP32[(($7)>>2)];
 var $10=$8;label=5;break;
 case 5: 
 var $10;
 return $10;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_02=$low;label=2;break;}
 case 2: 
 var $_02;
 var $2=HEAP32[(($_02)>>2)];
 var $isascii=($2>>>0)<128;
 if($isascii){label=3;break;}else{var $12=$2;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 var $7=$6$0;
 ___clang_call_terminate($7);
 throw "Reached an unreachable!";
 case 5: 
 var $8=HEAP32[(($4)>>2)];
 var $9=(($8+($2<<2))|0);
 var $10=HEAP32[(($9)>>2)];
 var $12=$10;label=6;break;
 case 6: 
 var $12;
 HEAP32[(($_02)>>2)]=$12;
 var $13=(($_02+4)|0);
 var $14=($13|0)==($high|0);
 if($14){var $_0_lcssa=$high;label=7;break;}else{var $_02=$13;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii=($c>>>0)<128;
 if($isascii){label=2;break;}else{var $10=$c;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 var $5=$4$0;
 ___clang_call_terminate($5);
 throw "Reached an unreachable!";
 case 4: 
 var $6=HEAP32[(($2)>>2)];
 var $7=(($6+($c<<2))|0);
 var $8=HEAP32[(($7)>>2)];
 var $10=$8;label=5;break;
 case 5: 
 var $10;
 return $10;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_02=$low;label=2;break;}
 case 2: 
 var $_02;
 var $2=HEAP32[(($_02)>>2)];
 var $isascii=($2>>>0)<128;
 if($isascii){label=3;break;}else{var $12=$2;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 var $7=$6$0;
 ___clang_call_terminate($7);
 throw "Reached an unreachable!";
 case 5: 
 var $8=HEAP32[(($4)>>2)];
 var $9=(($8+($2<<2))|0);
 var $10=HEAP32[(($9)>>2)];
 var $12=$10;label=6;break;
 case 6: 
 var $12;
 HEAP32[(($_02)>>2)]=$12;
 var $13=(($_02+4)|0);
 var $14=($13|0)==($high|0);
 if($14){var $_0_lcssa=$high;label=7;break;}else{var $_02=$13;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c){
 var label=0;


 var $1=(($c<<24)>>24);
 return $1;
}


function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_01_lcssa=$low;label=3;break;}else{var $_012=$low;var $_03=$dest;label=2;break;}
 case 2: 
 var $_03;
 var $_012;
 var $2=HEAP8[($_012)];
 var $3=(($2<<24)>>24);
 HEAP32[(($_03)>>2)]=$3;
 var $4=(($_012+1)|0);
 var $5=(($_03+4)|0);
 var $6=($4|0)==($high|0);
 if($6){var $_01_lcssa=$high;label=3;break;}else{var $_012=$4;var $_03=$5;label=2;break;}
 case 3: 
 var $_01_lcssa;
 return $_01_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault){
 var label=0;


 var $isascii=($c>>>0)<128;
 var $1=(($c)&255);
 var $_0=($isascii?$1:$dfault);
 return $_0;
}


function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_01_lcssa=$low;label=5;break;}else{label=2;break;}
 case 2: 
 var $low5=$low;
 var $scevgep=((($high)-(4))|0);
 var $2=$scevgep;
 var $3=((($2)-($low5))|0);
 var $4=$3>>>2;
 var $5=((($4)+(1))|0);
 var $_012=$low;var $_03=$dest;label=3;break;
 case 3: 
 var $_03;
 var $_012;
 var $7=HEAP32[(($_012)>>2)];
 var $isascii=($7>>>0)<128;
 var $8=(($7)&255);
 var $_dfault=($isascii?$8:$dfault);
 HEAP8[($_03)]=$_dfault;
 var $9=(($_012+4)|0);
 var $10=(($_03+1)|0);
 var $11=($9|0)==($high|0);
 if($11){label=4;break;}else{var $_012=$9;var $_03=$10;label=3;break;}
 case 4: 
 var $scevgep7=(($low+($5<<2))|0);
 var $_01_lcssa=$scevgep7;label=5;break;
 case 5: 
 var $_01_lcssa;
 return $_01_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__15ctypeIcED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4032;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+12)|0);
 var $7=HEAP8[($6)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=3;break;}
 case 3: 
 var $10=$3;
 __ZdaPv($10);
 label=4;break;
 case 4: 
 var $11=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($11);
 var $12=$this;
 __ZdlPv($12);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__15ctypeIcED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4032;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+12)|0);
 var $7=HEAP8[($6)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=3;break;}
 case 3: 
 var $10=$3;
 __ZdaPv($10);
 label=4;break;
 case 4: 
 var $12=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($12);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii1=(($c<<24)>>24)>-1;
 if($isascii1){label=2;break;}else{var $12=$c;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 var $5=$4$0;
 ___clang_call_terminate($5);
 throw "Reached an unreachable!";
 case 4: 
 var $6=($c&255);
 var $7=HEAP32[(($2)>>2)];
 var $8=(($7+($6<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9)&255);
 var $12=$10;label=5;break;
 case 5: 
 var $12;
 return $12;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_03=$low;label=2;break;}
 case 2: 
 var $_03;
 var $2=HEAP8[($_03)];
 var $isascii1=(($2<<24)>>24)>-1;
 if($isascii1){label=3;break;}else{var $14=$2;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 var $7=$6$0;
 ___clang_call_terminate($7);
 throw "Reached an unreachable!";
 case 5: 
 var $8=(($2<<24)>>24);
 var $9=HEAP32[(($4)>>2)];
 var $10=(($9+($8<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11)&255);
 var $14=$12;label=6;break;
 case 6: 
 var $14;
 HEAP8[($_03)]=$14;
 var $15=(($_03+1)|0);
 var $16=($15|0)==($high|0);
 if($16){var $_0_lcssa=$high;label=7;break;}else{var $_03=$15;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii1=(($c<<24)>>24)>-1;
 if($isascii1){label=2;break;}else{var $12=$c;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 var $5=$4$0;
 ___clang_call_terminate($5);
 throw "Reached an unreachable!";
 case 4: 
 var $6=(($c<<24)>>24);
 var $7=HEAP32[(($2)>>2)];
 var $8=(($7+($6<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9)&255);
 var $12=$10;label=5;break;
 case 5: 
 var $12;
 return $12;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_03=$low;label=2;break;}
 case 2: 
 var $_03;
 var $2=HEAP8[($_03)];
 var $isascii1=(($2<<24)>>24)>-1;
 if($isascii1){label=3;break;}else{var $14=$2;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 var $7=$6$0;
 ___clang_call_terminate($7);
 throw "Reached an unreachable!";
 case 5: 
 var $8=(($2<<24)>>24);
 var $9=HEAP32[(($4)>>2)];
 var $10=(($9+($8<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11)&255);
 var $14=$12;label=6;break;
 case 6: 
 var $14;
 HEAP8[($_03)]=$14;
 var $15=(($_03+1)|0);
 var $16=($15|0)==($high|0);
 if($16){var $_0_lcssa=$high;label=7;break;}else{var $_03=$15;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c){
 var label=0;


 return $c;
}


function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_01_lcssa=$low;label=3;break;}else{var $_012=$low;var $_03=$dest;label=2;break;}
 case 2: 
 var $_03;
 var $_012;
 var $2=HEAP8[($_012)];
 HEAP8[($_03)]=$2;
 var $3=(($_012+1)|0);
 var $4=(($_03+1)|0);
 var $5=($3|0)==($high|0);
 if($5){var $_01_lcssa=$high;label=3;break;}else{var $_012=$3;var $_03=$4;label=2;break;}
 case 3: 
 var $_01_lcssa;
 return $_01_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault){
 var label=0;


 var $isascii1=(($c<<24)>>24)>-1;
 var $c_dfault=($isascii1?$c:$dfault);
 return $c_dfault;
}


function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_01_lcssa=$low;label=3;break;}else{var $_013=$low;var $_04=$dest;label=2;break;}
 case 2: 
 var $_04;
 var $_013;
 var $2=HEAP8[($_013)];
 var $isascii2=(($2<<24)>>24)>-1;
 var $_dfault=($isascii2?$2:$dfault);
 HEAP8[($_04)]=$_dfault;
 var $3=(($_013+1)|0);
 var $4=(($_04+1)|0);
 var $5=($3|0)==($high|0);
 if($5){var $_01_lcssa=$high;label=3;break;}else{var $_013=$3;var $_04=$4;label=2;break;}
 case 3: 
 var $_01_lcssa;
 return $_01_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt){
 var label=0;


 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt){
 var label=0;


 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}



function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt){
 var label=0;


 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this){
 var label=0;


 return 1;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this){
 var label=0;


 return 1;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx){
 var label=0;


 var $2=$end;
 var $3=$frm;
 var $4=((($2)-($3))|0);
 var $5=($4>>>0)<($mx>>>0);
 var $6=($5?$4:$mx);
 return $6;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this){
 var label=0;


 return 1;
}


function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this){
 var label=0;


 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 var $1=$this;
 __ZdlPv($1);
 return;
}


function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $save_state=sp;
 var $tmpcast=$save_state;
 var $tmp=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=($frm|0)==($frm_end|0);
 if($1){label=2;break;}else{var $fend_054=$frm;label=4;break;}
 case 2: 
 HEAP32[(($to_nxt)>>2)]=$to;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 var $119=$frm;label=50;break;
 case 3: 
 var $3=($6|0)==($frm_end|0);
 if($3){var $fend_0_lcssa=$frm_end;label=5;break;}else{var $fend_054=$6;label=4;break;}
 case 4: 
 var $fend_054;
 var $4=HEAP32[(($fend_054)>>2)];
 var $5=($4|0)==0;
 var $6=(($fend_054+4)|0);
 if($5){var $fend_0_lcssa=$fend_054;label=5;break;}else{label=3;break;}
 case 5: 
 var $fend_0_lcssa;
 HEAP32[(($to_nxt)>>2)]=$to;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 var $7=($to|0)==($to_end|0);
 var $or_cond46=$1|$7;
 if($or_cond46){var $119=$frm;label=50;break;}else{label=6;break;}
 case 6: 
 var $8=$st;
 var $9=$to_end;
 var $10=(($this+8)|0);
 var $11=(($tmp)|0);
 var $_0247=$to;var $_0148=$frm;var $fend_149=$fend_0_lcssa;label=7;break;
 case 7: 
 var $fend_149;
 var $_0148;
 var $_0247;
 var $ld$0$0=(($8)|0);
 var $13$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($8+4)|0);
 var $13$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($save_state)|0);
 HEAP32[(($st$2$0)>>2)]=$13$0;
 var $st$3$1=(($save_state+4)|0);
 HEAP32[(($st$3$1)>>2)]=$13$1;
 var $14=$fend_149;
 var $15=$_0148;
 var $16=((($14)-($15))|0);
 var $17=$16>>2;
 var $18=$_0247;
 var $19=((($9)-($18))|0);
 var $20=HEAP32[(($10)>>2)];
 var $21=_uselocale($20);
 var $22=(function() { try { __THREW__ = 0; return _wcsnrtombs($_0247,$frm_nxt,$17,$19,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=11;break; }
 case 8: 
 var $24=($21|0)==0;
 if($24){label=15;break;}else{label=9;break;}
 case 9: 
 var $26=(function() { try { __THREW__ = 0; return _uselocale($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=10;break; }
 case 10: 
 var $28$0 = ___cxa_find_matching_catch(-1, -1,0); var $28$1 = tempRet0;
 var $29=$28$0;
 ___clang_call_terminate($29);
 throw "Reached an unreachable!";
 case 11: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 var $32=($21|0)==0;
 if($32){label=14;break;}else{label=12;break;}
 case 12: 
 var $34=(function() { try { __THREW__ = 0; return _uselocale($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=13;break; }
 case 13: 
 var $36$0 = ___cxa_find_matching_catch(-1, -1,0); var $36$1 = tempRet0;
 var $37=$36$0;
 ___clang_call_terminate($37);
 throw "Reached an unreachable!";
 case 14: 
 ___resumeException($31$0)
 case 15: 
 if(($22|0)==-1){ label=16;break;}else if(($22|0)==0){ var $_0=1;label=51;break;}else{label=28;break;}
 case 16: 
 HEAP32[(($to_nxt)>>2)]=$_0247;
 var $39=HEAP32[(($frm_nxt)>>2)];
 var $40=($_0148|0)==($39|0);
 if($40){var $_1_lcssa=$_0148;label=27;break;}else{var $_19=$_0148;var $41=$_0247;label=17;break;}
 case 17: 
 var $41;
 var $_19;
 var $42=HEAP32[(($_19)>>2)];
 var $43=HEAP32[(($10)>>2)];
 var $44=_uselocale($43);
 var $45=(function() { try { __THREW__ = 0; return _wcrtomb($41,$42,$tmpcast) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=21;break; }
 case 18: 
 var $47=($44|0)==0;
 if($47){label=25;break;}else{label=19;break;}
 case 19: 
 var $49=(function() { try { __THREW__ = 0; return _uselocale($44) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=20;break; }
 case 20: 
 var $51$0 = ___cxa_find_matching_catch(-1, -1,0); var $51$1 = tempRet0;
 var $52=$51$0;
 ___clang_call_terminate($52);
 throw "Reached an unreachable!";
 case 21: 
 var $54$0 = ___cxa_find_matching_catch(-1, -1); var $54$1 = tempRet0;
 var $55=($44|0)==0;
 if($55){label=24;break;}else{label=22;break;}
 case 22: 
 var $57=(function() { try { __THREW__ = 0; return _uselocale($44) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=23;break; }
 case 23: 
 var $59$0 = ___cxa_find_matching_catch(-1, -1,0); var $59$1 = tempRet0;
 var $60=$59$0;
 ___clang_call_terminate($60);
 throw "Reached an unreachable!";
 case 24: 
 ___resumeException($54$0)
 case 25: 
 var $61=($45|0)==-1;
 if($61){var $_1_lcssa=$_19;label=27;break;}else{label=26;break;}
 case 26: 
 var $63=HEAP32[(($to_nxt)>>2)];
 var $64=(($63+$45)|0);
 HEAP32[(($to_nxt)>>2)]=$64;
 var $65=(($_19+4)|0);
 var $66=HEAP32[(($frm_nxt)>>2)];
 var $67=($65|0)==($66|0);
 if($67){var $_1_lcssa=$65;label=27;break;}else{var $_19=$65;var $41=$64;label=17;break;}
 case 27: 
 var $_1_lcssa;
 HEAP32[(($frm_nxt)>>2)]=$_1_lcssa;
 var $_0=2;label=51;break;
 case 28: 
 var $69=HEAP32[(($to_nxt)>>2)];
 var $70=(($69+$22)|0);
 HEAP32[(($to_nxt)>>2)]=$70;
 var $71=($70|0)==($to_end|0);
 if($71){label=49;break;}else{label=29;break;}
 case 29: 
 var $73=($fend_149|0)==($frm_end|0);
 if($73){label=30;break;}else{label=31;break;}
 case 30: 
 var $_pre98=HEAP32[(($frm_nxt)>>2)];
 var $fend_3=$frm_end;var $116=$_pre98;var $115=$70;label=48;break;
 case 31: 
 var $75=HEAP32[(($10)>>2)];
 var $76=_uselocale($75);
 var $77=(function() { try { __THREW__ = 0; return _wcrtomb($11,0,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $79=($76|0)==0;
 if($79){label=39;break;}else{label=33;break;}
 case 33: 
 var $81=(function() { try { __THREW__ = 0; return _uselocale($76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=34;break; }
 case 34: 
 var $83$0 = ___cxa_find_matching_catch(-1, -1,0); var $83$1 = tempRet0;
 var $84=$83$0;
 ___clang_call_terminate($84);
 throw "Reached an unreachable!";
 case 35: 
 var $86$0 = ___cxa_find_matching_catch(-1, -1); var $86$1 = tempRet0;
 var $87=($76|0)==0;
 if($87){label=38;break;}else{label=36;break;}
 case 36: 
 var $89=(function() { try { __THREW__ = 0; return _uselocale($76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=37;break; }
 case 37: 
 var $91$0 = ___cxa_find_matching_catch(-1, -1,0); var $91$1 = tempRet0;
 var $92=$91$0;
 ___clang_call_terminate($92);
 throw "Reached an unreachable!";
 case 38: 
 ___resumeException($86$0)
 case 39: 
 var $93=($77|0)==-1;
 if($93){var $_0=2;label=51;break;}else{label=40;break;}
 case 40: 
 var $95=HEAP32[(($to_nxt)>>2)];
 var $96=$95;
 var $97=((($9)-($96))|0);
 var $98=($77>>>0)>($97>>>0);
 if($98){var $_0=1;label=51;break;}else{label=41;break;}
 case 41: 
 var $99=($77|0)==0;
 if($99){label=44;break;}else{var $n_011=$77;var $p_012=$11;var $100=$95;label=42;break;}
 case 42: 
 var $100;
 var $p_012;
 var $n_011;
 var $101=HEAP8[($p_012)];
 var $102=(($100+1)|0);
 HEAP32[(($to_nxt)>>2)]=$102;
 HEAP8[($100)]=$101;
 var $103=((($n_011)-(1))|0);
 var $104=($103|0)==0;
 if($104){label=44;break;}else{label=43;break;}
 case 43: 
 var $105=(($p_012+1)|0);
 var $_pre101=HEAP32[(($to_nxt)>>2)];
 var $n_011=$103;var $p_012=$105;var $100=$_pre101;label=42;break;
 case 44: 
 var $106=HEAP32[(($frm_nxt)>>2)];
 var $107=(($106+4)|0);
 HEAP32[(($frm_nxt)>>2)]=$107;
 var $108=($107|0)==($frm_end|0);
 if($108){var $fend_2_lcssa=$frm_end;label=47;break;}else{var $fend_215=$107;label=46;break;}
 case 45: 
 var $110=($113|0)==($frm_end|0);
 if($110){var $fend_2_lcssa=$frm_end;label=47;break;}else{var $fend_215=$113;label=46;break;}
 case 46: 
 var $fend_215;
 var $111=HEAP32[(($fend_215)>>2)];
 var $112=($111|0)==0;
 var $113=(($fend_215+4)|0);
 if($112){var $fend_2_lcssa=$fend_215;label=47;break;}else{label=45;break;}
 case 47: 
 var $fend_2_lcssa;
 var $_pre99=HEAP32[(($to_nxt)>>2)];
 var $fend_3=$fend_2_lcssa;var $116=$107;var $115=$_pre99;label=48;break;
 case 48: 
 var $115;
 var $116;
 var $fend_3;
 var $117=($116|0)==($frm_end|0);
 var $118=($115|0)==($to_end|0);
 var $or_cond=$117|$118;
 if($or_cond){var $119=$116;label=50;break;}else{var $_0247=$115;var $_0148=$116;var $fend_149=$fend_3;label=7;break;}
 case 49: 
 var $_pre=HEAP32[(($frm_nxt)>>2)];
 var $119=$_pre;label=50;break;
 case 50: 
 var $119;
 var $not_=($119|0)!=($frm_end|0);
 var $120=($not_&1);
 var $_0=$120;label=51;break;
 case 51: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $save_state=sp;
 var $tmpcast=$save_state;
 var $1=($frm|0)==($frm_end|0);
 if($1){label=2;break;}else{var $fend_061=$frm;label=4;break;}
 case 2: 
 HEAP32[(($to_nxt)>>2)]=$to;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 var $112=$frm;label=49;break;
 case 3: 
 var $3=($6|0)==($frm_end|0);
 if($3){var $fend_0_lcssa=$frm_end;label=5;break;}else{var $fend_061=$6;label=4;break;}
 case 4: 
 var $fend_061;
 var $4=HEAP8[($fend_061)];
 var $5=(($4<<24)>>24)==0;
 var $6=(($fend_061+1)|0);
 if($5){var $fend_0_lcssa=$fend_061;label=5;break;}else{label=3;break;}
 case 5: 
 var $fend_0_lcssa;
 HEAP32[(($to_nxt)>>2)]=$to;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 var $7=($to|0)==($to_end|0);
 var $or_cond53=$1|$7;
 if($or_cond53){var $112=$frm;label=49;break;}else{label=6;break;}
 case 6: 
 var $8=$st;
 var $9=$to_end;
 var $10=(($this+8)|0);
 var $_0254=$to;var $_0155=$frm;var $fend_156=$fend_0_lcssa;label=7;break;
 case 7: 
 var $fend_156;
 var $_0155;
 var $_0254;
 var $ld$0$0=(($8)|0);
 var $12$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($8+4)|0);
 var $12$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($save_state)|0);
 HEAP32[(($st$2$0)>>2)]=$12$0;
 var $st$3$1=(($save_state+4)|0);
 HEAP32[(($st$3$1)>>2)]=$12$1;
 var $13=$fend_156;
 var $14=$_0155;
 var $15=((($13)-($14))|0);
 var $16=$_0254;
 var $17=((($9)-($16))|0);
 var $18=$17>>2;
 var $19=HEAP32[(($10)>>2)];
 var $20=_uselocale($19);
 var $21=(function() { try { __THREW__ = 0; return _mbsnrtowcs($_0254,$frm_nxt,$15,$18,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=11;break; }
 case 8: 
 var $23=($20|0)==0;
 if($23){label=15;break;}else{label=9;break;}
 case 9: 
 var $25=(function() { try { __THREW__ = 0; return _uselocale($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=10;break; }
 case 10: 
 var $27$0 = ___cxa_find_matching_catch(-1, -1,0); var $27$1 = tempRet0;
 var $28=$27$0;
 ___clang_call_terminate($28);
 throw "Reached an unreachable!";
 case 11: 
 var $30$0 = ___cxa_find_matching_catch(-1, -1); var $30$1 = tempRet0;
 var $31=($20|0)==0;
 if($31){label=14;break;}else{label=12;break;}
 case 12: 
 var $33=(function() { try { __THREW__ = 0; return _uselocale($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=13;break; }
 case 13: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1,0); var $35$1 = tempRet0;
 var $36=$35$0;
 ___clang_call_terminate($36);
 throw "Reached an unreachable!";
 case 14: 
 ___resumeException($30$0)
 case 15: 
 if(($21|0)==-1){ label=16;break;}else if(($21|0)==0){ var $_0=2;label=50;break;}else{label=32;break;}
 case 16: 
 HEAP32[(($to_nxt)>>2)]=$_0254;
 var $37=HEAP32[(($frm_nxt)>>2)];
 var $38=($_0155|0)==($37|0);
 if($38){var $_1_lcssa=$_0155;label=31;break;}else{var $storemerge14=$_0254;var $_115=$_0155;label=17;break;}
 case 17: 
 var $_115;
 var $storemerge14;
 var $39=$_115;
 var $40=((($13)-($39))|0);
 var $41=HEAP32[(($10)>>2)];
 var $42=_uselocale($41);
 var $43=(function() { try { __THREW__ = 0; return _mbrtowc($storemerge14,$_115,$40,$tmpcast) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=21;break; }
 case 18: 
 var $45=($42|0)==0;
 if($45){label=25;break;}else{label=19;break;}
 case 19: 
 var $47=(function() { try { __THREW__ = 0; return _uselocale($42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=20;break; }
 case 20: 
 var $49$0 = ___cxa_find_matching_catch(-1, -1,0); var $49$1 = tempRet0;
 var $50=$49$0;
 ___clang_call_terminate($50);
 throw "Reached an unreachable!";
 case 21: 
 var $52$0 = ___cxa_find_matching_catch(-1, -1); var $52$1 = tempRet0;
 var $53=($42|0)==0;
 if($53){label=24;break;}else{label=22;break;}
 case 22: 
 var $55=(function() { try { __THREW__ = 0; return _uselocale($42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=23;break; }
 case 23: 
 var $57$0 = ___cxa_find_matching_catch(-1, -1,0); var $57$1 = tempRet0;
 var $58=$57$0;
 ___clang_call_terminate($58);
 throw "Reached an unreachable!";
 case 24: 
 ___resumeException($52$0)
 case 25: 
 if(($43|0)==0){ label=26;break;}else if(($43|0)==-1){ label=27;break;}else if(($43|0)==-2){ label=28;break;}else{label=29;break;}
 case 26: 
 var $60=(($_115+1)|0);
 var $_2=$60;label=30;break;
 case 27: 
 HEAP32[(($frm_nxt)>>2)]=$_115;
 var $_0=2;label=50;break;
 case 28: 
 HEAP32[(($frm_nxt)>>2)]=$_115;
 var $_0=1;label=50;break;
 case 29: 
 var $64=(($_115+$43)|0);
 var $_2=$64;label=30;break;
 case 30: 
 var $_2;
 var $66=HEAP32[(($to_nxt)>>2)];
 var $67=(($66+4)|0);
 HEAP32[(($to_nxt)>>2)]=$67;
 var $68=HEAP32[(($frm_nxt)>>2)];
 var $69=($_2|0)==($68|0);
 if($69){var $_1_lcssa=$_2;label=31;break;}else{var $storemerge14=$67;var $_115=$_2;label=17;break;}
 case 31: 
 var $_1_lcssa;
 HEAP32[(($frm_nxt)>>2)]=$_1_lcssa;
 var $not_3=($_1_lcssa|0)!=($frm_end|0);
 var $70=($not_3&1);
 var $_0=$70;label=50;break;
 case 32: 
 var $72=HEAP32[(($to_nxt)>>2)];
 var $73=(($72+($21<<2))|0);
 HEAP32[(($to_nxt)>>2)]=$73;
 var $74=($73|0)==($to_end|0);
 if($74){label=48;break;}else{label=33;break;}
 case 33: 
 var $76=($fend_156|0)==($frm_end|0);
 var $_pre114=HEAP32[(($frm_nxt)>>2)];
 if($76){var $fend_3=$frm_end;var $109=$_pre114;var $108=$73;label=47;break;}else{label=34;break;}
 case 34: 
 var $78=HEAP32[(($10)>>2)];
 var $79=_uselocale($78);
 var $80=(function() { try { __THREW__ = 0; return _mbrtowc($73,$_pre114,1,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=38;break; }
 case 35: 
 var $82=($79|0)==0;
 if($82){label=42;break;}else{label=36;break;}
 case 36: 
 var $84=(function() { try { __THREW__ = 0; return _uselocale($79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=37;break; }
 case 37: 
 var $86$0 = ___cxa_find_matching_catch(-1, -1,0); var $86$1 = tempRet0;
 var $87=$86$0;
 ___clang_call_terminate($87);
 throw "Reached an unreachable!";
 case 38: 
 var $89$0 = ___cxa_find_matching_catch(-1, -1); var $89$1 = tempRet0;
 var $90=($79|0)==0;
 if($90){label=41;break;}else{label=39;break;}
 case 39: 
 var $92=(function() { try { __THREW__ = 0; return _uselocale($79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=40;break; }
 case 40: 
 var $94$0 = ___cxa_find_matching_catch(-1, -1,0); var $94$1 = tempRet0;
 var $95=$94$0;
 ___clang_call_terminate($95);
 throw "Reached an unreachable!";
 case 41: 
 ___resumeException($89$0)
 case 42: 
 var $96=($80|0)==0;
 if($96){label=43;break;}else{var $_0=2;label=50;break;}
 case 43: 
 var $98=HEAP32[(($to_nxt)>>2)];
 var $99=(($98+4)|0);
 HEAP32[(($to_nxt)>>2)]=$99;
 var $100=HEAP32[(($frm_nxt)>>2)];
 var $101=(($100+1)|0);
 HEAP32[(($frm_nxt)>>2)]=$101;
 var $102=($101|0)==($frm_end|0);
 if($102){var $fend_2_lcssa=$frm_end;label=46;break;}else{var $fend_216=$101;label=45;break;}
 case 44: 
 var $104=($107|0)==($frm_end|0);
 if($104){var $fend_2_lcssa=$frm_end;label=46;break;}else{var $fend_216=$107;label=45;break;}
 case 45: 
 var $fend_216;
 var $105=HEAP8[($fend_216)];
 var $106=(($105<<24)>>24)==0;
 var $107=(($fend_216+1)|0);
 if($106){var $fend_2_lcssa=$fend_216;label=46;break;}else{label=44;break;}
 case 46: 
 var $fend_2_lcssa;
 var $_pre115=HEAP32[(($to_nxt)>>2)];
 var $fend_3=$fend_2_lcssa;var $109=$101;var $108=$_pre115;label=47;break;
 case 47: 
 var $108;
 var $109;
 var $fend_3;
 var $110=($109|0)==($frm_end|0);
 var $111=($108|0)==($to_end|0);
 var $or_cond=$110|$111;
 if($or_cond){var $112=$109;label=49;break;}else{var $_0254=$108;var $_0155=$109;var $fend_156=$fend_3;label=7;break;}
 case 48: 
 var $_pre=HEAP32[(($frm_nxt)>>2)];
 var $112=$_pre;label=49;break;
 case 49: 
 var $112;
 var $not_=($112|0)!=($frm_end|0);
 var $113=($not_&1);
 var $_0=$113;label=50;break;
 case 50: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $tmp=sp;
 HEAP32[(($to_nxt)>>2)]=$to;
 var $1=(($tmp)|0);
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=_uselocale($3);
 var $5=(function() { try { __THREW__ = 0; return _wcrtomb($1,0,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 2: 
 var $7=($4|0)==0;
 if($7){label=9;break;}else{label=3;break;}
 case 3: 
 var $9=(function() { try { __THREW__ = 0; return _uselocale($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=4;break; }
 case 4: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1,0); var $11$1 = tempRet0;
 var $12=$11$0;
 ___clang_call_terminate($12);
 throw "Reached an unreachable!";
 case 5: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;
 var $15=($4|0)==0;
 if($15){label=8;break;}else{label=6;break;}
 case 6: 
 var $17=(function() { try { __THREW__ = 0; return _uselocale($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=7;break; }
 case 7: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1,0); var $19$1 = tempRet0;
 var $20=$19$0;
 ___clang_call_terminate($20);
 throw "Reached an unreachable!";
 case 8: 
 ___resumeException($14$0)
 case 9: 
 if(($5|0)==-1|($5|0)==0){ var $_0=2;label=14;break;}else{label=10;break;}
 case 10: 
 var $22=((($5)-(1))|0);
 var $23=HEAP32[(($to_nxt)>>2)];
 var $24=$to_end;
 var $25=$23;
 var $26=((($24)-($25))|0);
 var $27=($22>>>0)>($26>>>0);
 if($27){var $_0=1;label=14;break;}else{label=11;break;}
 case 11: 
 var $28=($22|0)==0;
 if($28){var $_0=0;label=14;break;}else{var $n_02=$22;var $p_03=$1;var $29=$23;label=12;break;}
 case 12: 
 var $29;
 var $p_03;
 var $n_02;
 var $30=HEAP8[($p_03)];
 var $31=(($29+1)|0);
 HEAP32[(($to_nxt)>>2)]=$31;
 HEAP8[($29)]=$30;
 var $32=((($n_02)-(1))|0);
 var $33=($32|0)==0;
 if($33){var $_0=0;label=14;break;}else{label=13;break;}
 case 13: 
 var $34=(($p_03+1)|0);
 var $_pre=HEAP32[(($to_nxt)>>2)];
 var $n_02=$32;var $p_03=$34;var $29=$_pre;label=12;break;
 case 14: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(function() { try { __THREW__ = 0; return _uselocale($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=16;break; }
 case 2: 
 var $4=(function() { try { __THREW__ = 0; return _mbtowc(0,0,4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $6=($3|0)==0;
 if($6){label=9;break;}else{label=4;break;}
 case 4: 
 var $8=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=5;break; }
 case 5: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1,0); var $10$1 = tempRet0;
 var $11=$10$0;
 ___clang_call_terminate($11);
 throw "Reached an unreachable!";
 case 6: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;
 var $14=($3|0)==0;
 if($14){var $eh_lpad_body$1=$13$1;var $eh_lpad_body$0=$13$0;label=17;break;}else{label=7;break;}
 case 7: 
 var $16=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $eh_lpad_body$1=$13$1;var $eh_lpad_body$0=$13$0;label=17;break; } else { label=8;break; }
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1,0); var $18$1 = tempRet0;
 var $19=$18$0;
 ___clang_call_terminate($19);
 throw "Reached an unreachable!";
 case 9: 
 var $20=($4|0)==0;
 if($20){label=10;break;}else{var $_0=-1;label=15;break;}
 case 10: 
 var $22=HEAP32[(($1)>>2)];
 var $23=($22|0)==0;
 if($23){var $_0=1;label=15;break;}else{label=11;break;}
 case 11: 
 var $25=(function() { try { __THREW__ = 0; return _uselocale($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=16;break; }
 case 12: 
 var $26=($25|0)==0;
 if($26){var $_0=0;label=15;break;}else{label=13;break;}
 case 13: 
 var $28=(function() { try { __THREW__ = 0; return _uselocale($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=0;label=15;break; } else { label=14;break; }
 case 14: 
 var $30$0 = ___cxa_find_matching_catch(-1, -1,0); var $30$1 = tempRet0;
 var $31=$30$0;
 ___clang_call_terminate($31);
 throw "Reached an unreachable!";
 case 15: 
 var $_0;
 return $_0;
 case 16: 
 var $33$0 = ___cxa_find_matching_catch(-1, -1,0); var $33$1 = tempRet0;
 var $eh_lpad_body$1=$33$1;var $eh_lpad_body$0=$33$0;label=17;break;
 case 17: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $34=$eh_lpad_body$0;
 ___clang_call_terminate($34);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($mx|0)==0;
 var $2=($frm|0)==($frm_end|0);
 var $or_cond5=$1|$2;
 if($or_cond5){var $nbytes_0_lcssa=0;label=15;break;}else{label=2;break;}
 case 2: 
 var $3=$frm_end;
 var $4=(($this+8)|0);
 var $_016=$frm;var $nbytes_07=0;var $nwchar_t_08=0;label=3;break;
 case 3: 
 var $nwchar_t_08;
 var $nbytes_07;
 var $_016;
 var $6=$_016;
 var $7=((($3)-($6))|0);
 var $8=HEAP32[(($4)>>2)];
 var $9=_uselocale($8);
 var $10=(function() { try { __THREW__ = 0; return _mbrlen($_016,$7,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 var $12=($9|0)==0;
 if($12){label=11;break;}else{label=5;break;}
 case 5: 
 var $14=(function() { try { __THREW__ = 0; return _uselocale($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=6;break; }
 case 6: 
 var $16$0 = ___cxa_find_matching_catch(-1, -1,0); var $16$1 = tempRet0;
 var $17=$16$0;
 ___clang_call_terminate($17);
 throw "Reached an unreachable!";
 case 7: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1); var $19$1 = tempRet0;
 var $20=($9|0)==0;
 if($20){label=10;break;}else{label=8;break;}
 case 8: 
 var $22=(function() { try { __THREW__ = 0; return _uselocale($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=9;break; }
 case 9: 
 var $24$0 = ___cxa_find_matching_catch(-1, -1,0); var $24$1 = tempRet0;
 var $25=$24$0;
 ___clang_call_terminate($25);
 throw "Reached an unreachable!";
 case 10: 
 ___resumeException($19$0)
 case 11: 
 if(($10|0)==0){ label=12;break;}else if(($10|0)==-1|($10|0)==-2){ var $nbytes_0_lcssa=$nbytes_07;label=15;break;}else{label=13;break;}
 case 12: 
 var $27=(($_016+1)|0);
 var $_pn=1;var $_1=$27;label=14;break;
 case 13: 
 var $29=(($_016+$10)|0);
 var $_pn=$10;var $_1=$29;label=14;break;
 case 14: 
 var $_1;
 var $_pn;
 var $nbytes_1=((($_pn)+($nbytes_07))|0);
 var $31=((($nwchar_t_08)+(1))|0);
 var $32=($31>>>0)>=($mx>>>0);
 var $33=($_1|0)==($frm_end|0);
 var $or_cond=$32|$33;
 if($or_cond){var $nbytes_0_lcssa=$nbytes_1;label=15;break;}else{var $_016=$_1;var $nbytes_07=$nbytes_1;var $nwchar_t_08=$31;label=3;break;}
 case 15: 
 var $nbytes_0_lcssa;
 return $nbytes_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $12=1;label=6;break;}else{label=2;break;}
 case 2: 
 var $5=(function() { try { __THREW__ = 0; return _uselocale($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=7;break; }
 case 3: 
 var $6=($5|0)==0;
 if($6){var $12=4;label=6;break;}else{label=4;break;}
 case 4: 
 var $8=(function() { try { __THREW__ = 0; return _uselocale($5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $12=4;label=6;break; } else { label=5;break; }
 case 5: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1,0); var $10$1 = tempRet0;
 var $11=$10$0;
 ___clang_call_terminate($11);
 throw "Reached an unreachable!";
 case 6: 
 var $12;
 return $12;
 case 7: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1,0); var $14$1 = tempRet0;
 var $15=$14$0;
 ___clang_call_terminate($15);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $_frm_nxt=sp;
 var $_to_nxt=(sp)+(8);
 HEAP32[(($_frm_nxt)>>2)]=$frm;
 HEAP32[(($_to_nxt)>>2)]=$to;
 var $2=__ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0);
 var $3=HEAP32[(($_frm_nxt)>>2)];
 var $4=$3;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=$6>>1;
 var $8=(($frm+($7<<1))|0);
 HEAP32[(($frm_nxt)>>2)]=$8;
 var $9=HEAP32[(($_to_nxt)>>2)];
 var $10=$9;
 var $11=$to;
 var $12=((($10)-($11))|0);
 var $13=(($to+$12)|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 STACKTOP=sp;return $2;
}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $_frm_nxt=sp;
 var $_to_nxt=(sp)+(8);
 HEAP32[(($_frm_nxt)>>2)]=$frm;
 HEAP32[(($_to_nxt)>>2)]=$to;
 var $2=__ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0);
 var $3=HEAP32[(($_frm_nxt)>>2)];
 var $4=$3;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=(($frm+$6)|0);
 HEAP32[(($frm_nxt)>>2)]=$7;
 var $8=HEAP32[(($_to_nxt)>>2)];
 var $9=$8;
 var $10=$to;
 var $11=((($9)-($10))|0);
 var $12=$11>>1;
 var $13=(($to+($12<<1))|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 STACKTOP=sp;return $2;
}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt){
 var label=0;


 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx){
 var label=0;


 var $2=__ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0);
 return $2;
}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this){
 var label=0;


 return 4;
}


function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $_frm_nxt=sp;
 var $_to_nxt=(sp)+(8);
 HEAP32[(($_frm_nxt)>>2)]=$frm;
 HEAP32[(($_to_nxt)>>2)]=$to;
 var $2=__ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0);
 var $3=HEAP32[(($_frm_nxt)>>2)];
 var $4=$3;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=$6>>2;
 var $8=(($frm+($7<<2))|0);
 HEAP32[(($frm_nxt)>>2)]=$8;
 var $9=HEAP32[(($_to_nxt)>>2)];
 var $10=$9;
 var $11=$to;
 var $12=((($10)-($11))|0);
 var $13=(($to+$12)|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 STACKTOP=sp;return $2;
}


function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $_frm_nxt=sp;
 var $_to_nxt=(sp)+(8);
 HEAP32[(($_frm_nxt)>>2)]=$frm;
 HEAP32[(($_to_nxt)>>2)]=$to;
 var $2=__ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0);
 var $3=HEAP32[(($_frm_nxt)>>2)];
 var $4=$3;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=(($frm+$6)|0);
 HEAP32[(($frm_nxt)>>2)]=$7;
 var $8=HEAP32[(($_to_nxt)>>2)];
 var $9=$8;
 var $10=$to;
 var $11=((($9)-($10))|0);
 var $12=$11>>2;
 var $13=(($to+($12<<2))|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 STACKTOP=sp;return $2;
}


function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt){
 var label=0;


 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}


function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx){
 var label=0;


 var $2=__ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0);
 return $2;
}


function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this){
 var label=0;


 return 4;
}


function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__18numpunctIcED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=3128;
 var $2=(($this+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $3=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($3);
 var $4=$this;
 __ZdlPv($4);
 return;
}


function __ZNSt3__18numpunctIcED2Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=3128;
 var $2=(($this+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $3=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($3);
 return;
}


function __ZNSt3__18numpunctIwED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=3080;
 var $2=(($this+16)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $3=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($3);
 var $4=$this;
 __ZdlPv($4);
 return;
}


function __ZNSt3__18numpunctIwED2Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=3080;
 var $2=(($this+16)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $3=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($3);
 return;
}


function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP8[($1)];
 return $2;
}


function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 return $2;
}


function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this){
 var label=0;


 var $1=(($this+9)|0);
 var $2=HEAP8[($1)];
 return $2;
}


function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this){
 var label=0;


 var $1=(($this+12)|0);
 var $2=HEAP32[(($1)>>2)];
 return $2;
}


function __ZNKSt3__18numpunctIcE11do_groupingEv($agg_result,$this){
 var label=0;


 var $1=(($this+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg_result,$1);
 return;
}


function __ZNKSt3__18numpunctIwE11do_groupingEv($agg_result,$this){
 var label=0;


 var $1=(($this+16)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg_result,$1);
 return;
}


function __ZNKSt3__18numpunctIcE11do_truenameEv($agg_result,$this){
 var label=0;


 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg_result,1488,4);
 return;
}


function __ZNKSt3__18numpunctIwE11do_truenameEv($agg_result,$this){
 var label=0;


 var $1=_wcslen(1456);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg_result,1456,$1);
 return;
}


function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg_result,$this){
 var label=0;


 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg_result,1448,5);
 return;
}


function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg_result,$this){
 var label=0;


 var $1=_wcslen(1424);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg_result,1424,$1);
 return;
}


function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(14072)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=21;break;}
 case 2: 
 var $4=___cxa_guard_acquire(14072);
 var $5=($4|0)==0;
 if($5){label=21;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(13960)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(13960);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(11400, 0, 168)|0;
 var $12=_atexit(198,0,___dso_handle);

 label=6;break;
 case 6: 
 var $14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11400,1680) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=22;break; }
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11412,1632) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=22;break; }
 case 8: 
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11424,1624) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=22;break; }
 case 9: 
 var $17=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11436,1608) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=22;break; }
 case 10: 
 var $18=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11448,1592) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=22;break; }
 case 11: 
 var $19=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11460,1584) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=22;break; }
 case 12: 
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11472,1568) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=22;break; }
 case 13: 
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11484,1560) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=22;break; }
 case 14: 
 var $22=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11496,1552) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=22;break; }
 case 15: 
 var $23=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11508,1544) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=22;break; }
 case 16: 
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11520,1536) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=22;break; }
 case 17: 
 var $25=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11532,1528) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=22;break; }
 case 18: 
 var $26=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11544,1520) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=22;break; }
 case 19: 
 var $27=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11556,1512) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=22;break; }
 case 20: 
 HEAP32[((12472)>>2)]=11400;

 label=21;break;
 case 21: 
 var $29=HEAP32[((12472)>>2)];
 return $29;
 case 22: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;

 ___resumeException($31$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(14016)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=21;break;}
 case 2: 
 var $4=___cxa_guard_acquire(14016);
 var $5=($4|0)==0;
 if($5){label=21;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(13936)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(13936);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(10656, 0, 168)|0;
 var $12=_atexit(672,0,___dso_handle);

 label=6;break;
 case 6: 
 var $14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10656,88) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=22;break; }
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10668,56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=22;break; }
 case 8: 
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10680,1952) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=22;break; }
 case 9: 
 var $17=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10692,1912) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=22;break; }
 case 10: 
 var $18=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10704,1872) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=22;break; }
 case 11: 
 var $19=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10716,1840) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=22;break; }
 case 12: 
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10728,1800) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=22;break; }
 case 13: 
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10740,1784) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=22;break; }
 case 14: 
 var $22=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10752,1768) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=22;break; }
 case 15: 
 var $23=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10764,1752) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=22;break; }
 case 16: 
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10776,1736) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=22;break; }
 case 17: 
 var $25=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10788,1720) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=22;break; }
 case 18: 
 var $26=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10800,1704) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=22;break; }
 case 19: 
 var $27=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10812,1688) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=22;break; }
 case 20: 
 HEAP32[((12384)>>2)]=10656;

 label=21;break;
 case 21: 
 var $29=HEAP32[((12384)>>2)];
 return $29;
 case 22: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;

 ___resumeException($31$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(14064)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=31;break;}
 case 2: 
 var $4=___cxa_guard_acquire(14064);
 var $5=($4|0)==0;
 if($5){label=31;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(13952)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(13952);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(11112, 0, 288)|0;
 var $12=_atexit(22,0,___dso_handle);

 label=6;break;
 case 6: 
 var $14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11112,400) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=32;break; }
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11124,384) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=32;break; }
 case 8: 
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11136,376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=32;break; }
 case 9: 
 var $17=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11148,368) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=32;break; }
 case 10: 
 var $18=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11160,360) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=32;break; }
 case 11: 
 var $19=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11172,352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=32;break; }
 case 12: 
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11184,344) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=32;break; }
 case 13: 
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11196,320) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=32;break; }
 case 14: 
 var $22=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11208,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=32;break; }
 case 15: 
 var $23=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11220,288) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=32;break; }
 case 16: 
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11232,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=32;break; }
 case 17: 
 var $25=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11244,256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=32;break; }
 case 18: 
 var $26=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11256,248) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=32;break; }
 case 19: 
 var $27=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11268,240) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=32;break; }
 case 20: 
 var $28=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11280,232) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=32;break; }
 case 21: 
 var $29=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11292,224) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=32;break; }
 case 22: 
 var $30=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11304,360) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=32;break; }
 case 23: 
 var $31=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11316,176) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=32;break; }
 case 24: 
 var $32=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11328,168) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=32;break; }
 case 25: 
 var $33=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11340,160) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=32;break; }
 case 26: 
 var $34=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11352,144) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=32;break; }
 case 27: 
 var $35=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11364,136) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=32;break; }
 case 28: 
 var $36=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11376,128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 var $37=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11388,120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=32;break; }
 case 30: 
 HEAP32[((12464)>>2)]=11112;

 label=31;break;
 case 31: 
 var $39=HEAP32[((12464)>>2)];
 return $39;
 case 32: 
 var $41$0 = ___cxa_find_matching_catch(-1, -1); var $41$1 = tempRet0;

 ___resumeException($41$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(14008)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=31;break;}
 case 2: 
 var $4=___cxa_guard_acquire(14008);
 var $5=($4|0)==0;
 if($5){label=31;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(13928)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(13928);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(10368, 0, 288)|0;
 var $12=_atexit(140,0,___dso_handle);

 label=6;break;
 case 6: 
 var $14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10368,968) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=32;break; }
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10380,928) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=32;break; }
 case 8: 
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10392,904) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=32;break; }
 case 9: 
 var $17=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10404,880) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=32;break; }
 case 10: 
 var $18=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10416,528) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=32;break; }
 case 11: 
 var $19=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10428,848) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=32;break; }
 case 12: 
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10440,824) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=32;break; }
 case 13: 
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10452,792) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=32;break; }
 case 14: 
 var $22=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10464,752) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=32;break; }
 case 15: 
 var $23=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10476,720) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=32;break; }
 case 16: 
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10488,680) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=32;break; }
 case 17: 
 var $25=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10500,640) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=32;break; }
 case 18: 
 var $26=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10512,624) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=32;break; }
 case 19: 
 var $27=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10524,608) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=32;break; }
 case 20: 
 var $28=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10536,576) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=32;break; }
 case 21: 
 var $29=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10548,560) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=32;break; }
 case 22: 
 var $30=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10560,528) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=32;break; }
 case 23: 
 var $31=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10572,512) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=32;break; }
 case 24: 
 var $32=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10584,496) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=32;break; }
 case 25: 
 var $33=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10596,480) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=32;break; }
 case 26: 
 var $34=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10608,464) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=32;break; }
 case 27: 
 var $35=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10620,448) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=32;break; }
 case 28: 
 var $36=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10632,432) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 var $37=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10644,416) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=32;break; }
 case 30: 
 HEAP32[((12376)>>2)]=10368;

 label=31;break;
 case 31: 
 var $39=HEAP32[((12376)>>2)];
 return $39;
 case 32: 
 var $41$0 = ___cxa_find_matching_catch(-1, -1); var $41$1 = tempRet0;

 ___resumeException($41$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(14080)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=9;break;}
 case 2: 
 var $4=___cxa_guard_acquire(14080);
 var $5=($4|0)==0;
 if($5){label=9;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(13968)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(13968);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(11568, 0, 288)|0;
 var $12=_atexit(146,0,___dso_handle);

 label=6;break;
 case 6: 
 var $14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11568,1008) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11580,1000) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=10;break; }
 case 8: 
 HEAP32[((12480)>>2)]=11568;

 label=9;break;
 case 9: 
 var $17=HEAP32[((12480)>>2)];
 return $17;
 case 10: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1); var $19$1 = tempRet0;

 ___resumeException($19$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(14024)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=9;break;}
 case 2: 
 var $4=___cxa_guard_acquire(14024);
 var $5=($4|0)==0;
 if($5){label=9;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(13944)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(13944);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(10824, 0, 288)|0;
 var $12=_atexit(720,0,___dso_handle);

 label=6;break;
 case 6: 
 var $14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10824,1032) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10836,1016) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=10;break; }
 case 8: 
 HEAP32[((12392)>>2)]=10824;

 label=9;break;
 case 9: 
 var $17=HEAP32[((12392)>>2)];
 return $17;
 case 10: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1); var $19$1 = tempRet0;

 ___resumeException($19$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(14088)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=___cxa_guard_acquire(14088);
 var $5=($4|0)==0;
 if($5){label=5;break;}else{label=3;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(12488,1392,8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $7=_atexit((754),12488,___dso_handle);

 label=5;break;
 case 5: 
 return 12488;
 case 6: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1); var $10$1 = tempRet0;

 ___resumeException($10$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(14032)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=6;break;}
 case 2: 
 var $4=___cxa_guard_acquire(14032);
 var $5=($4|0)==0;
 if($5){label=6;break;}else{label=3;break;}
 case 3: 
 var $7=(function() { try { __THREW__ = 0; return _wcslen(1352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(12400,1352,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $8=_atexit((494),12400,___dso_handle);

 label=6;break;
 case 6: 
 return 12400;
 case 7: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;

 ___resumeException($11$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(14112)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=___cxa_guard_acquire(14112);
 var $5=($4|0)==0;
 if($5){label=5;break;}else{label=3;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(12536,1328,8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $7=_atexit((754),12536,___dso_handle);

 label=5;break;
 case 5: 
 return 12536;
 case 6: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1); var $10$1 = tempRet0;

 ___resumeException($10$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(14056)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=6;break;}
 case 2: 
 var $4=___cxa_guard_acquire(14056);
 var $5=($4|0)==0;
 if($5){label=6;break;}else{label=3;break;}
 case 3: 
 var $7=(function() { try { __THREW__ = 0; return _wcslen(1272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(12448,1272,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $8=_atexit((494),12448,___dso_handle);

 label=6;break;
 case 6: 
 return 12448;
 case 7: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;

 ___resumeException($11$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(14104)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=___cxa_guard_acquire(14104);
 var $5=($4|0)==0;
 if($5){label=5;break;}else{label=3;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(12520,1248,20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $7=_atexit((754),12520,___dso_handle);

 label=5;break;
 case 5: 
 return 12520;
 case 6: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1); var $10$1 = tempRet0;

 ___resumeException($10$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(14048)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=6;break;}
 case 2: 
 var $4=___cxa_guard_acquire(14048);
 var $5=($4|0)==0;
 if($5){label=6;break;}else{label=3;break;}
 case 3: 
 var $7=(function() { try { __THREW__ = 0; return _wcslen(1160) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(12432,1160,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $8=_atexit((494),12432,___dso_handle);

 label=6;break;
 case 6: 
 return 12432;
 case 7: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;

 ___resumeException($11$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(14096)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=___cxa_guard_acquire(14096);
 var $5=($4|0)==0;
 if($5){label=5;break;}else{label=3;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(12504,1136,11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $7=_atexit((754),12504,___dso_handle);

 label=5;break;
 case 5: 
 return 12504;
 case 6: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1); var $10$1 = tempRet0;

 ___resumeException($10$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(14040)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=6;break;}
 case 2: 
 var $4=___cxa_guard_acquire(14040);
 var $5=($4|0)==0;
 if($5){label=6;break;}else{label=3;break;}
 case 3: 
 var $7=(function() { try { __THREW__ = 0; return _wcslen(1088) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(12416,1088,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $8=_atexit((494),12416,___dso_handle);

 label=6;break;
 case 6: 
 return 12416;
 case 7: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;

 ___resumeException($11$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=3664;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=HEAP8[(13992)];
 var $5=(($4<<24)>>24)==0;
 if($5){label=2;break;}else{label=6;break;}
 case 2: 
 var $7=___cxa_guard_acquire(13992);
 var $8=($7|0)==0;
 if($8){label=6;break;}else{label=3;break;}
 case 3: 
 var $10=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((11888)>>2)]=$10;

 label=6;break;
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;

 var $eh_lpad_body$1=$13$1;var $eh_lpad_body$0=$13$0;label=9;break;
 case 6: 
 var $15=HEAP32[((11888)>>2)];
 var $16=($3|0)==($15|0);
 if($16){label=10;break;}else{label=7;break;}
 case 7: 
 var $18=HEAP32[(($2)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1,0); var $20$1 = tempRet0;
 var $eh_lpad_body$1=$20$1;var $eh_lpad_body$0=$20$0;label=9;break;
 case 9: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $21=$eh_lpad_body$0;
 var $22=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($22);
 ___clang_call_terminate($21);
 throw "Reached an unreachable!";
 case 10: 
 var $24=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($24);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIwED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4256;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 var $3=$this;
 __ZdlPv($3);
 return;
}


function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this,$__loc){
 var label=0;


 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+24)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,13120);
 var $7=$6;
 var $8=(($this+36)|0);
 HEAP32[(($8)>>2)]=$7;
 var $9=$6;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=FUNCTION_TABLE[$12]($7);
 var $14=(($this+44)|0);
 var $15=($13&1);
 HEAP8[($14)]=$15;
 return;
}


function __ZNSt3__111__stdoutbufIwE4syncEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__extbe=(sp)+(8);
 var $1=(($this+36)|0);
 var $2=(($this+40)|0);
 var $3=(($__extbuf)|0);
 var $4=(($__extbuf+8)|0);
 var $5=$__extbuf;
 var $6=(($this+32)|0);
 label=2;break;
 case 2: 
 var $8=HEAP32[(($1)>>2)];
 var $9=HEAP32[(($2)>>2)];
 var $10=$8;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+20)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=FUNCTION_TABLE[$13]($8,$9,$3,$4,$__extbe);
 var $15=HEAP32[(($__extbe)>>2)];
 var $16=$15;
 var $17=((($16)-($5))|0);
 var $18=HEAP32[(($6)>>2)];
 var $19=_fwrite($3,1,$17,$18);
 var $20=($19|0)==($17|0);
 if($20){label=3;break;}else{var $_0=-1;label=5;break;}
 case 3: 
 if(($14|0)==1){ label=2;break;}else if(($14|0)==2){ var $_0=-1;label=5;break;}else{label=4;break;}
 case 4: 
 var $23=HEAP32[(($6)>>2)];
 var $24=_fflush($23);
 var $not_=($24|0)!=0;
 var $_=(($not_<<31)>>31);
 var $_0=$_;label=5;break;
 case 5: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+44)|0);
 var $2=HEAP8[($1)];
 var $3=(($2<<24)>>24)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=$this;
 var $5=($__n|0)>0;
 if($5){var $_012=$__s;var $__i_03=0;label=4;break;}else{var $_0=0;label=6;break;}
 case 3: 
 var $7=$__s;
 var $8=(($this+32)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=_fwrite($7,4,$__n,$9);
 var $_0=$10;label=6;break;
 case 4: 
 var $__i_03;
 var $_012;
 var $11=HEAP32[(($4)>>2)];
 var $12=(($11+52)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=HEAP32[(($_012)>>2)];
 var $15=FUNCTION_TABLE[$13]($this,$14);
 var $16=($15|0)==-1;
 if($16){var $_0=$__i_03;label=6;break;}else{label=5;break;}
 case 5: 
 var $18=((($__i_03)+(1))|0);
 var $19=(($_012+4)|0);
 var $20=($18|0)<($__n|0);
 if($20){var $_012=$19;var $__i_03=$18;label=4;break;}else{var $_0=$18;label=6;break;}
 case 6: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIwE8overflowEj($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__extbe=(sp)+(16);
 var $__e=(sp)+(24);
 var $1=($__c|0)==-1;
 if($1){label=11;break;}else{label=2;break;}
 case 2: 
 HEAP32[(($__1buf)>>2)]=$__c;
 var $3=(($this+44)|0);
 var $4=HEAP8[($3)];
 var $5=(($4<<24)>>24)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 var $7=$__1buf;
 var $8=(($this+32)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=_fwrite($7,4,1,$9);
 var $11=($10|0)==1;
 if($11){label=11;break;}else{var $_0=-1;label=12;break;}
 case 4: 
 var $13=(($__extbuf)|0);
 HEAP32[(($__extbe)>>2)]=$13;
 var $14=(($__1buf+4)|0);
 var $15=(($this+36)|0);
 var $16=(($this+40)|0);
 var $17=(($__extbuf+8)|0);
 var $18=$__extbuf;
 var $19=(($this+32)|0);
 var $pbase_0=$__1buf;label=5;break;
 case 5: 
 var $pbase_0;
 var $21=HEAP32[(($15)>>2)];
 var $22=HEAP32[(($16)>>2)];
 var $23=$21;
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=FUNCTION_TABLE[$26]($21,$22,$pbase_0,$14,$__e,$13,$17,$__extbe);
 var $28=HEAP32[(($__e)>>2)];
 var $29=($28|0)==($pbase_0|0);
 if($29){var $_0=-1;label=12;break;}else{label=6;break;}
 case 6: 
 var $31=($27|0)==3;
 if($31){label=7;break;}else{label=8;break;}
 case 7: 
 var $33=$pbase_0;
 var $34=HEAP32[(($19)>>2)];
 var $35=_fwrite($33,1,1,$34);
 var $36=($35|0)==1;
 if($36){label=11;break;}else{var $_0=-1;label=12;break;}
 case 8: 
 var $38=($27|0)==1;
 var $39=($27>>>0)<2;
 if($39){label=9;break;}else{var $_0=-1;label=12;break;}
 case 9: 
 var $41=HEAP32[(($__extbe)>>2)];
 var $42=$41;
 var $43=((($42)-($18))|0);
 var $44=HEAP32[(($19)>>2)];
 var $45=_fwrite($13,1,$43,$44);
 var $46=($45|0)==($43|0);
 if($46){label=10;break;}else{var $_0=-1;label=12;break;}
 case 10: 
 var $48=HEAP32[(($__e)>>2)];
 var $_pbase_0=($38?$48:$pbase_0);
 if($38){var $pbase_0=$_pbase_0;label=5;break;}else{label=11;break;}
 case 11: 
 var $___c_i=($1?0:$__c);
 var $_0=$___c_i;label=12;break;
 case 12: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIwED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4256;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 var $3=$this;
 __ZdlPv($3);
 return;
}


function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this,$__loc){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,13120);
 var $2=$1;
 var $3=(($this+36)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=$1;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+24)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=FUNCTION_TABLE[$7]($2);
 var $9=(($this+44)|0);
 HEAP32[(($9)>>2)]=$8;
 var $10=HEAP32[(($3)>>2)];
 var $11=$10;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+28)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=FUNCTION_TABLE[$14]($10);
 var $16=(($this+53)|0);
 var $17=($15&1);
 HEAP8[($16)]=$17;
 var $18=HEAP32[(($9)>>2)];
 var $19=($18|0)>8;
 if($19){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNSt3__121__throw_runtime_errorEPKc(184);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIwE9underflowEv($this){
 var label=0;


 var $1=__ZNSt3__110__stdinbufIwE9__getcharEb($this,0);
 return $1;
}


function __ZNSt3__110__stdinbufIwE5uflowEv($this){
 var label=0;


 var $1=__ZNSt3__110__stdinbufIwE9__getcharEb($this,1);
 return $1;
}


function __ZNSt3__110__stdinbufIwE9pbackfailEj($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__enxt=(sp)+(8);
 var $__ci=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=($__c|0)==-1;
 var $2=(($this+52)|0);
 var $3=HEAP8[($2)];
 var $4=(($3<<24)>>24)!=0;
 if($1){label=2;break;}else{label=4;break;}
 case 2: 
 if($4){var $_01=-1;label=11;break;}else{label=3;break;}
 case 3: 
 var $7=(($this+48)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)!=-1;
 var $10=($9&1);
 HEAP8[($2)]=$10;
 var $_01=$8;label=11;break;
 case 4: 
 var $12=(($this+48)|0);
 if($4){label=5;break;}else{label=10;break;}
 case 5: 
 var $14=HEAP32[(($12)>>2)];
 HEAP32[(($__ci)>>2)]=$14;
 var $15=(($this+36)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($this+40)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($__ci+4)|0);
 var $20=(($__extbuf)|0);
 var $21=(($__extbuf+8)|0);
 var $22=$16;
 var $23=HEAP32[(($22)>>2)];
 var $24=(($23+12)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=FUNCTION_TABLE[$25]($16,$18,$__ci,$19,$__inxt,$20,$21,$__enxt);
 if(($26|0)==2|($26|0)==1){ var $_01=-1;label=11;break;}else if(($26|0)==3){ label=6;break;}else{label=7;break;}
 case 6: 
 var $28=HEAP32[(($12)>>2)];
 var $29=(($28)&255);
 HEAP8[($20)]=$29;
 var $30=(($__extbuf+1)|0);
 HEAP32[(($__enxt)>>2)]=$30;
 label=7;break;
 case 7: 
 var $31=(($this+32)|0);
 label=8;break;
 case 8: 
 var $33=HEAP32[(($__enxt)>>2)];
 var $34=($33>>>0)>($20>>>0);
 if($34){label=9;break;}else{label=10;break;}
 case 9: 
 var $36=((($33)-(1))|0);
 HEAP32[(($__enxt)>>2)]=$36;
 var $37=HEAP8[($36)];
 var $38=(($37<<24)>>24);
 var $39=HEAP32[(($31)>>2)];
 var $40=_ungetc($38,$39);
 var $41=($40|0)==-1;
 if($41){var $_01=-1;label=11;break;}else{label=8;break;}
 case 10: 
 HEAP32[(($12)>>2)]=$__c;
 HEAP8[($2)]=1;
 var $_01=$__c;label=11;break;
 case 11: 
 var $_01;
 STACKTOP=sp;return $_01;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIcED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4328;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 var $3=$this;
 __ZdlPv($3);
 return;
}


function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this,$__loc){
 var label=0;


 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+24)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,13128);
 var $7=$6;
 var $8=(($this+36)|0);
 HEAP32[(($8)>>2)]=$7;
 var $9=$6;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=FUNCTION_TABLE[$12]($7);
 var $14=(($this+44)|0);
 var $15=($13&1);
 HEAP8[($14)]=$15;
 return;
}


function __ZNSt3__111__stdoutbufIcE4syncEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__extbe=(sp)+(8);
 var $1=(($this+36)|0);
 var $2=(($this+40)|0);
 var $3=(($__extbuf)|0);
 var $4=(($__extbuf+8)|0);
 var $5=$__extbuf;
 var $6=(($this+32)|0);
 label=2;break;
 case 2: 
 var $8=HEAP32[(($1)>>2)];
 var $9=HEAP32[(($2)>>2)];
 var $10=$8;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+20)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=FUNCTION_TABLE[$13]($8,$9,$3,$4,$__extbe);
 var $15=HEAP32[(($__extbe)>>2)];
 var $16=$15;
 var $17=((($16)-($5))|0);
 var $18=HEAP32[(($6)>>2)];
 var $19=_fwrite($3,1,$17,$18);
 var $20=($19|0)==($17|0);
 if($20){label=3;break;}else{var $_0=-1;label=5;break;}
 case 3: 
 if(($14|0)==1){ label=2;break;}else if(($14|0)==2){ var $_0=-1;label=5;break;}else{label=4;break;}
 case 4: 
 var $23=HEAP32[(($6)>>2)];
 var $24=_fflush($23);
 var $not_=($24|0)!=0;
 var $_=(($not_<<31)>>31);
 var $_0=$_;label=5;break;
 case 5: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+44)|0);
 var $2=HEAP8[($1)];
 var $3=(($2<<24)>>24)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=$this;
 var $5=($__n|0)>0;
 if($5){var $_012=$__s;var $__i_03=0;label=4;break;}else{var $_0=0;label=6;break;}
 case 3: 
 var $7=(($this+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=_fwrite($__s,1,$__n,$8);
 var $_0=$9;label=6;break;
 case 4: 
 var $__i_03;
 var $_012;
 var $10=HEAP32[(($4)>>2)];
 var $11=(($10+52)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=HEAP8[($_012)];
 var $14=($13&255);
 var $15=FUNCTION_TABLE[$12]($this,$14);
 var $16=($15|0)==-1;
 if($16){var $_0=$__i_03;label=6;break;}else{label=5;break;}
 case 5: 
 var $18=((($__i_03)+(1))|0);
 var $19=(($_012+1)|0);
 var $20=($18|0)<($__n|0);
 if($20){var $_012=$19;var $__i_03=$18;label=4;break;}else{var $_0=$18;label=6;break;}
 case 6: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIcE8overflowEi($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__extbe=(sp)+(16);
 var $__e=(sp)+(24);
 var $1=($__c|0)==-1;
 if($1){label=11;break;}else{label=2;break;}
 case 2: 
 var $3=(($__c)&255);
 HEAP8[($__1buf)]=$3;
 var $4=(($this+44)|0);
 var $5=HEAP8[($4)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=(($this+32)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=_fwrite($__1buf,1,1,$9);
 var $11=($10|0)==1;
 if($11){label=11;break;}else{var $_0=-1;label=12;break;}
 case 4: 
 var $13=(($__extbuf)|0);
 HEAP32[(($__extbe)>>2)]=$13;
 var $14=(($__1buf+1)|0);
 var $15=(($this+36)|0);
 var $16=(($this+40)|0);
 var $17=(($__extbuf+8)|0);
 var $18=$__extbuf;
 var $19=(($this+32)|0);
 var $pbase_0=$__1buf;label=5;break;
 case 5: 
 var $pbase_0;
 var $21=HEAP32[(($15)>>2)];
 var $22=HEAP32[(($16)>>2)];
 var $23=$21;
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=FUNCTION_TABLE[$26]($21,$22,$pbase_0,$14,$__e,$13,$17,$__extbe);
 var $28=HEAP32[(($__e)>>2)];
 var $29=($28|0)==($pbase_0|0);
 if($29){var $_0=-1;label=12;break;}else{label=6;break;}
 case 6: 
 var $31=($27|0)==3;
 if($31){label=7;break;}else{label=8;break;}
 case 7: 
 var $33=HEAP32[(($19)>>2)];
 var $34=_fwrite($pbase_0,1,1,$33);
 var $35=($34|0)==1;
 if($35){label=11;break;}else{var $_0=-1;label=12;break;}
 case 8: 
 var $37=($27|0)==1;
 var $38=($27>>>0)<2;
 if($38){label=9;break;}else{var $_0=-1;label=12;break;}
 case 9: 
 var $40=HEAP32[(($__extbe)>>2)];
 var $41=$40;
 var $42=((($41)-($18))|0);
 var $43=HEAP32[(($19)>>2)];
 var $44=_fwrite($13,1,$42,$43);
 var $45=($44|0)==($42|0);
 if($45){label=10;break;}else{var $_0=-1;label=12;break;}
 case 10: 
 var $47=HEAP32[(($__e)>>2)];
 var $_pbase_0=($37?$47:$pbase_0);
 if($37){var $pbase_0=$_pbase_0;label=5;break;}else{label=11;break;}
 case 11: 
 var $___c_i=($1?0:$__c);
 var $_0=$___c_i;label=12;break;
 case 12: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIcED0Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=4328;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 var $3=$this;
 __ZdlPv($3);
 return;
}


function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this,$__loc){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,13128);
 var $2=$1;
 var $3=(($this+36)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=$1;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+24)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=FUNCTION_TABLE[$7]($2);
 var $9=(($this+44)|0);
 HEAP32[(($9)>>2)]=$8;
 var $10=HEAP32[(($3)>>2)];
 var $11=$10;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+28)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=FUNCTION_TABLE[$14]($10);
 var $16=(($this+53)|0);
 var $17=($15&1);
 HEAP8[($16)]=$17;
 var $18=HEAP32[(($9)>>2)];
 var $19=($18|0)>8;
 if($19){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNSt3__121__throw_runtime_errorEPKc(184);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIcE9underflowEv($this){
 var label=0;


 var $1=__ZNSt3__110__stdinbufIcE9__getcharEb($this,0);
 return $1;
}


function __ZNSt3__110__stdinbufIcE5uflowEv($this){
 var label=0;


 var $1=__ZNSt3__110__stdinbufIcE9__getcharEb($this,1);
 return $1;
}


function __ZNSt3__110__stdinbufIcE9pbackfailEi($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__enxt=(sp)+(8);
 var $__ci=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=($__c|0)==-1;
 var $2=(($this+52)|0);
 var $3=HEAP8[($2)];
 var $4=(($3<<24)>>24)!=0;
 if($1){label=2;break;}else{label=4;break;}
 case 2: 
 if($4){var $_01=-1;label=11;break;}else{label=3;break;}
 case 3: 
 var $7=(($this+48)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)!=-1;
 var $10=($9&1);
 HEAP8[($2)]=$10;
 var $_01=$8;label=11;break;
 case 4: 
 var $12=(($this+48)|0);
 if($4){label=5;break;}else{label=10;break;}
 case 5: 
 var $14=HEAP32[(($12)>>2)];
 var $15=(($14)&255);
 HEAP8[($__ci)]=$15;
 var $16=(($this+36)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($this+40)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($__ci+1)|0);
 var $21=(($__extbuf)|0);
 var $22=(($__extbuf+8)|0);
 var $23=$17;
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=FUNCTION_TABLE[$26]($17,$19,$__ci,$20,$__inxt,$21,$22,$__enxt);
 if(($27|0)==2|($27|0)==1){ var $_01=-1;label=11;break;}else if(($27|0)==3){ label=6;break;}else{label=7;break;}
 case 6: 
 var $29=HEAP32[(($12)>>2)];
 var $30=(($29)&255);
 HEAP8[($21)]=$30;
 var $31=(($__extbuf+1)|0);
 HEAP32[(($__enxt)>>2)]=$31;
 label=7;break;
 case 7: 
 var $32=(($this+32)|0);
 label=8;break;
 case 8: 
 var $34=HEAP32[(($__enxt)>>2)];
 var $35=($34>>>0)>($21>>>0);
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 var $37=((($34)-(1))|0);
 HEAP32[(($__enxt)>>2)]=$37;
 var $38=HEAP8[($37)];
 var $39=(($38<<24)>>24);
 var $40=HEAP32[(($32)>>2)];
 var $41=_ungetc($39,$40);
 var $42=($41|0)==-1;
 if($42){var $_01=-1;label=11;break;}else{label=8;break;}
 case 10: 
 HEAP32[(($12)>>2)]=$__c;
 HEAP8[($2)]=1;
 var $_01=$__c;label=11;break;
 case 11: 
 var $_01;
 STACKTOP=sp;return $_01;
  default: assert(0, "bad label: " + label);
 }

}


function __GLOBAL__I_a(){
 var label=0;


 __ZNSt3__18ios_base4InitC2Ev(0);
 var $1=_atexit((370),13880,___dso_handle);
 return;
}


function __ZNSt3__119__iostream_categoryD0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__114error_categoryD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($this)|0);
 HEAP32[(($2)>>2)]=4328;
 var $3=(($this+4)|0);
 __ZNSt3__16localeC2Ev($3);
 var $4=(($this+8)|0);
 var $5=$4;
 HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0; HEAP32[((($5)+(12))>>2)]=0; HEAP32[((($5)+(16))>>2)]=0; HEAP32[((($5)+(20))>>2)]=0;
 HEAP32[(($2)>>2)]=5096;
 var $6=(($this+32)|0);
 HEAP32[(($6)>>2)]=$__fp;
 var $7=(($this+40)|0);
 HEAP32[(($7)>>2)]=$__st;
 var $8=(($this+48)|0);
 HEAP32[(($8)>>2)]=-1;
 var $9=(($this+52)|0);
 HEAP8[($9)]=0;
 __ZNSt3__16localeC2ERKS0_($1,$3);
 var $10=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($1,13128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 2: 
 var $11=$10;
 var $12=(($this+36)|0);
 HEAP32[(($12)>>2)]=$11;
 var $13=$10;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+24)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=FUNCTION_TABLE[$16]($11);
 var $18=(($this+44)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=HEAP32[(($12)>>2)];
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+28)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=FUNCTION_TABLE[$23]($19);
 var $25=(($this+53)|0);
 var $26=($24&1);
 HEAP8[($25)]=$26;
 var $27=HEAP32[(($18)>>2)];
 var $28=($27|0)>8;
 if($28){label=3;break;}else{label=4;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(184) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 __ZNSt3__16localeD2Ev($1);
 STACKTOP=sp;return;
 case 5: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 __ZNSt3__16localeD2Ev($1);
 HEAP32[(($2)>>2)]=4328;
 __ZNSt3__16localeD2Ev($3);
 ___resumeException($31$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($this)|0);
 HEAP32[(($2)>>2)]=4328;
 var $3=(($this+4)|0);
 __ZNSt3__16localeC2Ev($3);
 var $4=(($this+8)|0);
 var $5=$4;
 HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0; HEAP32[((($5)+(12))>>2)]=0; HEAP32[((($5)+(16))>>2)]=0; HEAP32[((($5)+(20))>>2)]=0;
 HEAP32[(($2)>>2)]=4696;
 var $6=(($this+32)|0);
 HEAP32[(($6)>>2)]=$__fp;
 __ZNSt3__16localeC2ERKS0_($1,$3);
 var $7=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($1,13128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $9=(($this+36)|0);
 var $10=$7;
 __ZNSt3__16localeD2Ev($1);
 HEAP32[(($9)>>2)]=$10;
 var $11=(($this+40)|0);
 HEAP32[(($11)>>2)]=$__st;
 var $12=(($this+44)|0);
 var $13=$7;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+28)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=FUNCTION_TABLE[$16]($10);
 var $18=($17&1);
 HEAP8[($12)]=$18;
 STACKTOP=sp;return;
 case 3: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1); var $20$1 = tempRet0;
 __ZNSt3__16localeD2Ev($1);
 HEAP32[(($2)>>2)]=4328;
 __ZNSt3__16localeD2Ev($3);
 ___resumeException($20$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($this)|0);
 HEAP32[(($2)>>2)]=4256;
 var $3=(($this+4)|0);
 __ZNSt3__16localeC2Ev($3);
 var $4=(($this+8)|0);
 var $5=$4;
 HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0; HEAP32[((($5)+(12))>>2)]=0; HEAP32[((($5)+(16))>>2)]=0; HEAP32[((($5)+(20))>>2)]=0;
 HEAP32[(($2)>>2)]=5024;
 var $6=(($this+32)|0);
 HEAP32[(($6)>>2)]=$__fp;
 var $7=(($this+40)|0);
 HEAP32[(($7)>>2)]=$__st;
 var $8=(($this+48)|0);
 HEAP32[(($8)>>2)]=-1;
 var $9=(($this+52)|0);
 HEAP8[($9)]=0;
 __ZNSt3__16localeC2ERKS0_($1,$3);
 var $10=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($1,13120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 2: 
 var $11=$10;
 var $12=(($this+36)|0);
 HEAP32[(($12)>>2)]=$11;
 var $13=$10;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+24)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=FUNCTION_TABLE[$16]($11);
 var $18=(($this+44)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=HEAP32[(($12)>>2)];
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+28)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=FUNCTION_TABLE[$23]($19);
 var $25=(($this+53)|0);
 var $26=($24&1);
 HEAP8[($25)]=$26;
 var $27=HEAP32[(($18)>>2)];
 var $28=($27|0)>8;
 if($28){label=3;break;}else{label=4;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(184) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 __ZNSt3__16localeD2Ev($1);
 STACKTOP=sp;return;
 case 5: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 __ZNSt3__16localeD2Ev($1);
 HEAP32[(($2)>>2)]=4256;
 __ZNSt3__16localeD2Ev($3);
 ___resumeException($31$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($this)|0);
 HEAP32[(($2)>>2)]=4256;
 var $3=(($this+4)|0);
 __ZNSt3__16localeC2Ev($3);
 var $4=(($this+8)|0);
 var $5=$4;
 HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0; HEAP32[((($5)+(12))>>2)]=0; HEAP32[((($5)+(16))>>2)]=0; HEAP32[((($5)+(20))>>2)]=0;
 HEAP32[(($2)>>2)]=4624;
 var $6=(($this+32)|0);
 HEAP32[(($6)>>2)]=$__fp;
 __ZNSt3__16localeC2ERKS0_($1,$3);
 var $7=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($1,13120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $9=(($this+36)|0);
 var $10=$7;
 __ZNSt3__16localeD2Ev($1);
 HEAP32[(($9)>>2)]=$10;
 var $11=(($this+40)|0);
 HEAP32[(($11)>>2)]=$__st;
 var $12=(($this+44)|0);
 var $13=$7;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+28)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=FUNCTION_TABLE[$16]($10);
 var $18=($17&1);
 HEAP8[($12)]=$18;
 STACKTOP=sp;return;
 case 3: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1); var $20$1 = tempRet0;
 __ZNSt3__16localeD2Ev($1);
 HEAP32[(($2)>>2)]=4256;
 __ZNSt3__16localeD2Ev($3);
 ___resumeException($20$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_idx=$__vp;
 var $_idx_val=HEAP32[(($_idx)>>2)];
 var $_idx1=(($__vp+4)|0);
 var $1=$_idx1;
 var $ld$0$0=(($1)|0);
 var $_idx1_val$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($1+4)|0);
 var $_idx1_val$1=HEAP32[(($ld$1$1)>>2)];
 var $2=$_idx1_val$1;
 var $3=$2>>1;
 var $4=$_idx_val;
 var $5=(($4+$3)|0);
 var $6=$5;
 var $7=$_idx1_val$0;
 var $8=$2&1;
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $11=$5;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+$7)|0);
 var $14=$13;
 var $15=HEAP32[(($14)>>2)];
 var $18=$15;label=4;break;
 case 3: 
 var $17=$7;
 var $18=$17;label=4;break;
 case 4: 
 var $18;
 FUNCTION_TABLE[$18]($6);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__statbuf=sp;
 var $1=$__ke;
 var $2=$__kb;
 var $3=((($1)-($2))|0);
 var $4=(((($3|0))/(12))&-1);
 var $5=(($__statbuf)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 var $6=($4>>>0)>100;
 if($6){label=2;break;}else{var $__status_0=$5;var $18=0;label=12;break;}
 case 2: 
 var $8=_malloc($4);
 var $9=($8|0)==0;
 if($9){label=3;break;}else{var $__status_0=$8;var $18=$8;label=12;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__status_0=0;var $18=0;label=12;break; } else { label=4;break; }
 case 4: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;
 var $17$1=$11$1;var $17$0=$11$0;label=11;break;
 case 5: 
 var $lpad_us_lcssa$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_us_lcssa$1 = tempRet0;
 var $lpad_phi$1=$lpad_us_lcssa$1;var $lpad_phi$0=$lpad_us_lcssa$0;label=8;break;
 case 6: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=8;break;
 case 7: 
 var $lpad_nonloopexit52$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit52$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit52$1;var $lpad_phi$0=$lpad_nonloopexit52$0;label=8;break;
 case 8: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $12=($18|0)==0;
 if($12){var $17$1=$lpad_phi$1;var $17$0=$lpad_phi$0;label=11;break;}else{label=9;break;}
 case 9: 
 (function() { try { __THREW__ = 0; return _free($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $17$1=$lpad_phi$1;var $17$0=$lpad_phi$0;label=11;break; } else { label=10;break; }
 case 10: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1,0); var $15$1 = tempRet0;
 var $16=$15$0;
 ___clang_call_terminate($16);
 throw "Reached an unreachable!";
 case 11: 
 var $17$0;
 var $17$1;
 ___resumeException($17$0)
 case 12: 
 var $18;
 var $__status_0;
 var $19=($__kb|0)==($__ke|0);
 if($19){var $__n_might_match_0_lcssa=$4;var $__n_does_match_0_lcssa=0;label=13;break;}else{var $__n_might_match_062=$4;var $__n_does_match_063=0;var $__st_064=$__status_0;var $__ky_065=$__kb;label=14;break;}
 case 13: 
 var $__n_does_match_0_lcssa;
 var $__n_might_match_0_lcssa;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=$__ct;
 var $__indx_0=0;var $__n_does_match_2=$__n_does_match_0_lcssa;var $__n_might_match_2=$__n_might_match_0_lcssa;label=21;break;
 case 14: 
 var $__ky_065;
 var $__st_064;
 var $__n_does_match_063;
 var $__n_might_match_062;
 var $23=$__ky_065;
 var $24=HEAP8[($23)];
 var $25=$24&1;
 var $26=(($25<<24)>>24)==0;
 if($26){label=16;break;}else{label=15;break;}
 case 15: 
 var $28=(($__ky_065+4)|0);
 var $29=HEAP32[(($28)>>2)];
 var $33=$29;label=17;break;
 case 16: 
 var $31=($24&255);
 var $32=$31>>>1;
 var $33=$32;label=17;break;
 case 17: 
 var $33;
 var $34=($33|0)==0;
 if($34){label=19;break;}else{label=18;break;}
 case 18: 
 HEAP8[($__st_064)]=1;
 var $__n_does_match_1=$__n_does_match_063;var $__n_might_match_1=$__n_might_match_062;label=20;break;
 case 19: 
 HEAP8[($__st_064)]=2;
 var $37=((($__n_might_match_062)-(1))|0);
 var $38=((($__n_does_match_063)+(1))|0);
 var $__n_does_match_1=$38;var $__n_might_match_1=$37;label=20;break;
 case 20: 
 var $__n_might_match_1;
 var $__n_does_match_1;
 var $40=(($__ky_065+12)|0);
 var $41=(($__st_064+1)|0);
 var $42=($40|0)==($__ke|0);
 if($42){var $__n_might_match_0_lcssa=$__n_might_match_1;var $__n_does_match_0_lcssa=$__n_does_match_1;label=13;break;}else{var $__n_might_match_062=$__n_might_match_1;var $__n_does_match_063=$__n_does_match_1;var $__st_064=$41;var $__ky_065=$40;label=14;break;}
 case 21: 
 var $__n_might_match_2;
 var $__n_does_match_2;
 var $__indx_0;
 var $43=HEAP32[(($20)>>2)];
 var $44=($43|0)==0;
 if($44){var $58=0;label=27;break;}else{label=22;break;}
 case 22: 
 var $46=(($43+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($43+16)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($47|0)==($49|0);
 if($50){label=23;break;}else{var $58=$43;label=27;break;}
 case 23: 
 var $51=$43;
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52+36)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$54]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=6;break; }
 case 24: 
 var $56=($55|0)==-1;
 if($56){label=26;break;}else{label=25;break;}
 case 25: 
 var $_pre_i_i_i=HEAP32[(($20)>>2)];
 var $58=$_pre_i_i_i;label=27;break;
 case 26: 
 HEAP32[(($20)>>2)]=0;
 var $58=0;label=27;break;
 case 27: 
 var $58;
 var $59=($58|0)==0;
 var $60=HEAP32[(($21)>>2)];
 var $61=($60|0)==0;
 if($61){var $_pre_i2_i_i17=0;label=32;break;}else{label=28;break;}
 case 28: 
 var $63=(($60+12)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=(($60+16)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=($64|0)==($66|0);
 if($67){label=29;break;}else{var $_pre_i2_i_i17=$60;label=32;break;}
 case 29: 
 var $68=$60;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+36)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$71]($60) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=6;break; }
 case 30: 
 var $73=($72|0)==-1;
 if($73){label=31;break;}else{var $_pre_i2_i_i17=$60;label=32;break;}
 case 31: 
 HEAP32[(($21)>>2)]=0;
 var $_pre_i2_i_i17=0;label=32;break;
 case 32: 
 var $_pre_i2_i_i17;
 var $75=($_pre_i2_i_i17|0)==0;
 var $tmp_i_i=$59^$75;
 var $76=($__n_might_match_2|0)!=0;
 var $or_cond=$tmp_i_i&$76;
 var $77=HEAP32[(($20)>>2)];
 if($or_cond){label=33;break;}else{label=78;break;}
 case 33: 
 var $79=(($77+12)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(($77+16)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=($80|0)==($82|0);
 if($83){label=34;break;}else{label=36;break;}
 case 34: 
 var $85=$77;
 var $86=HEAP32[(($85)>>2)];
 var $87=(($86+36)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$88]($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=6;break; }
 case 35: 
 var $extract_t_i=(($89)&255);
 var $_0_i_off0_i=$extract_t_i;label=37;break;
 case 36: 
 var $91=HEAP8[($80)];
 var $_0_i_off0_i=$91;label=37;break;
 case 37: 
 var $_0_i_off0_i;
 if($__case_sensitive){var $__c_0=$_0_i_off0_i;label=39;break;}else{label=38;break;}
 case 38: 
 var $93=HEAP32[(($22)>>2)];
 var $94=(($93+12)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$95]($__ct,$_0_i_off0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__c_0=$96;label=39;break; } else { label=6;break; }
 case 39: 
 var $__c_0;
 var $_pre=((($__indx_0)+(1))|0);
 if($19){var $__indx_0=$_pre;var $__n_does_match_2=$__n_does_match_2;var $__n_might_match_2=$__n_might_match_2;label=21;break;}else{label=40;break;}
 case 40: 
 if($__case_sensitive){var $__n_might_match_332_us=$__n_might_match_2;var $__n_does_match_333_us=$__n_does_match_2;var $__st_134_us=$__status_0;var $__consume_0_off036_us=0;var $__ky1_037_us=$__kb;label=41;break;}else{var $__n_might_match_332=$__n_might_match_2;var $__n_does_match_333=$__n_does_match_2;var $__st_134=$__status_0;var $__consume_0_off036=0;var $__ky1_037=$__kb;label=53;break;}
 case 41: 
 var $__ky1_037_us;
 var $__consume_0_off036_us;
 var $__st_134_us;
 var $__n_does_match_333_us;
 var $__n_might_match_332_us;
 var $97=HEAP8[($__st_134_us)];
 var $98=(($97<<24)>>24)==1;
 if($98){label=42;break;}else{var $__consume_1_off0_us=$__consume_0_off036_us;var $__n_does_match_4_us=$__n_does_match_333_us;var $__n_might_match_4_us=$__n_might_match_332_us;label=52;break;}
 case 42: 
 var $100=$__ky1_037_us;
 var $101=HEAP8[($100)];
 var $102=$101&1;
 var $103=(($102<<24)>>24)==0;
 if($103){label=44;break;}else{label=43;break;}
 case 43: 
 var $105=(($__ky1_037_us+8)|0);
 var $106=HEAP32[(($105)>>2)];
 var $110=$106;label=45;break;
 case 44: 
 var $108=$__ky1_037_us;
 var $109=(($108+1)|0);
 var $110=$109;label=45;break;
 case 45: 
 var $110;
 var $111=(($110+$__indx_0)|0);
 var $112=HEAP8[($111)];
 var $113=(($__c_0<<24)>>24)==(($112<<24)>>24);
 if($113){label=47;break;}else{label=46;break;}
 case 46: 
 HEAP8[($__st_134_us)]=0;
 var $115=((($__n_might_match_332_us)-(1))|0);
 var $__consume_1_off0_us=$__consume_0_off036_us;var $__n_does_match_4_us=$__n_does_match_333_us;var $__n_might_match_4_us=$115;label=52;break;
 case 47: 
 if($103){label=49;break;}else{label=48;break;}
 case 48: 
 var $118=(($__ky1_037_us+4)|0);
 var $119=HEAP32[(($118)>>2)];
 var $123=$119;label=50;break;
 case 49: 
 var $121=($101&255);
 var $122=$121>>>1;
 var $123=$122;label=50;break;
 case 50: 
 var $123;
 var $124=($123|0)==($_pre|0);
 if($124){label=51;break;}else{var $__consume_1_off0_us=1;var $__n_does_match_4_us=$__n_does_match_333_us;var $__n_might_match_4_us=$__n_might_match_332_us;label=52;break;}
 case 51: 
 HEAP8[($__st_134_us)]=2;
 var $126=((($__n_might_match_332_us)-(1))|0);
 var $127=((($__n_does_match_333_us)+(1))|0);
 var $__consume_1_off0_us=1;var $__n_does_match_4_us=$127;var $__n_might_match_4_us=$126;label=52;break;
 case 52: 
 var $__n_might_match_4_us;
 var $__n_does_match_4_us;
 var $__consume_1_off0_us;
 var $129=(($__ky1_037_us+12)|0);
 var $130=(($__st_134_us+1)|0);
 var $131=($129|0)==($__ke|0);
 if($131){var $__n_might_match_3_lcssa=$__n_might_match_4_us;var $__n_does_match_3_lcssa=$__n_does_match_4_us;var $__consume_0_off0_lcssa=$__consume_1_off0_us;label=66;break;}else{var $__n_might_match_332_us=$__n_might_match_4_us;var $__n_does_match_333_us=$__n_does_match_4_us;var $__st_134_us=$130;var $__consume_0_off036_us=$__consume_1_off0_us;var $__ky1_037_us=$129;label=41;break;}
 case 53: 
 var $__ky1_037;
 var $__consume_0_off036;
 var $__st_134;
 var $__n_does_match_333;
 var $__n_might_match_332;
 var $132=HEAP8[($__st_134)];
 var $133=(($132<<24)>>24)==1;
 if($133){label=54;break;}else{var $__consume_1_off0=$__consume_0_off036;var $__n_does_match_4=$__n_does_match_333;var $__n_might_match_4=$__n_might_match_332;label=65;break;}
 case 54: 
 var $135=$__ky1_037;
 var $136=HEAP8[($135)];
 var $137=$136&1;
 var $138=(($137<<24)>>24)==0;
 if($138){label=56;break;}else{label=55;break;}
 case 55: 
 var $140=(($__ky1_037+8)|0);
 var $141=HEAP32[(($140)>>2)];
 var $145=$141;label=57;break;
 case 56: 
 var $143=$__ky1_037;
 var $144=(($143+1)|0);
 var $145=$144;label=57;break;
 case 57: 
 var $145;
 var $146=(($145+$__indx_0)|0);
 var $147=HEAP8[($146)];
 var $148=HEAP32[(($22)>>2)];
 var $149=(($148+12)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$150]($__ct,$147) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=5;break; }
 case 58: 
 var $152=(($__c_0<<24)>>24)==(($151<<24)>>24);
 if($152){label=59;break;}else{label=64;break;}
 case 59: 
 var $154=HEAP8[($135)];
 var $155=$154&1;
 var $156=(($155<<24)>>24)==0;
 if($156){label=61;break;}else{label=60;break;}
 case 60: 
 var $158=(($__ky1_037+4)|0);
 var $159=HEAP32[(($158)>>2)];
 var $163=$159;label=62;break;
 case 61: 
 var $161=($154&255);
 var $162=$161>>>1;
 var $163=$162;label=62;break;
 case 62: 
 var $163;
 var $164=($163|0)==($_pre|0);
 if($164){label=63;break;}else{var $__consume_1_off0=1;var $__n_does_match_4=$__n_does_match_333;var $__n_might_match_4=$__n_might_match_332;label=65;break;}
 case 63: 
 HEAP8[($__st_134)]=2;
 var $166=((($__n_might_match_332)-(1))|0);
 var $167=((($__n_does_match_333)+(1))|0);
 var $__consume_1_off0=1;var $__n_does_match_4=$167;var $__n_might_match_4=$166;label=65;break;
 case 64: 
 HEAP8[($__st_134)]=0;
 var $169=((($__n_might_match_332)-(1))|0);
 var $__consume_1_off0=$__consume_0_off036;var $__n_does_match_4=$__n_does_match_333;var $__n_might_match_4=$169;label=65;break;
 case 65: 
 var $__n_might_match_4;
 var $__n_does_match_4;
 var $__consume_1_off0;
 var $171=(($__ky1_037+12)|0);
 var $172=(($__st_134+1)|0);
 var $173=($171|0)==($__ke|0);
 if($173){var $__n_might_match_3_lcssa=$__n_might_match_4;var $__n_does_match_3_lcssa=$__n_does_match_4;var $__consume_0_off0_lcssa=$__consume_1_off0;label=66;break;}else{var $__n_might_match_332=$__n_might_match_4;var $__n_does_match_333=$__n_does_match_4;var $__st_134=$172;var $__consume_0_off036=$__consume_1_off0;var $__ky1_037=$171;label=53;break;}
 case 66: 
 var $__consume_0_off0_lcssa;
 var $__n_does_match_3_lcssa;
 var $__n_might_match_3_lcssa;
 if($__consume_0_off0_lcssa){label=67;break;}else{var $__indx_0=$_pre;var $__n_does_match_2=$__n_does_match_3_lcssa;var $__n_might_match_2=$__n_might_match_3_lcssa;label=21;break;}
 case 67: 
 var $175=HEAP32[(($20)>>2)];
 var $176=(($175+12)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($175+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($177|0)==($179|0);
 if($180){label=68;break;}else{label=69;break;}
 case 68: 
 var $182=$175;
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+40)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$185]($175) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=70;break; } else { label=6;break; }
 case 69: 
 var $188=(($177+1)|0);
 HEAP32[(($176)>>2)]=$188;
 label=70;break;
 case 70: 
 var $189=((($__n_might_match_3_lcssa)+($__n_does_match_3_lcssa))|0);
 var $_not=($189>>>0)<2;
 if($_not){var $__indx_0=$_pre;var $__n_does_match_2=$__n_does_match_3_lcssa;var $__n_might_match_2=$__n_might_match_3_lcssa;label=21;break;}else{var $__n_does_match_546=$__n_does_match_3_lcssa;var $__st_247=$__status_0;var $__ky2_048=$__kb;label=71;break;}
 case 71: 
 var $__ky2_048;
 var $__st_247;
 var $__n_does_match_546;
 var $190=HEAP8[($__st_247)];
 var $191=(($190<<24)>>24)==2;
 if($191){label=72;break;}else{var $__n_does_match_6=$__n_does_match_546;label=77;break;}
 case 72: 
 var $193=$__ky2_048;
 var $194=HEAP8[($193)];
 var $195=$194&1;
 var $196=(($195<<24)>>24)==0;
 if($196){label=74;break;}else{label=73;break;}
 case 73: 
 var $198=(($__ky2_048+4)|0);
 var $199=HEAP32[(($198)>>2)];
 var $203=$199;label=75;break;
 case 74: 
 var $201=($194&255);
 var $202=$201>>>1;
 var $203=$202;label=75;break;
 case 75: 
 var $203;
 var $204=($203|0)==($_pre|0);
 if($204){var $__n_does_match_6=$__n_does_match_546;label=77;break;}else{label=76;break;}
 case 76: 
 HEAP8[($__st_247)]=0;
 var $206=((($__n_does_match_546)-(1))|0);
 var $__n_does_match_6=$206;label=77;break;
 case 77: 
 var $__n_does_match_6;
 var $208=(($__ky2_048+12)|0);
 var $209=(($__st_247+1)|0);
 var $210=($208|0)==($__ke|0);
 if($210){var $__indx_0=$_pre;var $__n_does_match_2=$__n_does_match_6;var $__n_might_match_2=$__n_might_match_3_lcssa;label=21;break;}else{var $__n_does_match_546=$__n_does_match_6;var $__st_247=$209;var $__ky2_048=$208;label=71;break;}
 case 78: 
 var $212=($77|0)==0;
 if($212){var $226=0;label=84;break;}else{label=79;break;}
 case 79: 
 var $214=(($77+12)|0);
 var $215=HEAP32[(($214)>>2)];
 var $216=(($77+16)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=($215|0)==($217|0);
 if($218){label=80;break;}else{var $226=$77;label=84;break;}
 case 80: 
 var $219=$77;
 var $220=HEAP32[(($219)>>2)];
 var $221=(($220+36)|0);
 var $222=HEAP32[(($221)>>2)];
 var $223=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$222]($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=81;break; } else { label=7;break; }
 case 81: 
 var $224=($223|0)==-1;
 if($224){label=83;break;}else{label=82;break;}
 case 82: 
 var $_pre_i_i_i13=HEAP32[(($20)>>2)];
 var $226=$_pre_i_i_i13;label=84;break;
 case 83: 
 HEAP32[(($20)>>2)]=0;
 var $226=0;label=84;break;
 case 84: 
 var $226;
 var $227=($226|0)==0;
 if($75){label=90;break;}else{label=85;break;}
 case 85: 
 var $229=(($_pre_i2_i_i17+12)|0);
 var $230=HEAP32[(($229)>>2)];
 var $231=(($_pre_i2_i_i17+16)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=($230|0)==($232|0);
 if($233){label=87;break;}else{label=86;break;}
 case 86: 
 if($227){label=93;break;}else{label=92;break;}
 case 87: 
 var $234=$_pre_i2_i_i17;
 var $235=HEAP32[(($234)>>2)];
 var $236=(($235+36)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$237]($_pre_i2_i_i17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=88;break; } else { label=7;break; }
 case 88: 
 var $239=($238|0)==-1;
 if($239){label=89;break;}else{label=91;break;}
 case 89: 
 HEAP32[(($21)>>2)]=0;
 label=90;break;
 case 90: 
 if($227){label=92;break;}else{label=93;break;}
 case 91: 
 if($227){label=93;break;}else{label=92;break;}
 case 92: 
 var $242=HEAP32[(($__err)>>2)];
 var $243=$242|2;
 HEAP32[(($__err)>>2)]=$243;
 label=93;break;
 case 93: 
 if($19){label=96;break;}else{var $__st_326=$__status_0;var $_027=$__kb;label=94;break;}
 case 94: 
 var $_027;
 var $__st_326;
 var $244=HEAP8[($__st_326)];
 var $245=(($244<<24)>>24)==2;
 if($245){var $_025=$_027;label=97;break;}else{label=95;break;}
 case 95: 
 var $247=(($_027+12)|0);
 var $248=(($__st_326+1)|0);
 var $249=($247|0)==($__ke|0);
 if($249){label=96;break;}else{var $__st_326=$248;var $_027=$247;label=94;break;}
 case 96: 
 var $250=HEAP32[(($__err)>>2)];
 var $251=$250|4;
 HEAP32[(($__err)>>2)]=$251;
 var $_025=$__ke;label=97;break;
 case 97: 
 var $_025;
 var $252=($18|0)==0;
 if($252){label=100;break;}else{label=98;break;}
 case 98: 
 (function() { try { __THREW__ = 0; return _free($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=100;break; } else { label=99;break; }
 case 99: 
 var $255$0 = ___cxa_find_matching_catch(-1, -1,0); var $255$1 = tempRet0;
 var $256=$255$0;
 ___clang_call_terminate($256);
 throw "Reached an unreachable!";
 case 100: 
 var $$etemp$1$0=100;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $_025;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+232)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $__g=(sp)+(72);
 var $1=(($__iob+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&74;
 if(($3|0)==8){ label=2;break;}else if(($3|0)==0){ label=3;break;}else if(($3|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $7=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$7,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=38;break; }
 case 6: 
 var $8=HEAP8[($this2_i_i_i)];
 var $9=$8&1;
 var $10=(($9<<24)>>24)==0;
 if($10){label=8;break;}else{label=7;break;}
 case 7: 
 var $12=(($__buf+8)|0);
 var $13=HEAP32[(($12)>>2)];
 var $_pre44=$__buf;
 var $_pre45=(($_pre44+1)|0);
 var $17=$13;var $_pre_phi46=$_pre45;var $_pre_phi48=$12;label=9;break;
 case 8: 
 var $15=$__buf;
 var $16=(($15+1)|0);
 var $_pre47=(($__buf+8)|0);
 var $17=$16;var $_pre_phi46=$16;var $_pre_phi48=$_pre47;label=9;break;
 case 9: 
 var $_pre_phi48;
 var $_pre_phi46;
 var $17;
 var $18=$__g;
 var $$etemp$0$0=160;
 var $$etemp$0$1=0;

 var $19=(($__g)|0);
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=(($__atoms+24)|0);
 var $25=(($__atoms+25)|0);
 var $26=$__grouping;
 var $27=$__g;
 var $28=(($__atoms+26)|0);
 var $29=$__atoms;
 var $30=(($__grouping+4)|0);
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$17;var $33=0;var $32=$19;var $31=$17;var $_pre_i_i_i5=$_pre;label=10;break;
 case 10: 
 var $_pre_i_i_i5;
 var $31;
 var $32;
 var $33;
 var $__a_0;
 var $34=($_pre_i_i_i5|0)==0;
 if($34){var $48=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $36=(($_pre_i_i_i5+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($_pre_i_i_i5+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=12;break;}else{var $48=$_pre_i_i_i5;label=15;break;}
 case 12: 
 var $41=$_pre_i_i_i5;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+36)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$44]($_pre_i_i_i5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=37;break; }
 case 13: 
 var $46=($45|0)==-1;
 if($46){label=14;break;}else{var $48=$_pre_i_i_i5;label=15;break;}
 case 14: 
 HEAP32[(($20)>>2)]=0;
 var $48=0;label=15;break;
 case 15: 
 var $48;
 var $49=($48|0)==0;
 var $50=HEAP32[(($21)>>2)];
 var $51=($50|0)==0;
 if($51){label=21;break;}else{label=16;break;}
 case 16: 
 var $53=(($50+12)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($50+16)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($54|0)==($56|0);
 if($57){label=18;break;}else{label=17;break;}
 case 17: 
 if($49){var $67=$50;label=23;break;}else{var $__a_2=$__a_0;var $198=$31;var $_pre_i2_i_i=$50;label=67;break;}
 case 18: 
 var $58=$50;
 var $59=HEAP32[(($58)>>2)];
 var $60=(($59+36)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$61]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=37;break; }
 case 19: 
 var $63=($62|0)==-1;
 if($63){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($21)>>2)]=0;
 label=21;break;
 case 21: 
 if($49){var $__a_2=$__a_0;var $198=$31;var $_pre_i2_i_i=0;label=67;break;}else{var $67=0;label=23;break;}
 case 22: 
 if($49){var $67=$50;label=23;break;}else{var $__a_2=$__a_0;var $198=$31;var $_pre_i2_i_i=$50;label=67;break;}
 case 23: 
 var $67;
 var $68=$31;
 var $69=$__a_0;
 var $70=((($68)-($69))|0);
 var $71=HEAP8[($this2_i_i_i)];
 var $72=$71&1;
 var $73=(($72<<24)>>24)==0;
 if($73){label=25;break;}else{label=24;break;}
 case 24: 
 var $75=HEAP32[(($23)>>2)];
 var $79=$75;label=26;break;
 case 25: 
 var $77=($71&255);
 var $78=$77>>>1;
 var $79=$78;label=26;break;
 case 26: 
 var $79;
 var $80=($70|0)==($79|0);
 if($80){label=27;break;}else{var $__a_1=$__a_0;var $108=$31;label=40;break;}
 case 27: 
 if($73){label=29;break;}else{label=28;break;}
 case 28: 
 var $83=HEAP32[(($23)>>2)];
 var $90=$83;var $89=$83;label=30;break;
 case 29: 
 var $85=($71&255);
 var $86=$85>>>1;
 var $87=($71&255);
 var $88=$87>>>1;
 var $90=$88;var $89=$86;label=30;break;
 case 30: 
 var $89;
 var $90;
 var $91=$90<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$91,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=37;break; }
 case 31: 
 var $92=HEAP8[($this2_i_i_i)];
 var $93=$92&1;
 var $94=(($93<<24)>>24)==0;
 if($94){var $98=10;label=33;break;}else{label=32;break;}
 case 32: 
 var $96=HEAP32[(($22)>>2)];
 var $97=$96&-2;
 var $phitmp_i25=((($97)-(1))|0);
 var $98=$phitmp_i25;label=33;break;
 case 33: 
 var $98;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$98,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=37;break; }
 case 34: 
 var $99=HEAP8[($this2_i_i_i)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){var $104=$_pre_phi46;label=36;break;}else{label=35;break;}
 case 35: 
 var $103=HEAP32[(($_pre_phi48)>>2)];
 var $104=$103;label=36;break;
 case 36: 
 var $104;
 var $105=(($104+$89)|0);
 var $__a_1=$104;var $108=$105;label=40;break;
 case 37: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=39;break;
 case 38: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=39;break;
 case 39: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 40: 
 var $108;
 var $__a_1;
 var $109=(($48+12)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=(($48+16)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=($110|0)==($112|0);
 if($113){label=41;break;}else{label=43;break;}
 case 41: 
 var $115=$48;
 var $116=HEAP32[(($115)>>2)];
 var $117=(($116+36)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$118]($48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=37;break; }
 case 42: 
 var $extract_t_i=(($119)&255);
 var $_0_i_off0_i=$extract_t_i;label=44;break;
 case 43: 
 var $121=HEAP8[($110)];
 var $_0_i_off0_i=$121;label=44;break;
 case 44: 
 var $_0_i_off0_i;
 var $122=HEAP8[($__thousands_sep)];
 var $123=($108|0)==($__a_1|0);
 if($123){label=45;break;}else{label=47;break;}
 case 45: 
 var $125=HEAP8[($24)];
 var $126=(($125<<24)>>24)==(($_0_i_off0_i<<24)>>24);
 var $127=HEAP8[($25)];
 var $128=(($127<<24)>>24)==(($_0_i_off0_i<<24)>>24);
 var $or_cond=$126|$128;
 if($or_cond){label=46;break;}else{label=47;break;}
 case 46: 
 var $130=($126?43:45);
 var $131=(($108+1)|0);
 HEAP8[($108)]=$130;
 var $_ph30=0;var $_ph29=$32;var $_ph=$131;label=64;break;
 case 47: 
 var $133=HEAP8[($26)];
 var $134=$133&1;
 var $135=(($134<<24)>>24)==0;
 if($135){label=49;break;}else{label=48;break;}
 case 48: 
 var $137=HEAP32[(($30)>>2)];
 var $141=$137;label=50;break;
 case 49: 
 var $139=($133&255);
 var $140=$139>>>1;
 var $141=$140;label=50;break;
 case 50: 
 var $141;
 var $142=($141|0)!=0;
 var $143=(($_0_i_off0_i<<24)>>24)==(($122<<24)>>24);
 var $or_cond_i=$142&$143;
 if($or_cond_i){label=51;break;}else{var $_01_i_i=$7;label=54;break;}
 case 51: 
 var $145=$32;
 var $146=((($145)-($27))|0);
 var $147=($146|0)<160;
 if($147){label=52;break;}else{var $_ph30=$33;var $_ph29=$32;var $_ph=$108;label=64;break;}
 case 52: 
 var $149=(($32+4)|0);
 HEAP32[(($32)>>2)]=$33;
 var $_ph30=0;var $_ph29=$149;var $_ph=$108;label=64;break;
 case 53: 
 var $151=($155|0)==($28|0);
 if($151){var $_0_lcssa_i_i=$28;label=55;break;}else{var $_01_i_i=$155;label=54;break;}
 case 54: 
 var $_01_i_i;
 var $153=HEAP8[($_01_i_i)];
 var $154=(($153<<24)>>24)==(($_0_i_off0_i<<24)>>24);
 var $155=(($_01_i_i+1)|0);
 if($154){var $_0_lcssa_i_i=$_01_i_i;label=55;break;}else{label=53;break;}
 case 55: 
 var $_0_lcssa_i_i;
 var $156=$_0_lcssa_i_i;
 var $157=((($156)-($29))|0);
 var $158=($157|0)>23;
 if($158){var $__a_2=$__a_1;var $198=$108;var $_pre_i2_i_i=$67;label=67;break;}else{label=56;break;}
 case 56: 
 if(($_0_i|0)==8|($_0_i|0)==10){ label=57;break;}else if(($_0_i|0)==16){ label=58;break;}else{label=63;break;}
 case 57: 
 var $161=($157|0)<($_0_i|0);
 if($161){label=63;break;}else{var $__a_2=$__a_1;var $198=$108;var $_pre_i2_i_i=$67;label=67;break;}
 case 58: 
 var $163=($157|0)<22;
 if($163){label=63;break;}else{label=59;break;}
 case 59: 
 if($123){var $__a_2=$108;var $198=$108;var $_pre_i2_i_i=$67;label=67;break;}else{label=60;break;}
 case 60: 
 var $166=$108;
 var $167=$__a_1;
 var $168=((($166)-($167))|0);
 var $169=($168|0)<3;
 if($169){label=61;break;}else{var $__a_2=$__a_1;var $198=$108;var $_pre_i2_i_i=$67;label=67;break;}
 case 61: 
 var $171=((($108)-(1))|0);
 var $172=HEAP8[($171)];
 var $173=(($172<<24)>>24)==48;
 if($173){label=62;break;}else{var $__a_2=$__a_1;var $198=$108;var $_pre_i2_i_i=$67;label=67;break;}
 case 62: 
 var $175=((9744+$157)|0);
 var $176=HEAP8[($175)];
 var $177=(($108+1)|0);
 HEAP8[($108)]=$176;
 var $_ph30=0;var $_ph29=$32;var $_ph=$177;label=64;break;
 case 63: 
 var $179=((9744+$157)|0);
 var $180=HEAP8[($179)];
 var $181=(($108+1)|0);
 HEAP8[($108)]=$180;
 var $182=((($33)+(1))|0);
 var $_ph30=$182;var $_ph29=$32;var $_ph=$181;label=64;break;
 case 64: 
 var $_ph;
 var $_ph29;
 var $_ph30;
 var $184=HEAP32[(($20)>>2)];
 var $185=(($184+12)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=(($184+16)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=($186|0)==($188|0);
 if($189){label=65;break;}else{label=66;break;}
 case 65: 
 var $191=$184;
 var $192=HEAP32[(($191)>>2)];
 var $193=(($192+40)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$194]($184) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $33=$_ph30;var $32=$_ph29;var $31=$_ph;var $_pre_i_i_i5=$184;label=10;break; } else { label=37;break; }
 case 66: 
 var $197=(($186+1)|0);
 HEAP32[(($185)>>2)]=$197;
 var $__a_0=$__a_1;var $33=$_ph30;var $32=$_ph29;var $31=$_ph;var $_pre_i_i_i5=$184;label=10;break;
 case 67: 
 var $_pre_i2_i_i;
 var $198;
 var $__a_2;
 var $199=HEAP8[($26)];
 var $200=$199&1;
 var $201=(($200<<24)>>24)==0;
 if($201){label=69;break;}else{label=68;break;}
 case 68: 
 var $203=HEAP32[(($30)>>2)];
 var $207=$203;label=70;break;
 case 69: 
 var $205=($199&255);
 var $206=$205>>>1;
 var $207=$206;label=70;break;
 case 70: 
 var $207;
 var $208=($207|0)==0;
 if($208){var $216=$32;label=73;break;}else{label=71;break;}
 case 71: 
 var $210=$32;
 var $211=((($210)-($27))|0);
 var $212=($211|0)<160;
 if($212){label=72;break;}else{var $216=$32;label=73;break;}
 case 72: 
 var $214=(($32+4)|0);
 HEAP32[(($32)>>2)]=$33;
 var $216=$214;label=73;break;
 case 73: 
 var $216;
 var $217=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a_2,$198,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=38;break; }
 case 74: 
 HEAP32[(($__v)>>2)]=$217;
 var $219=HEAP8[($26)];
 var $220=$219&1;
 var $221=(($220<<24)>>24)==0;
 if($221){label=76;break;}else{label=75;break;}
 case 75: 
 var $223=HEAP32[(($30)>>2)];
 var $227=$223;label=77;break;
 case 76: 
 var $225=($219&255);
 var $226=$225>>>1;
 var $227=$226;label=77;break;
 case 77: 
 var $227;
 var $228=($227|0)==0;
 if($228){label=94;break;}else{label=78;break;}
 case 78: 
 var $230=($19|0)==($216|0);
 if($230){var $239=$219;label=82;break;}else{label=79;break;}
 case 79: 
 var $231=((($216)-(4))|0);
 var $232=($231>>>0)>($19>>>0);
 if($232){var $_012_i_i_i=$19;var $233=$231;label=80;break;}else{var $239=$219;label=82;break;}
 case 80: 
 var $233;
 var $_012_i_i_i;
 var $234=HEAP32[(($_012_i_i_i)>>2)];
 var $235=HEAP32[(($233)>>2)];
 HEAP32[(($_012_i_i_i)>>2)]=$235;
 HEAP32[(($233)>>2)]=$234;
 var $236=(($_012_i_i_i+4)|0);
 var $237=((($233)-(4))|0);
 var $238=($236>>>0)<($237>>>0);
 if($238){var $_012_i_i_i=$236;var $233=$237;label=80;break;}else{label=81;break;}
 case 81: 
 var $_pre_i=HEAP8[($26)];
 var $239=$_pre_i;label=82;break;
 case 82: 
 var $239;
 var $240=$239&1;
 var $241=(($240<<24)>>24)==0;
 if($241){label=84;break;}else{label=83;break;}
 case 83: 
 var $243=(($__grouping+8)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=HEAP32[(($30)>>2)];
 var $252=$245;var $251=$244;label=85;break;
 case 84: 
 var $247=$__grouping;
 var $248=(($247+1)|0);
 var $249=($239&255);
 var $250=$249>>>1;
 var $252=$250;var $251=$248;label=85;break;
 case 85: 
 var $251;
 var $252;
 var $253=((($216)-(4))|0);
 var $254=($253>>>0)>($19>>>0);
 var $255=HEAP8[($251)];
 var $_not9_i=(($255<<24)>>24)<1;
 var $256=(($255<<24)>>24)==127;
 var $or_cond210_i=$_not9_i|$256;
 if($254){label=86;break;}else{var $_lcssa6_i=$255;var $or_cond2_lcssa_i=$or_cond210_i;label=91;break;}
 case 86: 
 var $257=(($251+$252)|0);
 var $258=$257;
 var $__ig_011_i=$251;var $__r_012_i=$19;var $260=$255;var $or_cond213_i=$or_cond210_i;label=87;break;
 case 87: 
 var $or_cond213_i;
 var $260;
 var $__r_012_i;
 var $__ig_011_i;
 if($or_cond213_i){label=90;break;}else{label=88;break;}
 case 88: 
 var $262=(($260<<24)>>24);
 var $263=HEAP32[(($__r_012_i)>>2)];
 var $264=($262|0)==($263|0);
 if($264){label=90;break;}else{label=89;break;}
 case 89: 
 HEAP32[(($__err)>>2)]=4;
 label=94;break;
 case 90: 
 var $267=$__ig_011_i;
 var $268=((($258)-($267))|0);
 var $269=($268|0)>1;
 var $270=(($__ig_011_i+1)|0);
 var $___ig_0_i=($269?$270:$__ig_011_i);
 var $271=(($__r_012_i+4)|0);
 var $272=($271>>>0)<($253>>>0);
 var $273=HEAP8[($___ig_0_i)];
 var $_not_i=(($273<<24)>>24)<1;
 var $274=(($273<<24)>>24)==127;
 var $or_cond2_i=$_not_i|$274;
 if($272){var $__ig_011_i=$___ig_0_i;var $__r_012_i=$271;var $260=$273;var $or_cond213_i=$or_cond2_i;label=87;break;}else{var $_lcssa6_i=$273;var $or_cond2_lcssa_i=$or_cond2_i;label=91;break;}
 case 91: 
 var $or_cond2_lcssa_i;
 var $_lcssa6_i;
 if($or_cond2_lcssa_i){label=94;break;}else{label=92;break;}
 case 92: 
 var $276=(($_lcssa6_i<<24)>>24);
 var $277=HEAP32[(($253)>>2)];
 var $278=((($277)-(1))|0);
 var $279=($278>>>0)<($276>>>0);
 if($279){label=94;break;}else{label=93;break;}
 case 93: 
 HEAP32[(($__err)>>2)]=4;
 label=94;break;
 case 94: 
 var $281=($48|0)==0;
 if($281){var $295=0;label=100;break;}else{label=95;break;}
 case 95: 
 var $283=(($48+12)|0);
 var $284=HEAP32[(($283)>>2)];
 var $285=(($48+16)|0);
 var $286=HEAP32[(($285)>>2)];
 var $287=($284|0)==($286|0);
 if($287){label=96;break;}else{var $295=$48;label=100;break;}
 case 96: 
 var $288=$48;
 var $289=HEAP32[(($288)>>2)];
 var $290=(($289+36)|0);
 var $291=HEAP32[(($290)>>2)];
 var $292=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$291]($48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=97;break; } else { label=38;break; }
 case 97: 
 var $293=($292|0)==-1;
 if($293){label=99;break;}else{label=98;break;}
 case 98: 
 var $_pre_i_i_i=HEAP32[(($20)>>2)];
 var $295=$_pre_i_i_i;label=100;break;
 case 99: 
 HEAP32[(($20)>>2)]=0;
 var $295=0;label=100;break;
 case 100: 
 var $295;
 var $296=($295|0)==0;
 var $297=($_pre_i2_i_i|0)==0;
 if($297){label=106;break;}else{label=101;break;}
 case 101: 
 var $299=(($_pre_i2_i_i+12)|0);
 var $300=HEAP32[(($299)>>2)];
 var $301=(($_pre_i2_i_i+16)|0);
 var $302=HEAP32[(($301)>>2)];
 var $303=($300|0)==($302|0);
 if($303){label=103;break;}else{label=102;break;}
 case 102: 
 if($296){label=109;break;}else{label=108;break;}
 case 103: 
 var $304=$_pre_i2_i_i;
 var $305=HEAP32[(($304)>>2)];
 var $306=(($305+36)|0);
 var $307=HEAP32[(($306)>>2)];
 var $308=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$307]($_pre_i2_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=104;break; } else { label=38;break; }
 case 104: 
 var $309=($308|0)==-1;
 if($309){label=105;break;}else{label=107;break;}
 case 105: 
 HEAP32[(($21)>>2)]=0;
 label=106;break;
 case 106: 
 if($296){label=108;break;}else{label=109;break;}
 case 107: 
 var $311=($_pre_i2_i_i|0)==0;
 var $tmp_i_i=$296^$311;
 if($tmp_i_i){label=109;break;}else{label=108;break;}
 case 108: 
 var $313=HEAP32[(($__err)>>2)];
 var $314=$313|2;
 HEAP32[(($__err)>>2)]=$314;
 label=109;break;
 case 109: 
 var $316=HEAP32[(($20)>>2)];
 var $317=(($agg_result)|0);
 HEAP32[(($317)>>2)]=$316;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+232)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $__g=(sp)+(72);
 var $1=(($__iob+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&74;
 if(($3|0)==8){ label=2;break;}else if(($3|0)==0){ label=3;break;}else if(($3|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $7=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$7,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=38;break; }
 case 6: 
 var $8=HEAP8[($this2_i_i_i)];
 var $9=$8&1;
 var $10=(($9<<24)>>24)==0;
 if($10){label=8;break;}else{label=7;break;}
 case 7: 
 var $12=(($__buf+8)|0);
 var $13=HEAP32[(($12)>>2)];
 var $_pre44=$__buf;
 var $_pre45=(($_pre44+1)|0);
 var $17=$13;var $_pre_phi46=$_pre45;var $_pre_phi48=$12;label=9;break;
 case 8: 
 var $15=$__buf;
 var $16=(($15+1)|0);
 var $_pre47=(($__buf+8)|0);
 var $17=$16;var $_pre_phi46=$16;var $_pre_phi48=$_pre47;label=9;break;
 case 9: 
 var $_pre_phi48;
 var $_pre_phi46;
 var $17;
 var $18=$__g;
 var $$etemp$0$0=160;
 var $$etemp$0$1=0;

 var $19=(($__g)|0);
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=(($__atoms+24)|0);
 var $25=(($__atoms+25)|0);
 var $26=$__grouping;
 var $27=$__g;
 var $28=(($__atoms+26)|0);
 var $29=$__atoms;
 var $30=(($__grouping+4)|0);
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$17;var $33=0;var $32=$19;var $31=$17;var $_pre_i_i_i5=$_pre;label=10;break;
 case 10: 
 var $_pre_i_i_i5;
 var $31;
 var $32;
 var $33;
 var $__a_0;
 var $34=($_pre_i_i_i5|0)==0;
 if($34){var $48=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $36=(($_pre_i_i_i5+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($_pre_i_i_i5+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=12;break;}else{var $48=$_pre_i_i_i5;label=15;break;}
 case 12: 
 var $41=$_pre_i_i_i5;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+36)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$44]($_pre_i_i_i5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=37;break; }
 case 13: 
 var $46=($45|0)==-1;
 if($46){label=14;break;}else{var $48=$_pre_i_i_i5;label=15;break;}
 case 14: 
 HEAP32[(($20)>>2)]=0;
 var $48=0;label=15;break;
 case 15: 
 var $48;
 var $49=($48|0)==0;
 var $50=HEAP32[(($21)>>2)];
 var $51=($50|0)==0;
 if($51){label=21;break;}else{label=16;break;}
 case 16: 
 var $53=(($50+12)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($50+16)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($54|0)==($56|0);
 if($57){label=18;break;}else{label=17;break;}
 case 17: 
 if($49){var $67=$50;label=23;break;}else{var $__a_2=$__a_0;var $198=$31;var $_pre_i2_i_i=$50;label=67;break;}
 case 18: 
 var $58=$50;
 var $59=HEAP32[(($58)>>2)];
 var $60=(($59+36)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$61]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=37;break; }
 case 19: 
 var $63=($62|0)==-1;
 if($63){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($21)>>2)]=0;
 label=21;break;
 case 21: 
 if($49){var $__a_2=$__a_0;var $198=$31;var $_pre_i2_i_i=0;label=67;break;}else{var $67=0;label=23;break;}
 case 22: 
 if($49){var $67=$50;label=23;break;}else{var $__a_2=$__a_0;var $198=$31;var $_pre_i2_i_i=$50;label=67;break;}
 case 23: 
 var $67;
 var $68=$31;
 var $69=$__a_0;
 var $70=((($68)-($69))|0);
 var $71=HEAP8[($this2_i_i_i)];
 var $72=$71&1;
 var $73=(($72<<24)>>24)==0;
 if($73){label=25;break;}else{label=24;break;}
 case 24: 
 var $75=HEAP32[(($23)>>2)];
 var $79=$75;label=26;break;
 case 25: 
 var $77=($71&255);
 var $78=$77>>>1;
 var $79=$78;label=26;break;
 case 26: 
 var $79;
 var $80=($70|0)==($79|0);
 if($80){label=27;break;}else{var $__a_1=$__a_0;var $108=$31;label=40;break;}
 case 27: 
 if($73){label=29;break;}else{label=28;break;}
 case 28: 
 var $83=HEAP32[(($23)>>2)];
 var $90=$83;var $89=$83;label=30;break;
 case 29: 
 var $85=($71&255);
 var $86=$85>>>1;
 var $87=($71&255);
 var $88=$87>>>1;
 var $90=$88;var $89=$86;label=30;break;
 case 30: 
 var $89;
 var $90;
 var $91=$90<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$91,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=37;break; }
 case 31: 
 var $92=HEAP8[($this2_i_i_i)];
 var $93=$92&1;
 var $94=(($93<<24)>>24)==0;
 if($94){var $98=10;label=33;break;}else{label=32;break;}
 case 32: 
 var $96=HEAP32[(($22)>>2)];
 var $97=$96&-2;
 var $phitmp_i25=((($97)-(1))|0);
 var $98=$phitmp_i25;label=33;break;
 case 33: 
 var $98;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$98,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=37;break; }
 case 34: 
 var $99=HEAP8[($this2_i_i_i)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){var $104=$_pre_phi46;label=36;break;}else{label=35;break;}
 case 35: 
 var $103=HEAP32[(($_pre_phi48)>>2)];
 var $104=$103;label=36;break;
 case 36: 
 var $104;
 var $105=(($104+$89)|0);
 var $__a_1=$104;var $108=$105;label=40;break;
 case 37: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=39;break;
 case 38: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=39;break;
 case 39: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 40: 
 var $108;
 var $__a_1;
 var $109=(($48+12)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=(($48+16)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=($110|0)==($112|0);
 if($113){label=41;break;}else{label=43;break;}
 case 41: 
 var $115=$48;
 var $116=HEAP32[(($115)>>2)];
 var $117=(($116+36)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$118]($48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=37;break; }
 case 42: 
 var $extract_t_i=(($119)&255);
 var $_0_i_off0_i=$extract_t_i;label=44;break;
 case 43: 
 var $121=HEAP8[($110)];
 var $_0_i_off0_i=$121;label=44;break;
 case 44: 
 var $_0_i_off0_i;
 var $122=HEAP8[($__thousands_sep)];
 var $123=($108|0)==($__a_1|0);
 if($123){label=45;break;}else{label=47;break;}
 case 45: 
 var $125=HEAP8[($24)];
 var $126=(($125<<24)>>24)==(($_0_i_off0_i<<24)>>24);
 var $127=HEAP8[($25)];
 var $128=(($127<<24)>>24)==(($_0_i_off0_i<<24)>>24);
 var $or_cond=$126|$128;
 if($or_cond){label=46;break;}else{label=47;break;}
 case 46: 
 var $130=($126?43:45);
 var $131=(($108+1)|0);
 HEAP8[($108)]=$130;
 var $_ph30=0;var $_ph29=$32;var $_ph=$131;label=64;break;
 case 47: 
 var $133=HEAP8[($26)];
 var $134=$133&1;
 var $135=(($134<<24)>>24)==0;
 if($135){label=49;break;}else{label=48;break;}
 case 48: 
 var $137=HEAP32[(($30)>>2)];
 var $141=$137;label=50;break;
 case 49: 
 var $139=($133&255);
 var $140=$139>>>1;
 var $141=$140;label=50;break;
 case 50: 
 var $141;
 var $142=($141|0)!=0;
 var $143=(($_0_i_off0_i<<24)>>24)==(($122<<24)>>24);
 var $or_cond_i=$142&$143;
 if($or_cond_i){label=51;break;}else{var $_01_i_i=$7;label=54;break;}
 case 51: 
 var $145=$32;
 var $146=((($145)-($27))|0);
 var $147=($146|0)<160;
 if($147){label=52;break;}else{var $_ph30=$33;var $_ph29=$32;var $_ph=$108;label=64;break;}
 case 52: 
 var $149=(($32+4)|0);
 HEAP32[(($32)>>2)]=$33;
 var $_ph30=0;var $_ph29=$149;var $_ph=$108;label=64;break;
 case 53: 
 var $151=($155|0)==($28|0);
 if($151){var $_0_lcssa_i_i=$28;label=55;break;}else{var $_01_i_i=$155;label=54;break;}
 case 54: 
 var $_01_i_i;
 var $153=HEAP8[($_01_i_i)];
 var $154=(($153<<24)>>24)==(($_0_i_off0_i<<24)>>24);
 var $155=(($_01_i_i+1)|0);
 if($154){var $_0_lcssa_i_i=$_01_i_i;label=55;break;}else{label=53;break;}
 case 55: 
 var $_0_lcssa_i_i;
 var $156=$_0_lcssa_i_i;
 var $157=((($156)-($29))|0);
 var $158=($157|0)>23;
 if($158){var $__a_2=$__a_1;var $198=$108;var $_pre_i2_i_i=$67;label=67;break;}else{label=56;break;}
 case 56: 
 if(($_0_i|0)==8|($_0_i|0)==10){ label=57;break;}else if(($_0_i|0)==16){ label=58;break;}else{label=63;break;}
 case 57: 
 var $161=($157|0)<($_0_i|0);
 if($161){label=63;break;}else{var $__a_2=$__a_1;var $198=$108;var $_pre_i2_i_i=$67;label=67;break;}
 case 58: 
 var $163=($157|0)<22;
 if($163){label=63;break;}else{label=59;break;}
 case 59: 
 if($123){var $__a_2=$108;var $198=$108;var $_pre_i2_i_i=$67;label=67;break;}else{label=60;break;}
 case 60: 
 var $166=$108;
 var $167=$__a_1;
 var $168=((($166)-($167))|0);
 var $169=($168|0)<3;
 if($169){label=61;break;}else{var $__a_2=$__a_1;var $198=$108;var $_pre_i2_i_i=$67;label=67;break;}
 case 61: 
 var $171=((($108)-(1))|0);
 var $172=HEAP8[($171)];
 var $173=(($172<<24)>>24)==48;
 if($173){label=62;break;}else{var $__a_2=$__a_1;var $198=$108;var $_pre_i2_i_i=$67;label=67;break;}
 case 62: 
 var $175=((9744+$157)|0);
 var $176=HEAP8[($175)];
 var $177=(($108+1)|0);
 HEAP8[($108)]=$176;
 var $_ph30=0;var $_ph29=$32;var $_ph=$177;label=64;break;
 case 63: 
 var $179=((9744+$157)|0);
 var $180=HEAP8[($179)];
 var $181=(($108+1)|0);
 HEAP8[($108)]=$180;
 var $182=((($33)+(1))|0);
 var $_ph30=$182;var $_ph29=$32;var $_ph=$181;label=64;break;
 case 64: 
 var $_ph;
 var $_ph29;
 var $_ph30;
 var $184=HEAP32[(($20)>>2)];
 var $185=(($184+12)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=(($184+16)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=($186|0)==($188|0);
 if($189){label=65;break;}else{label=66;break;}
 case 65: 
 var $191=$184;
 var $192=HEAP32[(($191)>>2)];
 var $193=(($192+40)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$194]($184) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $33=$_ph30;var $32=$_ph29;var $31=$_ph;var $_pre_i_i_i5=$184;label=10;break; } else { label=37;break; }
 case 66: 
 var $197=(($186+1)|0);
 HEAP32[(($185)>>2)]=$197;
 var $__a_0=$__a_1;var $33=$_ph30;var $32=$_ph29;var $31=$_ph;var $_pre_i_i_i5=$184;label=10;break;
 case 67: 
 var $_pre_i2_i_i;
 var $198;
 var $__a_2;
 var $199=HEAP8[($26)];
 var $200=$199&1;
 var $201=(($200<<24)>>24)==0;
 if($201){label=69;break;}else{label=68;break;}
 case 68: 
 var $203=HEAP32[(($30)>>2)];
 var $207=$203;label=70;break;
 case 69: 
 var $205=($199&255);
 var $206=$205>>>1;
 var $207=$206;label=70;break;
 case 70: 
 var $207;
 var $208=($207|0)==0;
 if($208){var $216=$32;label=73;break;}else{label=71;break;}
 case 71: 
 var $210=$32;
 var $211=((($210)-($27))|0);
 var $212=($211|0)<160;
 if($212){label=72;break;}else{var $216=$32;label=73;break;}
 case 72: 
 var $214=(($32+4)|0);
 HEAP32[(($32)>>2)]=$33;
 var $216=$214;label=73;break;
 case 73: 
 var $216;
 var $217$r=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a_2,$198,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $217$0=$217$r;var $217$1=tempRet0;if (!__THREW__) { label=74;break; } else { label=38;break; }
 case 74: 
 var $st$1$0=(($__v)|0);
 HEAP32[(($st$1$0)>>2)]=$217$0;
 var $st$2$1=(($__v+4)|0);
 HEAP32[(($st$2$1)>>2)]=$217$1;
 var $219=HEAP8[($26)];
 var $220=$219&1;
 var $221=(($220<<24)>>24)==0;
 if($221){label=76;break;}else{label=75;break;}
 case 75: 
 var $223=HEAP32[(($30)>>2)];
 var $227=$223;label=77;break;
 case 76: 
 var $225=($219&255);
 var $226=$225>>>1;
 var $227=$226;label=77;break;
 case 77: 
 var $227;
 var $228=($227|0)==0;
 if($228){label=94;break;}else{label=78;break;}
 case 78: 
 var $230=($19|0)==($216|0);
 if($230){var $239=$219;label=82;break;}else{label=79;break;}
 case 79: 
 var $231=((($216)-(4))|0);
 var $232=($231>>>0)>($19>>>0);
 if($232){var $_012_i_i_i=$19;var $233=$231;label=80;break;}else{var $239=$219;label=82;break;}
 case 80: 
 var $233;
 var $_012_i_i_i;
 var $234=HEAP32[(($_012_i_i_i)>>2)];
 var $235=HEAP32[(($233)>>2)];
 HEAP32[(($_012_i_i_i)>>2)]=$235;
 HEAP32[(($233)>>2)]=$234;
 var $236=(($_012_i_i_i+4)|0);
 var $237=((($233)-(4))|0);
 var $238=($236>>>0)<($237>>>0);
 if($238){var $_012_i_i_i=$236;var $233=$237;label=80;break;}else{label=81;break;}
 case 81: 
 var $_pre_i=HEAP8[($26)];
 var $239=$_pre_i;label=82;break;
 case 82: 
 var $239;
 var $240=$239&1;
 var $241=(($240<<24)>>24)==0;
 if($241){label=84;break;}else{label=83;break;}
 case 83: 
 var $243=(($__grouping+8)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=HEAP32[(($30)>>2)];
 var $252=$245;var $251=$244;label=85;break;
 case 84: 
 var $247=$__grouping;
 var $248=(($247+1)|0);
 var $249=($239&255);
 var $250=$249>>>1;
 var $252=$250;var $251=$248;label=85;break;
 case 85: 
 var $251;
 var $252;
 var $253=((($216)-(4))|0);
 var $254=($253>>>0)>($19>>>0);
 var $255=HEAP8[($251)];
 var $_not9_i=(($255<<24)>>24)<1;
 var $256=(($255<<24)>>24)==127;
 var $or_cond210_i=$_not9_i|$256;
 if($254){label=86;break;}else{var $_lcssa6_i=$255;var $or_cond2_lcssa_i=$or_cond210_i;label=91;break;}
 case 86: 
 var $257=(($251+$252)|0);
 var $258=$257;
 var $__ig_011_i=$251;var $__r_012_i=$19;var $260=$255;var $or_cond213_i=$or_cond210_i;label=87;break;
 case 87: 
 var $or_cond213_i;
 var $260;
 var $__r_012_i;
 var $__ig_011_i;
 if($or_cond213_i){label=90;break;}else{label=88;break;}
 case 88: 
 var $262=(($260<<24)>>24);
 var $263=HEAP32[(($__r_012_i)>>2)];
 var $264=($262|0)==($263|0);
 if($264){label=90;break;}else{label=89;break;}
 case 89: 
 HEAP32[(($__err)>>2)]=4;
 label=94;break;
 case 90: 
 var $267=$__ig_011_i;
 var $268=((($258)-($267))|0);
 var $269=($268|0)>1;
 var $270=(($__ig_011_i+1)|0);
 var $___ig_0_i=($269?$270:$__ig_011_i);
 var $271=(($__r_012_i+4)|0);
 var $272=($271>>>0)<($253>>>0);
 var $273=HEAP8[($___ig_0_i)];
 var $_not_i=(($273<<24)>>24)<1;
 var $274=(($273<<24)>>24)==127;
 var $or_cond2_i=$_not_i|$274;
 if($272){var $__ig_011_i=$___ig_0_i;var $__r_012_i=$271;var $260=$273;var $or_cond213_i=$or_cond2_i;label=87;break;}else{var $_lcssa6_i=$273;var $or_cond2_lcssa_i=$or_cond2_i;label=91;break;}
 case 91: 
 var $or_cond2_lcssa_i;
 var $_lcssa6_i;
 if($or_cond2_lcssa_i){label=94;break;}else{label=92;break;}
 case 92: 
 var $276=(($_lcssa6_i<<24)>>24);
 var $277=HEAP32[(($253)>>2)];
 var $278=((($277)-(1))|0);
 var $279=($278>>>0)<($276>>>0);
 if($279){label=94;break;}else{label=93;break;}
 case 93: 
 HEAP32[(($__err)>>2)]=4;
 label=94;break;
 case 94: 
 var $281=($48|0)==0;
 if($281){var $295=0;label=100;break;}else{label=95;break;}
 case 95: 
 var $283=(($48+12)|0);
 var $284=HEAP32[(($283)>>2)];
 var $285=(($48+16)|0);
 var $286=HEAP32[(($285)>>2)];
 var $287=($284|0)==($286|0);
 if($287){label=96;break;}else{var $295=$48;label=100;break;}
 case 96: 
 var $288=$48;
 var $289=HEAP32[(($288)>>2)];
 var $290=(($289+36)|0);
 var $291=HEAP32[(($290)>>2)];
 var $292=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$291]($48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=97;break; } else { label=38;break; }
 case 97: 
 var $293=($292|0)==-1;
 if($293){label=99;break;}else{label=98;break;}
 case 98: 
 var $_pre_i_i_i=HEAP32[(($20)>>2)];
 var $295=$_pre_i_i_i;label=100;break;
 case 99: 
 HEAP32[(($20)>>2)]=0;
 var $295=0;label=100;break;
 case 100: 
 var $295;
 var $296=($295|0)==0;
 var $297=($_pre_i2_i_i|0)==0;
 if($297){label=106;break;}else{label=101;break;}
 case 101: 
 var $299=(($_pre_i2_i_i+12)|0);
 var $300=HEAP32[(($299)>>2)];
 var $301=(($_pre_i2_i_i+16)|0);
 var $302=HEAP32[(($301)>>2)];
 var $303=($300|0)==($302|0);
 if($303){label=103;break;}else{label=102;break;}
 case 102: 
 if($296){label=109;break;}else{label=108;break;}
 case 103: 
 var $304=$_pre_i2_i_i;
 var $305=HEAP32[(($304)>>2)];
 var $306=(($305+36)|0);
 var $307=HEAP32[(($306)>>2)];
 var $308=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$307]($_pre_i2_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=104;break; } else { label=38;break; }
 case 104: 
 var $309=($308|0)==-1;
 if($309){label=105;break;}else{label=107;break;}
 case 105: 
 HEAP32[(($21)>>2)]=0;
 label=106;break;
 case 106: 
 if($296){label=108;break;}else{label=109;break;}
 case 107: 
 var $311=($_pre_i2_i_i|0)==0;
 var $tmp_i_i=$296^$311;
 if($tmp_i_i){label=109;break;}else{label=108;break;}
 case 108: 
 var $313=HEAP32[(($__err)>>2)];
 var $314=$313|2;
 HEAP32[(($__err)>>2)]=$314;
 label=109;break;
 case 109: 
 var $316=HEAP32[(($20)>>2)];
 var $317=(($agg_result)|0);
 HEAP32[(($317)>>2)]=$316;
 var $$etemp$3$0=160;
 var $$etemp$3$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+232)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $__g=(sp)+(72);
 var $1=(($__iob+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&74;
 if(($3|0)==8){ label=2;break;}else if(($3|0)==0){ label=3;break;}else if(($3|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $7=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$7,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=38;break; }
 case 6: 
 var $8=HEAP8[($this2_i_i_i)];
 var $9=$8&1;
 var $10=(($9<<24)>>24)==0;
 if($10){label=8;break;}else{label=7;break;}
 case 7: 
 var $12=(($__buf+8)|0);
 var $13=HEAP32[(($12)>>2)];
 var $_pre44=$__buf;
 var $_pre45=(($_pre44+1)|0);
 var $17=$13;var $_pre_phi46=$_pre45;var $_pre_phi48=$12;label=9;break;
 case 8: 
 var $15=$__buf;
 var $16=(($15+1)|0);
 var $_pre47=(($__buf+8)|0);
 var $17=$16;var $_pre_phi46=$16;var $_pre_phi48=$_pre47;label=9;break;
 case 9: 
 var $_pre_phi48;
 var $_pre_phi46;
 var $17;
 var $18=$__g;
 var $$etemp$0$0=160;
 var $$etemp$0$1=0;

 var $19=(($__g)|0);
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=(($__atoms+24)|0);
 var $25=(($__atoms+25)|0);
 var $26=$__grouping;
 var $27=$__g;
 var $28=(($__atoms+26)|0);
 var $29=$__atoms;
 var $30=(($__grouping+4)|0);
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$17;var $33=0;var $32=$19;var $31=$17;var $_pre_i_i_i5=$_pre;label=10;break;
 case 10: 
 var $_pre_i_i_i5;
 var $31;
 var $32;
 var $33;
 var $__a_0;
 var $34=($_pre_i_i_i5|0)==0;
 if($34){var $48=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $36=(($_pre_i_i_i5+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($_pre_i_i_i5+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=12;break;}else{var $48=$_pre_i_i_i5;label=15;break;}
 case 12: 
 var $41=$_pre_i_i_i5;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+36)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$44]($_pre_i_i_i5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=37;break; }
 case 13: 
 var $46=($45|0)==-1;
 if($46){label=14;break;}else{var $48=$_pre_i_i_i5;label=15;break;}
 case 14: 
 HEAP32[(($20)>>2)]=0;
 var $48=0;label=15;break;
 case 15: 
 var $48;
 var $49=($48|0)==0;
 var $50=HEAP32[(($21)>>2)];
 var $51=($50|0)==0;
 if($51){label=21;break;}else{label=16;break;}
 case 16: 
 var $53=(($50+12)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($50+16)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($54|0)==($56|0);
 if($57){label=18;break;}else{label=17;break;}
 case 17: 
 if($49){var $67=$50;label=23;break;}else{var $__a_2=$__a_0;var $198=$31;var $_pre_i2_i_i=$50;label=67;break;}
 case 18: 
 var $58=$50;
 var $59=HEAP32[(($58)>>2)];
 var $60=(($59+36)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$61]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=37;break; }
 case 19: 
 var $63=($62|0)==-1;
 if($63){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($21)>>2)]=0;
 label=21;break;
 case 21: 
 if($49){var $__a_2=$__a_0;var $198=$31;var $_pre_i2_i_i=0;label=67;break;}else{var $67=0;label=23;break;}
 case 22: 
 if($49){var $67=$50;label=23;break;}else{var $__a_2=$__a_0;var $198=$31;var $_pre_i2_i_i=$50;label=67;break;}
 case 23: 
 var $67;
 var $68=$31;
 var $69=$__a_0;
 var $70=((($68)-($69))|0);
 var $71=HEAP8[($this2_i_i_i)];
 var $72=$71&1;
 var $73=(($72<<24)>>24)==0;
 if($73){label=25;break;}else{label=24;break;}
 case 24: 
 var $75=HEAP32[(($23)>>2)];
 var $79=$75;label=26;break;
 case 25: 
 var $77=($71&255);
 var $78=$77>>>1;
 var $79=$78;label=26;break;
 case 26: 
 var $79;
 var $80=($70|0)==($79|0);
 if($80){label=27;break;}else{var $__a_1=$__a_0;var $108=$31;label=40;break;}
 case 27: 
 if($73){label=29;break;}else{label=28;break;}
 case 28: 
 var $83=HEAP32[(($23)>>2)];
 var $90=$83;var $89=$83;label=30;break;
 case 29: 
 var $85=($71&255);
 var $86=$85>>>1;
 var $87=($71&255);
 var $88=$87>>>1;
 var $90=$88;var $89=$86;label=30;break;
 case 30: 
 var $89;
 var $90;
 var $91=$90<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$91,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=37;break; }
 case 31: 
 var $92=HEAP8[($this2_i_i_i)];
 var $93=$92&1;
 var $94=(($93<<24)>>24)==0;
 if($94){var $98=10;label=33;break;}else{label=32;break;}
 case 32: 
 var $96=HEAP32[(($22)>>2)];
 var $97=$96&-2;
 var $phitmp_i25=((($97)-(1))|0);
 var $98=$phitmp_i25;label=33;break;
 case 33: 
 var $98;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$98,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=37;break; }
 case 34: 
 var $99=HEAP8[($this2_i_i_i)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){var $104=$_pre_phi46;label=36;break;}else{label=35;break;}
 case 35: 
 var $103=HEAP32[(($_pre_phi48)>>2)];
 var $104=$103;label=36;break;
 case 36: 
 var $104;
 var $105=(($104+$89)|0);
 var $__a_1=$104;var $108=$105;label=40;break;
 case 37: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=39;break;
 case 38: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=39;break;
 case 39: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 40: 
 var $108;
 var $__a_1;
 var $109=(($48+12)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=(($48+16)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=($110|0)==($112|0);
 if($113){label=41;break;}else{label=43;break;}
 case 41: 
 var $115=$48;
 var $116=HEAP32[(($115)>>2)];
 var $117=(($116+36)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$118]($48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=37;break; }
 case 42: 
 var $extract_t_i=(($119)&255);
 var $_0_i_off0_i=$extract_t_i;label=44;break;
 case 43: 
 var $121=HEAP8[($110)];
 var $_0_i_off0_i=$121;label=44;break;
 case 44: 
 var $_0_i_off0_i;
 var $122=HEAP8[($__thousands_sep)];
 var $123=($108|0)==($__a_1|0);
 if($123){label=45;break;}else{label=47;break;}
 case 45: 
 var $125=HEAP8[($24)];
 var $126=(($125<<24)>>24)==(($_0_i_off0_i<<24)>>24);
 var $127=HEAP8[($25)];
 var $128=(($127<<24)>>24)==(($_0_i_off0_i<<24)>>24);
 var $or_cond=$126|$128;
 if($or_cond){label=46;break;}else{label=47;break;}
 case 46: 
 var $130=($126?43:45);
 var $131=(($108+1)|0);
 HEAP8[($108)]=$130;
 var $_ph30=0;var $_ph29=$32;var $_ph=$131;label=64;break;
 case 47: 
 var $133=HEAP8[($26)];
 var $134=$133&1;
 var $135=(($134<<24)>>24)==0;
 if($135){label=49;break;}else{label=48;break;}
 case 48: 
 var $137=HEAP32[(($30)>>2)];
 var $141=$137;label=50;break;
 case 49: 
 var $139=($133&255);
 var $140=$139>>>1;
 var $141=$140;label=50;break;
 case 50: 
 var $141;
 var $142=($141|0)!=0;
 var $143=(($_0_i_off0_i<<24)>>24)==(($122<<24)>>24);
 var $or_cond_i=$142&$143;
 if($or_cond_i){label=51;break;}else{var $_01_i_i=$7;label=54;break;}
 case 51: 
 var $145=$32;
 var $146=((($145)-($27))|0);
 var $147=($146|0)<160;
 if($147){label=52;break;}else{var $_ph30=$33;var $_ph29=$32;var $_ph=$108;label=64;break;}
 case 52: 
 var $149=(($32+4)|0);
 HEAP32[(($32)>>2)]=$33;
 var $_ph30=0;var $_ph29=$149;var $_ph=$108;label=64;break;
 case 53: 
 var $151=($155|0)==($28|0);
 if($151){var $_0_lcssa_i_i=$28;label=55;break;}else{var $_01_i_i=$155;label=54;break;}
 case 54: 
 var $_01_i_i;
 var $153=HEAP8[($_01_i_i)];
 var $154=(($153<<24)>>24)==(($_0_i_off0_i<<24)>>24);
 var $155=(($_01_i_i+1)|0);
 if($154){var $_0_lcssa_i_i=$_01_i_i;label=55;break;}else{label=53;break;}
 case 55: 
 var $_0_lcssa_i_i;
 var $156=$_0_lcssa_i_i;
 var $157=((($156)-($29))|0);
 var $158=($157|0)>23;
 if($158){var $__a_2=$__a_1;var $198=$108;var $_pre_i2_i_i=$67;label=67;break;}else{label=56;break;}
 case 56: 
 if(($_0_i|0)==8|($_0_i|0)==10){ label=57;break;}else if(($_0_i|0)==16){ label=58;break;}else{label=63;break;}
 case 57: 
 var $161=($157|0)<($_0_i|0);
 if($161){label=63;break;}else{var $__a_2=$__a_1;var $198=$108;var $_pre_i2_i_i=$67;label=67;break;}
 case 58: 
 var $163=($157|0)<22;
 if($163){label=63;break;}else{label=59;break;}
 case 59: 
 if($123){var $__a_2=$108;var $198=$108;var $_pre_i2_i_i=$67;label=67;break;}else{label=60;break;}
 case 60: 
 var $166=$108;
 var $167=$__a_1;
 var $168=((($166)-($167))|0);
 var $169=($168|0)<3;
 if($169){label=61;break;}else{var $__a_2=$__a_1;var $198=$108;var $_pre_i2_i_i=$67;label=67;break;}
 case 61: 
 var $171=((($108)-(1))|0);
 var $172=HEAP8[($171)];
 var $173=(($172<<24)>>24)==48;
 if($173){label=62;break;}else{var $__a_2=$__a_1;var $198=$108;var $_pre_i2_i_i=$67;label=67;break;}
 case 62: 
 var $175=((9744+$157)|0);
 var $176=HEAP8[($175)];
 var $177=(($108+1)|0);
 HEAP8[($108)]=$176;
 var $_ph30=0;var $_ph29=$32;var $_ph=$177;label=64;break;
 case 63: 
 var $179=((9744+$157)|0);
 var $180=HEAP8[($179)];
 var $181=(($108+1)|0);
 HEAP8[($108)]=$180;
 var $182=((($33)+(1))|0);
 var $_ph30=$182;var $_ph29=$32;var $_ph=$181;label=64;break;
 case 64: 
 var $_ph;
 var $_ph29;
 var $_ph30;
 var $184=HEAP32[(($20)>>2)];
 var $185=(($184+12)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=(($184+16)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=($186|0)==($188|0);
 if($189){label=65;break;}else{label=66;break;}
 case 65: 
 var $191=$184;
 var $192=HEAP32[(($191)>>2)];
 var $193=(($192+40)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$194]($184) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $33=$_ph30;var $32=$_ph29;var $31=$_ph;var $_pre_i_i_i5=$184;label=10;break; } else { label=37;break; }
 case 66: 
 var $197=(($186+1)|0);
 HEAP32[(($185)>>2)]=$197;
 var $__a_0=$__a_1;var $33=$_ph30;var $32=$_ph29;var $31=$_ph;var $_pre_i_i_i5=$184;label=10;break;
 case 67: 
 var $_pre_i2_i_i;
 var $198;
 var $__a_2;
 var $199=HEAP8[($26)];
 var $200=$199&1;
 var $201=(($200<<24)>>24)==0;
 if($201){label=69;break;}else{label=68;break;}
 case 68: 
 var $203=HEAP32[(($30)>>2)];
 var $207=$203;label=70;break;
 case 69: 
 var $205=($199&255);
 var $206=$205>>>1;
 var $207=$206;label=70;break;
 case 70: 
 var $207;
 var $208=($207|0)==0;
 if($208){var $216=$32;label=73;break;}else{label=71;break;}
 case 71: 
 var $210=$32;
 var $211=((($210)-($27))|0);
 var $212=($211|0)<160;
 if($212){label=72;break;}else{var $216=$32;label=73;break;}
 case 72: 
 var $214=(($32+4)|0);
 HEAP32[(($32)>>2)]=$33;
 var $216=$214;label=73;break;
 case 73: 
 var $216;
 var $217=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a_2,$198,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=38;break; }
 case 74: 
 HEAP16[(($__v)>>1)]=$217;
 var $219=HEAP8[($26)];
 var $220=$219&1;
 var $221=(($220<<24)>>24)==0;
 if($221){label=76;break;}else{label=75;break;}
 case 75: 
 var $223=HEAP32[(($30)>>2)];
 var $227=$223;label=77;break;
 case 76: 
 var $225=($219&255);
 var $226=$225>>>1;
 var $227=$226;label=77;break;
 case 77: 
 var $227;
 var $228=($227|0)==0;
 if($228){label=94;break;}else{label=78;break;}
 case 78: 
 var $230=($19|0)==($216|0);
 if($230){var $239=$219;label=82;break;}else{label=79;break;}
 case 79: 
 var $231=((($216)-(4))|0);
 var $232=($231>>>0)>($19>>>0);
 if($232){var $_012_i_i_i=$19;var $233=$231;label=80;break;}else{var $239=$219;label=82;break;}
 case 80: 
 var $233;
 var $_012_i_i_i;
 var $234=HEAP32[(($_012_i_i_i)>>2)];
 var $235=HEAP32[(($233)>>2)];
 HEAP32[(($_012_i_i_i)>>2)]=$235;
 HEAP32[(($233)>>2)]=$234;
 var $236=(($_012_i_i_i+4)|0);
 var $237=((($233)-(4))|0);
 var $238=($236>>>0)<($237>>>0);
 if($238){var $_012_i_i_i=$236;var $233=$237;label=80;break;}else{label=81;break;}
 case 81: 
 var $_pre_i=HEAP8[($26)];
 var $239=$_pre_i;label=82;break;
 case 82: 
 var $239;
 var $240=$239&1;
 var $241=(($240<<24)>>24)==0;
 if($241){label=84;break;}else{label=83;break;}
 case 83: 
 var $243=(($__grouping+8)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=HEAP32[(($30)>>2)];
 var $252=$245;var $251=$244;label=85;break;
 case 84: 
 var $247=$__grouping;
 var $248=(($247+1)|0);
 var $249=($239&255);
 var $250=$249>>>1;
 var $252=$250;var $251=$248;label=85;break;
 case 85: 
 var $251;
 var $252;
 var $253=((($216)-(4))|0);
 var $254=($253>>>0)>($19>>>0);
 var $255=HEAP8[($251)];
 var $_not9_i=(($255<<24)>>24)<1;
 var $256=(($255<<24)>>24)==127;
 var $or_cond210_i=$_not9_i|$256;
 if($254){label=86;break;}else{var $_lcssa6_i=$255;var $or_cond2_lcssa_i=$or_cond210_i;label=91;break;}
 case 86: 
 var $257=(($251+$252)|0);
 var $258=$257;
 var $__ig_011_i=$251;var $__r_012_i=$19;var $260=$255;var $or_cond213_i=$or_cond210_i;label=87;break;
 case 87: 
 var $or_cond213_i;
 var $260;
 var $__r_012_i;
 var $__ig_011_i;
 if($or_cond213_i){label=90;break;}else{label=88;break;}
 case 88: 
 var $262=(($260<<24)>>24);
 var $263=HEAP32[(($__r_012_i)>>2)];
 var $264=($262|0)==($263|0);
 if($264){label=90;break;}else{label=89;break;}
 case 89: 
 HEAP32[(($__err)>>2)]=4;
 label=94;break;
 case 90: 
 var $267=$__ig_011_i;
 var $268=((($258)-($267))|0);
 var $269=($268|0)>1;
 var $270=(($__ig_011_i+1)|0);
 var $___ig_0_i=($269?$270:$__ig_011_i);
 var $271=(($__r_012_i+4)|0);
 var $272=($271>>>0)<($253>>>0);
 var $273=HEAP8[($___ig_0_i)];
 var $_not_i=(($273<<24)>>24)<1;
 var $274=(($273<<24)>>24)==127;
 var $or_cond2_i=$_not_i|$274;
 if($272){var $__ig_011_i=$___ig_0_i;var $__r_012_i=$271;var $260=$273;var $or_cond213_i=$or_cond2_i;label=87;break;}else{var $_lcssa6_i=$273;var $or_cond2_lcssa_i=$or_cond2_i;label=91;break;}
 case 91: 
 var $or_cond2_lcssa_i;
 var $_lcssa6_i;
 if($or_cond2_lcssa_i){label=94;break;}else{label=92;break;}
 case 92: 
 var $276=(($_lcssa6_i<<24)>>24);
 var $277=HEAP32[(($253)>>2)];
 var $278=((($277)-(1))|0);
 var $279=($278>>>0)<($276>>>0);
 if($279){label=94;break;}else{label=93;break;}
 case 93: 
 HEAP32[(($__err)>>2)]=4;
 label=94;break;
 case 94: 
 var $281=($48|0)==0;
 if($281){var $295=0;label=100;break;}else{label=95;break;}
 case 95: 
 var $283=(($48+12)|0);
 var $284=HEAP32[(($283)>>2)];
 var $285=(($48+16)|0);
 var $286=HEAP32[(($285)>>2)];
 var $287=($284|0)==($286|0);
 if($287){label=96;break;}else{var $295=$48;label=100;break;}
 case 96: 
 var $288=$48;
 var $289=HEAP32[(($288)>>2)];
 var $290=(($289+36)|0);
 var $291=HEAP32[(($290)>>2)];
 var $292=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$291]($48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=97;break; } else { label=38;break; }
 case 97: 
 var $293=($292|0)==-1;
 if($293){label=99;break;}else{label=98;break;}
 case 98: 
 var $_pre_i_i_i=HEAP32[(($20)>>2)];
 var $295=$_pre_i_i_i;label=100;break;
 case 99: 
 HEAP32[(($20)>>2)]=0;
 var $295=0;label=100;break;
 case 100: 
 var $295;
 var $296=($295|0)==0;
 var $297=($_pre_i2_i_i|0)==0;
 if($297){label=106;break;}else{label=101;break;}
 case 101: 
 var $299=(($_pre_i2_i_i+12)|0);
 var $300=HEAP32[(($299)>>2)];
 var $301=(($_pre_i2_i_i+16)|0);
 var $302=HEAP32[(($301)>>2)];
 var $303=($300|0)==($302|0);
 if($303){label=103;break;}else{label=102;break;}
 case 102: 
 if($296){label=109;break;}else{label=108;break;}
 case 103: 
 var $304=$_pre_i2_i_i;
 var $305=HEAP32[(($304)>>2)];
 var $306=(($305+36)|0);
 var $307=HEAP32[(($306)>>2)];
 var $308=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$307]($_pre_i2_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=104;break; } else { label=38;break; }
 case 104: 
 var $309=($308|0)==-1;
 if($309){label=105;break;}else{label=107;break;}
 case 105: 
 HEAP32[(($21)>>2)]=0;
 label=106;break;
 case 106: 
 if($296){label=108;break;}else{label=109;break;}
 case 107: 
 var $311=($_pre_i2_i_i|0)==0;
 var $tmp_i_i=$296^$311;
 if($tmp_i_i){label=109;break;}else{label=108;break;}
 case 108: 
 var $313=HEAP32[(($__err)>>2)];
 var $314=$313|2;
 HEAP32[(($__err)>>2)]=$314;
 label=109;break;
 case 109: 
 var $316=HEAP32[(($20)>>2)];
 var $317=(($agg_result)|0);
 HEAP32[(($317)>>2)]=$316;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+232)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $__g=(sp)+(72);
 var $1=(($__iob+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&74;
 if(($3|0)==8){ label=2;break;}else if(($3|0)==0){ label=3;break;}else if(($3|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $7=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$7,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=38;break; }
 case 6: 
 var $8=HEAP8[($this2_i_i_i)];
 var $9=$8&1;
 var $10=(($9<<24)>>24)==0;
 if($10){label=8;break;}else{label=7;break;}
 case 7: 
 var $12=(($__buf+8)|0);
 var $13=HEAP32[(($12)>>2)];
 var $_pre44=$__buf;
 var $_pre45=(($_pre44+1)|0);
 var $17=$13;var $_pre_phi46=$_pre45;var $_pre_phi48=$12;label=9;break;
 case 8: 
 var $15=$__buf;
 var $16=(($15+1)|0);
 var $_pre47=(($__buf+8)|0);
 var $17=$16;var $_pre_phi46=$16;var $_pre_phi48=$_pre47;label=9;break;
 case 9: 
 var $_pre_phi48;
 var $_pre_phi46;
 var $17;
 var $18=$__g;
 var $$etemp$0$0=160;
 var $$etemp$0$1=0;

 var $19=(($__g)|0);
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=(($__atoms+24)|0);
 var $25=(($__atoms+25)|0);
 var $26=$__grouping;
 var $27=$__g;
 var $28=(($__atoms+26)|0);
 var $29=$__atoms;
 var $30=(($__grouping+4)|0);
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$17;var $33=0;var $32=$19;var $31=$17;var $_pre_i_i_i5=$_pre;label=10;break;
 case 10: 
 var $_pre_i_i_i5;
 var $31;
 var $32;
 var $33;
 var $__a_0;
 var $34=($_pre_i_i_i5|0)==0;
 if($34){var $48=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $36=(($_pre_i_i_i5+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($_pre_i_i_i5+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=12;break;}else{var $48=$_pre_i_i_i5;label=15;break;}
 case 12: 
 var $41=$_pre_i_i_i5;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+36)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$44]($_pre_i_i_i5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=37;break; }
 case 13: 
 var $46=($45|0)==-1;
 if($46){label=14;break;}else{var $48=$_pre_i_i_i5;label=15;break;}
 case 14: 
 HEAP32[(($20)>>2)]=0;
 var $48=0;label=15;break;
 case 15: 
 var $48;
 var $49=($48|0)==0;
 var $50=HEAP32[(($21)>>2)];
 var $51=($50|0)==0;
 if($51){label=21;break;}else{label=16;break;}
 case 16: 
 var $53=(($50+12)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($50+16)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($54|0)==($56|0);
 if($57){label=18;break;}else{label=17;break;}
 case 17: 
 if($49){var $67=$50;label=23;break;}else{var $__a_2=$__a_0;var $198=$31;var $_pre_i2_i_i=$50;label=67;break;}
 case 18: 
 var $58=$50;
 var $59=HEAP32[(($58)>>2)];
 var $60=(($59+36)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$61]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=37;break; }
 case 19: 
 var $63=($62|0)==-1;
 if($63){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($21)>>2)]=0;
 label=21;break;
 case 21: 
 if($49){var $__a_2=$__a_0;var $198=$31;var $_pre_i2_i_i=0;label=67;break;}else{var $67=0;label=23;break;}
 case 22: 
 if($49){var $67=$50;label=23;break;}else{var $__a_2=$__a_0;var $198=$31;var $_pre_i2_i_i=$50;label=67;break;}
 case 23: 
 var $67;
 var $68=$31;
 var $69=$__a_0;
 var $70=((($68)-($69))|0);
 var $71=HEAP8[($this2_i_i_i)];
 var $72=$71&1;
 var $73=(($72<<24)>>24)==0;
 if($73){label=25;break;}else{label=24;break;}
 case 24: 
 var $75=HEAP32[(($23)>>2)];
 var $79=$75;label=26;break;
 case 25: 
 var $77=($71&255);
 var $78=$77>>>1;
 var $79=$78;label=26;break;
 case 26: 
 var $79;
 var $80=($70|0)==($79|0);
 if($80){label=27;break;}else{var $__a_1=$__a_0;var $108=$31;label=40;break;}
 case 27: 
 if($73){label=29;break;}else{label=28;break;}
 case 28: 
 var $83=HEAP32[(($23)>>2)];
 var $90=$83;var $89=$83;label=30;break;
 case 29: 
 var $85=($71&255);
 var $86=$85>>>1;
 var $87=($71&255);
 var $88=$87>>>1;
 var $90=$88;var $89=$86;label=30;break;
 case 30: 
 var $89;
 var $90;
 var $91=$90<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$91,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=37;break; }
 case 31: 
 var $92=HEAP8[($this2_i_i_i)];
 var $93=$92&1;
 var $94=(($93<<24)>>24)==0;
 if($94){var $98=10;label=33;break;}else{label=32;break;}
 case 32: 
 var $96=HEAP32[(($22)>>2)];
 var $97=$96&-2;
 var $phitmp_i25=((($97)-(1))|0);
 var $98=$phitmp_i25;label=33;break;
 case 33: 
 var $98;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$98,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=37;break; }
 case 34: 
 var $99=HEAP8[($this2_i_i_i)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){var $104=$_pre_phi46;label=36;break;}else{label=35;break;}
 case 35: 
 var $103=HEAP32[(($_pre_phi48)>>2)];
 var $104=$103;label=36;break;
 case 36: 
 var $104;
 var $105=(($104+$89)|0);
 var $__a_1=$104;var $108=$105;label=40;break;
 case 37: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=39;break;
 case 38: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=39;break;
 case 39: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 40: 
 var $108;
 var $__a_1;
 var $109=(($48+12)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=(($48+16)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=($110|0)==($112|0);
 if($113){label=41;break;}else{label=43;break;}
 case 41: 
 var $115=$48;
 var $116=HEAP32[(($115)>>2)];
 var $117=(($116+36)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$118]($48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=37;break; }
 case 42: 
 var $extract_t_i=(($119)&255);
 var $_0_i_off0_i=$extract_t_i;label=44;break;
 case 43: 
 var $121=HEAP8[($110)];
 var $_0_i_off0_i=$121;label=44;break;
 case 44: 
 var $_0_i_off0_i;
 var $122=HEAP8[($__thousands_sep)];
 var $123=($108|0)==($__a_1|0);
 if($123){label=45;break;}else{label=47;break;}
 case 45: 
 var $125=HEAP8[($24)];
 var $126=(($125<<24)>>24)==(($_0_i_off0_i<<24)>>24);
 var $127=HEAP8[($25)];
 var $128=(($127<<24)>>24)==(($_0_i_off0_i<<24)>>24);
 var $or_cond=$126|$128;
 if($or_cond){label=46;break;}else{label=47;break;}
 case 46: 
 var $130=($126?43:45);
 var $131=(($108+1)|0);
 HEAP8[($108)]=$130;
 var $_ph30=0;var $_ph29=$32;var $_ph=$131;label=64;break;
 case 47: 
 var $133=HEAP8[($26)];
 var $134=$133&1;
 var $135=(($134<<24)>>24)==0;
 if($135){label=49;break;}else{label=48;break;}
 case 48: 
 var $137=HEAP32[(($30)>>2)];
 var $141=$137;label=50;break;
 case 49: 
 var $139=($133&255);
 var $140=$139>>>1;
 var $141=$140;label=50;break;
 case 50: 
 var $141;
 var $142=($141|0)!=0;
 var $143=(($_0_i_off0_i<<24)>>24)==(($122<<24)>>24);
 var $or_cond_i=$142&$143;
 if($or_cond_i){label=51;break;}else{var $_01_i_i=$7;label=54;break;}
 case 51: 
 var $145=$32;
 var $146=((($145)-($27))|0);
 var $147=($146|0)<160;
 if($147){label=52;break;}else{var $_ph30=$33;var $_ph29=$32;var $_ph=$108;label=64;break;}
 case 52: 
 var $149=(($32+4)|0);
 HEAP32[(($32)>>2)]=$33;
 var $_ph30=0;var $_ph29=$149;var $_ph=$108;label=64;break;
 case 53: 
 var $151=($155|0)==($28|0);
 if($151){var $_0_lcssa_i_i=$28;label=55;break;}else{var $_01_i_i=$155;label=54;break;}
 case 54: 
 var $_01_i_i;
 var $153=HEAP8[($_01_i_i)];
 var $154=(($153<<24)>>24)==(($_0_i_off0_i<<24)>>24);
 var $155=(($_01_i_i+1)|0);
 if($154){var $_0_lcssa_i_i=$_01_i_i;label=55;break;}else{label=53;break;}
 case 55: 
 var $_0_lcssa_i_i;
 var $156=$_0_lcssa_i_i;
 var $157=((($156)-($29))|0);
 var $158=($157|0)>23;
 if($158){var $__a_2=$__a_1;var $198=$108;var $_pre_i2_i_i=$67;label=67;break;}else{label=56;break;}
 case 56: 
 if(($_0_i|0)==8|($_0_i|0)==10){ label=57;break;}else if(($_0_i|0)==16){ label=58;break;}else{label=63;break;}
 case 57: 
 var $161=($157|0)<($_0_i|0);
 if($161){label=63;break;}else{var $__a_2=$__a_1;var $198=$108;var $_pre_i2_i_i=$67;label=67;break;}
 case 58: 
 var $163=($157|0)<22;
 if($163){label=63;break;}else{label=59;break;}
 case 59: 
 if($123){var $__a_2=$108;var $198=$108;var $_pre_i2_i_i=$67;label=67;break;}else{label=60;break;}
 case 60: 
 var $166=$108;
 var $167=$__a_1;
 var $168=((($166)-($167))|0);
 var $169=($168|0)<3;
 if($169){label=61;break;}else{var $__a_2=$__a_1;var $198=$108;var $_pre_i2_i_i=$67;label=67;break;}
 case 61: 
 var $171=((($108)-(1))|0);
 var $172=HEAP8[($171)];
 var $173=(($172<<24)>>24)==48;
 if($173){label=62;break;}else{var $__a_2=$__a_1;var $198=$108;var $_pre_i2_i_i=$67;label=67;break;}
 case 62: 
 var $175=((9744+$157)|0);
 var $176=HEAP8[($175)];
 var $177=(($108+1)|0);
 HEAP8[($108)]=$176;
 var $_ph30=0;var $_ph29=$32;var $_ph=$177;label=64;break;
 case 63: 
 var $179=((9744+$157)|0);
 var $180=HEAP8[($179)];
 var $181=(($108+1)|0);
 HEAP8[($108)]=$180;
 var $182=((($33)+(1))|0);
 var $_ph30=$182;var $_ph29=$32;var $_ph=$181;label=64;break;
 case 64: 
 var $_ph;
 var $_ph29;
 var $_ph30;
 var $184=HEAP32[(($20)>>2)];
 var $185=(($184+12)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=(($184+16)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=($186|0)==($188|0);
 if($189){label=65;break;}else{label=66;break;}
 case 65: 
 var $191=$184;
 var $192=HEAP32[(($191)>>2)];
 var $193=(($192+40)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$194]($184) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $33=$_ph30;var $32=$_ph29;var $31=$_ph;var $_pre_i_i_i5=$184;label=10;break; } else { label=37;break; }
 case 66: 
 var $197=(($186+1)|0);
 HEAP32[(($185)>>2)]=$197;
 var $__a_0=$__a_1;var $33=$_ph30;var $32=$_ph29;var $31=$_ph;var $_pre_i_i_i5=$184;label=10;break;
 case 67: 
 var $_pre_i2_i_i;
 var $198;
 var $__a_2;
 var $199=HEAP8[($26)];
 var $200=$199&1;
 var $201=(($200<<24)>>24)==0;
 if($201){label=69;break;}else{label=68;break;}
 case 68: 
 var $203=HEAP32[(($30)>>2)];
 var $207=$203;label=70;break;
 case 69: 
 var $205=($199&255);
 var $206=$205>>>1;
 var $207=$206;label=70;break;
 case 70: 
 var $207;
 var $208=($207|0)==0;
 if($208){var $216=$32;label=73;break;}else{label=71;break;}
 case 71: 
 var $210=$32;
 var $211=((($210)-($27))|0);
 var $212=($211|0)<160;
 if($212){label=72;break;}else{var $216=$32;label=73;break;}
 case 72: 
 var $214=(($32+4)|0);
 HEAP32[(($32)>>2)]=$33;
 var $216=$214;label=73;break;
 case 73: 
 var $216;
 var $217=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a_2,$198,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=38;break; }
 case 74: 
 HEAP32[(($__v)>>2)]=$217;
 var $219=HEAP8[($26)];
 var $220=$219&1;
 var $221=(($220<<24)>>24)==0;
 if($221){label=76;break;}else{label=75;break;}
 case 75: 
 var $223=HEAP32[(($30)>>2)];
 var $227=$223;label=77;break;
 case 76: 
 var $225=($219&255);
 var $226=$225>>>1;
 var $227=$226;label=77;break;
 case 77: 
 var $227;
 var $228=($227|0)==0;
 if($228){label=94;break;}else{label=78;break;}
 case 78: 
 var $230=($19|0)==($216|0);
 if($230){var $239=$219;label=82;break;}else{label=79;break;}
 case 79: 
 var $231=((($216)-(4))|0);
 var $232=($231>>>0)>($19>>>0);
 if($232){var $_012_i_i_i=$19;var $233=$231;label=80;break;}else{var $239=$219;label=82;break;}
 case 80: 
 var $233;
 var $_012_i_i_i;
 var $234=HEAP32[(($_012_i_i_i)>>2)];
 var $235=HEAP32[(($233)>>2)];
 HEAP32[(($_012_i_i_i)>>2)]=$235;
 HEAP32[(($233)>>2)]=$234;
 var $236=(($_012_i_i_i+4)|0);
 var $237=((($233)-(4))|0);
 var $238=($236>>>0)<($237>>>0);
 if($238){var $_012_i_i_i=$236;var $233=$237;label=80;break;}else{label=81;break;}
 case 81: 
 var $_pre_i=HEAP8[($26)];
 var $239=$_pre_i;label=82;break;
 case 82: 
 var $239;
 var $240=$239&1;
 var $241=(($240<<24)>>24)==0;
 if($241){label=84;break;}else{label=83;break;}
 case 83: 
 var $243=(($__grouping+8)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=HEAP32[(($30)>>2)];
 var $252=$245;var $251=$244;label=85;break;
 case 84: 
 var $247=$__grouping;
 var $248=(($247+1)|0);
 var $249=($239&255);
 var $250=$249>>>1;
 var $252=$250;var $251=$248;label=85;break;
 case 85: 
 var $251;
 var $252;
 var $253=((($216)-(4))|0);
 var $254=($253>>>0)>($19>>>0);
 var $255=HEAP8[($251)];
 var $_not9_i=(($255<<24)>>24)<1;
 var $256=(($255<<24)>>24)==127;
 var $or_cond210_i=$_not9_i|$256;
 if($254){label=86;break;}else{var $_lcssa6_i=$255;var $or_cond2_lcssa_i=$or_cond210_i;label=91;break;}
 case 86: 
 var $257=(($251+$252)|0);
 var $258=$257;
 var $__ig_011_i=$251;var $__r_012_i=$19;var $260=$255;var $or_cond213_i=$or_cond210_i;label=87;break;
 case 87: 
 var $or_cond213_i;
 var $260;
 var $__r_012_i;
 var $__ig_011_i;
 if($or_cond213_i){label=90;break;}else{label=88;break;}
 case 88: 
 var $262=(($260<<24)>>24);
 var $263=HEAP32[(($__r_012_i)>>2)];
 var $264=($262|0)==($263|0);
 if($264){label=90;break;}else{label=89;break;}
 case 89: 
 HEAP32[(($__err)>>2)]=4;
 label=94;break;
 case 90: 
 var $267=$__ig_011_i;
 var $268=((($258)-($267))|0);
 var $269=($268|0)>1;
 var $270=(($__ig_011_i+1)|0);
 var $___ig_0_i=($269?$270:$__ig_011_i);
 var $271=(($__r_012_i+4)|0);
 var $272=($271>>>0)<($253>>>0);
 var $273=HEAP8[($___ig_0_i)];
 var $_not_i=(($273<<24)>>24)<1;
 var $274=(($273<<24)>>24)==127;
 var $or_cond2_i=$_not_i|$274;
 if($272){var $__ig_011_i=$___ig_0_i;var $__r_012_i=$271;var $260=$273;var $or_cond213_i=$or_cond2_i;label=87;break;}else{var $_lcssa6_i=$273;var $or_cond2_lcssa_i=$or_cond2_i;label=91;break;}
 case 91: 
 var $or_cond2_lcssa_i;
 var $_lcssa6_i;
 if($or_cond2_lcssa_i){label=94;break;}else{label=92;break;}
 case 92: 
 var $276=(($_lcssa6_i<<24)>>24);
 var $277=HEAP32[(($253)>>2)];
 var $278=((($277)-(1))|0);
 var $279=($278>>>0)<($276>>>0);
 if($279){label=94;break;}else{label=93;break;}
 case 93: 
 HEAP32[(($__err)>>2)]=4;
 label=94;break;
 case 94: 
 var $281=($48|0)==0;
 if($281){var $295=0;label=100;break;}else{label=95;break;}
 case 95: 
 var $283=(($48+12)|0);
 var $284=HEAP32[(($283)>>2)];
 var $285=(($48+16)|0);
 var $286=HEAP32[(($285)>>2)];
 var $287=($284|0)==($286|0);
 if($287){label=96;break;}else{var $295=$48;label=100;break;}
 case 96: 
 var $288=$48;
 var $289=HEAP32[(($288)>>2)];
 var $290=(($289+36)|0);
 var $291=HEAP32[(($290)>>2)];
 var $292=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$291]($48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=97;break; } else { label=38;break; }
 case 97: 
 var $293=($292|0)==-1;
 if($293){label=99;break;}else{label=98;break;}
 case 98: 
 var $_pre_i_i_i=HEAP32[(($20)>>2)];
 var $295=$_pre_i_i_i;label=100;break;
 case 99: 
 HEAP32[(($20)>>2)]=0;
 var $295=0;label=100;break;
 case 100: 
 var $295;
 var $296=($295|0)==0;
 var $297=($_pre_i2_i_i|0)==0;
 if($297){label=106;break;}else{label=101;break;}
 case 101: 
 var $299=(($_pre_i2_i_i+12)|0);
 var $300=HEAP32[(($299)>>2)];
 var $301=(($_pre_i2_i_i+16)|0);
 var $302=HEAP32[(($301)>>2)];
 var $303=($300|0)==($302|0);
 if($303){label=103;break;}else{label=102;break;}
 case 102: 
 if($296){label=109;break;}else{label=108;break;}
 case 103: 
 var $304=$_pre_i2_i_i;
 var $305=HEAP32[(($304)>>2)];
 var $306=(($305+36)|0);
 var $307=HEAP32[(($306)>>2)];
 var $308=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$307]($_pre_i2_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=104;break; } else { label=38;break; }
 case 104: 
 var $309=($308|0)==-1;
 if($309){label=105;break;}else{label=107;break;}
 case 105: 
 HEAP32[(($21)>>2)]=0;
 label=106;break;
 case 106: 
 if($296){label=108;break;}else{label=109;break;}
 case 107: 
 var $311=($_pre_i2_i_i|0)==0;
 var $tmp_i_i=$296^$311;
 if($tmp_i_i){label=109;break;}else{label=108;break;}
 case 108: 
 var $313=HEAP32[(($__err)>>2)];
 var $314=$313|2;
 HEAP32[(($__err)>>2)]=$314;
 label=109;break;
 case 109: 
 var $316=HEAP32[(($20)>>2)];
 var $317=(($agg_result)|0);
 HEAP32[(($317)>>2)]=$316;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+232)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $__g=(sp)+(72);
 var $1=(($__iob+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&74;
 if(($3|0)==8){ label=2;break;}else if(($3|0)==0){ label=3;break;}else if(($3|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $7=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$7,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=38;break; }
 case 6: 
 var $8=HEAP8[($this2_i_i_i)];
 var $9=$8&1;
 var $10=(($9<<24)>>24)==0;
 if($10){label=8;break;}else{label=7;break;}
 case 7: 
 var $12=(($__buf+8)|0);
 var $13=HEAP32[(($12)>>2)];
 var $_pre44=$__buf;
 var $_pre45=(($_pre44+1)|0);
 var $17=$13;var $_pre_phi46=$_pre45;var $_pre_phi48=$12;label=9;break;
 case 8: 
 var $15=$__buf;
 var $16=(($15+1)|0);
 var $_pre47=(($__buf+8)|0);
 var $17=$16;var $_pre_phi46=$16;var $_pre_phi48=$_pre47;label=9;break;
 case 9: 
 var $_pre_phi48;
 var $_pre_phi46;
 var $17;
 var $18=$__g;
 var $$etemp$0$0=160;
 var $$etemp$0$1=0;

 var $19=(($__g)|0);
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=(($__atoms+24)|0);
 var $25=(($__atoms+25)|0);
 var $26=$__grouping;
 var $27=$__g;
 var $28=(($__atoms+26)|0);
 var $29=$__atoms;
 var $30=(($__grouping+4)|0);
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$17;var $33=0;var $32=$19;var $31=$17;var $_pre_i_i_i5=$_pre;label=10;break;
 case 10: 
 var $_pre_i_i_i5;
 var $31;
 var $32;
 var $33;
 var $__a_0;
 var $34=($_pre_i_i_i5|0)==0;
 if($34){var $48=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $36=(($_pre_i_i_i5+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($_pre_i_i_i5+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=12;break;}else{var $48=$_pre_i_i_i5;label=15;break;}
 case 12: 
 var $41=$_pre_i_i_i5;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+36)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$44]($_pre_i_i_i5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=37;break; }
 case 13: 
 var $46=($45|0)==-1;
 if($46){label=14;break;}else{var $48=$_pre_i_i_i5;label=15;break;}
 case 14: 
 HEAP32[(($20)>>2)]=0;
 var $48=0;label=15;break;
 case 15: 
 var $48;
 var $49=($48|0)==0;
 var $50=HEAP32[(($21)>>2)];
 var $51=($50|0)==0;
 if($51){label=21;break;}else{label=16;break;}
 case 16: 
 var $53=(($50+12)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($50+16)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($54|0)==($56|0);
 if($57){label=18;break;}else{label=17;break;}
 case 17: 
 if($49){var $67=$50;label=23;break;}else{var $__a_2=$__a_0;var $198=$31;var $_pre_i2_i_i=$50;label=67;break;}
 case 18: 
 var $58=$50;
 var $59=HEAP32[(($58)>>2)];
 var $60=(($59+36)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$61]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=37;break; }
 case 19: 
 var $63=($62|0)==-1;
 if($63){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($21)>>2)]=0;
 label=21;break;
 case 21: 
 if($49){var $__a_2=$__a_0;var $198=$31;var $_pre_i2_i_i=0;label=67;break;}else{var $67=0;label=23;break;}
 case 22: 
 if($49){var $67=$50;label=23;break;}else{var $__a_2=$__a_0;var $198=$31;var $_pre_i2_i_i=$50;label=67;break;}
 case 23: 
 var $67;
 var $68=$31;
 var $69=$__a_0;
 var $70=((($68)-($69))|0);
 var $71=HEAP8[($this2_i_i_i)];
 var $72=$71&1;
 var $73=(($72<<24)>>24)==0;
 if($73){label=25;break;}else{label=24;break;}
 case 24: 
 var $75=HEAP32[(($23)>>2)];
 var $79=$75;label=26;break;
 case 25: 
 var $77=($71&255);
 var $78=$77>>>1;
 var $79=$78;label=26;break;
 case 26: 
 var $79;
 var $80=($70|0)==($79|0);
 if($80){label=27;break;}else{var $__a_1=$__a_0;var $108=$31;label=40;break;}
 case 27: 
 if($73){label=29;break;}else{label=28;break;}
 case 28: 
 var $83=HEAP32[(($23)>>2)];
 var $90=$83;var $89=$83;label=30;break;
 case 29: 
 var $85=($71&255);
 var $86=$85>>>1;
 var $87=($71&255);
 var $88=$87>>>1;
 var $90=$88;var $89=$86;label=30;break;
 case 30: 
 var $89;
 var $90;
 var $91=$90<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$91,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=37;break; }
 case 31: 
 var $92=HEAP8[($this2_i_i_i)];
 var $93=$92&1;
 var $94=(($93<<24)>>24)==0;
 if($94){var $98=10;label=33;break;}else{label=32;break;}
 case 32: 
 var $96=HEAP32[(($22)>>2)];
 var $97=$96&-2;
 var $phitmp_i25=((($97)-(1))|0);
 var $98=$phitmp_i25;label=33;break;
 case 33: 
 var $98;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$98,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=37;break; }
 case 34: 
 var $99=HEAP8[($this2_i_i_i)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){var $104=$_pre_phi46;label=36;break;}else{label=35;break;}
 case 35: 
 var $103=HEAP32[(($_pre_phi48)>>2)];
 var $104=$103;label=36;break;
 case 36: 
 var $104;
 var $105=(($104+$89)|0);
 var $__a_1=$104;var $108=$105;label=40;break;
 case 37: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=39;break;
 case 38: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=39;break;
 case 39: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 40: 
 var $108;
 var $__a_1;
 var $109=(($48+12)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=(($48+16)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=($110|0)==($112|0);
 if($113){label=41;break;}else{label=43;break;}
 case 41: 
 var $115=$48;
 var $116=HEAP32[(($115)>>2)];
 var $117=(($116+36)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$118]($48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=37;break; }
 case 42: 
 var $extract_t_i=(($119)&255);
 var $_0_i_off0_i=$extract_t_i;label=44;break;
 case 43: 
 var $121=HEAP8[($110)];
 var $_0_i_off0_i=$121;label=44;break;
 case 44: 
 var $_0_i_off0_i;
 var $122=HEAP8[($__thousands_sep)];
 var $123=($108|0)==($__a_1|0);
 if($123){label=45;break;}else{label=47;break;}
 case 45: 
 var $125=HEAP8[($24)];
 var $126=(($125<<24)>>24)==(($_0_i_off0_i<<24)>>24);
 var $127=HEAP8[($25)];
 var $128=(($127<<24)>>24)==(($_0_i_off0_i<<24)>>24);
 var $or_cond=$126|$128;
 if($or_cond){label=46;break;}else{label=47;break;}
 case 46: 
 var $130=($126?43:45);
 var $131=(($108+1)|0);
 HEAP8[($108)]=$130;
 var $_ph30=0;var $_ph29=$32;var $_ph=$131;label=64;break;
 case 47: 
 var $133=HEAP8[($26)];
 var $134=$133&1;
 var $135=(($134<<24)>>24)==0;
 if($135){label=49;break;}else{label=48;break;}
 case 48: 
 var $137=HEAP32[(($30)>>2)];
 var $141=$137;label=50;break;
 case 49: 
 var $139=($133&255);
 var $140=$139>>>1;
 var $141=$140;label=50;break;
 case 50: 
 var $141;
 var $142=($141|0)!=0;
 var $143=(($_0_i_off0_i<<24)>>24)==(($122<<24)>>24);
 var $or_cond_i=$142&$143;
 if($or_cond_i){label=51;break;}else{var $_01_i_i=$7;label=54;break;}
 case 51: 
 var $145=$32;
 var $146=((($145)-($27))|0);
 var $147=($146|0)<160;
 if($147){label=52;break;}else{var $_ph30=$33;var $_ph29=$32;var $_ph=$108;label=64;break;}
 case 52: 
 var $149=(($32+4)|0);
 HEAP32[(($32)>>2)]=$33;
 var $_ph30=0;var $_ph29=$149;var $_ph=$108;label=64;break;
 case 53: 
 var $151=($155|0)==($28|0);
 if($151){var $_0_lcssa_i_i=$28;label=55;break;}else{var $_01_i_i=$155;label=54;break;}
 case 54: 
 var $_01_i_i;
 var $153=HEAP8[($_01_i_i)];
 var $154=(($153<<24)>>24)==(($_0_i_off0_i<<24)>>24);
 var $155=(($_01_i_i+1)|0);
 if($154){var $_0_lcssa_i_i=$_01_i_i;label=55;break;}else{label=53;break;}
 case 55: 
 var $_0_lcssa_i_i;
 var $156=$_0_lcssa_i_i;
 var $157=((($156)-($29))|0);
 var $158=($157|0)>23;
 if($158){var $__a_2=$__a_1;var $198=$108;var $_pre_i2_i_i=$67;label=67;break;}else{label=56;break;}
 case 56: 
 if(($_0_i|0)==8|($_0_i|0)==10){ label=57;break;}else if(($_0_i|0)==16){ label=58;break;}else{label=63;break;}
 case 57: 
 var $161=($157|0)<($_0_i|0);
 if($161){label=63;break;}else{var $__a_2=$__a_1;var $198=$108;var $_pre_i2_i_i=$67;label=67;break;}
 case 58: 
 var $163=($157|0)<22;
 if($163){label=63;break;}else{label=59;break;}
 case 59: 
 if($123){var $__a_2=$108;var $198=$108;var $_pre_i2_i_i=$67;label=67;break;}else{label=60;break;}
 case 60: 
 var $166=$108;
 var $167=$__a_1;
 var $168=((($166)-($167))|0);
 var $169=($168|0)<3;
 if($169){label=61;break;}else{var $__a_2=$__a_1;var $198=$108;var $_pre_i2_i_i=$67;label=67;break;}
 case 61: 
 var $171=((($108)-(1))|0);
 var $172=HEAP8[($171)];
 var $173=(($172<<24)>>24)==48;
 if($173){label=62;break;}else{var $__a_2=$__a_1;var $198=$108;var $_pre_i2_i_i=$67;label=67;break;}
 case 62: 
 var $175=((9744+$157)|0);
 var $176=HEAP8[($175)];
 var $177=(($108+1)|0);
 HEAP8[($108)]=$176;
 var $_ph30=0;var $_ph29=$32;var $_ph=$177;label=64;break;
 case 63: 
 var $179=((9744+$157)|0);
 var $180=HEAP8[($179)];
 var $181=(($108+1)|0);
 HEAP8[($108)]=$180;
 var $182=((($33)+(1))|0);
 var $_ph30=$182;var $_ph29=$32;var $_ph=$181;label=64;break;
 case 64: 
 var $_ph;
 var $_ph29;
 var $_ph30;
 var $184=HEAP32[(($20)>>2)];
 var $185=(($184+12)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=(($184+16)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=($186|0)==($188|0);
 if($189){label=65;break;}else{label=66;break;}
 case 65: 
 var $191=$184;
 var $192=HEAP32[(($191)>>2)];
 var $193=(($192+40)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$194]($184) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $33=$_ph30;var $32=$_ph29;var $31=$_ph;var $_pre_i_i_i5=$184;label=10;break; } else { label=37;break; }
 case 66: 
 var $197=(($186+1)|0);
 HEAP32[(($185)>>2)]=$197;
 var $__a_0=$__a_1;var $33=$_ph30;var $32=$_ph29;var $31=$_ph;var $_pre_i_i_i5=$184;label=10;break;
 case 67: 
 var $_pre_i2_i_i;
 var $198;
 var $__a_2;
 var $199=HEAP8[($26)];
 var $200=$199&1;
 var $201=(($200<<24)>>24)==0;
 if($201){label=69;break;}else{label=68;break;}
 case 68: 
 var $203=HEAP32[(($30)>>2)];
 var $207=$203;label=70;break;
 case 69: 
 var $205=($199&255);
 var $206=$205>>>1;
 var $207=$206;label=70;break;
 case 70: 
 var $207;
 var $208=($207|0)==0;
 if($208){var $216=$32;label=73;break;}else{label=71;break;}
 case 71: 
 var $210=$32;
 var $211=((($210)-($27))|0);
 var $212=($211|0)<160;
 if($212){label=72;break;}else{var $216=$32;label=73;break;}
 case 72: 
 var $214=(($32+4)|0);
 HEAP32[(($32)>>2)]=$33;
 var $216=$214;label=73;break;
 case 73: 
 var $216;
 var $217=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a_2,$198,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=38;break; }
 case 74: 
 HEAP32[(($__v)>>2)]=$217;
 var $219=HEAP8[($26)];
 var $220=$219&1;
 var $221=(($220<<24)>>24)==0;
 if($221){label=76;break;}else{label=75;break;}
 case 75: 
 var $223=HEAP32[(($30)>>2)];
 var $227=$223;label=77;break;
 case 76: 
 var $225=($219&255);
 var $226=$225>>>1;
 var $227=$226;label=77;break;
 case 77: 
 var $227;
 var $228=($227|0)==0;
 if($228){label=94;break;}else{label=78;break;}
 case 78: 
 var $230=($19|0)==($216|0);
 if($230){var $239=$219;label=82;break;}else{label=79;break;}
 case 79: 
 var $231=((($216)-(4))|0);
 var $232=($231>>>0)>($19>>>0);
 if($232){var $_012_i_i_i=$19;var $233=$231;label=80;break;}else{var $239=$219;label=82;break;}
 case 80: 
 var $233;
 var $_012_i_i_i;
 var $234=HEAP32[(($_012_i_i_i)>>2)];
 var $235=HEAP32[(($233)>>2)];
 HEAP32[(($_012_i_i_i)>>2)]=$235;
 HEAP32[(($233)>>2)]=$234;
 var $236=(($_012_i_i_i+4)|0);
 var $237=((($233)-(4))|0);
 var $238=($236>>>0)<($237>>>0);
 if($238){var $_012_i_i_i=$236;var $233=$237;label=80;break;}else{label=81;break;}
 case 81: 
 var $_pre_i=HEAP8[($26)];
 var $239=$_pre_i;label=82;break;
 case 82: 
 var $239;
 var $240=$239&1;
 var $241=(($240<<24)>>24)==0;
 if($241){label=84;break;}else{label=83;break;}
 case 83: 
 var $243=(($__grouping+8)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=HEAP32[(($30)>>2)];
 var $252=$245;var $251=$244;label=85;break;
 case 84: 
 var $247=$__grouping;
 var $248=(($247+1)|0);
 var $249=($239&255);
 var $250=$249>>>1;
 var $252=$250;var $251=$248;label=85;break;
 case 85: 
 var $251;
 var $252;
 var $253=((($216)-(4))|0);
 var $254=($253>>>0)>($19>>>0);
 var $255=HEAP8[($251)];
 var $_not9_i=(($255<<24)>>24)<1;
 var $256=(($255<<24)>>24)==127;
 var $or_cond210_i=$_not9_i|$256;
 if($254){label=86;break;}else{var $_lcssa6_i=$255;var $or_cond2_lcssa_i=$or_cond210_i;label=91;break;}
 case 86: 
 var $257=(($251+$252)|0);
 var $258=$257;
 var $__ig_011_i=$251;var $__r_012_i=$19;var $260=$255;var $or_cond213_i=$or_cond210_i;label=87;break;
 case 87: 
 var $or_cond213_i;
 var $260;
 var $__r_012_i;
 var $__ig_011_i;
 if($or_cond213_i){label=90;break;}else{label=88;break;}
 case 88: 
 var $262=(($260<<24)>>24);
 var $263=HEAP32[(($__r_012_i)>>2)];
 var $264=($262|0)==($263|0);
 if($264){label=90;break;}else{label=89;break;}
 case 89: 
 HEAP32[(($__err)>>2)]=4;
 label=94;break;
 case 90: 
 var $267=$__ig_011_i;
 var $268=((($258)-($267))|0);
 var $269=($268|0)>1;
 var $270=(($__ig_011_i+1)|0);
 var $___ig_0_i=($269?$270:$__ig_011_i);
 var $271=(($__r_012_i+4)|0);
 var $272=($271>>>0)<($253>>>0);
 var $273=HEAP8[($___ig_0_i)];
 var $_not_i=(($273<<24)>>24)<1;
 var $274=(($273<<24)>>24)==127;
 var $or_cond2_i=$_not_i|$274;
 if($272){var $__ig_011_i=$___ig_0_i;var $__r_012_i=$271;var $260=$273;var $or_cond213_i=$or_cond2_i;label=87;break;}else{var $_lcssa6_i=$273;var $or_cond2_lcssa_i=$or_cond2_i;label=91;break;}
 case 91: 
 var $or_cond2_lcssa_i;
 var $_lcssa6_i;
 if($or_cond2_lcssa_i){label=94;break;}else{label=92;break;}
 case 92: 
 var $276=(($_lcssa6_i<<24)>>24);
 var $277=HEAP32[(($253)>>2)];
 var $278=((($277)-(1))|0);
 var $279=($278>>>0)<($276>>>0);
 if($279){label=94;break;}else{label=93;break;}
 case 93: 
 HEAP32[(($__err)>>2)]=4;
 label=94;break;
 case 94: 
 var $281=($48|0)==0;
 if($281){var $295=0;label=100;break;}else{label=95;break;}
 case 95: 
 var $283=(($48+12)|0);
 var $284=HEAP32[(($283)>>2)];
 var $285=(($48+16)|0);
 var $286=HEAP32[(($285)>>2)];
 var $287=($284|0)==($286|0);
 if($287){label=96;break;}else{var $295=$48;label=100;break;}
 case 96: 
 var $288=$48;
 var $289=HEAP32[(($288)>>2)];
 var $290=(($289+36)|0);
 var $291=HEAP32[(($290)>>2)];
 var $292=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$291]($48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=97;break; } else { label=38;break; }
 case 97: 
 var $293=($292|0)==-1;
 if($293){label=99;break;}else{label=98;break;}
 case 98: 
 var $_pre_i_i_i=HEAP32[(($20)>>2)];
 var $295=$_pre_i_i_i;label=100;break;
 case 99: 
 HEAP32[(($20)>>2)]=0;
 var $295=0;label=100;break;
 case 100: 
 var $295;
 var $296=($295|0)==0;
 var $297=($_pre_i2_i_i|0)==0;
 if($297){label=106;break;}else{label=101;break;}
 case 101: 
 var $299=(($_pre_i2_i_i+12)|0);
 var $300=HEAP32[(($299)>>2)];
 var $301=(($_pre_i2_i_i+16)|0);
 var $302=HEAP32[(($301)>>2)];
 var $303=($300|0)==($302|0);
 if($303){label=103;break;}else{label=102;break;}
 case 102: 
 if($296){label=109;break;}else{label=108;break;}
 case 103: 
 var $304=$_pre_i2_i_i;
 var $305=HEAP32[(($304)>>2)];
 var $306=(($305+36)|0);
 var $307=HEAP32[(($306)>>2)];
 var $308=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$307]($_pre_i2_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=104;break; } else { label=38;break; }
 case 104: 
 var $309=($308|0)==-1;
 if($309){label=105;break;}else{label=107;break;}
 case 105: 
 HEAP32[(($21)>>2)]=0;
 label=106;break;
 case 106: 
 if($296){label=108;break;}else{label=109;break;}
 case 107: 
 var $311=($_pre_i2_i_i|0)==0;
 var $tmp_i_i=$296^$311;
 if($tmp_i_i){label=109;break;}else{label=108;break;}
 case 108: 
 var $313=HEAP32[(($__err)>>2)];
 var $314=$313|2;
 HEAP32[(($__err)>>2)]=$314;
 label=109;break;
 case 109: 
 var $316=HEAP32[(($20)>>2)];
 var $317=(($agg_result)|0);
 HEAP32[(($317)>>2)]=$316;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+232)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $__g=(sp)+(72);
 var $1=(($__iob+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&74;
 if(($3|0)==8){ label=2;break;}else if(($3|0)==0){ label=3;break;}else if(($3|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $7=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$7,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=38;break; }
 case 6: 
 var $8=HEAP8[($this2_i_i_i)];
 var $9=$8&1;
 var $10=(($9<<24)>>24)==0;
 if($10){label=8;break;}else{label=7;break;}
 case 7: 
 var $12=(($__buf+8)|0);
 var $13=HEAP32[(($12)>>2)];
 var $_pre44=$__buf;
 var $_pre45=(($_pre44+1)|0);
 var $17=$13;var $_pre_phi46=$_pre45;var $_pre_phi48=$12;label=9;break;
 case 8: 
 var $15=$__buf;
 var $16=(($15+1)|0);
 var $_pre47=(($__buf+8)|0);
 var $17=$16;var $_pre_phi46=$16;var $_pre_phi48=$_pre47;label=9;break;
 case 9: 
 var $_pre_phi48;
 var $_pre_phi46;
 var $17;
 var $18=$__g;
 var $$etemp$0$0=160;
 var $$etemp$0$1=0;

 var $19=(($__g)|0);
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=(($__atoms+24)|0);
 var $25=(($__atoms+25)|0);
 var $26=$__grouping;
 var $27=$__g;
 var $28=(($__atoms+26)|0);
 var $29=$__atoms;
 var $30=(($__grouping+4)|0);
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$17;var $33=0;var $32=$19;var $31=$17;var $_pre_i_i_i5=$_pre;label=10;break;
 case 10: 
 var $_pre_i_i_i5;
 var $31;
 var $32;
 var $33;
 var $__a_0;
 var $34=($_pre_i_i_i5|0)==0;
 if($34){var $48=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $36=(($_pre_i_i_i5+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($_pre_i_i_i5+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=12;break;}else{var $48=$_pre_i_i_i5;label=15;break;}
 case 12: 
 var $41=$_pre_i_i_i5;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+36)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$44]($_pre_i_i_i5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=37;break; }
 case 13: 
 var $46=($45|0)==-1;
 if($46){label=14;break;}else{var $48=$_pre_i_i_i5;label=15;break;}
 case 14: 
 HEAP32[(($20)>>2)]=0;
 var $48=0;label=15;break;
 case 15: 
 var $48;
 var $49=($48|0)==0;
 var $50=HEAP32[(($21)>>2)];
 var $51=($50|0)==0;
 if($51){label=21;break;}else{label=16;break;}
 case 16: 
 var $53=(($50+12)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($50+16)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($54|0)==($56|0);
 if($57){label=18;break;}else{label=17;break;}
 case 17: 
 if($49){var $67=$50;label=23;break;}else{var $__a_2=$__a_0;var $198=$31;var $_pre_i2_i_i=$50;label=67;break;}
 case 18: 
 var $58=$50;
 var $59=HEAP32[(($58)>>2)];
 var $60=(($59+36)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$61]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=37;break; }
 case 19: 
 var $63=($62|0)==-1;
 if($63){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($21)>>2)]=0;
 label=21;break;
 case 21: 
 if($49){var $__a_2=$__a_0;var $198=$31;var $_pre_i2_i_i=0;label=67;break;}else{var $67=0;label=23;break;}
 case 22: 
 if($49){var $67=$50;label=23;break;}else{var $__a_2=$__a_0;var $198=$31;var $_pre_i2_i_i=$50;label=67;break;}
 case 23: 
 var $67;
 var $68=$31;
 var $69=$__a_0;
 var $70=((($68)-($69))|0);
 var $71=HEAP8[($this2_i_i_i)];
 var $72=$71&1;
 var $73=(($72<<24)>>24)==0;
 if($73){label=25;break;}else{label=24;break;}
 case 24: 
 var $75=HEAP32[(($23)>>2)];
 var $79=$75;label=26;break;
 case 25: 
 var $77=($71&255);
 var $78=$77>>>1;
 var $79=$78;label=26;break;
 case 26: 
 var $79;
 var $80=($70|0)==($79|0);
 if($80){label=27;break;}else{var $__a_1=$__a_0;var $108=$31;label=40;break;}
 case 27: 
 if($73){label=29;break;}else{label=28;break;}
 case 28: 
 var $83=HEAP32[(($23)>>2)];
 var $90=$83;var $89=$83;label=30;break;
 case 29: 
 var $85=($71&255);
 var $86=$85>>>1;
 var $87=($71&255);
 var $88=$87>>>1;
 var $90=$88;var $89=$86;label=30;break;
 case 30: 
 var $89;
 var $90;
 var $91=$90<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$91,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=37;break; }
 case 31: 
 var $92=HEAP8[($this2_i_i_i)];
 var $93=$92&1;
 var $94=(($93<<24)>>24)==0;
 if($94){var $98=10;label=33;break;}else{label=32;break;}
 case 32: 
 var $96=HEAP32[(($22)>>2)];
 var $97=$96&-2;
 var $phitmp_i25=((($97)-(1))|0);
 var $98=$phitmp_i25;label=33;break;
 case 33: 
 var $98;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$98,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=37;break; }
 case 34: 
 var $99=HEAP8[($this2_i_i_i)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){var $104=$_pre_phi46;label=36;break;}else{label=35;break;}
 case 35: 
 var $103=HEAP32[(($_pre_phi48)>>2)];
 var $104=$103;label=36;break;
 case 36: 
 var $104;
 var $105=(($104+$89)|0);
 var $__a_1=$104;var $108=$105;label=40;break;
 case 37: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=39;break;
 case 38: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=39;break;
 case 39: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 40: 
 var $108;
 var $__a_1;
 var $109=(($48+12)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=(($48+16)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=($110|0)==($112|0);
 if($113){label=41;break;}else{label=43;break;}
 case 41: 
 var $115=$48;
 var $116=HEAP32[(($115)>>2)];
 var $117=(($116+36)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$118]($48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=37;break; }
 case 42: 
 var $extract_t_i=(($119)&255);
 var $_0_i_off0_i=$extract_t_i;label=44;break;
 case 43: 
 var $121=HEAP8[($110)];
 var $_0_i_off0_i=$121;label=44;break;
 case 44: 
 var $_0_i_off0_i;
 var $122=HEAP8[($__thousands_sep)];
 var $123=($108|0)==($__a_1|0);
 if($123){label=45;break;}else{label=47;break;}
 case 45: 
 var $125=HEAP8[($24)];
 var $126=(($125<<24)>>24)==(($_0_i_off0_i<<24)>>24);
 var $127=HEAP8[($25)];
 var $128=(($127<<24)>>24)==(($_0_i_off0_i<<24)>>24);
 var $or_cond=$126|$128;
 if($or_cond){label=46;break;}else{label=47;break;}
 case 46: 
 var $130=($126?43:45);
 var $131=(($108+1)|0);
 HEAP8[($108)]=$130;
 var $_ph30=0;var $_ph29=$32;var $_ph=$131;label=64;break;
 case 47: 
 var $133=HEAP8[($26)];
 var $134=$133&1;
 var $135=(($134<<24)>>24)==0;
 if($135){label=49;break;}else{label=48;break;}
 case 48: 
 var $137=HEAP32[(($30)>>2)];
 var $141=$137;label=50;break;
 case 49: 
 var $139=($133&255);
 var $140=$139>>>1;
 var $141=$140;label=50;break;
 case 50: 
 var $141;
 var $142=($141|0)!=0;
 var $143=(($_0_i_off0_i<<24)>>24)==(($122<<24)>>24);
 var $or_cond_i=$142&$143;
 if($or_cond_i){label=51;break;}else{var $_01_i_i=$7;label=54;break;}
 case 51: 
 var $145=$32;
 var $146=((($145)-($27))|0);
 var $147=($146|0)<160;
 if($147){label=52;break;}else{var $_ph30=$33;var $_ph29=$32;var $_ph=$108;label=64;break;}
 case 52: 
 var $149=(($32+4)|0);
 HEAP32[(($32)>>2)]=$33;
 var $_ph30=0;var $_ph29=$149;var $_ph=$108;label=64;break;
 case 53: 
 var $151=($155|0)==($28|0);
 if($151){var $_0_lcssa_i_i=$28;label=55;break;}else{var $_01_i_i=$155;label=54;break;}
 case 54: 
 var $_01_i_i;
 var $153=HEAP8[($_01_i_i)];
 var $154=(($153<<24)>>24)==(($_0_i_off0_i<<24)>>24);
 var $155=(($_01_i_i+1)|0);
 if($154){var $_0_lcssa_i_i=$_01_i_i;label=55;break;}else{label=53;break;}
 case 55: 
 var $_0_lcssa_i_i;
 var $156=$_0_lcssa_i_i;
 var $157=((($156)-($29))|0);
 var $158=($157|0)>23;
 if($158){var $__a_2=$__a_1;var $198=$108;var $_pre_i2_i_i=$67;label=67;break;}else{label=56;break;}
 case 56: 
 if(($_0_i|0)==8|($_0_i|0)==10){ label=57;break;}else if(($_0_i|0)==16){ label=58;break;}else{label=63;break;}
 case 57: 
 var $161=($157|0)<($_0_i|0);
 if($161){label=63;break;}else{var $__a_2=$__a_1;var $198=$108;var $_pre_i2_i_i=$67;label=67;break;}
 case 58: 
 var $163=($157|0)<22;
 if($163){label=63;break;}else{label=59;break;}
 case 59: 
 if($123){var $__a_2=$108;var $198=$108;var $_pre_i2_i_i=$67;label=67;break;}else{label=60;break;}
 case 60: 
 var $166=$108;
 var $167=$__a_1;
 var $168=((($166)-($167))|0);
 var $169=($168|0)<3;
 if($169){label=61;break;}else{var $__a_2=$__a_1;var $198=$108;var $_pre_i2_i_i=$67;label=67;break;}
 case 61: 
 var $171=((($108)-(1))|0);
 var $172=HEAP8[($171)];
 var $173=(($172<<24)>>24)==48;
 if($173){label=62;break;}else{var $__a_2=$__a_1;var $198=$108;var $_pre_i2_i_i=$67;label=67;break;}
 case 62: 
 var $175=((9744+$157)|0);
 var $176=HEAP8[($175)];
 var $177=(($108+1)|0);
 HEAP8[($108)]=$176;
 var $_ph30=0;var $_ph29=$32;var $_ph=$177;label=64;break;
 case 63: 
 var $179=((9744+$157)|0);
 var $180=HEAP8[($179)];
 var $181=(($108+1)|0);
 HEAP8[($108)]=$180;
 var $182=((($33)+(1))|0);
 var $_ph30=$182;var $_ph29=$32;var $_ph=$181;label=64;break;
 case 64: 
 var $_ph;
 var $_ph29;
 var $_ph30;
 var $184=HEAP32[(($20)>>2)];
 var $185=(($184+12)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=(($184+16)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=($186|0)==($188|0);
 if($189){label=65;break;}else{label=66;break;}
 case 65: 
 var $191=$184;
 var $192=HEAP32[(($191)>>2)];
 var $193=(($192+40)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$194]($184) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $33=$_ph30;var $32=$_ph29;var $31=$_ph;var $_pre_i_i_i5=$184;label=10;break; } else { label=37;break; }
 case 66: 
 var $197=(($186+1)|0);
 HEAP32[(($185)>>2)]=$197;
 var $__a_0=$__a_1;var $33=$_ph30;var $32=$_ph29;var $31=$_ph;var $_pre_i_i_i5=$184;label=10;break;
 case 67: 
 var $_pre_i2_i_i;
 var $198;
 var $__a_2;
 var $199=HEAP8[($26)];
 var $200=$199&1;
 var $201=(($200<<24)>>24)==0;
 if($201){label=69;break;}else{label=68;break;}
 case 68: 
 var $203=HEAP32[(($30)>>2)];
 var $207=$203;label=70;break;
 case 69: 
 var $205=($199&255);
 var $206=$205>>>1;
 var $207=$206;label=70;break;
 case 70: 
 var $207;
 var $208=($207|0)==0;
 if($208){var $216=$32;label=73;break;}else{label=71;break;}
 case 71: 
 var $210=$32;
 var $211=((($210)-($27))|0);
 var $212=($211|0)<160;
 if($212){label=72;break;}else{var $216=$32;label=73;break;}
 case 72: 
 var $214=(($32+4)|0);
 HEAP32[(($32)>>2)]=$33;
 var $216=$214;label=73;break;
 case 73: 
 var $216;
 var $217$r=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a_2,$198,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $217$0=$217$r;var $217$1=tempRet0;if (!__THREW__) { label=74;break; } else { label=38;break; }
 case 74: 
 var $st$1$0=(($__v)|0);
 HEAP32[(($st$1$0)>>2)]=$217$0;
 var $st$2$1=(($__v+4)|0);
 HEAP32[(($st$2$1)>>2)]=$217$1;
 var $219=HEAP8[($26)];
 var $220=$219&1;
 var $221=(($220<<24)>>24)==0;
 if($221){label=76;break;}else{label=75;break;}
 case 75: 
 var $223=HEAP32[(($30)>>2)];
 var $227=$223;label=77;break;
 case 76: 
 var $225=($219&255);
 var $226=$225>>>1;
 var $227=$226;label=77;break;
 case 77: 
 var $227;
 var $228=($227|0)==0;
 if($228){label=94;break;}else{label=78;break;}
 case 78: 
 var $230=($19|0)==($216|0);
 if($230){var $239=$219;label=82;break;}else{label=79;break;}
 case 79: 
 var $231=((($216)-(4))|0);
 var $232=($231>>>0)>($19>>>0);
 if($232){var $_012_i_i_i=$19;var $233=$231;label=80;break;}else{var $239=$219;label=82;break;}
 case 80: 
 var $233;
 var $_012_i_i_i;
 var $234=HEAP32[(($_012_i_i_i)>>2)];
 var $235=HEAP32[(($233)>>2)];
 HEAP32[(($_012_i_i_i)>>2)]=$235;
 HEAP32[(($233)>>2)]=$234;
 var $236=(($_012_i_i_i+4)|0);
 var $237=((($233)-(4))|0);
 var $238=($236>>>0)<($237>>>0);
 if($238){var $_012_i_i_i=$236;var $233=$237;label=80;break;}else{label=81;break;}
 case 81: 
 var $_pre_i=HEAP8[($26)];
 var $239=$_pre_i;label=82;break;
 case 82: 
 var $239;
 var $240=$239&1;
 var $241=(($240<<24)>>24)==0;
 if($241){label=84;break;}else{label=83;break;}
 case 83: 
 var $243=(($__grouping+8)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=HEAP32[(($30)>>2)];
 var $252=$245;var $251=$244;label=85;break;
 case 84: 
 var $247=$__grouping;
 var $248=(($247+1)|0);
 var $249=($239&255);
 var $250=$249>>>1;
 var $252=$250;var $251=$248;label=85;break;
 case 85: 
 var $251;
 var $252;
 var $253=((($216)-(4))|0);
 var $254=($253>>>0)>($19>>>0);
 var $255=HEAP8[($251)];
 var $_not9_i=(($255<<24)>>24)<1;
 var $256=(($255<<24)>>24)==127;
 var $or_cond210_i=$_not9_i|$256;
 if($254){label=86;break;}else{var $_lcssa6_i=$255;var $or_cond2_lcssa_i=$or_cond210_i;label=91;break;}
 case 86: 
 var $257=(($251+$252)|0);
 var $258=$257;
 var $__ig_011_i=$251;var $__r_012_i=$19;var $260=$255;var $or_cond213_i=$or_cond210_i;label=87;break;
 case 87: 
 var $or_cond213_i;
 var $260;
 var $__r_012_i;
 var $__ig_011_i;
 if($or_cond213_i){label=90;break;}else{label=88;break;}
 case 88: 
 var $262=(($260<<24)>>24);
 var $263=HEAP32[(($__r_012_i)>>2)];
 var $264=($262|0)==($263|0);
 if($264){label=90;break;}else{label=89;break;}
 case 89: 
 HEAP32[(($__err)>>2)]=4;
 label=94;break;
 case 90: 
 var $267=$__ig_011_i;
 var $268=((($258)-($267))|0);
 var $269=($268|0)>1;
 var $270=(($__ig_011_i+1)|0);
 var $___ig_0_i=($269?$270:$__ig_011_i);
 var $271=(($__r_012_i+4)|0);
 var $272=($271>>>0)<($253>>>0);
 var $273=HEAP8[($___ig_0_i)];
 var $_not_i=(($273<<24)>>24)<1;
 var $274=(($273<<24)>>24)==127;
 var $or_cond2_i=$_not_i|$274;
 if($272){var $__ig_011_i=$___ig_0_i;var $__r_012_i=$271;var $260=$273;var $or_cond213_i=$or_cond2_i;label=87;break;}else{var $_lcssa6_i=$273;var $or_cond2_lcssa_i=$or_cond2_i;label=91;break;}
 case 91: 
 var $or_cond2_lcssa_i;
 var $_lcssa6_i;
 if($or_cond2_lcssa_i){label=94;break;}else{label=92;break;}
 case 92: 
 var $276=(($_lcssa6_i<<24)>>24);
 var $277=HEAP32[(($253)>>2)];
 var $278=((($277)-(1))|0);
 var $279=($278>>>0)<($276>>>0);
 if($279){label=94;break;}else{label=93;break;}
 case 93: 
 HEAP32[(($__err)>>2)]=4;
 label=94;break;
 case 94: 
 var $281=($48|0)==0;
 if($281){var $295=0;label=100;break;}else{label=95;break;}
 case 95: 
 var $283=(($48+12)|0);
 var $284=HEAP32[(($283)>>2)];
 var $285=(($48+16)|0);
 var $286=HEAP32[(($285)>>2)];
 var $287=($284|0)==($286|0);
 if($287){label=96;break;}else{var $295=$48;label=100;break;}
 case 96: 
 var $288=$48;
 var $289=HEAP32[(($288)>>2)];
 var $290=(($289+36)|0);
 var $291=HEAP32[(($290)>>2)];
 var $292=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$291]($48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=97;break; } else { label=38;break; }
 case 97: 
 var $293=($292|0)==-1;
 if($293){label=99;break;}else{label=98;break;}
 case 98: 
 var $_pre_i_i_i=HEAP32[(($20)>>2)];
 var $295=$_pre_i_i_i;label=100;break;
 case 99: 
 HEAP32[(($20)>>2)]=0;
 var $295=0;label=100;break;
 case 100: 
 var $295;
 var $296=($295|0)==0;
 var $297=($_pre_i2_i_i|0)==0;
 if($297){label=106;break;}else{label=101;break;}
 case 101: 
 var $299=(($_pre_i2_i_i+12)|0);
 var $300=HEAP32[(($299)>>2)];
 var $301=(($_pre_i2_i_i+16)|0);
 var $302=HEAP32[(($301)>>2)];
 var $303=($300|0)==($302|0);
 if($303){label=103;break;}else{label=102;break;}
 case 102: 
 if($296){label=109;break;}else{label=108;break;}
 case 103: 
 var $304=$_pre_i2_i_i;
 var $305=HEAP32[(($304)>>2)];
 var $306=(($305+36)|0);
 var $307=HEAP32[(($306)>>2)];
 var $308=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$307]($_pre_i2_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=104;break; } else { label=38;break; }
 case 104: 
 var $309=($308|0)==-1;
 if($309){label=105;break;}else{label=107;break;}
 case 105: 
 HEAP32[(($21)>>2)]=0;
 label=106;break;
 case 106: 
 if($296){label=108;break;}else{label=109;break;}
 case 107: 
 var $311=($_pre_i2_i_i|0)==0;
 var $tmp_i_i=$296^$311;
 if($tmp_i_i){label=109;break;}else{label=108;break;}
 case 108: 
 var $313=HEAP32[(($__err)>>2)];
 var $314=$313|2;
 HEAP32[(($__err)>>2)]=$314;
 label=109;break;
 case 109: 
 var $316=HEAP32[(($20)>>2)];
 var $317=(($agg_result)|0);
 HEAP32[(($317)>>2)]=$316;
 var $$etemp$3$0=160;
 var $$etemp$3$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(32);
 var $__thousands_sep=(sp)+(40);
 var $__grouping=(sp)+(48);
 var $__buf=(sp)+(64);
 var $__a_end=(sp)+(80);
 var $__g=(sp)+(88);
 var $__g_end=(sp)+(248);
 var $__dc=(sp)+(256);
 var $__in_units=(sp)+(264);
 var $__exp=(sp)+(272);
 var $0=(($__atoms)|0);
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$0,$__decimal_point,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=34;break; }
 case 2: 
 var $1=HEAP8[($this2_i_i_i)];
 var $2=$1&1;
 var $3=(($2<<24)>>24)==0;
 if($3){label=4;break;}else{label=3;break;}
 case 3: 
 var $5=(($__buf+8)|0);
 var $6=HEAP32[(($5)>>2)];
 var $_pre31=$__buf;
 var $_pre32=(($_pre31+1)|0);
 var $10=$6;var $_pre_phi33=$_pre32;var $_pre_phi35=$5;label=5;break;
 case 4: 
 var $8=$__buf;
 var $9=(($8+1)|0);
 var $_pre34=(($__buf+8)|0);
 var $10=$9;var $_pre_phi33=$9;var $_pre_phi35=$_pre34;label=5;break;
 case 5: 
 var $_pre_phi35;
 var $_pre_phi33;
 var $10;
 HEAP32[(($__a_end)>>2)]=$10;
 var $11=$__g;
 var $$etemp$0$0=160;
 var $$etemp$0$1=0;

 var $12=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $13=(($__b)|0);
 var $14=(($__e)|0);
 var $15=(($__buf)|0);
 var $16=(($__buf+4)|0);
 var $17=HEAP8[($__decimal_point)];
 var $18=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($13)>>2)];
 var $__a_0=$10;var $_pre_i_i_i5=$_pre;label=6;break;
 case 6: 
 var $_pre_i_i_i5;
 var $__a_0;
 var $19=($_pre_i_i_i5|0)==0;
 if($19){var $33=0;label=11;break;}else{label=7;break;}
 case 7: 
 var $21=(($_pre_i_i_i5+12)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($_pre_i_i_i5+16)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($22|0)==($24|0);
 if($25){label=8;break;}else{var $33=$_pre_i_i_i5;label=11;break;}
 case 8: 
 var $26=$_pre_i_i_i5;
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+36)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$29]($_pre_i_i_i5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=33;break; }
 case 9: 
 var $31=($30|0)==-1;
 if($31){label=10;break;}else{var $33=$_pre_i_i_i5;label=11;break;}
 case 10: 
 HEAP32[(($13)>>2)]=0;
 var $33=0;label=11;break;
 case 11: 
 var $33;
 var $34=($33|0)==0;
 var $35=HEAP32[(($14)>>2)];
 var $36=($35|0)==0;
 if($36){label=17;break;}else{label=12;break;}
 case 12: 
 var $38=(($35+12)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($35+16)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($39|0)==($41|0);
 if($42){label=14;break;}else{label=13;break;}
 case 13: 
 if($34){var $52=$35;label=19;break;}else{var $__a_2=$__a_0;var $_pre_i2_i_i=$35;label=44;break;}
 case 14: 
 var $43=$35;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+36)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$46]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=33;break; }
 case 15: 
 var $48=($47|0)==-1;
 if($48){label=16;break;}else{label=18;break;}
 case 16: 
 HEAP32[(($14)>>2)]=0;
 label=17;break;
 case 17: 
 if($34){var $__a_2=$__a_0;var $_pre_i2_i_i=0;label=44;break;}else{var $52=0;label=19;break;}
 case 18: 
 if($34){var $52=$35;label=19;break;}else{var $__a_2=$__a_0;var $_pre_i2_i_i=$35;label=44;break;}
 case 19: 
 var $52;
 var $53=HEAP32[(($__a_end)>>2)];
 var $54=$53;
 var $55=$__a_0;
 var $56=((($54)-($55))|0);
 var $57=HEAP8[($this2_i_i_i)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=21;break;}else{label=20;break;}
 case 20: 
 var $61=HEAP32[(($16)>>2)];
 var $65=$61;label=22;break;
 case 21: 
 var $63=($57&255);
 var $64=$63>>>1;
 var $65=$64;label=22;break;
 case 22: 
 var $65;
 var $66=($56|0)==($65|0);
 if($66){label=23;break;}else{var $__a_1=$__a_0;label=36;break;}
 case 23: 
 if($59){label=25;break;}else{label=24;break;}
 case 24: 
 var $69=HEAP32[(($16)>>2)];
 var $76=$69;var $75=$69;label=26;break;
 case 25: 
 var $71=($57&255);
 var $72=$71>>>1;
 var $73=($57&255);
 var $74=$73>>>1;
 var $76=$74;var $75=$72;label=26;break;
 case 26: 
 var $75;
 var $76;
 var $77=$76<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$77,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=33;break; }
 case 27: 
 var $78=HEAP8[($this2_i_i_i)];
 var $79=$78&1;
 var $80=(($79<<24)>>24)==0;
 if($80){var $84=10;label=29;break;}else{label=28;break;}
 case 28: 
 var $82=HEAP32[(($15)>>2)];
 var $83=$82&-2;
 var $phitmp_i20=((($83)-(1))|0);
 var $84=$phitmp_i20;label=29;break;
 case 29: 
 var $84;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$84,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=33;break; }
 case 30: 
 var $85=HEAP8[($this2_i_i_i)];
 var $86=$85&1;
 var $87=(($86<<24)>>24)==0;
 if($87){var $90=$_pre_phi33;label=32;break;}else{label=31;break;}
 case 31: 
 var $89=HEAP32[(($_pre_phi35)>>2)];
 var $90=$89;label=32;break;
 case 32: 
 var $90;
 var $91=(($90+$75)|0);
 HEAP32[(($__a_end)>>2)]=$91;
 var $__a_1=$90;label=36;break;
 case 33: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=35;break;
 case 34: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=35;break;
 case 35: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 36: 
 var $__a_1;
 var $94=(($33+12)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=(($33+16)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=($95|0)==($97|0);
 if($98){label=37;break;}else{label=39;break;}
 case 37: 
 var $100=$33;
 var $101=HEAP32[(($100)>>2)];
 var $102=(($101+36)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$103]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=33;break; }
 case 38: 
 var $extract_t_i=(($104)&255);
 var $_0_i_off0_i=$extract_t_i;label=40;break;
 case 39: 
 var $106=HEAP8[($95)];
 var $_0_i_off0_i=$106;label=40;break;
 case 40: 
 var $_0_i_off0_i;
 var $108=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_i_off0_i,$__in_units,$__exp,$__a_1,$__a_end,$17,$18,$__grouping,$12,$__g_end,$__dc,$0);
 var $109=($108|0)==0;
 if($109){label=41;break;}else{var $__a_2=$__a_1;var $_pre_i2_i_i=$52;label=44;break;}
 case 41: 
 var $111=HEAP32[(($94)>>2)];
 var $112=HEAP32[(($96)>>2)];
 var $113=($111|0)==($112|0);
 if($113){label=42;break;}else{label=43;break;}
 case 42: 
 var $115=$33;
 var $116=HEAP32[(($115)>>2)];
 var $117=(($116+40)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$118]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i5=$33;label=6;break; } else { label=33;break; }
 case 43: 
 var $121=(($111+1)|0);
 HEAP32[(($94)>>2)]=$121;
 var $__a_0=$__a_1;var $_pre_i_i_i5=$33;label=6;break;
 case 44: 
 var $_pre_i2_i_i;
 var $__a_2;
 var $123=$__grouping;
 var $124=HEAP8[($123)];
 var $125=$124&1;
 var $126=(($125<<24)>>24)==0;
 if($126){label=46;break;}else{label=45;break;}
 case 45: 
 var $128=(($__grouping+4)|0);
 var $129=HEAP32[(($128)>>2)];
 var $133=$129;label=47;break;
 case 46: 
 var $131=($124&255);
 var $132=$131>>>1;
 var $133=$132;label=47;break;
 case 47: 
 var $133;
 var $134=($133|0)==0;
 var $135=HEAP8[($__in_units)];
 var $136=(($135<<24)>>24)==0;
 var $or_cond=$134|$136;
 if($or_cond){label=50;break;}else{label=48;break;}
 case 48: 
 var $138=HEAP32[(($__g_end)>>2)];
 var $139=$138;
 var $140=$__g;
 var $141=((($139)-($140))|0);
 var $142=($141|0)<160;
 if($142){label=49;break;}else{label=50;break;}
 case 49: 
 var $144=HEAP32[(($__dc)>>2)];
 var $145=(($138+4)|0);
 HEAP32[(($__g_end)>>2)]=$145;
 HEAP32[(($138)>>2)]=$144;
 label=50;break;
 case 50: 
 var $147=HEAP32[(($__a_end)>>2)];
 var $148=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a_2,$147,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=34;break; }
 case 51: 
 HEAPF32[(($__v)>>2)]=$148;
 var $150=HEAP32[(($__g_end)>>2)];
 var $151=HEAP8[($123)];
 var $152=$151&1;
 var $153=(($152<<24)>>24)==0;
 if($153){label=53;break;}else{label=52;break;}
 case 52: 
 var $155=(($__grouping+4)|0);
 var $156=HEAP32[(($155)>>2)];
 var $160=$156;label=54;break;
 case 53: 
 var $158=($151&255);
 var $159=$158>>>1;
 var $160=$159;label=54;break;
 case 54: 
 var $160;
 var $161=($160|0)==0;
 if($161){label=71;break;}else{label=55;break;}
 case 55: 
 var $163=($12|0)==($150|0);
 if($163){var $172=$151;label=59;break;}else{label=56;break;}
 case 56: 
 var $164=((($150)-(4))|0);
 var $165=($164>>>0)>($12>>>0);
 if($165){var $_012_i_i_i=$12;var $166=$164;label=57;break;}else{var $172=$151;label=59;break;}
 case 57: 
 var $166;
 var $_012_i_i_i;
 var $167=HEAP32[(($_012_i_i_i)>>2)];
 var $168=HEAP32[(($166)>>2)];
 HEAP32[(($_012_i_i_i)>>2)]=$168;
 HEAP32[(($166)>>2)]=$167;
 var $169=(($_012_i_i_i+4)|0);
 var $170=((($166)-(4))|0);
 var $171=($169>>>0)<($170>>>0);
 if($171){var $_012_i_i_i=$169;var $166=$170;label=57;break;}else{label=58;break;}
 case 58: 
 var $_pre_i=HEAP8[($123)];
 var $172=$_pre_i;label=59;break;
 case 59: 
 var $172;
 var $173=$172&1;
 var $174=(($173<<24)>>24)==0;
 if($174){label=61;break;}else{label=60;break;}
 case 60: 
 var $176=(($__grouping+8)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($__grouping+4)|0);
 var $179=HEAP32[(($178)>>2)];
 var $186=$179;var $185=$177;label=62;break;
 case 61: 
 var $181=$__grouping;
 var $182=(($181+1)|0);
 var $183=($172&255);
 var $184=$183>>>1;
 var $186=$184;var $185=$182;label=62;break;
 case 62: 
 var $185;
 var $186;
 var $187=((($150)-(4))|0);
 var $188=($187>>>0)>($12>>>0);
 var $189=HEAP8[($185)];
 var $_not9_i=(($189<<24)>>24)<1;
 var $190=(($189<<24)>>24)==127;
 var $or_cond210_i=$_not9_i|$190;
 if($188){label=63;break;}else{var $_lcssa6_i=$189;var $or_cond2_lcssa_i=$or_cond210_i;label=68;break;}
 case 63: 
 var $191=(($185+$186)|0);
 var $192=$191;
 var $__ig_011_i=$185;var $__r_012_i=$12;var $194=$189;var $or_cond213_i=$or_cond210_i;label=64;break;
 case 64: 
 var $or_cond213_i;
 var $194;
 var $__r_012_i;
 var $__ig_011_i;
 if($or_cond213_i){label=67;break;}else{label=65;break;}
 case 65: 
 var $196=(($194<<24)>>24);
 var $197=HEAP32[(($__r_012_i)>>2)];
 var $198=($196|0)==($197|0);
 if($198){label=67;break;}else{label=66;break;}
 case 66: 
 HEAP32[(($__err)>>2)]=4;
 label=71;break;
 case 67: 
 var $201=$__ig_011_i;
 var $202=((($192)-($201))|0);
 var $203=($202|0)>1;
 var $204=(($__ig_011_i+1)|0);
 var $___ig_0_i=($203?$204:$__ig_011_i);
 var $205=(($__r_012_i+4)|0);
 var $206=($205>>>0)<($187>>>0);
 var $207=HEAP8[($___ig_0_i)];
 var $_not_i=(($207<<24)>>24)<1;
 var $208=(($207<<24)>>24)==127;
 var $or_cond2_i=$_not_i|$208;
 if($206){var $__ig_011_i=$___ig_0_i;var $__r_012_i=$205;var $194=$207;var $or_cond213_i=$or_cond2_i;label=64;break;}else{var $_lcssa6_i=$207;var $or_cond2_lcssa_i=$or_cond2_i;label=68;break;}
 case 68: 
 var $or_cond2_lcssa_i;
 var $_lcssa6_i;
 if($or_cond2_lcssa_i){label=71;break;}else{label=69;break;}
 case 69: 
 var $210=(($_lcssa6_i<<24)>>24);
 var $211=HEAP32[(($187)>>2)];
 var $212=((($211)-(1))|0);
 var $213=($212>>>0)<($210>>>0);
 if($213){label=71;break;}else{label=70;break;}
 case 70: 
 HEAP32[(($__err)>>2)]=4;
 label=71;break;
 case 71: 
 var $215=($33|0)==0;
 if($215){var $229=0;label=77;break;}else{label=72;break;}
 case 72: 
 var $217=(($33+12)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=(($33+16)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=($218|0)==($220|0);
 if($221){label=73;break;}else{var $229=$33;label=77;break;}
 case 73: 
 var $222=$33;
 var $223=HEAP32[(($222)>>2)];
 var $224=(($223+36)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$225]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=34;break; }
 case 74: 
 var $227=($226|0)==-1;
 if($227){label=76;break;}else{label=75;break;}
 case 75: 
 var $_pre_i_i_i=HEAP32[(($13)>>2)];
 var $229=$_pre_i_i_i;label=77;break;
 case 76: 
 HEAP32[(($13)>>2)]=0;
 var $229=0;label=77;break;
 case 77: 
 var $229;
 var $230=($229|0)==0;
 var $231=($_pre_i2_i_i|0)==0;
 if($231){label=83;break;}else{label=78;break;}
 case 78: 
 var $233=(($_pre_i2_i_i+12)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=(($_pre_i2_i_i+16)|0);
 var $236=HEAP32[(($235)>>2)];
 var $237=($234|0)==($236|0);
 if($237){label=80;break;}else{label=79;break;}
 case 79: 
 if($230){label=86;break;}else{label=85;break;}
 case 80: 
 var $238=$_pre_i2_i_i;
 var $239=HEAP32[(($238)>>2)];
 var $240=(($239+36)|0);
 var $241=HEAP32[(($240)>>2)];
 var $242=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$241]($_pre_i2_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=81;break; } else { label=34;break; }
 case 81: 
 var $243=($242|0)==-1;
 if($243){label=82;break;}else{label=84;break;}
 case 82: 
 HEAP32[(($14)>>2)]=0;
 label=83;break;
 case 83: 
 if($230){label=85;break;}else{label=86;break;}
 case 84: 
 var $245=($_pre_i2_i_i|0)==0;
 var $tmp_i_i=$230^$245;
 if($tmp_i_i){label=86;break;}else{label=85;break;}
 case 85: 
 var $247=HEAP32[(($__err)>>2)];
 var $248=$247|2;
 HEAP32[(($__err)>>2)]=$248;
 label=86;break;
 case 86: 
 var $250=HEAP32[(($13)>>2)];
 var $251=(($agg_result)|0);
 HEAP32[(($251)>>2)]=$250;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(32);
 var $__thousands_sep=(sp)+(40);
 var $__grouping=(sp)+(48);
 var $__buf=(sp)+(64);
 var $__a_end=(sp)+(80);
 var $__g=(sp)+(88);
 var $__g_end=(sp)+(248);
 var $__dc=(sp)+(256);
 var $__in_units=(sp)+(264);
 var $__exp=(sp)+(272);
 var $0=(($__atoms)|0);
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$0,$__decimal_point,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=34;break; }
 case 2: 
 var $1=HEAP8[($this2_i_i_i)];
 var $2=$1&1;
 var $3=(($2<<24)>>24)==0;
 if($3){label=4;break;}else{label=3;break;}
 case 3: 
 var $5=(($__buf+8)|0);
 var $6=HEAP32[(($5)>>2)];
 var $_pre31=$__buf;
 var $_pre32=(($_pre31+1)|0);
 var $10=$6;var $_pre_phi33=$_pre32;var $_pre_phi35=$5;label=5;break;
 case 4: 
 var $8=$__buf;
 var $9=(($8+1)|0);
 var $_pre34=(($__buf+8)|0);
 var $10=$9;var $_pre_phi33=$9;var $_pre_phi35=$_pre34;label=5;break;
 case 5: 
 var $_pre_phi35;
 var $_pre_phi33;
 var $10;
 HEAP32[(($__a_end)>>2)]=$10;
 var $11=$__g;
 var $$etemp$0$0=160;
 var $$etemp$0$1=0;

 var $12=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $13=(($__b)|0);
 var $14=(($__e)|0);
 var $15=(($__buf)|0);
 var $16=(($__buf+4)|0);
 var $17=HEAP8[($__decimal_point)];
 var $18=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($13)>>2)];
 var $__a_0=$10;var $_pre_i_i_i5=$_pre;label=6;break;
 case 6: 
 var $_pre_i_i_i5;
 var $__a_0;
 var $19=($_pre_i_i_i5|0)==0;
 if($19){var $33=0;label=11;break;}else{label=7;break;}
 case 7: 
 var $21=(($_pre_i_i_i5+12)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($_pre_i_i_i5+16)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($22|0)==($24|0);
 if($25){label=8;break;}else{var $33=$_pre_i_i_i5;label=11;break;}
 case 8: 
 var $26=$_pre_i_i_i5;
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+36)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$29]($_pre_i_i_i5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=33;break; }
 case 9: 
 var $31=($30|0)==-1;
 if($31){label=10;break;}else{var $33=$_pre_i_i_i5;label=11;break;}
 case 10: 
 HEAP32[(($13)>>2)]=0;
 var $33=0;label=11;break;
 case 11: 
 var $33;
 var $34=($33|0)==0;
 var $35=HEAP32[(($14)>>2)];
 var $36=($35|0)==0;
 if($36){label=17;break;}else{label=12;break;}
 case 12: 
 var $38=(($35+12)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($35+16)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($39|0)==($41|0);
 if($42){label=14;break;}else{label=13;break;}
 case 13: 
 if($34){var $52=$35;label=19;break;}else{var $__a_2=$__a_0;var $_pre_i2_i_i=$35;label=44;break;}
 case 14: 
 var $43=$35;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+36)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$46]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=33;break; }
 case 15: 
 var $48=($47|0)==-1;
 if($48){label=16;break;}else{label=18;break;}
 case 16: 
 HEAP32[(($14)>>2)]=0;
 label=17;break;
 case 17: 
 if($34){var $__a_2=$__a_0;var $_pre_i2_i_i=0;label=44;break;}else{var $52=0;label=19;break;}
 case 18: 
 if($34){var $52=$35;label=19;break;}else{var $__a_2=$__a_0;var $_pre_i2_i_i=$35;label=44;break;}
 case 19: 
 var $52;
 var $53=HEAP32[(($__a_end)>>2)];
 var $54=$53;
 var $55=$__a_0;
 var $56=((($54)-($55))|0);
 var $57=HEAP8[($this2_i_i_i)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=21;break;}else{label=20;break;}
 case 20: 
 var $61=HEAP32[(($16)>>2)];
 var $65=$61;label=22;break;
 case 21: 
 var $63=($57&255);
 var $64=$63>>>1;
 var $65=$64;label=22;break;
 case 22: 
 var $65;
 var $66=($56|0)==($65|0);
 if($66){label=23;break;}else{var $__a_1=$__a_0;label=36;break;}
 case 23: 
 if($59){label=25;break;}else{label=24;break;}
 case 24: 
 var $69=HEAP32[(($16)>>2)];
 var $76=$69;var $75=$69;label=26;break;
 case 25: 
 var $71=($57&255);
 var $72=$71>>>1;
 var $73=($57&255);
 var $74=$73>>>1;
 var $76=$74;var $75=$72;label=26;break;
 case 26: 
 var $75;
 var $76;
 var $77=$76<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$77,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=33;break; }
 case 27: 
 var $78=HEAP8[($this2_i_i_i)];
 var $79=$78&1;
 var $80=(($79<<24)>>24)==0;
 if($80){var $84=10;label=29;break;}else{label=28;break;}
 case 28: 
 var $82=HEAP32[(($15)>>2)];
 var $83=$82&-2;
 var $phitmp_i20=((($83)-(1))|0);
 var $84=$phitmp_i20;label=29;break;
 case 29: 
 var $84;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$84,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=33;break; }
 case 30: 
 var $85=HEAP8[($this2_i_i_i)];
 var $86=$85&1;
 var $87=(($86<<24)>>24)==0;
 if($87){var $90=$_pre_phi33;label=32;break;}else{label=31;break;}
 case 31: 
 var $89=HEAP32[(($_pre_phi35)>>2)];
 var $90=$89;label=32;break;
 case 32: 
 var $90;
 var $91=(($90+$75)|0);
 HEAP32[(($__a_end)>>2)]=$91;
 var $__a_1=$90;label=36;break;
 case 33: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=35;break;
 case 34: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=35;break;
 case 35: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 36: 
 var $__a_1;
 var $94=(($33+12)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=(($33+16)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=($95|0)==($97|0);
 if($98){label=37;break;}else{label=39;break;}
 case 37: 
 var $100=$33;
 var $101=HEAP32[(($100)>>2)];
 var $102=(($101+36)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$103]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=33;break; }
 case 38: 
 var $extract_t_i=(($104)&255);
 var $_0_i_off0_i=$extract_t_i;label=40;break;
 case 39: 
 var $106=HEAP8[($95)];
 var $_0_i_off0_i=$106;label=40;break;
 case 40: 
 var $_0_i_off0_i;
 var $108=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_i_off0_i,$__in_units,$__exp,$__a_1,$__a_end,$17,$18,$__grouping,$12,$__g_end,$__dc,$0);
 var $109=($108|0)==0;
 if($109){label=41;break;}else{var $__a_2=$__a_1;var $_pre_i2_i_i=$52;label=44;break;}
 case 41: 
 var $111=HEAP32[(($94)>>2)];
 var $112=HEAP32[(($96)>>2)];
 var $113=($111|0)==($112|0);
 if($113){label=42;break;}else{label=43;break;}
 case 42: 
 var $115=$33;
 var $116=HEAP32[(($115)>>2)];
 var $117=(($116+40)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$118]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i5=$33;label=6;break; } else { label=33;break; }
 case 43: 
 var $121=(($111+1)|0);
 HEAP32[(($94)>>2)]=$121;
 var $__a_0=$__a_1;var $_pre_i_i_i5=$33;label=6;break;
 case 44: 
 var $_pre_i2_i_i;
 var $__a_2;
 var $123=$__grouping;
 var $124=HEAP8[($123)];
 var $125=$124&1;
 var $126=(($125<<24)>>24)==0;
 if($126){label=46;break;}else{label=45;break;}
 case 45: 
 var $128=(($__grouping+4)|0);
 var $129=HEAP32[(($128)>>2)];
 var $133=$129;label=47;break;
 case 46: 
 var $131=($124&255);
 var $132=$131>>>1;
 var $133=$132;label=47;break;
 case 47: 
 var $133;
 var $134=($133|0)==0;
 var $135=HEAP8[($__in_units)];
 var $136=(($135<<24)>>24)==0;
 var $or_cond=$134|$136;
 if($or_cond){label=50;break;}else{label=48;break;}
 case 48: 
 var $138=HEAP32[(($__g_end)>>2)];
 var $139=$138;
 var $140=$__g;
 var $141=((($139)-($140))|0);
 var $142=($141|0)<160;
 if($142){label=49;break;}else{label=50;break;}
 case 49: 
 var $144=HEAP32[(($__dc)>>2)];
 var $145=(($138+4)|0);
 HEAP32[(($__g_end)>>2)]=$145;
 HEAP32[(($138)>>2)]=$144;
 label=50;break;
 case 50: 
 var $147=HEAP32[(($__a_end)>>2)];
 var $148=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a_2,$147,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=34;break; }
 case 51: 
 HEAPF64[(($__v)>>3)]=$148;
 var $150=HEAP32[(($__g_end)>>2)];
 var $151=HEAP8[($123)];
 var $152=$151&1;
 var $153=(($152<<24)>>24)==0;
 if($153){label=53;break;}else{label=52;break;}
 case 52: 
 var $155=(($__grouping+4)|0);
 var $156=HEAP32[(($155)>>2)];
 var $160=$156;label=54;break;
 case 53: 
 var $158=($151&255);
 var $159=$158>>>1;
 var $160=$159;label=54;break;
 case 54: 
 var $160;
 var $161=($160|0)==0;
 if($161){label=71;break;}else{label=55;break;}
 case 55: 
 var $163=($12|0)==($150|0);
 if($163){var $172=$151;label=59;break;}else{label=56;break;}
 case 56: 
 var $164=((($150)-(4))|0);
 var $165=($164>>>0)>($12>>>0);
 if($165){var $_012_i_i_i=$12;var $166=$164;label=57;break;}else{var $172=$151;label=59;break;}
 case 57: 
 var $166;
 var $_012_i_i_i;
 var $167=HEAP32[(($_012_i_i_i)>>2)];
 var $168=HEAP32[(($166)>>2)];
 HEAP32[(($_012_i_i_i)>>2)]=$168;
 HEAP32[(($166)>>2)]=$167;
 var $169=(($_012_i_i_i+4)|0);
 var $170=((($166)-(4))|0);
 var $171=($169>>>0)<($170>>>0);
 if($171){var $_012_i_i_i=$169;var $166=$170;label=57;break;}else{label=58;break;}
 case 58: 
 var $_pre_i=HEAP8[($123)];
 var $172=$_pre_i;label=59;break;
 case 59: 
 var $172;
 var $173=$172&1;
 var $174=(($173<<24)>>24)==0;
 if($174){label=61;break;}else{label=60;break;}
 case 60: 
 var $176=(($__grouping+8)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($__grouping+4)|0);
 var $179=HEAP32[(($178)>>2)];
 var $186=$179;var $185=$177;label=62;break;
 case 61: 
 var $181=$__grouping;
 var $182=(($181+1)|0);
 var $183=($172&255);
 var $184=$183>>>1;
 var $186=$184;var $185=$182;label=62;break;
 case 62: 
 var $185;
 var $186;
 var $187=((($150)-(4))|0);
 var $188=($187>>>0)>($12>>>0);
 var $189=HEAP8[($185)];
 var $_not9_i=(($189<<24)>>24)<1;
 var $190=(($189<<24)>>24)==127;
 var $or_cond210_i=$_not9_i|$190;
 if($188){label=63;break;}else{var $_lcssa6_i=$189;var $or_cond2_lcssa_i=$or_cond210_i;label=68;break;}
 case 63: 
 var $191=(($185+$186)|0);
 var $192=$191;
 var $__ig_011_i=$185;var $__r_012_i=$12;var $194=$189;var $or_cond213_i=$or_cond210_i;label=64;break;
 case 64: 
 var $or_cond213_i;
 var $194;
 var $__r_012_i;
 var $__ig_011_i;
 if($or_cond213_i){label=67;break;}else{label=65;break;}
 case 65: 
 var $196=(($194<<24)>>24);
 var $197=HEAP32[(($__r_012_i)>>2)];
 var $198=($196|0)==($197|0);
 if($198){label=67;break;}else{label=66;break;}
 case 66: 
 HEAP32[(($__err)>>2)]=4;
 label=71;break;
 case 67: 
 var $201=$__ig_011_i;
 var $202=((($192)-($201))|0);
 var $203=($202|0)>1;
 var $204=(($__ig_011_i+1)|0);
 var $___ig_0_i=($203?$204:$__ig_011_i);
 var $205=(($__r_012_i+4)|0);
 var $206=($205>>>0)<($187>>>0);
 var $207=HEAP8[($___ig_0_i)];
 var $_not_i=(($207<<24)>>24)<1;
 var $208=(($207<<24)>>24)==127;
 var $or_cond2_i=$_not_i|$208;
 if($206){var $__ig_011_i=$___ig_0_i;var $__r_012_i=$205;var $194=$207;var $or_cond213_i=$or_cond2_i;label=64;break;}else{var $_lcssa6_i=$207;var $or_cond2_lcssa_i=$or_cond2_i;label=68;break;}
 case 68: 
 var $or_cond2_lcssa_i;
 var $_lcssa6_i;
 if($or_cond2_lcssa_i){label=71;break;}else{label=69;break;}
 case 69: 
 var $210=(($_lcssa6_i<<24)>>24);
 var $211=HEAP32[(($187)>>2)];
 var $212=((($211)-(1))|0);
 var $213=($212>>>0)<($210>>>0);
 if($213){label=71;break;}else{label=70;break;}
 case 70: 
 HEAP32[(($__err)>>2)]=4;
 label=71;break;
 case 71: 
 var $215=($33|0)==0;
 if($215){var $229=0;label=77;break;}else{label=72;break;}
 case 72: 
 var $217=(($33+12)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=(($33+16)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=($218|0)==($220|0);
 if($221){label=73;break;}else{var $229=$33;label=77;break;}
 case 73: 
 var $222=$33;
 var $223=HEAP32[(($222)>>2)];
 var $224=(($223+36)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$225]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=34;break; }
 case 74: 
 var $227=($226|0)==-1;
 if($227){label=76;break;}else{label=75;break;}
 case 75: 
 var $_pre_i_i_i=HEAP32[(($13)>>2)];
 var $229=$_pre_i_i_i;label=77;break;
 case 76: 
 HEAP32[(($13)>>2)]=0;
 var $229=0;label=77;break;
 case 77: 
 var $229;
 var $230=($229|0)==0;
 var $231=($_pre_i2_i_i|0)==0;
 if($231){label=83;break;}else{label=78;break;}
 case 78: 
 var $233=(($_pre_i2_i_i+12)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=(($_pre_i2_i_i+16)|0);
 var $236=HEAP32[(($235)>>2)];
 var $237=($234|0)==($236|0);
 if($237){label=80;break;}else{label=79;break;}
 case 79: 
 if($230){label=86;break;}else{label=85;break;}
 case 80: 
 var $238=$_pre_i2_i_i;
 var $239=HEAP32[(($238)>>2)];
 var $240=(($239+36)|0);
 var $241=HEAP32[(($240)>>2)];
 var $242=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$241]($_pre_i2_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=81;break; } else { label=34;break; }
 case 81: 
 var $243=($242|0)==-1;
 if($243){label=82;break;}else{label=84;break;}
 case 82: 
 HEAP32[(($14)>>2)]=0;
 label=83;break;
 case 83: 
 if($230){label=85;break;}else{label=86;break;}
 case 84: 
 var $245=($_pre_i2_i_i|0)==0;
 var $tmp_i_i=$230^$245;
 if($tmp_i_i){label=86;break;}else{label=85;break;}
 case 85: 
 var $247=HEAP32[(($__err)>>2)];
 var $248=$247|2;
 HEAP32[(($__err)>>2)]=$248;
 label=86;break;
 case 86: 
 var $250=HEAP32[(($13)>>2)];
 var $251=(($agg_result)|0);
 HEAP32[(($251)>>2)]=$250;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(32);
 var $__thousands_sep=(sp)+(40);
 var $__grouping=(sp)+(48);
 var $__buf=(sp)+(64);
 var $__a_end=(sp)+(80);
 var $__g=(sp)+(88);
 var $__g_end=(sp)+(248);
 var $__dc=(sp)+(256);
 var $__in_units=(sp)+(264);
 var $__exp=(sp)+(272);
 var $0=(($__atoms)|0);
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$0,$__decimal_point,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=34;break; }
 case 2: 
 var $1=HEAP8[($this2_i_i_i)];
 var $2=$1&1;
 var $3=(($2<<24)>>24)==0;
 if($3){label=4;break;}else{label=3;break;}
 case 3: 
 var $5=(($__buf+8)|0);
 var $6=HEAP32[(($5)>>2)];
 var $_pre31=$__buf;
 var $_pre32=(($_pre31+1)|0);
 var $10=$6;var $_pre_phi33=$_pre32;var $_pre_phi35=$5;label=5;break;
 case 4: 
 var $8=$__buf;
 var $9=(($8+1)|0);
 var $_pre34=(($__buf+8)|0);
 var $10=$9;var $_pre_phi33=$9;var $_pre_phi35=$_pre34;label=5;break;
 case 5: 
 var $_pre_phi35;
 var $_pre_phi33;
 var $10;
 HEAP32[(($__a_end)>>2)]=$10;
 var $11=$__g;
 var $$etemp$0$0=160;
 var $$etemp$0$1=0;

 var $12=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $13=(($__b)|0);
 var $14=(($__e)|0);
 var $15=(($__buf)|0);
 var $16=(($__buf+4)|0);
 var $17=HEAP8[($__decimal_point)];
 var $18=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($13)>>2)];
 var $__a_0=$10;var $_pre_i_i_i5=$_pre;label=6;break;
 case 6: 
 var $_pre_i_i_i5;
 var $__a_0;
 var $19=($_pre_i_i_i5|0)==0;
 if($19){var $33=0;label=11;break;}else{label=7;break;}
 case 7: 
 var $21=(($_pre_i_i_i5+12)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($_pre_i_i_i5+16)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($22|0)==($24|0);
 if($25){label=8;break;}else{var $33=$_pre_i_i_i5;label=11;break;}
 case 8: 
 var $26=$_pre_i_i_i5;
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+36)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$29]($_pre_i_i_i5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=33;break; }
 case 9: 
 var $31=($30|0)==-1;
 if($31){label=10;break;}else{var $33=$_pre_i_i_i5;label=11;break;}
 case 10: 
 HEAP32[(($13)>>2)]=0;
 var $33=0;label=11;break;
 case 11: 
 var $33;
 var $34=($33|0)==0;
 var $35=HEAP32[(($14)>>2)];
 var $36=($35|0)==0;
 if($36){label=17;break;}else{label=12;break;}
 case 12: 
 var $38=(($35+12)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($35+16)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($39|0)==($41|0);
 if($42){label=14;break;}else{label=13;break;}
 case 13: 
 if($34){var $52=$35;label=19;break;}else{var $__a_2=$__a_0;var $_pre_i2_i_i=$35;label=44;break;}
 case 14: 
 var $43=$35;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+36)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$46]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=33;break; }
 case 15: 
 var $48=($47|0)==-1;
 if($48){label=16;break;}else{label=18;break;}
 case 16: 
 HEAP32[(($14)>>2)]=0;
 label=17;break;
 case 17: 
 if($34){var $__a_2=$__a_0;var $_pre_i2_i_i=0;label=44;break;}else{var $52=0;label=19;break;}
 case 18: 
 if($34){var $52=$35;label=19;break;}else{var $__a_2=$__a_0;var $_pre_i2_i_i=$35;label=44;break;}
 case 19: 
 var $52;
 var $53=HEAP32[(($__a_end)>>2)];
 var $54=$53;
 var $55=$__a_0;
 var $56=((($54)-($55))|0);
 var $57=HEAP8[($this2_i_i_i)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=21;break;}else{label=20;break;}
 case 20: 
 var $61=HEAP32[(($16)>>2)];
 var $65=$61;label=22;break;
 case 21: 
 var $63=($57&255);
 var $64=$63>>>1;
 var $65=$64;label=22;break;
 case 22: 
 var $65;
 var $66=($56|0)==($65|0);
 if($66){label=23;break;}else{var $__a_1=$__a_0;label=36;break;}
 case 23: 
 if($59){label=25;break;}else{label=24;break;}
 case 24: 
 var $69=HEAP32[(($16)>>2)];
 var $76=$69;var $75=$69;label=26;break;
 case 25: 
 var $71=($57&255);
 var $72=$71>>>1;
 var $73=($57&255);
 var $74=$73>>>1;
 var $76=$74;var $75=$72;label=26;break;
 case 26: 
 var $75;
 var $76;
 var $77=$76<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$77,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=33;break; }
 case 27: 
 var $78=HEAP8[($this2_i_i_i)];
 var $79=$78&1;
 var $80=(($79<<24)>>24)==0;
 if($80){var $84=10;label=29;break;}else{label=28;break;}
 case 28: 
 var $82=HEAP32[(($15)>>2)];
 var $83=$82&-2;
 var $phitmp_i20=((($83)-(1))|0);
 var $84=$phitmp_i20;label=29;break;
 case 29: 
 var $84;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$84,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=33;break; }
 case 30: 
 var $85=HEAP8[($this2_i_i_i)];
 var $86=$85&1;
 var $87=(($86<<24)>>24)==0;
 if($87){var $90=$_pre_phi33;label=32;break;}else{label=31;break;}
 case 31: 
 var $89=HEAP32[(($_pre_phi35)>>2)];
 var $90=$89;label=32;break;
 case 32: 
 var $90;
 var $91=(($90+$75)|0);
 HEAP32[(($__a_end)>>2)]=$91;
 var $__a_1=$90;label=36;break;
 case 33: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=35;break;
 case 34: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=35;break;
 case 35: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 36: 
 var $__a_1;
 var $94=(($33+12)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=(($33+16)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=($95|0)==($97|0);
 if($98){label=37;break;}else{label=39;break;}
 case 37: 
 var $100=$33;
 var $101=HEAP32[(($100)>>2)];
 var $102=(($101+36)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$103]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=33;break; }
 case 38: 
 var $extract_t_i=(($104)&255);
 var $_0_i_off0_i=$extract_t_i;label=40;break;
 case 39: 
 var $106=HEAP8[($95)];
 var $_0_i_off0_i=$106;label=40;break;
 case 40: 
 var $_0_i_off0_i;
 var $108=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_i_off0_i,$__in_units,$__exp,$__a_1,$__a_end,$17,$18,$__grouping,$12,$__g_end,$__dc,$0);
 var $109=($108|0)==0;
 if($109){label=41;break;}else{var $__a_2=$__a_1;var $_pre_i2_i_i=$52;label=44;break;}
 case 41: 
 var $111=HEAP32[(($94)>>2)];
 var $112=HEAP32[(($96)>>2)];
 var $113=($111|0)==($112|0);
 if($113){label=42;break;}else{label=43;break;}
 case 42: 
 var $115=$33;
 var $116=HEAP32[(($115)>>2)];
 var $117=(($116+40)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$118]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i5=$33;label=6;break; } else { label=33;break; }
 case 43: 
 var $121=(($111+1)|0);
 HEAP32[(($94)>>2)]=$121;
 var $__a_0=$__a_1;var $_pre_i_i_i5=$33;label=6;break;
 case 44: 
 var $_pre_i2_i_i;
 var $__a_2;
 var $123=$__grouping;
 var $124=HEAP8[($123)];
 var $125=$124&1;
 var $126=(($125<<24)>>24)==0;
 if($126){label=46;break;}else{label=45;break;}
 case 45: 
 var $128=(($__grouping+4)|0);
 var $129=HEAP32[(($128)>>2)];
 var $133=$129;label=47;break;
 case 46: 
 var $131=($124&255);
 var $132=$131>>>1;
 var $133=$132;label=47;break;
 case 47: 
 var $133;
 var $134=($133|0)==0;
 var $135=HEAP8[($__in_units)];
 var $136=(($135<<24)>>24)==0;
 var $or_cond=$134|$136;
 if($or_cond){label=50;break;}else{label=48;break;}
 case 48: 
 var $138=HEAP32[(($__g_end)>>2)];
 var $139=$138;
 var $140=$__g;
 var $141=((($139)-($140))|0);
 var $142=($141|0)<160;
 if($142){label=49;break;}else{label=50;break;}
 case 49: 
 var $144=HEAP32[(($__dc)>>2)];
 var $145=(($138+4)|0);
 HEAP32[(($__g_end)>>2)]=$145;
 HEAP32[(($138)>>2)]=$144;
 label=50;break;
 case 50: 
 var $147=HEAP32[(($__a_end)>>2)];
 var $148=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a_2,$147,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=34;break; }
 case 51: 
 HEAPF64[(($__v)>>3)]=$148;
 var $150=HEAP32[(($__g_end)>>2)];
 var $151=HEAP8[($123)];
 var $152=$151&1;
 var $153=(($152<<24)>>24)==0;
 if($153){label=53;break;}else{label=52;break;}
 case 52: 
 var $155=(($__grouping+4)|0);
 var $156=HEAP32[(($155)>>2)];
 var $160=$156;label=54;break;
 case 53: 
 var $158=($151&255);
 var $159=$158>>>1;
 var $160=$159;label=54;break;
 case 54: 
 var $160;
 var $161=($160|0)==0;
 if($161){label=71;break;}else{label=55;break;}
 case 55: 
 var $163=($12|0)==($150|0);
 if($163){var $172=$151;label=59;break;}else{label=56;break;}
 case 56: 
 var $164=((($150)-(4))|0);
 var $165=($164>>>0)>($12>>>0);
 if($165){var $_012_i_i_i=$12;var $166=$164;label=57;break;}else{var $172=$151;label=59;break;}
 case 57: 
 var $166;
 var $_012_i_i_i;
 var $167=HEAP32[(($_012_i_i_i)>>2)];
 var $168=HEAP32[(($166)>>2)];
 HEAP32[(($_012_i_i_i)>>2)]=$168;
 HEAP32[(($166)>>2)]=$167;
 var $169=(($_012_i_i_i+4)|0);
 var $170=((($166)-(4))|0);
 var $171=($169>>>0)<($170>>>0);
 if($171){var $_012_i_i_i=$169;var $166=$170;label=57;break;}else{label=58;break;}
 case 58: 
 var $_pre_i=HEAP8[($123)];
 var $172=$_pre_i;label=59;break;
 case 59: 
 var $172;
 var $173=$172&1;
 var $174=(($173<<24)>>24)==0;
 if($174){label=61;break;}else{label=60;break;}
 case 60: 
 var $176=(($__grouping+8)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($__grouping+4)|0);
 var $179=HEAP32[(($178)>>2)];
 var $186=$179;var $185=$177;label=62;break;
 case 61: 
 var $181=$__grouping;
 var $182=(($181+1)|0);
 var $183=($172&255);
 var $184=$183>>>1;
 var $186=$184;var $185=$182;label=62;break;
 case 62: 
 var $185;
 var $186;
 var $187=((($150)-(4))|0);
 var $188=($187>>>0)>($12>>>0);
 var $189=HEAP8[($185)];
 var $_not9_i=(($189<<24)>>24)<1;
 var $190=(($189<<24)>>24)==127;
 var $or_cond210_i=$_not9_i|$190;
 if($188){label=63;break;}else{var $_lcssa6_i=$189;var $or_cond2_lcssa_i=$or_cond210_i;label=68;break;}
 case 63: 
 var $191=(($185+$186)|0);
 var $192=$191;
 var $__ig_011_i=$185;var $__r_012_i=$12;var $194=$189;var $or_cond213_i=$or_cond210_i;label=64;break;
 case 64: 
 var $or_cond213_i;
 var $194;
 var $__r_012_i;
 var $__ig_011_i;
 if($or_cond213_i){label=67;break;}else{label=65;break;}
 case 65: 
 var $196=(($194<<24)>>24);
 var $197=HEAP32[(($__r_012_i)>>2)];
 var $198=($196|0)==($197|0);
 if($198){label=67;break;}else{label=66;break;}
 case 66: 
 HEAP32[(($__err)>>2)]=4;
 label=71;break;
 case 67: 
 var $201=$__ig_011_i;
 var $202=((($192)-($201))|0);
 var $203=($202|0)>1;
 var $204=(($__ig_011_i+1)|0);
 var $___ig_0_i=($203?$204:$__ig_011_i);
 var $205=(($__r_012_i+4)|0);
 var $206=($205>>>0)<($187>>>0);
 var $207=HEAP8[($___ig_0_i)];
 var $_not_i=(($207<<24)>>24)<1;
 var $208=(($207<<24)>>24)==127;
 var $or_cond2_i=$_not_i|$208;
 if($206){var $__ig_011_i=$___ig_0_i;var $__r_012_i=$205;var $194=$207;var $or_cond213_i=$or_cond2_i;label=64;break;}else{var $_lcssa6_i=$207;var $or_cond2_lcssa_i=$or_cond2_i;label=68;break;}
 case 68: 
 var $or_cond2_lcssa_i;
 var $_lcssa6_i;
 if($or_cond2_lcssa_i){label=71;break;}else{label=69;break;}
 case 69: 
 var $210=(($_lcssa6_i<<24)>>24);
 var $211=HEAP32[(($187)>>2)];
 var $212=((($211)-(1))|0);
 var $213=($212>>>0)<($210>>>0);
 if($213){label=71;break;}else{label=70;break;}
 case 70: 
 HEAP32[(($__err)>>2)]=4;
 label=71;break;
 case 71: 
 var $215=($33|0)==0;
 if($215){var $229=0;label=77;break;}else{label=72;break;}
 case 72: 
 var $217=(($33+12)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=(($33+16)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=($218|0)==($220|0);
 if($221){label=73;break;}else{var $229=$33;label=77;break;}
 case 73: 
 var $222=$33;
 var $223=HEAP32[(($222)>>2)];
 var $224=(($223+36)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$225]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=34;break; }
 case 74: 
 var $227=($226|0)==-1;
 if($227){label=76;break;}else{label=75;break;}
 case 75: 
 var $_pre_i_i_i=HEAP32[(($13)>>2)];
 var $229=$_pre_i_i_i;label=77;break;
 case 76: 
 HEAP32[(($13)>>2)]=0;
 var $229=0;label=77;break;
 case 77: 
 var $229;
 var $230=($229|0)==0;
 var $231=($_pre_i2_i_i|0)==0;
 if($231){label=83;break;}else{label=78;break;}
 case 78: 
 var $233=(($_pre_i2_i_i+12)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=(($_pre_i2_i_i+16)|0);
 var $236=HEAP32[(($235)>>2)];
 var $237=($234|0)==($236|0);
 if($237){label=80;break;}else{label=79;break;}
 case 79: 
 if($230){label=86;break;}else{label=85;break;}
 case 80: 
 var $238=$_pre_i2_i_i;
 var $239=HEAP32[(($238)>>2)];
 var $240=(($239+36)|0);
 var $241=HEAP32[(($240)>>2)];
 var $242=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$241]($_pre_i2_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=81;break; } else { label=34;break; }
 case 81: 
 var $243=($242|0)==-1;
 if($243){label=82;break;}else{label=84;break;}
 case 82: 
 HEAP32[(($14)>>2)]=0;
 label=83;break;
 case 83: 
 if($230){label=85;break;}else{label=86;break;}
 case 84: 
 var $245=($_pre_i2_i_i|0)==0;
 var $tmp_i_i=$230^$245;
 if($tmp_i_i){label=86;break;}else{label=85;break;}
 case 85: 
 var $247=HEAP32[(($__err)>>2)];
 var $248=$247|2;
 HEAP32[(($__err)>>2)]=$248;
 label=86;break;
 case 86: 
 var $250=HEAP32[(($13)>>2)];
 var $251=(($agg_result)|0);
 HEAP32[(($251)>>2)]=$250;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$__format,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__va=sp;
 var $1=(($__va)|0);
 var $2=$__va;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_uselocale($__l);
 var $4=_vsscanf($__s,$__format,$1);

 var $5=($3|0)==0;
 if($5){label=4;break;}else{label=2;break;}
 case 2: 
 var $7=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1,0); var $9$1 = tempRet0;
 var $10=$9$0;
 ___clang_call_terminate($10);
 throw "Reached an unreachable!";
 case 4: 
 STACKTOP=sp;return $4;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__statbuf=sp;
 var $1=$__ke;
 var $2=$__kb;
 var $3=((($1)-($2))|0);
 var $4=(((($3|0))/(12))&-1);
 var $5=(($__statbuf)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 var $6=($4>>>0)>100;
 if($6){label=2;break;}else{var $__status_0=$5;var $18=0;label=12;break;}
 case 2: 
 var $8=_malloc($4);
 var $9=($8|0)==0;
 if($9){label=3;break;}else{var $__status_0=$8;var $18=$8;label=12;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__status_0=0;var $18=0;label=12;break; } else { label=4;break; }
 case 4: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;
 var $17$1=$11$1;var $17$0=$11$0;label=11;break;
 case 5: 
 var $lpad_us_lcssa$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_us_lcssa$1 = tempRet0;
 var $lpad_phi$1=$lpad_us_lcssa$1;var $lpad_phi$0=$lpad_us_lcssa$0;label=8;break;
 case 6: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=8;break;
 case 7: 
 var $lpad_nonloopexit56$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit56$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit56$1;var $lpad_phi$0=$lpad_nonloopexit56$0;label=8;break;
 case 8: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $12=($18|0)==0;
 if($12){var $17$1=$lpad_phi$1;var $17$0=$lpad_phi$0;label=11;break;}else{label=9;break;}
 case 9: 
 (function() { try { __THREW__ = 0; return _free($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $17$1=$lpad_phi$1;var $17$0=$lpad_phi$0;label=11;break; } else { label=10;break; }
 case 10: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1,0); var $15$1 = tempRet0;
 var $16=$15$0;
 ___clang_call_terminate($16);
 throw "Reached an unreachable!";
 case 11: 
 var $17$0;
 var $17$1;
 ___resumeException($17$0)
 case 12: 
 var $18;
 var $__status_0;
 var $19=($__kb|0)==($__ke|0);
 if($19){var $__n_might_match_0_lcssa=$4;var $__n_does_match_0_lcssa=0;label=13;break;}else{var $__n_might_match_066=$4;var $__n_does_match_067=0;var $__st_068=$__status_0;var $__ky_069=$__kb;label=14;break;}
 case 13: 
 var $__n_does_match_0_lcssa;
 var $__n_might_match_0_lcssa;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=$__ct;
 var $__indx_0=0;var $__n_does_match_2=$__n_does_match_0_lcssa;var $__n_might_match_2=$__n_might_match_0_lcssa;label=21;break;
 case 14: 
 var $__ky_069;
 var $__st_068;
 var $__n_does_match_067;
 var $__n_might_match_066;
 var $23=$__ky_069;
 var $24=HEAP8[($23)];
 var $25=$24&1;
 var $26=(($25<<24)>>24)==0;
 if($26){label=16;break;}else{label=15;break;}
 case 15: 
 var $28=(($__ky_069+4)|0);
 var $29=HEAP32[(($28)>>2)];
 var $33=$29;label=17;break;
 case 16: 
 var $31=($24&255);
 var $32=$31>>>1;
 var $33=$32;label=17;break;
 case 17: 
 var $33;
 var $34=($33|0)==0;
 if($34){label=19;break;}else{label=18;break;}
 case 18: 
 HEAP8[($__st_068)]=1;
 var $__n_does_match_1=$__n_does_match_067;var $__n_might_match_1=$__n_might_match_066;label=20;break;
 case 19: 
 HEAP8[($__st_068)]=2;
 var $37=((($__n_might_match_066)-(1))|0);
 var $38=((($__n_does_match_067)+(1))|0);
 var $__n_does_match_1=$38;var $__n_might_match_1=$37;label=20;break;
 case 20: 
 var $__n_might_match_1;
 var $__n_does_match_1;
 var $40=(($__ky_069+12)|0);
 var $41=(($__st_068+1)|0);
 var $42=($40|0)==($__ke|0);
 if($42){var $__n_might_match_0_lcssa=$__n_might_match_1;var $__n_does_match_0_lcssa=$__n_does_match_1;label=13;break;}else{var $__n_might_match_066=$__n_might_match_1;var $__n_does_match_067=$__n_does_match_1;var $__st_068=$41;var $__ky_069=$40;label=14;break;}
 case 21: 
 var $__n_might_match_2;
 var $__n_does_match_2;
 var $__indx_0;
 var $43=HEAP32[(($20)>>2)];
 var $44=($43|0)==0;
 if($44){var $61=1;label=28;break;}else{label=22;break;}
 case 22: 
 var $46=(($43+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($43+16)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($47|0)==($49|0);
 if($50){label=23;break;}else{label=24;break;}
 case 23: 
 var $52=$43;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+36)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$56;label=25;break; } else { label=6;break; }
 case 24: 
 var $58=HEAP32[(($47)>>2)];
 var $_0_i_i_i_i=$58;label=25;break;
 case 25: 
 var $_0_i_i_i_i;
 var $59=($_0_i_i_i_i|0)==-1;
 if($59){label=27;break;}else{label=26;break;}
 case 26: 
 var $_pre_i_i_i=HEAP32[(($20)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $61=$phitmp_i_i_i;label=28;break;
 case 27: 
 HEAP32[(($20)>>2)]=0;
 var $61=1;label=28;break;
 case 28: 
 var $61;
 var $62=HEAP32[(($21)>>2)];
 var $63=($62|0)==0;
 if($63){var $80=1;var $_pre_i3_i_i20=0;label=34;break;}else{label=29;break;}
 case 29: 
 var $65=(($62+12)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=(($62+16)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=($66|0)==($68|0);
 if($69){label=30;break;}else{label=31;break;}
 case 30: 
 var $71=$62;
 var $72=HEAP32[(($71)>>2)];
 var $73=(($72+36)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$74]($62) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$75;label=32;break; } else { label=6;break; }
 case 31: 
 var $77=HEAP32[(($66)>>2)];
 var $_0_i_i1_i_i=$77;label=32;break;
 case 32: 
 var $_0_i_i1_i_i;
 var $78=($_0_i_i1_i_i|0)==-1;
 if($78){label=33;break;}else{var $80=0;var $_pre_i3_i_i20=$62;label=34;break;}
 case 33: 
 HEAP32[(($21)>>2)]=0;
 var $80=1;var $_pre_i3_i_i20=0;label=34;break;
 case 34: 
 var $_pre_i3_i_i20;
 var $80;
 var $tmp_i_i=$61^$80;
 var $81=($__n_might_match_2|0)!=0;
 var $or_cond=$tmp_i_i&$81;
 var $82=HEAP32[(($20)>>2)];
 if($or_cond){label=35;break;}else{label=79;break;}
 case 35: 
 var $84=(($82+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(($82+16)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=($85|0)==($87|0);
 if($88){label=36;break;}else{label=37;break;}
 case 36: 
 var $90=$82;
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+36)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$93]($82) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$94;label=38;break; } else { label=6;break; }
 case 37: 
 var $96=HEAP32[(($85)>>2)];
 var $_0_i_i=$96;label=38;break;
 case 38: 
 var $_0_i_i;
 if($__case_sensitive){var $__c_0=$_0_i_i;label=40;break;}else{label=39;break;}
 case 39: 
 var $98=HEAP32[(($22)>>2)];
 var $99=(($98+28)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$100]($__ct,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__c_0=$101;label=40;break; } else { label=6;break; }
 case 40: 
 var $__c_0;
 var $_pre=((($__indx_0)+(1))|0);
 if($19){var $__indx_0=$_pre;var $__n_does_match_2=$__n_does_match_2;var $__n_might_match_2=$__n_might_match_2;label=21;break;}else{label=41;break;}
 case 41: 
 if($__case_sensitive){var $__n_might_match_336_us=$__n_might_match_2;var $__n_does_match_337_us=$__n_does_match_2;var $__st_138_us=$__status_0;var $__consume_0_off040_us=0;var $__ky1_041_us=$__kb;label=42;break;}else{var $__n_might_match_336=$__n_might_match_2;var $__n_does_match_337=$__n_does_match_2;var $__st_138=$__status_0;var $__consume_0_off040=0;var $__ky1_041=$__kb;label=54;break;}
 case 42: 
 var $__ky1_041_us;
 var $__consume_0_off040_us;
 var $__st_138_us;
 var $__n_does_match_337_us;
 var $__n_might_match_336_us;
 var $102=HEAP8[($__st_138_us)];
 var $103=(($102<<24)>>24)==1;
 if($103){label=43;break;}else{var $__consume_1_off0_us=$__consume_0_off040_us;var $__n_does_match_4_us=$__n_does_match_337_us;var $__n_might_match_4_us=$__n_might_match_336_us;label=53;break;}
 case 43: 
 var $105=$__ky1_041_us;
 var $106=HEAP8[($105)];
 var $107=$106&1;
 var $108=(($107<<24)>>24)==0;
 if($108){label=45;break;}else{label=44;break;}
 case 44: 
 var $110=(($__ky1_041_us+8)|0);
 var $111=HEAP32[(($110)>>2)];
 var $114=$111;label=46;break;
 case 45: 
 var $113=(($__ky1_041_us+4)|0);
 var $114=$113;label=46;break;
 case 46: 
 var $114;
 var $115=(($114+($__indx_0<<2))|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=($__c_0|0)==($116|0);
 if($117){label=48;break;}else{label=47;break;}
 case 47: 
 HEAP8[($__st_138_us)]=0;
 var $119=((($__n_might_match_336_us)-(1))|0);
 var $__consume_1_off0_us=$__consume_0_off040_us;var $__n_does_match_4_us=$__n_does_match_337_us;var $__n_might_match_4_us=$119;label=53;break;
 case 48: 
 if($108){label=50;break;}else{label=49;break;}
 case 49: 
 var $122=(($__ky1_041_us+4)|0);
 var $123=HEAP32[(($122)>>2)];
 var $127=$123;label=51;break;
 case 50: 
 var $125=($106&255);
 var $126=$125>>>1;
 var $127=$126;label=51;break;
 case 51: 
 var $127;
 var $128=($127|0)==($_pre|0);
 if($128){label=52;break;}else{var $__consume_1_off0_us=1;var $__n_does_match_4_us=$__n_does_match_337_us;var $__n_might_match_4_us=$__n_might_match_336_us;label=53;break;}
 case 52: 
 HEAP8[($__st_138_us)]=2;
 var $130=((($__n_might_match_336_us)-(1))|0);
 var $131=((($__n_does_match_337_us)+(1))|0);
 var $__consume_1_off0_us=1;var $__n_does_match_4_us=$131;var $__n_might_match_4_us=$130;label=53;break;
 case 53: 
 var $__n_might_match_4_us;
 var $__n_does_match_4_us;
 var $__consume_1_off0_us;
 var $133=(($__ky1_041_us+12)|0);
 var $134=(($__st_138_us+1)|0);
 var $135=($133|0)==($__ke|0);
 if($135){var $__n_might_match_3_lcssa=$__n_might_match_4_us;var $__n_does_match_3_lcssa=$__n_does_match_4_us;var $__consume_0_off0_lcssa=$__consume_1_off0_us;label=67;break;}else{var $__n_might_match_336_us=$__n_might_match_4_us;var $__n_does_match_337_us=$__n_does_match_4_us;var $__st_138_us=$134;var $__consume_0_off040_us=$__consume_1_off0_us;var $__ky1_041_us=$133;label=42;break;}
 case 54: 
 var $__ky1_041;
 var $__consume_0_off040;
 var $__st_138;
 var $__n_does_match_337;
 var $__n_might_match_336;
 var $136=HEAP8[($__st_138)];
 var $137=(($136<<24)>>24)==1;
 if($137){label=55;break;}else{var $__consume_1_off0=$__consume_0_off040;var $__n_does_match_4=$__n_does_match_337;var $__n_might_match_4=$__n_might_match_336;label=66;break;}
 case 55: 
 var $139=$__ky1_041;
 var $140=HEAP8[($139)];
 var $141=$140&1;
 var $142=(($141<<24)>>24)==0;
 if($142){label=57;break;}else{label=56;break;}
 case 56: 
 var $144=(($__ky1_041+8)|0);
 var $145=HEAP32[(($144)>>2)];
 var $148=$145;label=58;break;
 case 57: 
 var $147=(($__ky1_041+4)|0);
 var $148=$147;label=58;break;
 case 58: 
 var $148;
 var $149=(($148+($__indx_0<<2))|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=HEAP32[(($22)>>2)];
 var $152=(($151+28)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$153]($__ct,$150) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=5;break; }
 case 59: 
 var $155=($__c_0|0)==($154|0);
 if($155){label=60;break;}else{label=65;break;}
 case 60: 
 var $157=HEAP8[($139)];
 var $158=$157&1;
 var $159=(($158<<24)>>24)==0;
 if($159){label=62;break;}else{label=61;break;}
 case 61: 
 var $161=(($__ky1_041+4)|0);
 var $162=HEAP32[(($161)>>2)];
 var $166=$162;label=63;break;
 case 62: 
 var $164=($157&255);
 var $165=$164>>>1;
 var $166=$165;label=63;break;
 case 63: 
 var $166;
 var $167=($166|0)==($_pre|0);
 if($167){label=64;break;}else{var $__consume_1_off0=1;var $__n_does_match_4=$__n_does_match_337;var $__n_might_match_4=$__n_might_match_336;label=66;break;}
 case 64: 
 HEAP8[($__st_138)]=2;
 var $169=((($__n_might_match_336)-(1))|0);
 var $170=((($__n_does_match_337)+(1))|0);
 var $__consume_1_off0=1;var $__n_does_match_4=$170;var $__n_might_match_4=$169;label=66;break;
 case 65: 
 HEAP8[($__st_138)]=0;
 var $172=((($__n_might_match_336)-(1))|0);
 var $__consume_1_off0=$__consume_0_off040;var $__n_does_match_4=$__n_does_match_337;var $__n_might_match_4=$172;label=66;break;
 case 66: 
 var $__n_might_match_4;
 var $__n_does_match_4;
 var $__consume_1_off0;
 var $174=(($__ky1_041+12)|0);
 var $175=(($__st_138+1)|0);
 var $176=($174|0)==($__ke|0);
 if($176){var $__n_might_match_3_lcssa=$__n_might_match_4;var $__n_does_match_3_lcssa=$__n_does_match_4;var $__consume_0_off0_lcssa=$__consume_1_off0;label=67;break;}else{var $__n_might_match_336=$__n_might_match_4;var $__n_does_match_337=$__n_does_match_4;var $__st_138=$175;var $__consume_0_off040=$__consume_1_off0;var $__ky1_041=$174;label=54;break;}
 case 67: 
 var $__consume_0_off0_lcssa;
 var $__n_does_match_3_lcssa;
 var $__n_might_match_3_lcssa;
 if($__consume_0_off0_lcssa){label=68;break;}else{var $__indx_0=$_pre;var $__n_does_match_2=$__n_does_match_3_lcssa;var $__n_might_match_2=$__n_might_match_3_lcssa;label=21;break;}
 case 68: 
 var $178=HEAP32[(($20)>>2)];
 var $179=(($178+12)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=(($178+16)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=($180|0)==($182|0);
 if($183){label=69;break;}else{label=70;break;}
 case 69: 
 var $185=$178;
 var $186=HEAP32[(($185)>>2)];
 var $187=(($186+40)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$188]($178) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=6;break; }
 case 70: 
 var $191=(($180+4)|0);
 HEAP32[(($179)>>2)]=$191;
 label=71;break;
 case 71: 
 var $192=((($__n_might_match_3_lcssa)+($__n_does_match_3_lcssa))|0);
 var $_not=($192>>>0)<2;
 if($_not){var $__indx_0=$_pre;var $__n_does_match_2=$__n_does_match_3_lcssa;var $__n_might_match_2=$__n_might_match_3_lcssa;label=21;break;}else{var $__n_does_match_550=$__n_does_match_3_lcssa;var $__st_251=$__status_0;var $__ky2_052=$__kb;label=72;break;}
 case 72: 
 var $__ky2_052;
 var $__st_251;
 var $__n_does_match_550;
 var $193=HEAP8[($__st_251)];
 var $194=(($193<<24)>>24)==2;
 if($194){label=73;break;}else{var $__n_does_match_6=$__n_does_match_550;label=78;break;}
 case 73: 
 var $196=$__ky2_052;
 var $197=HEAP8[($196)];
 var $198=$197&1;
 var $199=(($198<<24)>>24)==0;
 if($199){label=75;break;}else{label=74;break;}
 case 74: 
 var $201=(($__ky2_052+4)|0);
 var $202=HEAP32[(($201)>>2)];
 var $206=$202;label=76;break;
 case 75: 
 var $204=($197&255);
 var $205=$204>>>1;
 var $206=$205;label=76;break;
 case 76: 
 var $206;
 var $207=($206|0)==($_pre|0);
 if($207){var $__n_does_match_6=$__n_does_match_550;label=78;break;}else{label=77;break;}
 case 77: 
 HEAP8[($__st_251)]=0;
 var $209=((($__n_does_match_550)-(1))|0);
 var $__n_does_match_6=$209;label=78;break;
 case 78: 
 var $__n_does_match_6;
 var $211=(($__ky2_052+12)|0);
 var $212=(($__st_251+1)|0);
 var $213=($211|0)==($__ke|0);
 if($213){var $__indx_0=$_pre;var $__n_does_match_2=$__n_does_match_6;var $__n_might_match_2=$__n_might_match_3_lcssa;label=21;break;}else{var $__n_does_match_550=$__n_does_match_6;var $__st_251=$212;var $__ky2_052=$211;label=72;break;}
 case 79: 
 var $215=($82|0)==0;
 if($215){var $232=1;label=86;break;}else{label=80;break;}
 case 80: 
 var $217=(($82+12)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=(($82+16)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=($218|0)==($220|0);
 if($221){label=81;break;}else{label=82;break;}
 case 81: 
 var $223=$82;
 var $224=HEAP32[(($223)>>2)];
 var $225=(($224+36)|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$226]($82) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i12=$227;label=83;break; } else { label=7;break; }
 case 82: 
 var $229=HEAP32[(($218)>>2)];
 var $_0_i_i_i_i12=$229;label=83;break;
 case 83: 
 var $_0_i_i_i_i12;
 var $230=($_0_i_i_i_i12|0)==-1;
 if($230){label=85;break;}else{label=84;break;}
 case 84: 
 var $_pre_i_i_i14=HEAP32[(($20)>>2)];
 var $phitmp_i_i_i15=($_pre_i_i_i14|0)==0;
 var $232=$phitmp_i_i_i15;label=86;break;
 case 85: 
 HEAP32[(($20)>>2)]=0;
 var $232=1;label=86;break;
 case 86: 
 var $232;
 var $233=($_pre_i3_i_i20|0)==0;
 if($233){label=92;break;}else{label=87;break;}
 case 87: 
 var $235=(($_pre_i3_i_i20+12)|0);
 var $236=HEAP32[(($235)>>2)];
 var $237=(($_pre_i3_i_i20+16)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=($236|0)==($238|0);
 if($239){label=88;break;}else{label=89;break;}
 case 88: 
 var $241=$_pre_i3_i_i20;
 var $242=HEAP32[(($241)>>2)];
 var $243=(($242+36)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$244]($_pre_i3_i_i20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i18=$245;label=90;break; } else { label=7;break; }
 case 89: 
 var $247=HEAP32[(($236)>>2)];
 var $_0_i_i1_i_i18=$247;label=90;break;
 case 90: 
 var $_0_i_i1_i_i18;
 var $248=($_0_i_i1_i_i18|0)==-1;
 if($248){label=91;break;}else{label=93;break;}
 case 91: 
 HEAP32[(($21)>>2)]=0;
 label=92;break;
 case 92: 
 if($232){label=94;break;}else{label=95;break;}
 case 93: 
 if($232){label=95;break;}else{label=94;break;}
 case 94: 
 var $251=HEAP32[(($__err)>>2)];
 var $252=$251|2;
 HEAP32[(($__err)>>2)]=$252;
 label=95;break;
 case 95: 
 if($19){label=98;break;}else{var $__st_330=$__status_0;var $_031=$__kb;label=96;break;}
 case 96: 
 var $_031;
 var $__st_330;
 var $253=HEAP8[($__st_330)];
 var $254=(($253<<24)>>24)==2;
 if($254){var $_029=$_031;label=99;break;}else{label=97;break;}
 case 97: 
 var $256=(($_031+12)|0);
 var $257=(($__st_330+1)|0);
 var $258=($256|0)==($__ke|0);
 if($258){label=98;break;}else{var $__st_330=$257;var $_031=$256;label=96;break;}
 case 98: 
 var $259=HEAP32[(($__err)>>2)];
 var $260=$259|4;
 HEAP32[(($__err)>>2)]=$260;
 var $_029=$__ke;label=99;break;
 case 99: 
 var $_029;
 var $261=($18|0)==0;
 if($261){label=102;break;}else{label=100;break;}
 case 100: 
 (function() { try { __THREW__ = 0; return _free($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=102;break; } else { label=101;break; }
 case 101: 
 var $264$0 = ___cxa_find_matching_catch(-1, -1,0); var $264$1 = tempRet0;
 var $265=$264$0;
 ___clang_call_terminate($265);
 throw "Reached an unreachable!";
 case 102: 
 var $$etemp$1$0=100;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $_029;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $__a_end=(sp)+(144);
 var $__g=(sp)+(152);
 var $__g_end=(sp)+(312);
 var $__dc=(sp)+(320);
 var $1=(($__iob+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&74;
 if(($3|0)==8){ label=2;break;}else if(($3|0)==0){ label=3;break;}else if(($3|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $7=$__atoms;
 var $$etemp$0$0=104;
 var $$etemp$0$1=0;

 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$8,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=39;break; }
 case 6: 
 var $9=HEAP8[($this2_i_i_i)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=8;break;}else{label=7;break;}
 case 7: 
 var $13=(($__buf+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $_pre33=$__buf;
 var $_pre34=(($_pre33+1)|0);
 var $18=$14;var $_pre_phi35=$_pre34;var $_pre_phi37=$13;label=9;break;
 case 8: 
 var $16=$__buf;
 var $17=(($16+1)|0);
 var $_pre36=(($__buf+8)|0);
 var $18=$17;var $_pre_phi35=$17;var $_pre_phi37=$_pre36;label=9;break;
 case 9: 
 var $_pre_phi37;
 var $_pre_phi35;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=$__g;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 var $20=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$20;
 HEAP32[(($__dc)>>2)]=0;
 var $21=(($__b)|0);
 var $22=(($__e)|0);
 var $23=(($__buf)|0);
 var $24=(($__buf+4)|0);
 var $25=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($21)>>2)];
 var $__a_0=$18;var $_pre_i_i_i6=$_pre;label=10;break;
 case 10: 
 var $_pre_i_i_i6;
 var $__a_0;
 var $26=($_pre_i_i_i6|0)==0;
 if($26){var $44=1;var $43=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $28=(($_pre_i_i_i6+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($_pre_i_i_i6+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=$_pre_i_i_i6;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($_pre_i_i_i6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i4=$38;label=14;break; } else { label=38;break; }
 case 13: 
 var $40=HEAP32[(($29)>>2)];
 var $_0_i_i_i_i4=$40;label=14;break;
 case 14: 
 var $_0_i_i_i_i4;
 var $41=($_0_i_i_i_i4|0)==-1;
 if($41){label=15;break;}else{var $44=0;var $43=$_pre_i_i_i6;label=16;break;}
 case 15: 
 HEAP32[(($21)>>2)]=0;
 var $44=1;var $43=0;label=16;break;
 case 16: 
 var $43;
 var $44;
 var $45=HEAP32[(($22)>>2)];
 var $46=($45|0)==0;
 if($46){label=22;break;}else{label=17;break;}
 case 17: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$45;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i10=$58;label=20;break; } else { label=38;break; }
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_0_i_i1_i_i10=$60;label=20;break;
 case 20: 
 var $_0_i_i1_i_i10;
 var $61=($_0_i_i1_i_i10|0)==-1;
 if($61){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($22)>>2)]=0;
 label=22;break;
 case 22: 
 if($44){var $__a_2=$__a_0;var $_pre_i3_i_i=0;label=48;break;}else{var $65=0;label=24;break;}
 case 23: 
 if($44){var $65=$45;label=24;break;}else{var $__a_2=$__a_0;var $_pre_i3_i_i=$45;label=48;break;}
 case 24: 
 var $65;
 var $66=HEAP32[(($__a_end)>>2)];
 var $67=$66;
 var $68=$__a_0;
 var $69=((($67)-($68))|0);
 var $70=HEAP8[($this2_i_i_i)];
 var $71=$70&1;
 var $72=(($71<<24)>>24)==0;
 if($72){label=26;break;}else{label=25;break;}
 case 25: 
 var $74=HEAP32[(($24)>>2)];
 var $78=$74;label=27;break;
 case 26: 
 var $76=($70&255);
 var $77=$76>>>1;
 var $78=$77;label=27;break;
 case 27: 
 var $78;
 var $79=($69|0)==($78|0);
 if($79){label=28;break;}else{var $__a_1=$__a_0;label=41;break;}
 case 28: 
 if($72){label=30;break;}else{label=29;break;}
 case 29: 
 var $82=HEAP32[(($24)>>2)];
 var $89=$82;var $88=$82;label=31;break;
 case 30: 
 var $84=($70&255);
 var $85=$84>>>1;
 var $86=($70&255);
 var $87=$86>>>1;
 var $89=$87;var $88=$85;label=31;break;
 case 31: 
 var $88;
 var $89;
 var $90=$89<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$90,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=38;break; }
 case 32: 
 var $91=HEAP8[($this2_i_i_i)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $97=10;label=34;break;}else{label=33;break;}
 case 33: 
 var $95=HEAP32[(($23)>>2)];
 var $96=$95&-2;
 var $phitmp_i24=((($96)-(1))|0);
 var $97=$phitmp_i24;label=34;break;
 case 34: 
 var $97;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$97,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=38;break; }
 case 35: 
 var $98=HEAP8[($this2_i_i_i)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){var $103=$_pre_phi35;label=37;break;}else{label=36;break;}
 case 36: 
 var $102=HEAP32[(($_pre_phi37)>>2)];
 var $103=$102;label=37;break;
 case 37: 
 var $103;
 var $104=(($103+$88)|0);
 HEAP32[(($__a_end)>>2)]=$104;
 var $__a_1=$103;label=41;break;
 case 38: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=40;break;
 case 39: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=40;break;
 case 40: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 41: 
 var $__a_1;
 var $107=(($43+12)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(($43+16)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=($108|0)==($110|0);
 if($111){label=42;break;}else{label=43;break;}
 case 42: 
 var $113=$43;
 var $114=HEAP32[(($113)>>2)];
 var $115=(($114+36)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$116]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$117;label=44;break; } else { label=38;break; }
 case 43: 
 var $119=HEAP32[(($108)>>2)];
 var $_0_i_i=$119;label=44;break;
 case 44: 
 var $_0_i_i;
 var $121=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i,$_0_i,$__a_1,$__a_end,$__dc,$25,$__grouping,$20,$__g_end,$8);
 var $122=($121|0)==0;
 if($122){label=45;break;}else{var $__a_2=$__a_1;var $_pre_i3_i_i=$65;label=48;break;}
 case 45: 
 var $124=HEAP32[(($107)>>2)];
 var $125=HEAP32[(($109)>>2)];
 var $126=($124|0)==($125|0);
 if($126){label=46;break;}else{label=47;break;}
 case 46: 
 var $128=$43;
 var $129=HEAP32[(($128)>>2)];
 var $130=(($129+40)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$131]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i6=$43;label=10;break; } else { label=38;break; }
 case 47: 
 var $134=(($124+4)|0);
 HEAP32[(($107)>>2)]=$134;
 var $__a_0=$__a_1;var $_pre_i_i_i6=$43;label=10;break;
 case 48: 
 var $_pre_i3_i_i;
 var $__a_2;
 var $136=$__grouping;
 var $137=HEAP8[($136)];
 var $138=$137&1;
 var $139=(($138<<24)>>24)==0;
 if($139){label=50;break;}else{label=49;break;}
 case 49: 
 var $141=(($__grouping+4)|0);
 var $142=HEAP32[(($141)>>2)];
 var $146=$142;label=51;break;
 case 50: 
 var $144=($137&255);
 var $145=$144>>>1;
 var $146=$145;label=51;break;
 case 51: 
 var $146;
 var $147=($146|0)==0;
 if($147){label=54;break;}else{label=52;break;}
 case 52: 
 var $149=HEAP32[(($__g_end)>>2)];
 var $150=$149;
 var $151=$__g;
 var $152=((($150)-($151))|0);
 var $153=($152|0)<160;
 if($153){label=53;break;}else{label=54;break;}
 case 53: 
 var $155=HEAP32[(($__dc)>>2)];
 var $156=(($149+4)|0);
 HEAP32[(($__g_end)>>2)]=$156;
 HEAP32[(($149)>>2)]=$155;
 label=54;break;
 case 54: 
 var $158=HEAP32[(($__a_end)>>2)];
 var $159=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a_2,$158,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=39;break; }
 case 55: 
 HEAP32[(($__v)>>2)]=$159;
 var $161=HEAP32[(($__g_end)>>2)];
 var $162=HEAP8[($136)];
 var $163=$162&1;
 var $164=(($163<<24)>>24)==0;
 if($164){label=57;break;}else{label=56;break;}
 case 56: 
 var $166=(($__grouping+4)|0);
 var $167=HEAP32[(($166)>>2)];
 var $171=$167;label=58;break;
 case 57: 
 var $169=($162&255);
 var $170=$169>>>1;
 var $171=$170;label=58;break;
 case 58: 
 var $171;
 var $172=($171|0)==0;
 if($172){label=75;break;}else{label=59;break;}
 case 59: 
 var $174=($20|0)==($161|0);
 if($174){var $183=$162;label=63;break;}else{label=60;break;}
 case 60: 
 var $175=((($161)-(4))|0);
 var $176=($175>>>0)>($20>>>0);
 if($176){var $_012_i_i_i=$20;var $177=$175;label=61;break;}else{var $183=$162;label=63;break;}
 case 61: 
 var $177;
 var $_012_i_i_i;
 var $178=HEAP32[(($_012_i_i_i)>>2)];
 var $179=HEAP32[(($177)>>2)];
 HEAP32[(($_012_i_i_i)>>2)]=$179;
 HEAP32[(($177)>>2)]=$178;
 var $180=(($_012_i_i_i+4)|0);
 var $181=((($177)-(4))|0);
 var $182=($180>>>0)<($181>>>0);
 if($182){var $_012_i_i_i=$180;var $177=$181;label=61;break;}else{label=62;break;}
 case 62: 
 var $_pre_i=HEAP8[($136)];
 var $183=$_pre_i;label=63;break;
 case 63: 
 var $183;
 var $184=$183&1;
 var $185=(($184<<24)>>24)==0;
 if($185){label=65;break;}else{label=64;break;}
 case 64: 
 var $187=(($__grouping+8)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(($__grouping+4)|0);
 var $190=HEAP32[(($189)>>2)];
 var $197=$190;var $196=$188;label=66;break;
 case 65: 
 var $192=$__grouping;
 var $193=(($192+1)|0);
 var $194=($183&255);
 var $195=$194>>>1;
 var $197=$195;var $196=$193;label=66;break;
 case 66: 
 var $196;
 var $197;
 var $198=((($161)-(4))|0);
 var $199=($198>>>0)>($20>>>0);
 var $200=HEAP8[($196)];
 var $_not9_i=(($200<<24)>>24)<1;
 var $201=(($200<<24)>>24)==127;
 var $or_cond210_i=$_not9_i|$201;
 if($199){label=67;break;}else{var $_lcssa6_i=$200;var $or_cond2_lcssa_i=$or_cond210_i;label=72;break;}
 case 67: 
 var $202=(($196+$197)|0);
 var $203=$202;
 var $__ig_011_i=$196;var $__r_012_i=$20;var $205=$200;var $or_cond213_i=$or_cond210_i;label=68;break;
 case 68: 
 var $or_cond213_i;
 var $205;
 var $__r_012_i;
 var $__ig_011_i;
 if($or_cond213_i){label=71;break;}else{label=69;break;}
 case 69: 
 var $207=(($205<<24)>>24);
 var $208=HEAP32[(($__r_012_i)>>2)];
 var $209=($207|0)==($208|0);
 if($209){label=71;break;}else{label=70;break;}
 case 70: 
 HEAP32[(($__err)>>2)]=4;
 label=75;break;
 case 71: 
 var $212=$__ig_011_i;
 var $213=((($203)-($212))|0);
 var $214=($213|0)>1;
 var $215=(($__ig_011_i+1)|0);
 var $___ig_0_i=($214?$215:$__ig_011_i);
 var $216=(($__r_012_i+4)|0);
 var $217=($216>>>0)<($198>>>0);
 var $218=HEAP8[($___ig_0_i)];
 var $_not_i=(($218<<24)>>24)<1;
 var $219=(($218<<24)>>24)==127;
 var $or_cond2_i=$_not_i|$219;
 if($217){var $__ig_011_i=$___ig_0_i;var $__r_012_i=$216;var $205=$218;var $or_cond213_i=$or_cond2_i;label=68;break;}else{var $_lcssa6_i=$218;var $or_cond2_lcssa_i=$or_cond2_i;label=72;break;}
 case 72: 
 var $or_cond2_lcssa_i;
 var $_lcssa6_i;
 if($or_cond2_lcssa_i){label=75;break;}else{label=73;break;}
 case 73: 
 var $221=(($_lcssa6_i<<24)>>24);
 var $222=HEAP32[(($198)>>2)];
 var $223=((($222)-(1))|0);
 var $224=($223>>>0)<($221>>>0);
 if($224){label=75;break;}else{label=74;break;}
 case 74: 
 HEAP32[(($__err)>>2)]=4;
 label=75;break;
 case 75: 
 var $226=($43|0)==0;
 if($226){var $243=1;label=82;break;}else{label=76;break;}
 case 76: 
 var $228=(($43+12)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=(($43+16)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=($229|0)==($231|0);
 if($232){label=77;break;}else{label=78;break;}
 case 77: 
 var $234=$43;
 var $235=HEAP32[(($234)>>2)];
 var $236=(($235+36)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$237]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$238;label=79;break; } else { label=39;break; }
 case 78: 
 var $240=HEAP32[(($229)>>2)];
 var $_0_i_i_i_i=$240;label=79;break;
 case 79: 
 var $_0_i_i_i_i;
 var $241=($_0_i_i_i_i|0)==-1;
 if($241){label=81;break;}else{label=80;break;}
 case 80: 
 var $_pre_i_i_i=HEAP32[(($21)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $243=$phitmp_i_i_i;label=82;break;
 case 81: 
 HEAP32[(($21)>>2)]=0;
 var $243=1;label=82;break;
 case 82: 
 var $243;
 var $244=($_pre_i3_i_i|0)==0;
 if($244){label=88;break;}else{label=83;break;}
 case 83: 
 var $246=(($_pre_i3_i_i+12)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=(($_pre_i3_i_i+16)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=($247|0)==($249|0);
 if($250){label=84;break;}else{label=85;break;}
 case 84: 
 var $252=$_pre_i3_i_i;
 var $253=HEAP32[(($252)>>2)];
 var $254=(($253+36)|0);
 var $255=HEAP32[(($254)>>2)];
 var $256=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$255]($_pre_i3_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$256;label=86;break; } else { label=39;break; }
 case 85: 
 var $258=HEAP32[(($247)>>2)];
 var $_0_i_i1_i_i=$258;label=86;break;
 case 86: 
 var $_0_i_i1_i_i;
 var $259=($_0_i_i1_i_i|0)==-1;
 if($259){label=87;break;}else{label=89;break;}
 case 87: 
 HEAP32[(($22)>>2)]=0;
 label=88;break;
 case 88: 
 if($243){label=90;break;}else{label=91;break;}
 case 89: 
 if($243){label=91;break;}else{label=90;break;}
 case 90: 
 var $262=HEAP32[(($__err)>>2)];
 var $263=$262|2;
 HEAP32[(($__err)>>2)]=$263;
 label=91;break;
 case 91: 
 var $265=HEAP32[(($21)>>2)];
 var $266=(($agg_result)|0);
 HEAP32[(($266)>>2)]=$265;
 var $$etemp$2$0=160;
 var $$etemp$2$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $$etemp$3$0=104;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $__a_end=(sp)+(144);
 var $__g=(sp)+(152);
 var $__g_end=(sp)+(312);
 var $__dc=(sp)+(320);
 var $1=(($__iob+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&74;
 if(($3|0)==8){ label=2;break;}else if(($3|0)==0){ label=3;break;}else if(($3|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $7=$__atoms;
 var $$etemp$0$0=104;
 var $$etemp$0$1=0;

 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$8,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=39;break; }
 case 6: 
 var $9=HEAP8[($this2_i_i_i)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=8;break;}else{label=7;break;}
 case 7: 
 var $13=(($__buf+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $_pre33=$__buf;
 var $_pre34=(($_pre33+1)|0);
 var $18=$14;var $_pre_phi35=$_pre34;var $_pre_phi37=$13;label=9;break;
 case 8: 
 var $16=$__buf;
 var $17=(($16+1)|0);
 var $_pre36=(($__buf+8)|0);
 var $18=$17;var $_pre_phi35=$17;var $_pre_phi37=$_pre36;label=9;break;
 case 9: 
 var $_pre_phi37;
 var $_pre_phi35;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=$__g;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 var $20=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$20;
 HEAP32[(($__dc)>>2)]=0;
 var $21=(($__b)|0);
 var $22=(($__e)|0);
 var $23=(($__buf)|0);
 var $24=(($__buf+4)|0);
 var $25=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($21)>>2)];
 var $__a_0=$18;var $_pre_i_i_i6=$_pre;label=10;break;
 case 10: 
 var $_pre_i_i_i6;
 var $__a_0;
 var $26=($_pre_i_i_i6|0)==0;
 if($26){var $44=1;var $43=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $28=(($_pre_i_i_i6+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($_pre_i_i_i6+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=$_pre_i_i_i6;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($_pre_i_i_i6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i4=$38;label=14;break; } else { label=38;break; }
 case 13: 
 var $40=HEAP32[(($29)>>2)];
 var $_0_i_i_i_i4=$40;label=14;break;
 case 14: 
 var $_0_i_i_i_i4;
 var $41=($_0_i_i_i_i4|0)==-1;
 if($41){label=15;break;}else{var $44=0;var $43=$_pre_i_i_i6;label=16;break;}
 case 15: 
 HEAP32[(($21)>>2)]=0;
 var $44=1;var $43=0;label=16;break;
 case 16: 
 var $43;
 var $44;
 var $45=HEAP32[(($22)>>2)];
 var $46=($45|0)==0;
 if($46){label=22;break;}else{label=17;break;}
 case 17: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$45;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i10=$58;label=20;break; } else { label=38;break; }
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_0_i_i1_i_i10=$60;label=20;break;
 case 20: 
 var $_0_i_i1_i_i10;
 var $61=($_0_i_i1_i_i10|0)==-1;
 if($61){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($22)>>2)]=0;
 label=22;break;
 case 22: 
 if($44){var $__a_2=$__a_0;var $_pre_i3_i_i=0;label=48;break;}else{var $65=0;label=24;break;}
 case 23: 
 if($44){var $65=$45;label=24;break;}else{var $__a_2=$__a_0;var $_pre_i3_i_i=$45;label=48;break;}
 case 24: 
 var $65;
 var $66=HEAP32[(($__a_end)>>2)];
 var $67=$66;
 var $68=$__a_0;
 var $69=((($67)-($68))|0);
 var $70=HEAP8[($this2_i_i_i)];
 var $71=$70&1;
 var $72=(($71<<24)>>24)==0;
 if($72){label=26;break;}else{label=25;break;}
 case 25: 
 var $74=HEAP32[(($24)>>2)];
 var $78=$74;label=27;break;
 case 26: 
 var $76=($70&255);
 var $77=$76>>>1;
 var $78=$77;label=27;break;
 case 27: 
 var $78;
 var $79=($69|0)==($78|0);
 if($79){label=28;break;}else{var $__a_1=$__a_0;label=41;break;}
 case 28: 
 if($72){label=30;break;}else{label=29;break;}
 case 29: 
 var $82=HEAP32[(($24)>>2)];
 var $89=$82;var $88=$82;label=31;break;
 case 30: 
 var $84=($70&255);
 var $85=$84>>>1;
 var $86=($70&255);
 var $87=$86>>>1;
 var $89=$87;var $88=$85;label=31;break;
 case 31: 
 var $88;
 var $89;
 var $90=$89<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$90,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=38;break; }
 case 32: 
 var $91=HEAP8[($this2_i_i_i)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $97=10;label=34;break;}else{label=33;break;}
 case 33: 
 var $95=HEAP32[(($23)>>2)];
 var $96=$95&-2;
 var $phitmp_i24=((($96)-(1))|0);
 var $97=$phitmp_i24;label=34;break;
 case 34: 
 var $97;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$97,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=38;break; }
 case 35: 
 var $98=HEAP8[($this2_i_i_i)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){var $103=$_pre_phi35;label=37;break;}else{label=36;break;}
 case 36: 
 var $102=HEAP32[(($_pre_phi37)>>2)];
 var $103=$102;label=37;break;
 case 37: 
 var $103;
 var $104=(($103+$88)|0);
 HEAP32[(($__a_end)>>2)]=$104;
 var $__a_1=$103;label=41;break;
 case 38: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=40;break;
 case 39: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=40;break;
 case 40: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 41: 
 var $__a_1;
 var $107=(($43+12)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(($43+16)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=($108|0)==($110|0);
 if($111){label=42;break;}else{label=43;break;}
 case 42: 
 var $113=$43;
 var $114=HEAP32[(($113)>>2)];
 var $115=(($114+36)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$116]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$117;label=44;break; } else { label=38;break; }
 case 43: 
 var $119=HEAP32[(($108)>>2)];
 var $_0_i_i=$119;label=44;break;
 case 44: 
 var $_0_i_i;
 var $121=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i,$_0_i,$__a_1,$__a_end,$__dc,$25,$__grouping,$20,$__g_end,$8);
 var $122=($121|0)==0;
 if($122){label=45;break;}else{var $__a_2=$__a_1;var $_pre_i3_i_i=$65;label=48;break;}
 case 45: 
 var $124=HEAP32[(($107)>>2)];
 var $125=HEAP32[(($109)>>2)];
 var $126=($124|0)==($125|0);
 if($126){label=46;break;}else{label=47;break;}
 case 46: 
 var $128=$43;
 var $129=HEAP32[(($128)>>2)];
 var $130=(($129+40)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$131]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i6=$43;label=10;break; } else { label=38;break; }
 case 47: 
 var $134=(($124+4)|0);
 HEAP32[(($107)>>2)]=$134;
 var $__a_0=$__a_1;var $_pre_i_i_i6=$43;label=10;break;
 case 48: 
 var $_pre_i3_i_i;
 var $__a_2;
 var $136=$__grouping;
 var $137=HEAP8[($136)];
 var $138=$137&1;
 var $139=(($138<<24)>>24)==0;
 if($139){label=50;break;}else{label=49;break;}
 case 49: 
 var $141=(($__grouping+4)|0);
 var $142=HEAP32[(($141)>>2)];
 var $146=$142;label=51;break;
 case 50: 
 var $144=($137&255);
 var $145=$144>>>1;
 var $146=$145;label=51;break;
 case 51: 
 var $146;
 var $147=($146|0)==0;
 if($147){label=54;break;}else{label=52;break;}
 case 52: 
 var $149=HEAP32[(($__g_end)>>2)];
 var $150=$149;
 var $151=$__g;
 var $152=((($150)-($151))|0);
 var $153=($152|0)<160;
 if($153){label=53;break;}else{label=54;break;}
 case 53: 
 var $155=HEAP32[(($__dc)>>2)];
 var $156=(($149+4)|0);
 HEAP32[(($__g_end)>>2)]=$156;
 HEAP32[(($149)>>2)]=$155;
 label=54;break;
 case 54: 
 var $158=HEAP32[(($__a_end)>>2)];
 var $159$r=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a_2,$158,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $159$0=$159$r;var $159$1=tempRet0;if (!__THREW__) { label=55;break; } else { label=39;break; }
 case 55: 
 var $st$2$0=(($__v)|0);
 HEAP32[(($st$2$0)>>2)]=$159$0;
 var $st$3$1=(($__v+4)|0);
 HEAP32[(($st$3$1)>>2)]=$159$1;
 var $161=HEAP32[(($__g_end)>>2)];
 var $162=HEAP8[($136)];
 var $163=$162&1;
 var $164=(($163<<24)>>24)==0;
 if($164){label=57;break;}else{label=56;break;}
 case 56: 
 var $166=(($__grouping+4)|0);
 var $167=HEAP32[(($166)>>2)];
 var $171=$167;label=58;break;
 case 57: 
 var $169=($162&255);
 var $170=$169>>>1;
 var $171=$170;label=58;break;
 case 58: 
 var $171;
 var $172=($171|0)==0;
 if($172){label=75;break;}else{label=59;break;}
 case 59: 
 var $174=($20|0)==($161|0);
 if($174){var $183=$162;label=63;break;}else{label=60;break;}
 case 60: 
 var $175=((($161)-(4))|0);
 var $176=($175>>>0)>($20>>>0);
 if($176){var $_012_i_i_i=$20;var $177=$175;label=61;break;}else{var $183=$162;label=63;break;}
 case 61: 
 var $177;
 var $_012_i_i_i;
 var $178=HEAP32[(($_012_i_i_i)>>2)];
 var $179=HEAP32[(($177)>>2)];
 HEAP32[(($_012_i_i_i)>>2)]=$179;
 HEAP32[(($177)>>2)]=$178;
 var $180=(($_012_i_i_i+4)|0);
 var $181=((($177)-(4))|0);
 var $182=($180>>>0)<($181>>>0);
 if($182){var $_012_i_i_i=$180;var $177=$181;label=61;break;}else{label=62;break;}
 case 62: 
 var $_pre_i=HEAP8[($136)];
 var $183=$_pre_i;label=63;break;
 case 63: 
 var $183;
 var $184=$183&1;
 var $185=(($184<<24)>>24)==0;
 if($185){label=65;break;}else{label=64;break;}
 case 64: 
 var $187=(($__grouping+8)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(($__grouping+4)|0);
 var $190=HEAP32[(($189)>>2)];
 var $197=$190;var $196=$188;label=66;break;
 case 65: 
 var $192=$__grouping;
 var $193=(($192+1)|0);
 var $194=($183&255);
 var $195=$194>>>1;
 var $197=$195;var $196=$193;label=66;break;
 case 66: 
 var $196;
 var $197;
 var $198=((($161)-(4))|0);
 var $199=($198>>>0)>($20>>>0);
 var $200=HEAP8[($196)];
 var $_not9_i=(($200<<24)>>24)<1;
 var $201=(($200<<24)>>24)==127;
 var $or_cond210_i=$_not9_i|$201;
 if($199){label=67;break;}else{var $_lcssa6_i=$200;var $or_cond2_lcssa_i=$or_cond210_i;label=72;break;}
 case 67: 
 var $202=(($196+$197)|0);
 var $203=$202;
 var $__ig_011_i=$196;var $__r_012_i=$20;var $205=$200;var $or_cond213_i=$or_cond210_i;label=68;break;
 case 68: 
 var $or_cond213_i;
 var $205;
 var $__r_012_i;
 var $__ig_011_i;
 if($or_cond213_i){label=71;break;}else{label=69;break;}
 case 69: 
 var $207=(($205<<24)>>24);
 var $208=HEAP32[(($__r_012_i)>>2)];
 var $209=($207|0)==($208|0);
 if($209){label=71;break;}else{label=70;break;}
 case 70: 
 HEAP32[(($__err)>>2)]=4;
 label=75;break;
 case 71: 
 var $212=$__ig_011_i;
 var $213=((($203)-($212))|0);
 var $214=($213|0)>1;
 var $215=(($__ig_011_i+1)|0);
 var $___ig_0_i=($214?$215:$__ig_011_i);
 var $216=(($__r_012_i+4)|0);
 var $217=($216>>>0)<($198>>>0);
 var $218=HEAP8[($___ig_0_i)];
 var $_not_i=(($218<<24)>>24)<1;
 var $219=(($218<<24)>>24)==127;
 var $or_cond2_i=$_not_i|$219;
 if($217){var $__ig_011_i=$___ig_0_i;var $__r_012_i=$216;var $205=$218;var $or_cond213_i=$or_cond2_i;label=68;break;}else{var $_lcssa6_i=$218;var $or_cond2_lcssa_i=$or_cond2_i;label=72;break;}
 case 72: 
 var $or_cond2_lcssa_i;
 var $_lcssa6_i;
 if($or_cond2_lcssa_i){label=75;break;}else{label=73;break;}
 case 73: 
 var $221=(($_lcssa6_i<<24)>>24);
 var $222=HEAP32[(($198)>>2)];
 var $223=((($222)-(1))|0);
 var $224=($223>>>0)<($221>>>0);
 if($224){label=75;break;}else{label=74;break;}
 case 74: 
 HEAP32[(($__err)>>2)]=4;
 label=75;break;
 case 75: 
 var $226=($43|0)==0;
 if($226){var $243=1;label=82;break;}else{label=76;break;}
 case 76: 
 var $228=(($43+12)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=(($43+16)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=($229|0)==($231|0);
 if($232){label=77;break;}else{label=78;break;}
 case 77: 
 var $234=$43;
 var $235=HEAP32[(($234)>>2)];
 var $236=(($235+36)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$237]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$238;label=79;break; } else { label=39;break; }
 case 78: 
 var $240=HEAP32[(($229)>>2)];
 var $_0_i_i_i_i=$240;label=79;break;
 case 79: 
 var $_0_i_i_i_i;
 var $241=($_0_i_i_i_i|0)==-1;
 if($241){label=81;break;}else{label=80;break;}
 case 80: 
 var $_pre_i_i_i=HEAP32[(($21)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $243=$phitmp_i_i_i;label=82;break;
 case 81: 
 HEAP32[(($21)>>2)]=0;
 var $243=1;label=82;break;
 case 82: 
 var $243;
 var $244=($_pre_i3_i_i|0)==0;
 if($244){label=88;break;}else{label=83;break;}
 case 83: 
 var $246=(($_pre_i3_i_i+12)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=(($_pre_i3_i_i+16)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=($247|0)==($249|0);
 if($250){label=84;break;}else{label=85;break;}
 case 84: 
 var $252=$_pre_i3_i_i;
 var $253=HEAP32[(($252)>>2)];
 var $254=(($253+36)|0);
 var $255=HEAP32[(($254)>>2)];
 var $256=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$255]($_pre_i3_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$256;label=86;break; } else { label=39;break; }
 case 85: 
 var $258=HEAP32[(($247)>>2)];
 var $_0_i_i1_i_i=$258;label=86;break;
 case 86: 
 var $_0_i_i1_i_i;
 var $259=($_0_i_i1_i_i|0)==-1;
 if($259){label=87;break;}else{label=89;break;}
 case 87: 
 HEAP32[(($22)>>2)]=0;
 label=88;break;
 case 88: 
 if($243){label=90;break;}else{label=91;break;}
 case 89: 
 if($243){label=91;break;}else{label=90;break;}
 case 90: 
 var $262=HEAP32[(($__err)>>2)];
 var $263=$262|2;
 HEAP32[(($__err)>>2)]=$263;
 label=91;break;
 case 91: 
 var $265=HEAP32[(($21)>>2)];
 var $266=(($agg_result)|0);
 HEAP32[(($266)>>2)]=$265;
 var $$etemp$4$0=160;
 var $$etemp$4$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $$etemp$5$0=104;
 var $$etemp$5$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $__a_end=(sp)+(144);
 var $__g=(sp)+(152);
 var $__g_end=(sp)+(312);
 var $__dc=(sp)+(320);
 var $1=(($__iob+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&74;
 if(($3|0)==8){ label=2;break;}else if(($3|0)==0){ label=3;break;}else if(($3|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $7=$__atoms;
 var $$etemp$0$0=104;
 var $$etemp$0$1=0;

 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$8,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=39;break; }
 case 6: 
 var $9=HEAP8[($this2_i_i_i)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=8;break;}else{label=7;break;}
 case 7: 
 var $13=(($__buf+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $_pre33=$__buf;
 var $_pre34=(($_pre33+1)|0);
 var $18=$14;var $_pre_phi35=$_pre34;var $_pre_phi37=$13;label=9;break;
 case 8: 
 var $16=$__buf;
 var $17=(($16+1)|0);
 var $_pre36=(($__buf+8)|0);
 var $18=$17;var $_pre_phi35=$17;var $_pre_phi37=$_pre36;label=9;break;
 case 9: 
 var $_pre_phi37;
 var $_pre_phi35;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=$__g;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 var $20=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$20;
 HEAP32[(($__dc)>>2)]=0;
 var $21=(($__b)|0);
 var $22=(($__e)|0);
 var $23=(($__buf)|0);
 var $24=(($__buf+4)|0);
 var $25=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($21)>>2)];
 var $__a_0=$18;var $_pre_i_i_i6=$_pre;label=10;break;
 case 10: 
 var $_pre_i_i_i6;
 var $__a_0;
 var $26=($_pre_i_i_i6|0)==0;
 if($26){var $44=1;var $43=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $28=(($_pre_i_i_i6+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($_pre_i_i_i6+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=$_pre_i_i_i6;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($_pre_i_i_i6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i4=$38;label=14;break; } else { label=38;break; }
 case 13: 
 var $40=HEAP32[(($29)>>2)];
 var $_0_i_i_i_i4=$40;label=14;break;
 case 14: 
 var $_0_i_i_i_i4;
 var $41=($_0_i_i_i_i4|0)==-1;
 if($41){label=15;break;}else{var $44=0;var $43=$_pre_i_i_i6;label=16;break;}
 case 15: 
 HEAP32[(($21)>>2)]=0;
 var $44=1;var $43=0;label=16;break;
 case 16: 
 var $43;
 var $44;
 var $45=HEAP32[(($22)>>2)];
 var $46=($45|0)==0;
 if($46){label=22;break;}else{label=17;break;}
 case 17: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$45;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i10=$58;label=20;break; } else { label=38;break; }
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_0_i_i1_i_i10=$60;label=20;break;
 case 20: 
 var $_0_i_i1_i_i10;
 var $61=($_0_i_i1_i_i10|0)==-1;
 if($61){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($22)>>2)]=0;
 label=22;break;
 case 22: 
 if($44){var $__a_2=$__a_0;var $_pre_i3_i_i=0;label=48;break;}else{var $65=0;label=24;break;}
 case 23: 
 if($44){var $65=$45;label=24;break;}else{var $__a_2=$__a_0;var $_pre_i3_i_i=$45;label=48;break;}
 case 24: 
 var $65;
 var $66=HEAP32[(($__a_end)>>2)];
 var $67=$66;
 var $68=$__a_0;
 var $69=((($67)-($68))|0);
 var $70=HEAP8[($this2_i_i_i)];
 var $71=$70&1;
 var $72=(($71<<24)>>24)==0;
 if($72){label=26;break;}else{label=25;break;}
 case 25: 
 var $74=HEAP32[(($24)>>2)];
 var $78=$74;label=27;break;
 case 26: 
 var $76=($70&255);
 var $77=$76>>>1;
 var $78=$77;label=27;break;
 case 27: 
 var $78;
 var $79=($69|0)==($78|0);
 if($79){label=28;break;}else{var $__a_1=$__a_0;label=41;break;}
 case 28: 
 if($72){label=30;break;}else{label=29;break;}
 case 29: 
 var $82=HEAP32[(($24)>>2)];
 var $89=$82;var $88=$82;label=31;break;
 case 30: 
 var $84=($70&255);
 var $85=$84>>>1;
 var $86=($70&255);
 var $87=$86>>>1;
 var $89=$87;var $88=$85;label=31;break;
 case 31: 
 var $88;
 var $89;
 var $90=$89<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$90,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=38;break; }
 case 32: 
 var $91=HEAP8[($this2_i_i_i)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $97=10;label=34;break;}else{label=33;break;}
 case 33: 
 var $95=HEAP32[(($23)>>2)];
 var $96=$95&-2;
 var $phitmp_i24=((($96)-(1))|0);
 var $97=$phitmp_i24;label=34;break;
 case 34: 
 var $97;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$97,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=38;break; }
 case 35: 
 var $98=HEAP8[($this2_i_i_i)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){var $103=$_pre_phi35;label=37;break;}else{label=36;break;}
 case 36: 
 var $102=HEAP32[(($_pre_phi37)>>2)];
 var $103=$102;label=37;break;
 case 37: 
 var $103;
 var $104=(($103+$88)|0);
 HEAP32[(($__a_end)>>2)]=$104;
 var $__a_1=$103;label=41;break;
 case 38: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=40;break;
 case 39: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=40;break;
 case 40: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 41: 
 var $__a_1;
 var $107=(($43+12)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(($43+16)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=($108|0)==($110|0);
 if($111){label=42;break;}else{label=43;break;}
 case 42: 
 var $113=$43;
 var $114=HEAP32[(($113)>>2)];
 var $115=(($114+36)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$116]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$117;label=44;break; } else { label=38;break; }
 case 43: 
 var $119=HEAP32[(($108)>>2)];
 var $_0_i_i=$119;label=44;break;
 case 44: 
 var $_0_i_i;
 var $121=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i,$_0_i,$__a_1,$__a_end,$__dc,$25,$__grouping,$20,$__g_end,$8);
 var $122=($121|0)==0;
 if($122){label=45;break;}else{var $__a_2=$__a_1;var $_pre_i3_i_i=$65;label=48;break;}
 case 45: 
 var $124=HEAP32[(($107)>>2)];
 var $125=HEAP32[(($109)>>2)];
 var $126=($124|0)==($125|0);
 if($126){label=46;break;}else{label=47;break;}
 case 46: 
 var $128=$43;
 var $129=HEAP32[(($128)>>2)];
 var $130=(($129+40)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$131]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i6=$43;label=10;break; } else { label=38;break; }
 case 47: 
 var $134=(($124+4)|0);
 HEAP32[(($107)>>2)]=$134;
 var $__a_0=$__a_1;var $_pre_i_i_i6=$43;label=10;break;
 case 48: 
 var $_pre_i3_i_i;
 var $__a_2;
 var $136=$__grouping;
 var $137=HEAP8[($136)];
 var $138=$137&1;
 var $139=(($138<<24)>>24)==0;
 if($139){label=50;break;}else{label=49;break;}
 case 49: 
 var $141=(($__grouping+4)|0);
 var $142=HEAP32[(($141)>>2)];
 var $146=$142;label=51;break;
 case 50: 
 var $144=($137&255);
 var $145=$144>>>1;
 var $146=$145;label=51;break;
 case 51: 
 var $146;
 var $147=($146|0)==0;
 if($147){label=54;break;}else{label=52;break;}
 case 52: 
 var $149=HEAP32[(($__g_end)>>2)];
 var $150=$149;
 var $151=$__g;
 var $152=((($150)-($151))|0);
 var $153=($152|0)<160;
 if($153){label=53;break;}else{label=54;break;}
 case 53: 
 var $155=HEAP32[(($__dc)>>2)];
 var $156=(($149+4)|0);
 HEAP32[(($__g_end)>>2)]=$156;
 HEAP32[(($149)>>2)]=$155;
 label=54;break;
 case 54: 
 var $158=HEAP32[(($__a_end)>>2)];
 var $159=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a_2,$158,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=39;break; }
 case 55: 
 HEAP16[(($__v)>>1)]=$159;
 var $161=HEAP32[(($__g_end)>>2)];
 var $162=HEAP8[($136)];
 var $163=$162&1;
 var $164=(($163<<24)>>24)==0;
 if($164){label=57;break;}else{label=56;break;}
 case 56: 
 var $166=(($__grouping+4)|0);
 var $167=HEAP32[(($166)>>2)];
 var $171=$167;label=58;break;
 case 57: 
 var $169=($162&255);
 var $170=$169>>>1;
 var $171=$170;label=58;break;
 case 58: 
 var $171;
 var $172=($171|0)==0;
 if($172){label=75;break;}else{label=59;break;}
 case 59: 
 var $174=($20|0)==($161|0);
 if($174){var $183=$162;label=63;break;}else{label=60;break;}
 case 60: 
 var $175=((($161)-(4))|0);
 var $176=($175>>>0)>($20>>>0);
 if($176){var $_012_i_i_i=$20;var $177=$175;label=61;break;}else{var $183=$162;label=63;break;}
 case 61: 
 var $177;
 var $_012_i_i_i;
 var $178=HEAP32[(($_012_i_i_i)>>2)];
 var $179=HEAP32[(($177)>>2)];
 HEAP32[(($_012_i_i_i)>>2)]=$179;
 HEAP32[(($177)>>2)]=$178;
 var $180=(($_012_i_i_i+4)|0);
 var $181=((($177)-(4))|0);
 var $182=($180>>>0)<($181>>>0);
 if($182){var $_012_i_i_i=$180;var $177=$181;label=61;break;}else{label=62;break;}
 case 62: 
 var $_pre_i=HEAP8[($136)];
 var $183=$_pre_i;label=63;break;
 case 63: 
 var $183;
 var $184=$183&1;
 var $185=(($184<<24)>>24)==0;
 if($185){label=65;break;}else{label=64;break;}
 case 64: 
 var $187=(($__grouping+8)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(($__grouping+4)|0);
 var $190=HEAP32[(($189)>>2)];
 var $197=$190;var $196=$188;label=66;break;
 case 65: 
 var $192=$__grouping;
 var $193=(($192+1)|0);
 var $194=($183&255);
 var $195=$194>>>1;
 var $197=$195;var $196=$193;label=66;break;
 case 66: 
 var $196;
 var $197;
 var $198=((($161)-(4))|0);
 var $199=($198>>>0)>($20>>>0);
 var $200=HEAP8[($196)];
 var $_not9_i=(($200<<24)>>24)<1;
 var $201=(($200<<24)>>24)==127;
 var $or_cond210_i=$_not9_i|$201;
 if($199){label=67;break;}else{var $_lcssa6_i=$200;var $or_cond2_lcssa_i=$or_cond210_i;label=72;break;}
 case 67: 
 var $202=(($196+$197)|0);
 var $203=$202;
 var $__ig_011_i=$196;var $__r_012_i=$20;var $205=$200;var $or_cond213_i=$or_cond210_i;label=68;break;
 case 68: 
 var $or_cond213_i;
 var $205;
 var $__r_012_i;
 var $__ig_011_i;
 if($or_cond213_i){label=71;break;}else{label=69;break;}
 case 69: 
 var $207=(($205<<24)>>24);
 var $208=HEAP32[(($__r_012_i)>>2)];
 var $209=($207|0)==($208|0);
 if($209){label=71;break;}else{label=70;break;}
 case 70: 
 HEAP32[(($__err)>>2)]=4;
 label=75;break;
 case 71: 
 var $212=$__ig_011_i;
 var $213=((($203)-($212))|0);
 var $214=($213|0)>1;
 var $215=(($__ig_011_i+1)|0);
 var $___ig_0_i=($214?$215:$__ig_011_i);
 var $216=(($__r_012_i+4)|0);
 var $217=($216>>>0)<($198>>>0);
 var $218=HEAP8[($___ig_0_i)];
 var $_not_i=(($218<<24)>>24)<1;
 var $219=(($218<<24)>>24)==127;
 var $or_cond2_i=$_not_i|$219;
 if($217){var $__ig_011_i=$___ig_0_i;var $__r_012_i=$216;var $205=$218;var $or_cond213_i=$or_cond2_i;label=68;break;}else{var $_lcssa6_i=$218;var $or_cond2_lcssa_i=$or_cond2_i;label=72;break;}
 case 72: 
 var $or_cond2_lcssa_i;
 var $_lcssa6_i;
 if($or_cond2_lcssa_i){label=75;break;}else{label=73;break;}
 case 73: 
 var $221=(($_lcssa6_i<<24)>>24);
 var $222=HEAP32[(($198)>>2)];
 var $223=((($222)-(1))|0);
 var $224=($223>>>0)<($221>>>0);
 if($224){label=75;break;}else{label=74;break;}
 case 74: 
 HEAP32[(($__err)>>2)]=4;
 label=75;break;
 case 75: 
 var $226=($43|0)==0;
 if($226){var $243=1;label=82;break;}else{label=76;break;}
 case 76: 
 var $228=(($43+12)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=(($43+16)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=($229|0)==($231|0);
 if($232){label=77;break;}else{label=78;break;}
 case 77: 
 var $234=$43;
 var $235=HEAP32[(($234)>>2)];
 var $236=(($235+36)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$237]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$238;label=79;break; } else { label=39;break; }
 case 78: 
 var $240=HEAP32[(($229)>>2)];
 var $_0_i_i_i_i=$240;label=79;break;
 case 79: 
 var $_0_i_i_i_i;
 var $241=($_0_i_i_i_i|0)==-1;
 if($241){label=81;break;}else{label=80;break;}
 case 80: 
 var $_pre_i_i_i=HEAP32[(($21)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $243=$phitmp_i_i_i;label=82;break;
 case 81: 
 HEAP32[(($21)>>2)]=0;
 var $243=1;label=82;break;
 case 82: 
 var $243;
 var $244=($_pre_i3_i_i|0)==0;
 if($244){label=88;break;}else{label=83;break;}
 case 83: 
 var $246=(($_pre_i3_i_i+12)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=(($_pre_i3_i_i+16)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=($247|0)==($249|0);
 if($250){label=84;break;}else{label=85;break;}
 case 84: 
 var $252=$_pre_i3_i_i;
 var $253=HEAP32[(($252)>>2)];
 var $254=(($253+36)|0);
 var $255=HEAP32[(($254)>>2)];
 var $256=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$255]($_pre_i3_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$256;label=86;break; } else { label=39;break; }
 case 85: 
 var $258=HEAP32[(($247)>>2)];
 var $_0_i_i1_i_i=$258;label=86;break;
 case 86: 
 var $_0_i_i1_i_i;
 var $259=($_0_i_i1_i_i|0)==-1;
 if($259){label=87;break;}else{label=89;break;}
 case 87: 
 HEAP32[(($22)>>2)]=0;
 label=88;break;
 case 88: 
 if($243){label=90;break;}else{label=91;break;}
 case 89: 
 if($243){label=91;break;}else{label=90;break;}
 case 90: 
 var $262=HEAP32[(($__err)>>2)];
 var $263=$262|2;
 HEAP32[(($__err)>>2)]=$263;
 label=91;break;
 case 91: 
 var $265=HEAP32[(($21)>>2)];
 var $266=(($agg_result)|0);
 HEAP32[(($266)>>2)]=$265;
 var $$etemp$2$0=160;
 var $$etemp$2$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $$etemp$3$0=104;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $__a_end=(sp)+(144);
 var $__g=(sp)+(152);
 var $__g_end=(sp)+(312);
 var $__dc=(sp)+(320);
 var $1=(($__iob+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&74;
 if(($3|0)==8){ label=2;break;}else if(($3|0)==0){ label=3;break;}else if(($3|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $7=$__atoms;
 var $$etemp$0$0=104;
 var $$etemp$0$1=0;

 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$8,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=39;break; }
 case 6: 
 var $9=HEAP8[($this2_i_i_i)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=8;break;}else{label=7;break;}
 case 7: 
 var $13=(($__buf+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $_pre33=$__buf;
 var $_pre34=(($_pre33+1)|0);
 var $18=$14;var $_pre_phi35=$_pre34;var $_pre_phi37=$13;label=9;break;
 case 8: 
 var $16=$__buf;
 var $17=(($16+1)|0);
 var $_pre36=(($__buf+8)|0);
 var $18=$17;var $_pre_phi35=$17;var $_pre_phi37=$_pre36;label=9;break;
 case 9: 
 var $_pre_phi37;
 var $_pre_phi35;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=$__g;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 var $20=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$20;
 HEAP32[(($__dc)>>2)]=0;
 var $21=(($__b)|0);
 var $22=(($__e)|0);
 var $23=(($__buf)|0);
 var $24=(($__buf+4)|0);
 var $25=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($21)>>2)];
 var $__a_0=$18;var $_pre_i_i_i6=$_pre;label=10;break;
 case 10: 
 var $_pre_i_i_i6;
 var $__a_0;
 var $26=($_pre_i_i_i6|0)==0;
 if($26){var $44=1;var $43=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $28=(($_pre_i_i_i6+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($_pre_i_i_i6+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=$_pre_i_i_i6;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($_pre_i_i_i6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i4=$38;label=14;break; } else { label=38;break; }
 case 13: 
 var $40=HEAP32[(($29)>>2)];
 var $_0_i_i_i_i4=$40;label=14;break;
 case 14: 
 var $_0_i_i_i_i4;
 var $41=($_0_i_i_i_i4|0)==-1;
 if($41){label=15;break;}else{var $44=0;var $43=$_pre_i_i_i6;label=16;break;}
 case 15: 
 HEAP32[(($21)>>2)]=0;
 var $44=1;var $43=0;label=16;break;
 case 16: 
 var $43;
 var $44;
 var $45=HEAP32[(($22)>>2)];
 var $46=($45|0)==0;
 if($46){label=22;break;}else{label=17;break;}
 case 17: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$45;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i10=$58;label=20;break; } else { label=38;break; }
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_0_i_i1_i_i10=$60;label=20;break;
 case 20: 
 var $_0_i_i1_i_i10;
 var $61=($_0_i_i1_i_i10|0)==-1;
 if($61){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($22)>>2)]=0;
 label=22;break;
 case 22: 
 if($44){var $__a_2=$__a_0;var $_pre_i3_i_i=0;label=48;break;}else{var $65=0;label=24;break;}
 case 23: 
 if($44){var $65=$45;label=24;break;}else{var $__a_2=$__a_0;var $_pre_i3_i_i=$45;label=48;break;}
 case 24: 
 var $65;
 var $66=HEAP32[(($__a_end)>>2)];
 var $67=$66;
 var $68=$__a_0;
 var $69=((($67)-($68))|0);
 var $70=HEAP8[($this2_i_i_i)];
 var $71=$70&1;
 var $72=(($71<<24)>>24)==0;
 if($72){label=26;break;}else{label=25;break;}
 case 25: 
 var $74=HEAP32[(($24)>>2)];
 var $78=$74;label=27;break;
 case 26: 
 var $76=($70&255);
 var $77=$76>>>1;
 var $78=$77;label=27;break;
 case 27: 
 var $78;
 var $79=($69|0)==($78|0);
 if($79){label=28;break;}else{var $__a_1=$__a_0;label=41;break;}
 case 28: 
 if($72){label=30;break;}else{label=29;break;}
 case 29: 
 var $82=HEAP32[(($24)>>2)];
 var $89=$82;var $88=$82;label=31;break;
 case 30: 
 var $84=($70&255);
 var $85=$84>>>1;
 var $86=($70&255);
 var $87=$86>>>1;
 var $89=$87;var $88=$85;label=31;break;
 case 31: 
 var $88;
 var $89;
 var $90=$89<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$90,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=38;break; }
 case 32: 
 var $91=HEAP8[($this2_i_i_i)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $97=10;label=34;break;}else{label=33;break;}
 case 33: 
 var $95=HEAP32[(($23)>>2)];
 var $96=$95&-2;
 var $phitmp_i24=((($96)-(1))|0);
 var $97=$phitmp_i24;label=34;break;
 case 34: 
 var $97;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$97,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=38;break; }
 case 35: 
 var $98=HEAP8[($this2_i_i_i)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){var $103=$_pre_phi35;label=37;break;}else{label=36;break;}
 case 36: 
 var $102=HEAP32[(($_pre_phi37)>>2)];
 var $103=$102;label=37;break;
 case 37: 
 var $103;
 var $104=(($103+$88)|0);
 HEAP32[(($__a_end)>>2)]=$104;
 var $__a_1=$103;label=41;break;
 case 38: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=40;break;
 case 39: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=40;break;
 case 40: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 41: 
 var $__a_1;
 var $107=(($43+12)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(($43+16)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=($108|0)==($110|0);
 if($111){label=42;break;}else{label=43;break;}
 case 42: 
 var $113=$43;
 var $114=HEAP32[(($113)>>2)];
 var $115=(($114+36)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$116]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$117;label=44;break; } else { label=38;break; }
 case 43: 
 var $119=HEAP32[(($108)>>2)];
 var $_0_i_i=$119;label=44;break;
 case 44: 
 var $_0_i_i;
 var $121=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i,$_0_i,$__a_1,$__a_end,$__dc,$25,$__grouping,$20,$__g_end,$8);
 var $122=($121|0)==0;
 if($122){label=45;break;}else{var $__a_2=$__a_1;var $_pre_i3_i_i=$65;label=48;break;}
 case 45: 
 var $124=HEAP32[(($107)>>2)];
 var $125=HEAP32[(($109)>>2)];
 var $126=($124|0)==($125|0);
 if($126){label=46;break;}else{label=47;break;}
 case 46: 
 var $128=$43;
 var $129=HEAP32[(($128)>>2)];
 var $130=(($129+40)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$131]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i6=$43;label=10;break; } else { label=38;break; }
 case 47: 
 var $134=(($124+4)|0);
 HEAP32[(($107)>>2)]=$134;
 var $__a_0=$__a_1;var $_pre_i_i_i6=$43;label=10;break;
 case 48: 
 var $_pre_i3_i_i;
 var $__a_2;
 var $136=$__grouping;
 var $137=HEAP8[($136)];
 var $138=$137&1;
 var $139=(($138<<24)>>24)==0;
 if($139){label=50;break;}else{label=49;break;}
 case 49: 
 var $141=(($__grouping+4)|0);
 var $142=HEAP32[(($141)>>2)];
 var $146=$142;label=51;break;
 case 50: 
 var $144=($137&255);
 var $145=$144>>>1;
 var $146=$145;label=51;break;
 case 51: 
 var $146;
 var $147=($146|0)==0;
 if($147){label=54;break;}else{label=52;break;}
 case 52: 
 var $149=HEAP32[(($__g_end)>>2)];
 var $150=$149;
 var $151=$__g;
 var $152=((($150)-($151))|0);
 var $153=($152|0)<160;
 if($153){label=53;break;}else{label=54;break;}
 case 53: 
 var $155=HEAP32[(($__dc)>>2)];
 var $156=(($149+4)|0);
 HEAP32[(($__g_end)>>2)]=$156;
 HEAP32[(($149)>>2)]=$155;
 label=54;break;
 case 54: 
 var $158=HEAP32[(($__a_end)>>2)];
 var $159=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a_2,$158,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=39;break; }
 case 55: 
 HEAP32[(($__v)>>2)]=$159;
 var $161=HEAP32[(($__g_end)>>2)];
 var $162=HEAP8[($136)];
 var $163=$162&1;
 var $164=(($163<<24)>>24)==0;
 if($164){label=57;break;}else{label=56;break;}
 case 56: 
 var $166=(($__grouping+4)|0);
 var $167=HEAP32[(($166)>>2)];
 var $171=$167;label=58;break;
 case 57: 
 var $169=($162&255);
 var $170=$169>>>1;
 var $171=$170;label=58;break;
 case 58: 
 var $171;
 var $172=($171|0)==0;
 if($172){label=75;break;}else{label=59;break;}
 case 59: 
 var $174=($20|0)==($161|0);
 if($174){var $183=$162;label=63;break;}else{label=60;break;}
 case 60: 
 var $175=((($161)-(4))|0);
 var $176=($175>>>0)>($20>>>0);
 if($176){var $_012_i_i_i=$20;var $177=$175;label=61;break;}else{var $183=$162;label=63;break;}
 case 61: 
 var $177;
 var $_012_i_i_i;
 var $178=HEAP32[(($_012_i_i_i)>>2)];
 var $179=HEAP32[(($177)>>2)];
 HEAP32[(($_012_i_i_i)>>2)]=$179;
 HEAP32[(($177)>>2)]=$178;
 var $180=(($_012_i_i_i+4)|0);
 var $181=((($177)-(4))|0);
 var $182=($180>>>0)<($181>>>0);
 if($182){var $_012_i_i_i=$180;var $177=$181;label=61;break;}else{label=62;break;}
 case 62: 
 var $_pre_i=HEAP8[($136)];
 var $183=$_pre_i;label=63;break;
 case 63: 
 var $183;
 var $184=$183&1;
 var $185=(($184<<24)>>24)==0;
 if($185){label=65;break;}else{label=64;break;}
 case 64: 
 var $187=(($__grouping+8)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(($__grouping+4)|0);
 var $190=HEAP32[(($189)>>2)];
 var $197=$190;var $196=$188;label=66;break;
 case 65: 
 var $192=$__grouping;
 var $193=(($192+1)|0);
 var $194=($183&255);
 var $195=$194>>>1;
 var $197=$195;var $196=$193;label=66;break;
 case 66: 
 var $196;
 var $197;
 var $198=((($161)-(4))|0);
 var $199=($198>>>0)>($20>>>0);
 var $200=HEAP8[($196)];
 var $_not9_i=(($200<<24)>>24)<1;
 var $201=(($200<<24)>>24)==127;
 var $or_cond210_i=$_not9_i|$201;
 if($199){label=67;break;}else{var $_lcssa6_i=$200;var $or_cond2_lcssa_i=$or_cond210_i;label=72;break;}
 case 67: 
 var $202=(($196+$197)|0);
 var $203=$202;
 var $__ig_011_i=$196;var $__r_012_i=$20;var $205=$200;var $or_cond213_i=$or_cond210_i;label=68;break;
 case 68: 
 var $or_cond213_i;
 var $205;
 var $__r_012_i;
 var $__ig_011_i;
 if($or_cond213_i){label=71;break;}else{label=69;break;}
 case 69: 
 var $207=(($205<<24)>>24);
 var $208=HEAP32[(($__r_012_i)>>2)];
 var $209=($207|0)==($208|0);
 if($209){label=71;break;}else{label=70;break;}
 case 70: 
 HEAP32[(($__err)>>2)]=4;
 label=75;break;
 case 71: 
 var $212=$__ig_011_i;
 var $213=((($203)-($212))|0);
 var $214=($213|0)>1;
 var $215=(($__ig_011_i+1)|0);
 var $___ig_0_i=($214?$215:$__ig_011_i);
 var $216=(($__r_012_i+4)|0);
 var $217=($216>>>0)<($198>>>0);
 var $218=HEAP8[($___ig_0_i)];
 var $_not_i=(($218<<24)>>24)<1;
 var $219=(($218<<24)>>24)==127;
 var $or_cond2_i=$_not_i|$219;
 if($217){var $__ig_011_i=$___ig_0_i;var $__r_012_i=$216;var $205=$218;var $or_cond213_i=$or_cond2_i;label=68;break;}else{var $_lcssa6_i=$218;var $or_cond2_lcssa_i=$or_cond2_i;label=72;break;}
 case 72: 
 var $or_cond2_lcssa_i;
 var $_lcssa6_i;
 if($or_cond2_lcssa_i){label=75;break;}else{label=73;break;}
 case 73: 
 var $221=(($_lcssa6_i<<24)>>24);
 var $222=HEAP32[(($198)>>2)];
 var $223=((($222)-(1))|0);
 var $224=($223>>>0)<($221>>>0);
 if($224){label=75;break;}else{label=74;break;}
 case 74: 
 HEAP32[(($__err)>>2)]=4;
 label=75;break;
 case 75: 
 var $226=($43|0)==0;
 if($226){var $243=1;label=82;break;}else{label=76;break;}
 case 76: 
 var $228=(($43+12)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=(($43+16)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=($229|0)==($231|0);
 if($232){label=77;break;}else{label=78;break;}
 case 77: 
 var $234=$43;
 var $235=HEAP32[(($234)>>2)];
 var $236=(($235+36)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$237]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$238;label=79;break; } else { label=39;break; }
 case 78: 
 var $240=HEAP32[(($229)>>2)];
 var $_0_i_i_i_i=$240;label=79;break;
 case 79: 
 var $_0_i_i_i_i;
 var $241=($_0_i_i_i_i|0)==-1;
 if($241){label=81;break;}else{label=80;break;}
 case 80: 
 var $_pre_i_i_i=HEAP32[(($21)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $243=$phitmp_i_i_i;label=82;break;
 case 81: 
 HEAP32[(($21)>>2)]=0;
 var $243=1;label=82;break;
 case 82: 
 var $243;
 var $244=($_pre_i3_i_i|0)==0;
 if($244){label=88;break;}else{label=83;break;}
 case 83: 
 var $246=(($_pre_i3_i_i+12)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=(($_pre_i3_i_i+16)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=($247|0)==($249|0);
 if($250){label=84;break;}else{label=85;break;}
 case 84: 
 var $252=$_pre_i3_i_i;
 var $253=HEAP32[(($252)>>2)];
 var $254=(($253+36)|0);
 var $255=HEAP32[(($254)>>2)];
 var $256=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$255]($_pre_i3_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$256;label=86;break; } else { label=39;break; }
 case 85: 
 var $258=HEAP32[(($247)>>2)];
 var $_0_i_i1_i_i=$258;label=86;break;
 case 86: 
 var $_0_i_i1_i_i;
 var $259=($_0_i_i1_i_i|0)==-1;
 if($259){label=87;break;}else{label=89;break;}
 case 87: 
 HEAP32[(($22)>>2)]=0;
 label=88;break;
 case 88: 
 if($243){label=90;break;}else{label=91;break;}
 case 89: 
 if($243){label=91;break;}else{label=90;break;}
 case 90: 
 var $262=HEAP32[(($__err)>>2)];
 var $263=$262|2;
 HEAP32[(($__err)>>2)]=$263;
 label=91;break;
 case 91: 
 var $265=HEAP32[(($21)>>2)];
 var $266=(($agg_result)|0);
 HEAP32[(($266)>>2)]=$265;
 var $$etemp$2$0=160;
 var $$etemp$2$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $$etemp$3$0=104;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $__a_end=(sp)+(144);
 var $__g=(sp)+(152);
 var $__g_end=(sp)+(312);
 var $__dc=(sp)+(320);
 var $1=(($__iob+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&74;
 if(($3|0)==8){ label=2;break;}else if(($3|0)==0){ label=3;break;}else if(($3|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $7=$__atoms;
 var $$etemp$0$0=104;
 var $$etemp$0$1=0;

 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$8,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=39;break; }
 case 6: 
 var $9=HEAP8[($this2_i_i_i)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=8;break;}else{label=7;break;}
 case 7: 
 var $13=(($__buf+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $_pre33=$__buf;
 var $_pre34=(($_pre33+1)|0);
 var $18=$14;var $_pre_phi35=$_pre34;var $_pre_phi37=$13;label=9;break;
 case 8: 
 var $16=$__buf;
 var $17=(($16+1)|0);
 var $_pre36=(($__buf+8)|0);
 var $18=$17;var $_pre_phi35=$17;var $_pre_phi37=$_pre36;label=9;break;
 case 9: 
 var $_pre_phi37;
 var $_pre_phi35;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=$__g;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 var $20=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$20;
 HEAP32[(($__dc)>>2)]=0;
 var $21=(($__b)|0);
 var $22=(($__e)|0);
 var $23=(($__buf)|0);
 var $24=(($__buf+4)|0);
 var $25=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($21)>>2)];
 var $__a_0=$18;var $_pre_i_i_i6=$_pre;label=10;break;
 case 10: 
 var $_pre_i_i_i6;
 var $__a_0;
 var $26=($_pre_i_i_i6|0)==0;
 if($26){var $44=1;var $43=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $28=(($_pre_i_i_i6+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($_pre_i_i_i6+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=$_pre_i_i_i6;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($_pre_i_i_i6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i4=$38;label=14;break; } else { label=38;break; }
 case 13: 
 var $40=HEAP32[(($29)>>2)];
 var $_0_i_i_i_i4=$40;label=14;break;
 case 14: 
 var $_0_i_i_i_i4;
 var $41=($_0_i_i_i_i4|0)==-1;
 if($41){label=15;break;}else{var $44=0;var $43=$_pre_i_i_i6;label=16;break;}
 case 15: 
 HEAP32[(($21)>>2)]=0;
 var $44=1;var $43=0;label=16;break;
 case 16: 
 var $43;
 var $44;
 var $45=HEAP32[(($22)>>2)];
 var $46=($45|0)==0;
 if($46){label=22;break;}else{label=17;break;}
 case 17: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$45;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i10=$58;label=20;break; } else { label=38;break; }
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_0_i_i1_i_i10=$60;label=20;break;
 case 20: 
 var $_0_i_i1_i_i10;
 var $61=($_0_i_i1_i_i10|0)==-1;
 if($61){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($22)>>2)]=0;
 label=22;break;
 case 22: 
 if($44){var $__a_2=$__a_0;var $_pre_i3_i_i=0;label=48;break;}else{var $65=0;label=24;break;}
 case 23: 
 if($44){var $65=$45;label=24;break;}else{var $__a_2=$__a_0;var $_pre_i3_i_i=$45;label=48;break;}
 case 24: 
 var $65;
 var $66=HEAP32[(($__a_end)>>2)];
 var $67=$66;
 var $68=$__a_0;
 var $69=((($67)-($68))|0);
 var $70=HEAP8[($this2_i_i_i)];
 var $71=$70&1;
 var $72=(($71<<24)>>24)==0;
 if($72){label=26;break;}else{label=25;break;}
 case 25: 
 var $74=HEAP32[(($24)>>2)];
 var $78=$74;label=27;break;
 case 26: 
 var $76=($70&255);
 var $77=$76>>>1;
 var $78=$77;label=27;break;
 case 27: 
 var $78;
 var $79=($69|0)==($78|0);
 if($79){label=28;break;}else{var $__a_1=$__a_0;label=41;break;}
 case 28: 
 if($72){label=30;break;}else{label=29;break;}
 case 29: 
 var $82=HEAP32[(($24)>>2)];
 var $89=$82;var $88=$82;label=31;break;
 case 30: 
 var $84=($70&255);
 var $85=$84>>>1;
 var $86=($70&255);
 var $87=$86>>>1;
 var $89=$87;var $88=$85;label=31;break;
 case 31: 
 var $88;
 var $89;
 var $90=$89<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$90,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=38;break; }
 case 32: 
 var $91=HEAP8[($this2_i_i_i)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $97=10;label=34;break;}else{label=33;break;}
 case 33: 
 var $95=HEAP32[(($23)>>2)];
 var $96=$95&-2;
 var $phitmp_i24=((($96)-(1))|0);
 var $97=$phitmp_i24;label=34;break;
 case 34: 
 var $97;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$97,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=38;break; }
 case 35: 
 var $98=HEAP8[($this2_i_i_i)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){var $103=$_pre_phi35;label=37;break;}else{label=36;break;}
 case 36: 
 var $102=HEAP32[(($_pre_phi37)>>2)];
 var $103=$102;label=37;break;
 case 37: 
 var $103;
 var $104=(($103+$88)|0);
 HEAP32[(($__a_end)>>2)]=$104;
 var $__a_1=$103;label=41;break;
 case 38: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=40;break;
 case 39: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=40;break;
 case 40: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 41: 
 var $__a_1;
 var $107=(($43+12)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(($43+16)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=($108|0)==($110|0);
 if($111){label=42;break;}else{label=43;break;}
 case 42: 
 var $113=$43;
 var $114=HEAP32[(($113)>>2)];
 var $115=(($114+36)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$116]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$117;label=44;break; } else { label=38;break; }
 case 43: 
 var $119=HEAP32[(($108)>>2)];
 var $_0_i_i=$119;label=44;break;
 case 44: 
 var $_0_i_i;
 var $121=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i,$_0_i,$__a_1,$__a_end,$__dc,$25,$__grouping,$20,$__g_end,$8);
 var $122=($121|0)==0;
 if($122){label=45;break;}else{var $__a_2=$__a_1;var $_pre_i3_i_i=$65;label=48;break;}
 case 45: 
 var $124=HEAP32[(($107)>>2)];
 var $125=HEAP32[(($109)>>2)];
 var $126=($124|0)==($125|0);
 if($126){label=46;break;}else{label=47;break;}
 case 46: 
 var $128=$43;
 var $129=HEAP32[(($128)>>2)];
 var $130=(($129+40)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$131]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i6=$43;label=10;break; } else { label=38;break; }
 case 47: 
 var $134=(($124+4)|0);
 HEAP32[(($107)>>2)]=$134;
 var $__a_0=$__a_1;var $_pre_i_i_i6=$43;label=10;break;
 case 48: 
 var $_pre_i3_i_i;
 var $__a_2;
 var $136=$__grouping;
 var $137=HEAP8[($136)];
 var $138=$137&1;
 var $139=(($138<<24)>>24)==0;
 if($139){label=50;break;}else{label=49;break;}
 case 49: 
 var $141=(($__grouping+4)|0);
 var $142=HEAP32[(($141)>>2)];
 var $146=$142;label=51;break;
 case 50: 
 var $144=($137&255);
 var $145=$144>>>1;
 var $146=$145;label=51;break;
 case 51: 
 var $146;
 var $147=($146|0)==0;
 if($147){label=54;break;}else{label=52;break;}
 case 52: 
 var $149=HEAP32[(($__g_end)>>2)];
 var $150=$149;
 var $151=$__g;
 var $152=((($150)-($151))|0);
 var $153=($152|0)<160;
 if($153){label=53;break;}else{label=54;break;}
 case 53: 
 var $155=HEAP32[(($__dc)>>2)];
 var $156=(($149+4)|0);
 HEAP32[(($__g_end)>>2)]=$156;
 HEAP32[(($149)>>2)]=$155;
 label=54;break;
 case 54: 
 var $158=HEAP32[(($__a_end)>>2)];
 var $159=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a_2,$158,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=39;break; }
 case 55: 
 HEAP32[(($__v)>>2)]=$159;
 var $161=HEAP32[(($__g_end)>>2)];
 var $162=HEAP8[($136)];
 var $163=$162&1;
 var $164=(($163<<24)>>24)==0;
 if($164){label=57;break;}else{label=56;break;}
 case 56: 
 var $166=(($__grouping+4)|0);
 var $167=HEAP32[(($166)>>2)];
 var $171=$167;label=58;break;
 case 57: 
 var $169=($162&255);
 var $170=$169>>>1;
 var $171=$170;label=58;break;
 case 58: 
 var $171;
 var $172=($171|0)==0;
 if($172){label=75;break;}else{label=59;break;}
 case 59: 
 var $174=($20|0)==($161|0);
 if($174){var $183=$162;label=63;break;}else{label=60;break;}
 case 60: 
 var $175=((($161)-(4))|0);
 var $176=($175>>>0)>($20>>>0);
 if($176){var $_012_i_i_i=$20;var $177=$175;label=61;break;}else{var $183=$162;label=63;break;}
 case 61: 
 var $177;
 var $_012_i_i_i;
 var $178=HEAP32[(($_012_i_i_i)>>2)];
 var $179=HEAP32[(($177)>>2)];
 HEAP32[(($_012_i_i_i)>>2)]=$179;
 HEAP32[(($177)>>2)]=$178;
 var $180=(($_012_i_i_i+4)|0);
 var $181=((($177)-(4))|0);
 var $182=($180>>>0)<($181>>>0);
 if($182){var $_012_i_i_i=$180;var $177=$181;label=61;break;}else{label=62;break;}
 case 62: 
 var $_pre_i=HEAP8[($136)];
 var $183=$_pre_i;label=63;break;
 case 63: 
 var $183;
 var $184=$183&1;
 var $185=(($184<<24)>>24)==0;
 if($185){label=65;break;}else{label=64;break;}
 case 64: 
 var $187=(($__grouping+8)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(($__grouping+4)|0);
 var $190=HEAP32[(($189)>>2)];
 var $197=$190;var $196=$188;label=66;break;
 case 65: 
 var $192=$__grouping;
 var $193=(($192+1)|0);
 var $194=($183&255);
 var $195=$194>>>1;
 var $197=$195;var $196=$193;label=66;break;
 case 66: 
 var $196;
 var $197;
 var $198=((($161)-(4))|0);
 var $199=($198>>>0)>($20>>>0);
 var $200=HEAP8[($196)];
 var $_not9_i=(($200<<24)>>24)<1;
 var $201=(($200<<24)>>24)==127;
 var $or_cond210_i=$_not9_i|$201;
 if($199){label=67;break;}else{var $_lcssa6_i=$200;var $or_cond2_lcssa_i=$or_cond210_i;label=72;break;}
 case 67: 
 var $202=(($196+$197)|0);
 var $203=$202;
 var $__ig_011_i=$196;var $__r_012_i=$20;var $205=$200;var $or_cond213_i=$or_cond210_i;label=68;break;
 case 68: 
 var $or_cond213_i;
 var $205;
 var $__r_012_i;
 var $__ig_011_i;
 if($or_cond213_i){label=71;break;}else{label=69;break;}
 case 69: 
 var $207=(($205<<24)>>24);
 var $208=HEAP32[(($__r_012_i)>>2)];
 var $209=($207|0)==($208|0);
 if($209){label=71;break;}else{label=70;break;}
 case 70: 
 HEAP32[(($__err)>>2)]=4;
 label=75;break;
 case 71: 
 var $212=$__ig_011_i;
 var $213=((($203)-($212))|0);
 var $214=($213|0)>1;
 var $215=(($__ig_011_i+1)|0);
 var $___ig_0_i=($214?$215:$__ig_011_i);
 var $216=(($__r_012_i+4)|0);
 var $217=($216>>>0)<($198>>>0);
 var $218=HEAP8[($___ig_0_i)];
 var $_not_i=(($218<<24)>>24)<1;
 var $219=(($218<<24)>>24)==127;
 var $or_cond2_i=$_not_i|$219;
 if($217){var $__ig_011_i=$___ig_0_i;var $__r_012_i=$216;var $205=$218;var $or_cond213_i=$or_cond2_i;label=68;break;}else{var $_lcssa6_i=$218;var $or_cond2_lcssa_i=$or_cond2_i;label=72;break;}
 case 72: 
 var $or_cond2_lcssa_i;
 var $_lcssa6_i;
 if($or_cond2_lcssa_i){label=75;break;}else{label=73;break;}
 case 73: 
 var $221=(($_lcssa6_i<<24)>>24);
 var $222=HEAP32[(($198)>>2)];
 var $223=((($222)-(1))|0);
 var $224=($223>>>0)<($221>>>0);
 if($224){label=75;break;}else{label=74;break;}
 case 74: 
 HEAP32[(($__err)>>2)]=4;
 label=75;break;
 case 75: 
 var $226=($43|0)==0;
 if($226){var $243=1;label=82;break;}else{label=76;break;}
 case 76: 
 var $228=(($43+12)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=(($43+16)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=($229|0)==($231|0);
 if($232){label=77;break;}else{label=78;break;}
 case 77: 
 var $234=$43;
 var $235=HEAP32[(($234)>>2)];
 var $236=(($235+36)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$237]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$238;label=79;break; } else { label=39;break; }
 case 78: 
 var $240=HEAP32[(($229)>>2)];
 var $_0_i_i_i_i=$240;label=79;break;
 case 79: 
 var $_0_i_i_i_i;
 var $241=($_0_i_i_i_i|0)==-1;
 if($241){label=81;break;}else{label=80;break;}
 case 80: 
 var $_pre_i_i_i=HEAP32[(($21)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $243=$phitmp_i_i_i;label=82;break;
 case 81: 
 HEAP32[(($21)>>2)]=0;
 var $243=1;label=82;break;
 case 82: 
 var $243;
 var $244=($_pre_i3_i_i|0)==0;
 if($244){label=88;break;}else{label=83;break;}
 case 83: 
 var $246=(($_pre_i3_i_i+12)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=(($_pre_i3_i_i+16)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=($247|0)==($249|0);
 if($250){label=84;break;}else{label=85;break;}
 case 84: 
 var $252=$_pre_i3_i_i;
 var $253=HEAP32[(($252)>>2)];
 var $254=(($253+36)|0);
 var $255=HEAP32[(($254)>>2)];
 var $256=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$255]($_pre_i3_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$256;label=86;break; } else { label=39;break; }
 case 85: 
 var $258=HEAP32[(($247)>>2)];
 var $_0_i_i1_i_i=$258;label=86;break;
 case 86: 
 var $_0_i_i1_i_i;
 var $259=($_0_i_i1_i_i|0)==-1;
 if($259){label=87;break;}else{label=89;break;}
 case 87: 
 HEAP32[(($22)>>2)]=0;
 label=88;break;
 case 88: 
 if($243){label=90;break;}else{label=91;break;}
 case 89: 
 if($243){label=91;break;}else{label=90;break;}
 case 90: 
 var $262=HEAP32[(($__err)>>2)];
 var $263=$262|2;
 HEAP32[(($__err)>>2)]=$263;
 label=91;break;
 case 91: 
 var $265=HEAP32[(($21)>>2)];
 var $266=(($agg_result)|0);
 HEAP32[(($266)>>2)]=$265;
 var $$etemp$2$0=160;
 var $$etemp$2$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $$etemp$3$0=104;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $__a_end=(sp)+(144);
 var $__g=(sp)+(152);
 var $__g_end=(sp)+(312);
 var $__dc=(sp)+(320);
 var $1=(($__iob+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&74;
 if(($3|0)==8){ label=2;break;}else if(($3|0)==0){ label=3;break;}else if(($3|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $7=$__atoms;
 var $$etemp$0$0=104;
 var $$etemp$0$1=0;

 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$8,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=39;break; }
 case 6: 
 var $9=HEAP8[($this2_i_i_i)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=8;break;}else{label=7;break;}
 case 7: 
 var $13=(($__buf+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $_pre33=$__buf;
 var $_pre34=(($_pre33+1)|0);
 var $18=$14;var $_pre_phi35=$_pre34;var $_pre_phi37=$13;label=9;break;
 case 8: 
 var $16=$__buf;
 var $17=(($16+1)|0);
 var $_pre36=(($__buf+8)|0);
 var $18=$17;var $_pre_phi35=$17;var $_pre_phi37=$_pre36;label=9;break;
 case 9: 
 var $_pre_phi37;
 var $_pre_phi35;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=$__g;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 var $20=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$20;
 HEAP32[(($__dc)>>2)]=0;
 var $21=(($__b)|0);
 var $22=(($__e)|0);
 var $23=(($__buf)|0);
 var $24=(($__buf+4)|0);
 var $25=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($21)>>2)];
 var $__a_0=$18;var $_pre_i_i_i6=$_pre;label=10;break;
 case 10: 
 var $_pre_i_i_i6;
 var $__a_0;
 var $26=($_pre_i_i_i6|0)==0;
 if($26){var $44=1;var $43=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $28=(($_pre_i_i_i6+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($_pre_i_i_i6+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=$_pre_i_i_i6;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($_pre_i_i_i6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i4=$38;label=14;break; } else { label=38;break; }
 case 13: 
 var $40=HEAP32[(($29)>>2)];
 var $_0_i_i_i_i4=$40;label=14;break;
 case 14: 
 var $_0_i_i_i_i4;
 var $41=($_0_i_i_i_i4|0)==-1;
 if($41){label=15;break;}else{var $44=0;var $43=$_pre_i_i_i6;label=16;break;}
 case 15: 
 HEAP32[(($21)>>2)]=0;
 var $44=1;var $43=0;label=16;break;
 case 16: 
 var $43;
 var $44;
 var $45=HEAP32[(($22)>>2)];
 var $46=($45|0)==0;
 if($46){label=22;break;}else{label=17;break;}
 case 17: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$45;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i10=$58;label=20;break; } else { label=38;break; }
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_0_i_i1_i_i10=$60;label=20;break;
 case 20: 
 var $_0_i_i1_i_i10;
 var $61=($_0_i_i1_i_i10|0)==-1;
 if($61){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($22)>>2)]=0;
 label=22;break;
 case 22: 
 if($44){var $__a_2=$__a_0;var $_pre_i3_i_i=0;label=48;break;}else{var $65=0;label=24;break;}
 case 23: 
 if($44){var $65=$45;label=24;break;}else{var $__a_2=$__a_0;var $_pre_i3_i_i=$45;label=48;break;}
 case 24: 
 var $65;
 var $66=HEAP32[(($__a_end)>>2)];
 var $67=$66;
 var $68=$__a_0;
 var $69=((($67)-($68))|0);
 var $70=HEAP8[($this2_i_i_i)];
 var $71=$70&1;
 var $72=(($71<<24)>>24)==0;
 if($72){label=26;break;}else{label=25;break;}
 case 25: 
 var $74=HEAP32[(($24)>>2)];
 var $78=$74;label=27;break;
 case 26: 
 var $76=($70&255);
 var $77=$76>>>1;
 var $78=$77;label=27;break;
 case 27: 
 var $78;
 var $79=($69|0)==($78|0);
 if($79){label=28;break;}else{var $__a_1=$__a_0;label=41;break;}
 case 28: 
 if($72){label=30;break;}else{label=29;break;}
 case 29: 
 var $82=HEAP32[(($24)>>2)];
 var $89=$82;var $88=$82;label=31;break;
 case 30: 
 var $84=($70&255);
 var $85=$84>>>1;
 var $86=($70&255);
 var $87=$86>>>1;
 var $89=$87;var $88=$85;label=31;break;
 case 31: 
 var $88;
 var $89;
 var $90=$89<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$90,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=38;break; }
 case 32: 
 var $91=HEAP8[($this2_i_i_i)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $97=10;label=34;break;}else{label=33;break;}
 case 33: 
 var $95=HEAP32[(($23)>>2)];
 var $96=$95&-2;
 var $phitmp_i24=((($96)-(1))|0);
 var $97=$phitmp_i24;label=34;break;
 case 34: 
 var $97;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$97,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=38;break; }
 case 35: 
 var $98=HEAP8[($this2_i_i_i)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){var $103=$_pre_phi35;label=37;break;}else{label=36;break;}
 case 36: 
 var $102=HEAP32[(($_pre_phi37)>>2)];
 var $103=$102;label=37;break;
 case 37: 
 var $103;
 var $104=(($103+$88)|0);
 HEAP32[(($__a_end)>>2)]=$104;
 var $__a_1=$103;label=41;break;
 case 38: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=40;break;
 case 39: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=40;break;
 case 40: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 41: 
 var $__a_1;
 var $107=(($43+12)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(($43+16)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=($108|0)==($110|0);
 if($111){label=42;break;}else{label=43;break;}
 case 42: 
 var $113=$43;
 var $114=HEAP32[(($113)>>2)];
 var $115=(($114+36)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$116]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$117;label=44;break; } else { label=38;break; }
 case 43: 
 var $119=HEAP32[(($108)>>2)];
 var $_0_i_i=$119;label=44;break;
 case 44: 
 var $_0_i_i;
 var $121=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i,$_0_i,$__a_1,$__a_end,$__dc,$25,$__grouping,$20,$__g_end,$8);
 var $122=($121|0)==0;
 if($122){label=45;break;}else{var $__a_2=$__a_1;var $_pre_i3_i_i=$65;label=48;break;}
 case 45: 
 var $124=HEAP32[(($107)>>2)];
 var $125=HEAP32[(($109)>>2)];
 var $126=($124|0)==($125|0);
 if($126){label=46;break;}else{label=47;break;}
 case 46: 
 var $128=$43;
 var $129=HEAP32[(($128)>>2)];
 var $130=(($129+40)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$131]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i6=$43;label=10;break; } else { label=38;break; }
 case 47: 
 var $134=(($124+4)|0);
 HEAP32[(($107)>>2)]=$134;
 var $__a_0=$__a_1;var $_pre_i_i_i6=$43;label=10;break;
 case 48: 
 var $_pre_i3_i_i;
 var $__a_2;
 var $136=$__grouping;
 var $137=HEAP8[($136)];
 var $138=$137&1;
 var $139=(($138<<24)>>24)==0;
 if($139){label=50;break;}else{label=49;break;}
 case 49: 
 var $141=(($__grouping+4)|0);
 var $142=HEAP32[(($141)>>2)];
 var $146=$142;label=51;break;
 case 50: 
 var $144=($137&255);
 var $145=$144>>>1;
 var $146=$145;label=51;break;
 case 51: 
 var $146;
 var $147=($146|0)==0;
 if($147){label=54;break;}else{label=52;break;}
 case 52: 
 var $149=HEAP32[(($__g_end)>>2)];
 var $150=$149;
 var $151=$__g;
 var $152=((($150)-($151))|0);
 var $153=($152|0)<160;
 if($153){label=53;break;}else{label=54;break;}
 case 53: 
 var $155=HEAP32[(($__dc)>>2)];
 var $156=(($149+4)|0);
 HEAP32[(($__g_end)>>2)]=$156;
 HEAP32[(($149)>>2)]=$155;
 label=54;break;
 case 54: 
 var $158=HEAP32[(($__a_end)>>2)];
 var $159$r=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a_2,$158,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $159$0=$159$r;var $159$1=tempRet0;if (!__THREW__) { label=55;break; } else { label=39;break; }
 case 55: 
 var $st$2$0=(($__v)|0);
 HEAP32[(($st$2$0)>>2)]=$159$0;
 var $st$3$1=(($__v+4)|0);
 HEAP32[(($st$3$1)>>2)]=$159$1;
 var $161=HEAP32[(($__g_end)>>2)];
 var $162=HEAP8[($136)];
 var $163=$162&1;
 var $164=(($163<<24)>>24)==0;
 if($164){label=57;break;}else{label=56;break;}
 case 56: 
 var $166=(($__grouping+4)|0);
 var $167=HEAP32[(($166)>>2)];
 var $171=$167;label=58;break;
 case 57: 
 var $169=($162&255);
 var $170=$169>>>1;
 var $171=$170;label=58;break;
 case 58: 
 var $171;
 var $172=($171|0)==0;
 if($172){label=75;break;}else{label=59;break;}
 case 59: 
 var $174=($20|0)==($161|0);
 if($174){var $183=$162;label=63;break;}else{label=60;break;}
 case 60: 
 var $175=((($161)-(4))|0);
 var $176=($175>>>0)>($20>>>0);
 if($176){var $_012_i_i_i=$20;var $177=$175;label=61;break;}else{var $183=$162;label=63;break;}
 case 61: 
 var $177;
 var $_012_i_i_i;
 var $178=HEAP32[(($_012_i_i_i)>>2)];
 var $179=HEAP32[(($177)>>2)];
 HEAP32[(($_012_i_i_i)>>2)]=$179;
 HEAP32[(($177)>>2)]=$178;
 var $180=(($_012_i_i_i+4)|0);
 var $181=((($177)-(4))|0);
 var $182=($180>>>0)<($181>>>0);
 if($182){var $_012_i_i_i=$180;var $177=$181;label=61;break;}else{label=62;break;}
 case 62: 
 var $_pre_i=HEAP8[($136)];
 var $183=$_pre_i;label=63;break;
 case 63: 
 var $183;
 var $184=$183&1;
 var $185=(($184<<24)>>24)==0;
 if($185){label=65;break;}else{label=64;break;}
 case 64: 
 var $187=(($__grouping+8)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(($__grouping+4)|0);
 var $190=HEAP32[(($189)>>2)];
 var $197=$190;var $196=$188;label=66;break;
 case 65: 
 var $192=$__grouping;
 var $193=(($192+1)|0);
 var $194=($183&255);
 var $195=$194>>>1;
 var $197=$195;var $196=$193;label=66;break;
 case 66: 
 var $196;
 var $197;
 var $198=((($161)-(4))|0);
 var $199=($198>>>0)>($20>>>0);
 var $200=HEAP8[($196)];
 var $_not9_i=(($200<<24)>>24)<1;
 var $201=(($200<<24)>>24)==127;
 var $or_cond210_i=$_not9_i|$201;
 if($199){label=67;break;}else{var $_lcssa6_i=$200;var $or_cond2_lcssa_i=$or_cond210_i;label=72;break;}
 case 67: 
 var $202=(($196+$197)|0);
 var $203=$202;
 var $__ig_011_i=$196;var $__r_012_i=$20;var $205=$200;var $or_cond213_i=$or_cond210_i;label=68;break;
 case 68: 
 var $or_cond213_i;
 var $205;
 var $__r_012_i;
 var $__ig_011_i;
 if($or_cond213_i){label=71;break;}else{label=69;break;}
 case 69: 
 var $207=(($205<<24)>>24);
 var $208=HEAP32[(($__r_012_i)>>2)];
 var $209=($207|0)==($208|0);
 if($209){label=71;break;}else{label=70;break;}
 case 70: 
 HEAP32[(($__err)>>2)]=4;
 label=75;break;
 case 71: 
 var $212=$__ig_011_i;
 var $213=((($203)-($212))|0);
 var $214=($213|0)>1;
 var $215=(($__ig_011_i+1)|0);
 var $___ig_0_i=($214?$215:$__ig_011_i);
 var $216=(($__r_012_i+4)|0);
 var $217=($216>>>0)<($198>>>0);
 var $218=HEAP8[($___ig_0_i)];
 var $_not_i=(($218<<24)>>24)<1;
 var $219=(($218<<24)>>24)==127;
 var $or_cond2_i=$_not_i|$219;
 if($217){var $__ig_011_i=$___ig_0_i;var $__r_012_i=$216;var $205=$218;var $or_cond213_i=$or_cond2_i;label=68;break;}else{var $_lcssa6_i=$218;var $or_cond2_lcssa_i=$or_cond2_i;label=72;break;}
 case 72: 
 var $or_cond2_lcssa_i;
 var $_lcssa6_i;
 if($or_cond2_lcssa_i){label=75;break;}else{label=73;break;}
 case 73: 
 var $221=(($_lcssa6_i<<24)>>24);
 var $222=HEAP32[(($198)>>2)];
 var $223=((($222)-(1))|0);
 var $224=($223>>>0)<($221>>>0);
 if($224){label=75;break;}else{label=74;break;}
 case 74: 
 HEAP32[(($__err)>>2)]=4;
 label=75;break;
 case 75: 
 var $226=($43|0)==0;
 if($226){var $243=1;label=82;break;}else{label=76;break;}
 case 76: 
 var $228=(($43+12)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=(($43+16)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=($229|0)==($231|0);
 if($232){label=77;break;}else{label=78;break;}
 case 77: 
 var $234=$43;
 var $235=HEAP32[(($234)>>2)];
 var $236=(($235+36)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$237]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$238;label=79;break; } else { label=39;break; }
 case 78: 
 var $240=HEAP32[(($229)>>2)];
 var $_0_i_i_i_i=$240;label=79;break;
 case 79: 
 var $_0_i_i_i_i;
 var $241=($_0_i_i_i_i|0)==-1;
 if($241){label=81;break;}else{label=80;break;}
 case 80: 
 var $_pre_i_i_i=HEAP32[(($21)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $243=$phitmp_i_i_i;label=82;break;
 case 81: 
 HEAP32[(($21)>>2)]=0;
 var $243=1;label=82;break;
 case 82: 
 var $243;
 var $244=($_pre_i3_i_i|0)==0;
 if($244){label=88;break;}else{label=83;break;}
 case 83: 
 var $246=(($_pre_i3_i_i+12)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=(($_pre_i3_i_i+16)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=($247|0)==($249|0);
 if($250){label=84;break;}else{label=85;break;}
 case 84: 
 var $252=$_pre_i3_i_i;
 var $253=HEAP32[(($252)>>2)];
 var $254=(($253+36)|0);
 var $255=HEAP32[(($254)>>2)];
 var $256=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$255]($_pre_i3_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$256;label=86;break; } else { label=39;break; }
 case 85: 
 var $258=HEAP32[(($247)>>2)];
 var $_0_i_i1_i_i=$258;label=86;break;
 case 86: 
 var $_0_i_i1_i_i;
 var $259=($_0_i_i1_i_i|0)==-1;
 if($259){label=87;break;}else{label=89;break;}
 case 87: 
 HEAP32[(($22)>>2)]=0;
 label=88;break;
 case 88: 
 if($243){label=90;break;}else{label=91;break;}
 case 89: 
 if($243){label=91;break;}else{label=90;break;}
 case 90: 
 var $262=HEAP32[(($__err)>>2)];
 var $263=$262|2;
 HEAP32[(($__err)>>2)]=$263;
 label=91;break;
 case 91: 
 var $265=HEAP32[(($21)>>2)];
 var $266=(($agg_result)|0);
 HEAP32[(($266)>>2)]=$265;
 var $$etemp$4$0=160;
 var $$etemp$4$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $$etemp$5$0=104;
 var $$etemp$5$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+376)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(128);
 var $__thousands_sep=(sp)+(136);
 var $__grouping=(sp)+(144);
 var $__buf=(sp)+(160);
 var $__a_end=(sp)+(176);
 var $__g=(sp)+(184);
 var $__g_end=(sp)+(344);
 var $__dc=(sp)+(352);
 var $__in_units=(sp)+(360);
 var $__exp=(sp)+(368);
 var $0=$__atoms;
 var $$etemp$0$0=128;
 var $$etemp$0$1=0;

 var $1=(($__atoms)|0);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$1,$__decimal_point,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=35;break; }
 case 2: 
 var $2=HEAP8[($this2_i_i_i)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=4;break;}else{label=3;break;}
 case 3: 
 var $6=(($__buf+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $_pre34=$__buf;
 var $_pre35=(($_pre34+1)|0);
 var $11=$7;var $_pre_phi36=$_pre35;var $_pre_phi38=$6;label=5;break;
 case 4: 
 var $9=$__buf;
 var $10=(($9+1)|0);
 var $_pre37=(($__buf+8)|0);
 var $11=$10;var $_pre_phi36=$10;var $_pre_phi38=$_pre37;label=5;break;
 case 5: 
 var $_pre_phi38;
 var $_pre_phi36;
 var $11;
 HEAP32[(($__a_end)>>2)]=$11;
 var $12=$__g;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 var $13=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$13;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $14=(($__b)|0);
 var $15=(($__e)|0);
 var $16=(($__buf)|0);
 var $17=(($__buf+4)|0);
 var $18=HEAP32[(($__decimal_point)>>2)];
 var $19=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($14)>>2)];
 var $__a_0=$11;var $_pre_i_i_i6=$_pre;label=6;break;
 case 6: 
 var $_pre_i_i_i6;
 var $__a_0;
 var $20=($_pre_i_i_i6|0)==0;
 if($20){var $38=1;var $37=0;label=12;break;}else{label=7;break;}
 case 7: 
 var $22=(($_pre_i_i_i6+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($_pre_i_i_i6+16)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($23|0)==($25|0);
 if($26){label=8;break;}else{label=9;break;}
 case 8: 
 var $28=$_pre_i_i_i6;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($_pre_i_i_i6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i4=$32;label=10;break; } else { label=34;break; }
 case 9: 
 var $34=HEAP32[(($23)>>2)];
 var $_0_i_i_i_i4=$34;label=10;break;
 case 10: 
 var $_0_i_i_i_i4;
 var $35=($_0_i_i_i_i4|0)==-1;
 if($35){label=11;break;}else{var $38=0;var $37=$_pre_i_i_i6;label=12;break;}
 case 11: 
 HEAP32[(($14)>>2)]=0;
 var $38=1;var $37=0;label=12;break;
 case 12: 
 var $37;
 var $38;
 var $39=HEAP32[(($15)>>2)];
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=13;break;}
 case 13: 
 var $42=(($39+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($39+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)==($45|0);
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $48=$39;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+36)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i10=$52;label=16;break; } else { label=34;break; }
 case 15: 
 var $54=HEAP32[(($43)>>2)];
 var $_0_i_i1_i_i10=$54;label=16;break;
 case 16: 
 var $_0_i_i1_i_i10;
 var $55=($_0_i_i1_i_i10|0)==-1;
 if($55){label=17;break;}else{label=19;break;}
 case 17: 
 HEAP32[(($15)>>2)]=0;
 label=18;break;
 case 18: 
 if($38){var $__a_2=$__a_0;var $_pre_i3_i_i=0;label=44;break;}else{var $59=0;label=20;break;}
 case 19: 
 if($38){var $59=$39;label=20;break;}else{var $__a_2=$__a_0;var $_pre_i3_i_i=$39;label=44;break;}
 case 20: 
 var $59;
 var $60=HEAP32[(($__a_end)>>2)];
 var $61=$60;
 var $62=$__a_0;
 var $63=((($61)-($62))|0);
 var $64=HEAP8[($this2_i_i_i)];
 var $65=$64&1;
 var $66=(($65<<24)>>24)==0;
 if($66){label=22;break;}else{label=21;break;}
 case 21: 
 var $68=HEAP32[(($17)>>2)];
 var $72=$68;label=23;break;
 case 22: 
 var $70=($64&255);
 var $71=$70>>>1;
 var $72=$71;label=23;break;
 case 23: 
 var $72;
 var $73=($63|0)==($72|0);
 if($73){label=24;break;}else{var $__a_1=$__a_0;label=37;break;}
 case 24: 
 if($66){label=26;break;}else{label=25;break;}
 case 25: 
 var $76=HEAP32[(($17)>>2)];
 var $83=$76;var $82=$76;label=27;break;
 case 26: 
 var $78=($64&255);
 var $79=$78>>>1;
 var $80=($64&255);
 var $81=$80>>>1;
 var $83=$81;var $82=$79;label=27;break;
 case 27: 
 var $82;
 var $83;
 var $84=$83<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$84,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=34;break; }
 case 28: 
 var $85=HEAP8[($this2_i_i_i)];
 var $86=$85&1;
 var $87=(($86<<24)>>24)==0;
 if($87){var $91=10;label=30;break;}else{label=29;break;}
 case 29: 
 var $89=HEAP32[(($16)>>2)];
 var $90=$89&-2;
 var $phitmp_i24=((($90)-(1))|0);
 var $91=$phitmp_i24;label=30;break;
 case 30: 
 var $91;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$91,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $92=HEAP8[($this2_i_i_i)];
 var $93=$92&1;
 var $94=(($93<<24)>>24)==0;
 if($94){var $97=$_pre_phi36;label=33;break;}else{label=32;break;}
 case 32: 
 var $96=HEAP32[(($_pre_phi38)>>2)];
 var $97=$96;label=33;break;
 case 33: 
 var $97;
 var $98=(($97+$82)|0);
 HEAP32[(($__a_end)>>2)]=$98;
 var $__a_1=$97;label=37;break;
 case 34: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=36;break;
 case 36: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 37: 
 var $__a_1;
 var $101=(($37+12)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=(($37+16)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=($102|0)==($104|0);
 if($105){label=38;break;}else{label=39;break;}
 case 38: 
 var $107=$37;
 var $108=HEAP32[(($107)>>2)];
 var $109=(($108+36)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$110]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$111;label=40;break; } else { label=34;break; }
 case 39: 
 var $113=HEAP32[(($102)>>2)];
 var $_0_i_i=$113;label=40;break;
 case 40: 
 var $_0_i_i;
 var $115=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0_i_i,$__in_units,$__exp,$__a_1,$__a_end,$18,$19,$__grouping,$13,$__g_end,$__dc,$1);
 var $116=($115|0)==0;
 if($116){label=41;break;}else{var $__a_2=$__a_1;var $_pre_i3_i_i=$59;label=44;break;}
 case 41: 
 var $118=HEAP32[(($101)>>2)];
 var $119=HEAP32[(($103)>>2)];
 var $120=($118|0)==($119|0);
 if($120){label=42;break;}else{label=43;break;}
 case 42: 
 var $122=$37;
 var $123=HEAP32[(($122)>>2)];
 var $124=(($123+40)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$125]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i6=$37;label=6;break; } else { label=34;break; }
 case 43: 
 var $128=(($118+4)|0);
 HEAP32[(($101)>>2)]=$128;
 var $__a_0=$__a_1;var $_pre_i_i_i6=$37;label=6;break;
 case 44: 
 var $_pre_i3_i_i;
 var $__a_2;
 var $130=$__grouping;
 var $131=HEAP8[($130)];
 var $132=$131&1;
 var $133=(($132<<24)>>24)==0;
 if($133){label=46;break;}else{label=45;break;}
 case 45: 
 var $135=(($__grouping+4)|0);
 var $136=HEAP32[(($135)>>2)];
 var $140=$136;label=47;break;
 case 46: 
 var $138=($131&255);
 var $139=$138>>>1;
 var $140=$139;label=47;break;
 case 47: 
 var $140;
 var $141=($140|0)==0;
 var $142=HEAP8[($__in_units)];
 var $143=(($142<<24)>>24)==0;
 var $or_cond=$141|$143;
 if($or_cond){label=50;break;}else{label=48;break;}
 case 48: 
 var $145=HEAP32[(($__g_end)>>2)];
 var $146=$145;
 var $147=$__g;
 var $148=((($146)-($147))|0);
 var $149=($148|0)<160;
 if($149){label=49;break;}else{label=50;break;}
 case 49: 
 var $151=HEAP32[(($__dc)>>2)];
 var $152=(($145+4)|0);
 HEAP32[(($__g_end)>>2)]=$152;
 HEAP32[(($145)>>2)]=$151;
 label=50;break;
 case 50: 
 var $154=HEAP32[(($__a_end)>>2)];
 var $155=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a_2,$154,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=35;break; }
 case 51: 
 HEAPF32[(($__v)>>2)]=$155;
 var $157=HEAP32[(($__g_end)>>2)];
 var $158=HEAP8[($130)];
 var $159=$158&1;
 var $160=(($159<<24)>>24)==0;
 if($160){label=53;break;}else{label=52;break;}
 case 52: 
 var $162=(($__grouping+4)|0);
 var $163=HEAP32[(($162)>>2)];
 var $167=$163;label=54;break;
 case 53: 
 var $165=($158&255);
 var $166=$165>>>1;
 var $167=$166;label=54;break;
 case 54: 
 var $167;
 var $168=($167|0)==0;
 if($168){label=71;break;}else{label=55;break;}
 case 55: 
 var $170=($13|0)==($157|0);
 if($170){var $179=$158;label=59;break;}else{label=56;break;}
 case 56: 
 var $171=((($157)-(4))|0);
 var $172=($171>>>0)>($13>>>0);
 if($172){var $_012_i_i_i=$13;var $173=$171;label=57;break;}else{var $179=$158;label=59;break;}
 case 57: 
 var $173;
 var $_012_i_i_i;
 var $174=HEAP32[(($_012_i_i_i)>>2)];
 var $175=HEAP32[(($173)>>2)];
 HEAP32[(($_012_i_i_i)>>2)]=$175;
 HEAP32[(($173)>>2)]=$174;
 var $176=(($_012_i_i_i+4)|0);
 var $177=((($173)-(4))|0);
 var $178=($176>>>0)<($177>>>0);
 if($178){var $_012_i_i_i=$176;var $173=$177;label=57;break;}else{label=58;break;}
 case 58: 
 var $_pre_i=HEAP8[($130)];
 var $179=$_pre_i;label=59;break;
 case 59: 
 var $179;
 var $180=$179&1;
 var $181=(($180<<24)>>24)==0;
 if($181){label=61;break;}else{label=60;break;}
 case 60: 
 var $183=(($__grouping+8)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=(($__grouping+4)|0);
 var $186=HEAP32[(($185)>>2)];
 var $193=$186;var $192=$184;label=62;break;
 case 61: 
 var $188=$__grouping;
 var $189=(($188+1)|0);
 var $190=($179&255);
 var $191=$190>>>1;
 var $193=$191;var $192=$189;label=62;break;
 case 62: 
 var $192;
 var $193;
 var $194=((($157)-(4))|0);
 var $195=($194>>>0)>($13>>>0);
 var $196=HEAP8[($192)];
 var $_not9_i=(($196<<24)>>24)<1;
 var $197=(($196<<24)>>24)==127;
 var $or_cond210_i=$_not9_i|$197;
 if($195){label=63;break;}else{var $_lcssa6_i=$196;var $or_cond2_lcssa_i=$or_cond210_i;label=68;break;}
 case 63: 
 var $198=(($192+$193)|0);
 var $199=$198;
 var $__ig_011_i=$192;var $__r_012_i=$13;var $201=$196;var $or_cond213_i=$or_cond210_i;label=64;break;
 case 64: 
 var $or_cond213_i;
 var $201;
 var $__r_012_i;
 var $__ig_011_i;
 if($or_cond213_i){label=67;break;}else{label=65;break;}
 case 65: 
 var $203=(($201<<24)>>24);
 var $204=HEAP32[(($__r_012_i)>>2)];
 var $205=($203|0)==($204|0);
 if($205){label=67;break;}else{label=66;break;}
 case 66: 
 HEAP32[(($__err)>>2)]=4;
 label=71;break;
 case 67: 
 var $208=$__ig_011_i;
 var $209=((($199)-($208))|0);
 var $210=($209|0)>1;
 var $211=(($__ig_011_i+1)|0);
 var $___ig_0_i=($210?$211:$__ig_011_i);
 var $212=(($__r_012_i+4)|0);
 var $213=($212>>>0)<($194>>>0);
 var $214=HEAP8[($___ig_0_i)];
 var $_not_i=(($214<<24)>>24)<1;
 var $215=(($214<<24)>>24)==127;
 var $or_cond2_i=$_not_i|$215;
 if($213){var $__ig_011_i=$___ig_0_i;var $__r_012_i=$212;var $201=$214;var $or_cond213_i=$or_cond2_i;label=64;break;}else{var $_lcssa6_i=$214;var $or_cond2_lcssa_i=$or_cond2_i;label=68;break;}
 case 68: 
 var $or_cond2_lcssa_i;
 var $_lcssa6_i;
 if($or_cond2_lcssa_i){label=71;break;}else{label=69;break;}
 case 69: 
 var $217=(($_lcssa6_i<<24)>>24);
 var $218=HEAP32[(($194)>>2)];
 var $219=((($218)-(1))|0);
 var $220=($219>>>0)<($217>>>0);
 if($220){label=71;break;}else{label=70;break;}
 case 70: 
 HEAP32[(($__err)>>2)]=4;
 label=71;break;
 case 71: 
 var $222=($37|0)==0;
 if($222){var $239=1;label=78;break;}else{label=72;break;}
 case 72: 
 var $224=(($37+12)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=(($37+16)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=($225|0)==($227|0);
 if($228){label=73;break;}else{label=74;break;}
 case 73: 
 var $230=$37;
 var $231=HEAP32[(($230)>>2)];
 var $232=(($231+36)|0);
 var $233=HEAP32[(($232)>>2)];
 var $234=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$233]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$234;label=75;break; } else { label=35;break; }
 case 74: 
 var $236=HEAP32[(($225)>>2)];
 var $_0_i_i_i_i=$236;label=75;break;
 case 75: 
 var $_0_i_i_i_i;
 var $237=($_0_i_i_i_i|0)==-1;
 if($237){label=77;break;}else{label=76;break;}
 case 76: 
 var $_pre_i_i_i=HEAP32[(($14)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $239=$phitmp_i_i_i;label=78;break;
 case 77: 
 HEAP32[(($14)>>2)]=0;
 var $239=1;label=78;break;
 case 78: 
 var $239;
 var $240=($_pre_i3_i_i|0)==0;
 if($240){label=84;break;}else{label=79;break;}
 case 79: 
 var $242=(($_pre_i3_i_i+12)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=(($_pre_i3_i_i+16)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=($243|0)==($245|0);
 if($246){label=80;break;}else{label=81;break;}
 case 80: 
 var $248=$_pre_i3_i_i;
 var $249=HEAP32[(($248)>>2)];
 var $250=(($249+36)|0);
 var $251=HEAP32[(($250)>>2)];
 var $252=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$251]($_pre_i3_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$252;label=82;break; } else { label=35;break; }
 case 81: 
 var $254=HEAP32[(($243)>>2)];
 var $_0_i_i1_i_i=$254;label=82;break;
 case 82: 
 var $_0_i_i1_i_i;
 var $255=($_0_i_i1_i_i|0)==-1;
 if($255){label=83;break;}else{label=85;break;}
 case 83: 
 HEAP32[(($15)>>2)]=0;
 label=84;break;
 case 84: 
 if($239){label=86;break;}else{label=87;break;}
 case 85: 
 if($239){label=87;break;}else{label=86;break;}
 case 86: 
 var $258=HEAP32[(($__err)>>2)];
 var $259=$258|2;
 HEAP32[(($__err)>>2)]=$259;
 label=87;break;
 case 87: 
 var $261=HEAP32[(($14)>>2)];
 var $262=(($agg_result)|0);
 HEAP32[(($262)>>2)]=$261;
 var $$etemp$2$0=160;
 var $$etemp$2$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $$etemp$3$0=128;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+376)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(128);
 var $__thousands_sep=(sp)+(136);
 var $__grouping=(sp)+(144);
 var $__buf=(sp)+(160);
 var $__a_end=(sp)+(176);
 var $__g=(sp)+(184);
 var $__g_end=(sp)+(344);
 var $__dc=(sp)+(352);
 var $__in_units=(sp)+(360);
 var $__exp=(sp)+(368);
 var $0=$__atoms;
 var $$etemp$0$0=128;
 var $$etemp$0$1=0;

 var $1=(($__atoms)|0);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$1,$__decimal_point,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=35;break; }
 case 2: 
 var $2=HEAP8[($this2_i_i_i)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=4;break;}else{label=3;break;}
 case 3: 
 var $6=(($__buf+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $_pre34=$__buf;
 var $_pre35=(($_pre34+1)|0);
 var $11=$7;var $_pre_phi36=$_pre35;var $_pre_phi38=$6;label=5;break;
 case 4: 
 var $9=$__buf;
 var $10=(($9+1)|0);
 var $_pre37=(($__buf+8)|0);
 var $11=$10;var $_pre_phi36=$10;var $_pre_phi38=$_pre37;label=5;break;
 case 5: 
 var $_pre_phi38;
 var $_pre_phi36;
 var $11;
 HEAP32[(($__a_end)>>2)]=$11;
 var $12=$__g;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 var $13=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$13;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $14=(($__b)|0);
 var $15=(($__e)|0);
 var $16=(($__buf)|0);
 var $17=(($__buf+4)|0);
 var $18=HEAP32[(($__decimal_point)>>2)];
 var $19=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($14)>>2)];
 var $__a_0=$11;var $_pre_i_i_i6=$_pre;label=6;break;
 case 6: 
 var $_pre_i_i_i6;
 var $__a_0;
 var $20=($_pre_i_i_i6|0)==0;
 if($20){var $38=1;var $37=0;label=12;break;}else{label=7;break;}
 case 7: 
 var $22=(($_pre_i_i_i6+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($_pre_i_i_i6+16)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($23|0)==($25|0);
 if($26){label=8;break;}else{label=9;break;}
 case 8: 
 var $28=$_pre_i_i_i6;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($_pre_i_i_i6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i4=$32;label=10;break; } else { label=34;break; }
 case 9: 
 var $34=HEAP32[(($23)>>2)];
 var $_0_i_i_i_i4=$34;label=10;break;
 case 10: 
 var $_0_i_i_i_i4;
 var $35=($_0_i_i_i_i4|0)==-1;
 if($35){label=11;break;}else{var $38=0;var $37=$_pre_i_i_i6;label=12;break;}
 case 11: 
 HEAP32[(($14)>>2)]=0;
 var $38=1;var $37=0;label=12;break;
 case 12: 
 var $37;
 var $38;
 var $39=HEAP32[(($15)>>2)];
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=13;break;}
 case 13: 
 var $42=(($39+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($39+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)==($45|0);
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $48=$39;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+36)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i10=$52;label=16;break; } else { label=34;break; }
 case 15: 
 var $54=HEAP32[(($43)>>2)];
 var $_0_i_i1_i_i10=$54;label=16;break;
 case 16: 
 var $_0_i_i1_i_i10;
 var $55=($_0_i_i1_i_i10|0)==-1;
 if($55){label=17;break;}else{label=19;break;}
 case 17: 
 HEAP32[(($15)>>2)]=0;
 label=18;break;
 case 18: 
 if($38){var $__a_2=$__a_0;var $_pre_i3_i_i=0;label=44;break;}else{var $59=0;label=20;break;}
 case 19: 
 if($38){var $59=$39;label=20;break;}else{var $__a_2=$__a_0;var $_pre_i3_i_i=$39;label=44;break;}
 case 20: 
 var $59;
 var $60=HEAP32[(($__a_end)>>2)];
 var $61=$60;
 var $62=$__a_0;
 var $63=((($61)-($62))|0);
 var $64=HEAP8[($this2_i_i_i)];
 var $65=$64&1;
 var $66=(($65<<24)>>24)==0;
 if($66){label=22;break;}else{label=21;break;}
 case 21: 
 var $68=HEAP32[(($17)>>2)];
 var $72=$68;label=23;break;
 case 22: 
 var $70=($64&255);
 var $71=$70>>>1;
 var $72=$71;label=23;break;
 case 23: 
 var $72;
 var $73=($63|0)==($72|0);
 if($73){label=24;break;}else{var $__a_1=$__a_0;label=37;break;}
 case 24: 
 if($66){label=26;break;}else{label=25;break;}
 case 25: 
 var $76=HEAP32[(($17)>>2)];
 var $83=$76;var $82=$76;label=27;break;
 case 26: 
 var $78=($64&255);
 var $79=$78>>>1;
 var $80=($64&255);
 var $81=$80>>>1;
 var $83=$81;var $82=$79;label=27;break;
 case 27: 
 var $82;
 var $83;
 var $84=$83<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$84,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=34;break; }
 case 28: 
 var $85=HEAP8[($this2_i_i_i)];
 var $86=$85&1;
 var $87=(($86<<24)>>24)==0;
 if($87){var $91=10;label=30;break;}else{label=29;break;}
 case 29: 
 var $89=HEAP32[(($16)>>2)];
 var $90=$89&-2;
 var $phitmp_i24=((($90)-(1))|0);
 var $91=$phitmp_i24;label=30;break;
 case 30: 
 var $91;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$91,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $92=HEAP8[($this2_i_i_i)];
 var $93=$92&1;
 var $94=(($93<<24)>>24)==0;
 if($94){var $97=$_pre_phi36;label=33;break;}else{label=32;break;}
 case 32: 
 var $96=HEAP32[(($_pre_phi38)>>2)];
 var $97=$96;label=33;break;
 case 33: 
 var $97;
 var $98=(($97+$82)|0);
 HEAP32[(($__a_end)>>2)]=$98;
 var $__a_1=$97;label=37;break;
 case 34: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=36;break;
 case 36: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 37: 
 var $__a_1;
 var $101=(($37+12)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=(($37+16)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=($102|0)==($104|0);
 if($105){label=38;break;}else{label=39;break;}
 case 38: 
 var $107=$37;
 var $108=HEAP32[(($107)>>2)];
 var $109=(($108+36)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$110]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$111;label=40;break; } else { label=34;break; }
 case 39: 
 var $113=HEAP32[(($102)>>2)];
 var $_0_i_i=$113;label=40;break;
 case 40: 
 var $_0_i_i;
 var $115=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0_i_i,$__in_units,$__exp,$__a_1,$__a_end,$18,$19,$__grouping,$13,$__g_end,$__dc,$1);
 var $116=($115|0)==0;
 if($116){label=41;break;}else{var $__a_2=$__a_1;var $_pre_i3_i_i=$59;label=44;break;}
 case 41: 
 var $118=HEAP32[(($101)>>2)];
 var $119=HEAP32[(($103)>>2)];
 var $120=($118|0)==($119|0);
 if($120){label=42;break;}else{label=43;break;}
 case 42: 
 var $122=$37;
 var $123=HEAP32[(($122)>>2)];
 var $124=(($123+40)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$125]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i6=$37;label=6;break; } else { label=34;break; }
 case 43: 
 var $128=(($118+4)|0);
 HEAP32[(($101)>>2)]=$128;
 var $__a_0=$__a_1;var $_pre_i_i_i6=$37;label=6;break;
 case 44: 
 var $_pre_i3_i_i;
 var $__a_2;
 var $130=$__grouping;
 var $131=HEAP8[($130)];
 var $132=$131&1;
 var $133=(($132<<24)>>24)==0;
 if($133){label=46;break;}else{label=45;break;}
 case 45: 
 var $135=(($__grouping+4)|0);
 var $136=HEAP32[(($135)>>2)];
 var $140=$136;label=47;break;
 case 46: 
 var $138=($131&255);
 var $139=$138>>>1;
 var $140=$139;label=47;break;
 case 47: 
 var $140;
 var $141=($140|0)==0;
 var $142=HEAP8[($__in_units)];
 var $143=(($142<<24)>>24)==0;
 var $or_cond=$141|$143;
 if($or_cond){label=50;break;}else{label=48;break;}
 case 48: 
 var $145=HEAP32[(($__g_end)>>2)];
 var $146=$145;
 var $147=$__g;
 var $148=((($146)-($147))|0);
 var $149=($148|0)<160;
 if($149){label=49;break;}else{label=50;break;}
 case 49: 
 var $151=HEAP32[(($__dc)>>2)];
 var $152=(($145+4)|0);
 HEAP32[(($__g_end)>>2)]=$152;
 HEAP32[(($145)>>2)]=$151;
 label=50;break;
 case 50: 
 var $154=HEAP32[(($__a_end)>>2)];
 var $155=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a_2,$154,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=35;break; }
 case 51: 
 HEAPF64[(($__v)>>3)]=$155;
 var $157=HEAP32[(($__g_end)>>2)];
 var $158=HEAP8[($130)];
 var $159=$158&1;
 var $160=(($159<<24)>>24)==0;
 if($160){label=53;break;}else{label=52;break;}
 case 52: 
 var $162=(($__grouping+4)|0);
 var $163=HEAP32[(($162)>>2)];
 var $167=$163;label=54;break;
 case 53: 
 var $165=($158&255);
 var $166=$165>>>1;
 var $167=$166;label=54;break;
 case 54: 
 var $167;
 var $168=($167|0)==0;
 if($168){label=71;break;}else{label=55;break;}
 case 55: 
 var $170=($13|0)==($157|0);
 if($170){var $179=$158;label=59;break;}else{label=56;break;}
 case 56: 
 var $171=((($157)-(4))|0);
 var $172=($171>>>0)>($13>>>0);
 if($172){var $_012_i_i_i=$13;var $173=$171;label=57;break;}else{var $179=$158;label=59;break;}
 case 57: 
 var $173;
 var $_012_i_i_i;
 var $174=HEAP32[(($_012_i_i_i)>>2)];
 var $175=HEAP32[(($173)>>2)];
 HEAP32[(($_012_i_i_i)>>2)]=$175;
 HEAP32[(($173)>>2)]=$174;
 var $176=(($_012_i_i_i+4)|0);
 var $177=((($173)-(4))|0);
 var $178=($176>>>0)<($177>>>0);
 if($178){var $_012_i_i_i=$176;var $173=$177;label=57;break;}else{label=58;break;}
 case 58: 
 var $_pre_i=HEAP8[($130)];
 var $179=$_pre_i;label=59;break;
 case 59: 
 var $179;
 var $180=$179&1;
 var $181=(($180<<24)>>24)==0;
 if($181){label=61;break;}else{label=60;break;}
 case 60: 
 var $183=(($__grouping+8)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=(($__grouping+4)|0);
 var $186=HEAP32[(($185)>>2)];
 var $193=$186;var $192=$184;label=62;break;
 case 61: 
 var $188=$__grouping;
 var $189=(($188+1)|0);
 var $190=($179&255);
 var $191=$190>>>1;
 var $193=$191;var $192=$189;label=62;break;
 case 62: 
 var $192;
 var $193;
 var $194=((($157)-(4))|0);
 var $195=($194>>>0)>($13>>>0);
 var $196=HEAP8[($192)];
 var $_not9_i=(($196<<24)>>24)<1;
 var $197=(($196<<24)>>24)==127;
 var $or_cond210_i=$_not9_i|$197;
 if($195){label=63;break;}else{var $_lcssa6_i=$196;var $or_cond2_lcssa_i=$or_cond210_i;label=68;break;}
 case 63: 
 var $198=(($192+$193)|0);
 var $199=$198;
 var $__ig_011_i=$192;var $__r_012_i=$13;var $201=$196;var $or_cond213_i=$or_cond210_i;label=64;break;
 case 64: 
 var $or_cond213_i;
 var $201;
 var $__r_012_i;
 var $__ig_011_i;
 if($or_cond213_i){label=67;break;}else{label=65;break;}
 case 65: 
 var $203=(($201<<24)>>24);
 var $204=HEAP32[(($__r_012_i)>>2)];
 var $205=($203|0)==($204|0);
 if($205){label=67;break;}else{label=66;break;}
 case 66: 
 HEAP32[(($__err)>>2)]=4;
 label=71;break;
 case 67: 
 var $208=$__ig_011_i;
 var $209=((($199)-($208))|0);
 var $210=($209|0)>1;
 var $211=(($__ig_011_i+1)|0);
 var $___ig_0_i=($210?$211:$__ig_011_i);
 var $212=(($__r_012_i+4)|0);
 var $213=($212>>>0)<($194>>>0);
 var $214=HEAP8[($___ig_0_i)];
 var $_not_i=(($214<<24)>>24)<1;
 var $215=(($214<<24)>>24)==127;
 var $or_cond2_i=$_not_i|$215;
 if($213){var $__ig_011_i=$___ig_0_i;var $__r_012_i=$212;var $201=$214;var $or_cond213_i=$or_cond2_i;label=64;break;}else{var $_lcssa6_i=$214;var $or_cond2_lcssa_i=$or_cond2_i;label=68;break;}
 case 68: 
 var $or_cond2_lcssa_i;
 var $_lcssa6_i;
 if($or_cond2_lcssa_i){label=71;break;}else{label=69;break;}
 case 69: 
 var $217=(($_lcssa6_i<<24)>>24);
 var $218=HEAP32[(($194)>>2)];
 var $219=((($218)-(1))|0);
 var $220=($219>>>0)<($217>>>0);
 if($220){label=71;break;}else{label=70;break;}
 case 70: 
 HEAP32[(($__err)>>2)]=4;
 label=71;break;
 case 71: 
 var $222=($37|0)==0;
 if($222){var $239=1;label=78;break;}else{label=72;break;}
 case 72: 
 var $224=(($37+12)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=(($37+16)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=($225|0)==($227|0);
 if($228){label=73;break;}else{label=74;break;}
 case 73: 
 var $230=$37;
 var $231=HEAP32[(($230)>>2)];
 var $232=(($231+36)|0);
 var $233=HEAP32[(($232)>>2)];
 var $234=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$233]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$234;label=75;break; } else { label=35;break; }
 case 74: 
 var $236=HEAP32[(($225)>>2)];
 var $_0_i_i_i_i=$236;label=75;break;
 case 75: 
 var $_0_i_i_i_i;
 var $237=($_0_i_i_i_i|0)==-1;
 if($237){label=77;break;}else{label=76;break;}
 case 76: 
 var $_pre_i_i_i=HEAP32[(($14)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $239=$phitmp_i_i_i;label=78;break;
 case 77: 
 HEAP32[(($14)>>2)]=0;
 var $239=1;label=78;break;
 case 78: 
 var $239;
 var $240=($_pre_i3_i_i|0)==0;
 if($240){label=84;break;}else{label=79;break;}
 case 79: 
 var $242=(($_pre_i3_i_i+12)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=(($_pre_i3_i_i+16)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=($243|0)==($245|0);
 if($246){label=80;break;}else{label=81;break;}
 case 80: 
 var $248=$_pre_i3_i_i;
 var $249=HEAP32[(($248)>>2)];
 var $250=(($249+36)|0);
 var $251=HEAP32[(($250)>>2)];
 var $252=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$251]($_pre_i3_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$252;label=82;break; } else { label=35;break; }
 case 81: 
 var $254=HEAP32[(($243)>>2)];
 var $_0_i_i1_i_i=$254;label=82;break;
 case 82: 
 var $_0_i_i1_i_i;
 var $255=($_0_i_i1_i_i|0)==-1;
 if($255){label=83;break;}else{label=85;break;}
 case 83: 
 HEAP32[(($15)>>2)]=0;
 label=84;break;
 case 84: 
 if($239){label=86;break;}else{label=87;break;}
 case 85: 
 if($239){label=87;break;}else{label=86;break;}
 case 86: 
 var $258=HEAP32[(($__err)>>2)];
 var $259=$258|2;
 HEAP32[(($__err)>>2)]=$259;
 label=87;break;
 case 87: 
 var $261=HEAP32[(($14)>>2)];
 var $262=(($agg_result)|0);
 HEAP32[(($262)>>2)]=$261;
 var $$etemp$2$0=160;
 var $$etemp$2$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $$etemp$3$0=128;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+376)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(128);
 var $__thousands_sep=(sp)+(136);
 var $__grouping=(sp)+(144);
 var $__buf=(sp)+(160);
 var $__a_end=(sp)+(176);
 var $__g=(sp)+(184);
 var $__g_end=(sp)+(344);
 var $__dc=(sp)+(352);
 var $__in_units=(sp)+(360);
 var $__exp=(sp)+(368);
 var $0=$__atoms;
 var $$etemp$0$0=128;
 var $$etemp$0$1=0;

 var $1=(($__atoms)|0);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$1,$__decimal_point,$__thousands_sep);
 var $this2_i_i_i=$__buf;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=35;break; }
 case 2: 
 var $2=HEAP8[($this2_i_i_i)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=4;break;}else{label=3;break;}
 case 3: 
 var $6=(($__buf+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $_pre34=$__buf;
 var $_pre35=(($_pre34+1)|0);
 var $11=$7;var $_pre_phi36=$_pre35;var $_pre_phi38=$6;label=5;break;
 case 4: 
 var $9=$__buf;
 var $10=(($9+1)|0);
 var $_pre37=(($__buf+8)|0);
 var $11=$10;var $_pre_phi36=$10;var $_pre_phi38=$_pre37;label=5;break;
 case 5: 
 var $_pre_phi38;
 var $_pre_phi36;
 var $11;
 HEAP32[(($__a_end)>>2)]=$11;
 var $12=$__g;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 var $13=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$13;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $14=(($__b)|0);
 var $15=(($__e)|0);
 var $16=(($__buf)|0);
 var $17=(($__buf+4)|0);
 var $18=HEAP32[(($__decimal_point)>>2)];
 var $19=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($14)>>2)];
 var $__a_0=$11;var $_pre_i_i_i6=$_pre;label=6;break;
 case 6: 
 var $_pre_i_i_i6;
 var $__a_0;
 var $20=($_pre_i_i_i6|0)==0;
 if($20){var $38=1;var $37=0;label=12;break;}else{label=7;break;}
 case 7: 
 var $22=(($_pre_i_i_i6+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($_pre_i_i_i6+16)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($23|0)==($25|0);
 if($26){label=8;break;}else{label=9;break;}
 case 8: 
 var $28=$_pre_i_i_i6;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($_pre_i_i_i6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i4=$32;label=10;break; } else { label=34;break; }
 case 9: 
 var $34=HEAP32[(($23)>>2)];
 var $_0_i_i_i_i4=$34;label=10;break;
 case 10: 
 var $_0_i_i_i_i4;
 var $35=($_0_i_i_i_i4|0)==-1;
 if($35){label=11;break;}else{var $38=0;var $37=$_pre_i_i_i6;label=12;break;}
 case 11: 
 HEAP32[(($14)>>2)]=0;
 var $38=1;var $37=0;label=12;break;
 case 12: 
 var $37;
 var $38;
 var $39=HEAP32[(($15)>>2)];
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=13;break;}
 case 13: 
 var $42=(($39+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($39+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)==($45|0);
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $48=$39;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+36)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i10=$52;label=16;break; } else { label=34;break; }
 case 15: 
 var $54=HEAP32[(($43)>>2)];
 var $_0_i_i1_i_i10=$54;label=16;break;
 case 16: 
 var $_0_i_i1_i_i10;
 var $55=($_0_i_i1_i_i10|0)==-1;
 if($55){label=17;break;}else{label=19;break;}
 case 17: 
 HEAP32[(($15)>>2)]=0;
 label=18;break;
 case 18: 
 if($38){var $__a_2=$__a_0;var $_pre_i3_i_i=0;label=44;break;}else{var $59=0;label=20;break;}
 case 19: 
 if($38){var $59=$39;label=20;break;}else{var $__a_2=$__a_0;var $_pre_i3_i_i=$39;label=44;break;}
 case 20: 
 var $59;
 var $60=HEAP32[(($__a_end)>>2)];
 var $61=$60;
 var $62=$__a_0;
 var $63=((($61)-($62))|0);
 var $64=HEAP8[($this2_i_i_i)];
 var $65=$64&1;
 var $66=(($65<<24)>>24)==0;
 if($66){label=22;break;}else{label=21;break;}
 case 21: 
 var $68=HEAP32[(($17)>>2)];
 var $72=$68;label=23;break;
 case 22: 
 var $70=($64&255);
 var $71=$70>>>1;
 var $72=$71;label=23;break;
 case 23: 
 var $72;
 var $73=($63|0)==($72|0);
 if($73){label=24;break;}else{var $__a_1=$__a_0;label=37;break;}
 case 24: 
 if($66){label=26;break;}else{label=25;break;}
 case 25: 
 var $76=HEAP32[(($17)>>2)];
 var $83=$76;var $82=$76;label=27;break;
 case 26: 
 var $78=($64&255);
 var $79=$78>>>1;
 var $80=($64&255);
 var $81=$80>>>1;
 var $83=$81;var $82=$79;label=27;break;
 case 27: 
 var $82;
 var $83;
 var $84=$83<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$84,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=34;break; }
 case 28: 
 var $85=HEAP8[($this2_i_i_i)];
 var $86=$85&1;
 var $87=(($86<<24)>>24)==0;
 if($87){var $91=10;label=30;break;}else{label=29;break;}
 case 29: 
 var $89=HEAP32[(($16)>>2)];
 var $90=$89&-2;
 var $phitmp_i24=((($90)-(1))|0);
 var $91=$phitmp_i24;label=30;break;
 case 30: 
 var $91;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$91,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $92=HEAP8[($this2_i_i_i)];
 var $93=$92&1;
 var $94=(($93<<24)>>24)==0;
 if($94){var $97=$_pre_phi36;label=33;break;}else{label=32;break;}
 case 32: 
 var $96=HEAP32[(($_pre_phi38)>>2)];
 var $97=$96;label=33;break;
 case 33: 
 var $97;
 var $98=(($97+$82)|0);
 HEAP32[(($__a_end)>>2)]=$98;
 var $__a_1=$97;label=37;break;
 case 34: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=36;break;
 case 36: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 37: 
 var $__a_1;
 var $101=(($37+12)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=(($37+16)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=($102|0)==($104|0);
 if($105){label=38;break;}else{label=39;break;}
 case 38: 
 var $107=$37;
 var $108=HEAP32[(($107)>>2)];
 var $109=(($108+36)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$110]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$111;label=40;break; } else { label=34;break; }
 case 39: 
 var $113=HEAP32[(($102)>>2)];
 var $_0_i_i=$113;label=40;break;
 case 40: 
 var $_0_i_i;
 var $115=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0_i_i,$__in_units,$__exp,$__a_1,$__a_end,$18,$19,$__grouping,$13,$__g_end,$__dc,$1);
 var $116=($115|0)==0;
 if($116){label=41;break;}else{var $__a_2=$__a_1;var $_pre_i3_i_i=$59;label=44;break;}
 case 41: 
 var $118=HEAP32[(($101)>>2)];
 var $119=HEAP32[(($103)>>2)];
 var $120=($118|0)==($119|0);
 if($120){label=42;break;}else{label=43;break;}
 case 42: 
 var $122=$37;
 var $123=HEAP32[(($122)>>2)];
 var $124=(($123+40)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$125]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i6=$37;label=6;break; } else { label=34;break; }
 case 43: 
 var $128=(($118+4)|0);
 HEAP32[(($101)>>2)]=$128;
 var $__a_0=$__a_1;var $_pre_i_i_i6=$37;label=6;break;
 case 44: 
 var $_pre_i3_i_i;
 var $__a_2;
 var $130=$__grouping;
 var $131=HEAP8[($130)];
 var $132=$131&1;
 var $133=(($132<<24)>>24)==0;
 if($133){label=46;break;}else{label=45;break;}
 case 45: 
 var $135=(($__grouping+4)|0);
 var $136=HEAP32[(($135)>>2)];
 var $140=$136;label=47;break;
 case 46: 
 var $138=($131&255);
 var $139=$138>>>1;
 var $140=$139;label=47;break;
 case 47: 
 var $140;
 var $141=($140|0)==0;
 var $142=HEAP8[($__in_units)];
 var $143=(($142<<24)>>24)==0;
 var $or_cond=$141|$143;
 if($or_cond){label=50;break;}else{label=48;break;}
 case 48: 
 var $145=HEAP32[(($__g_end)>>2)];
 var $146=$145;
 var $147=$__g;
 var $148=((($146)-($147))|0);
 var $149=($148|0)<160;
 if($149){label=49;break;}else{label=50;break;}
 case 49: 
 var $151=HEAP32[(($__dc)>>2)];
 var $152=(($145+4)|0);
 HEAP32[(($__g_end)>>2)]=$152;
 HEAP32[(($145)>>2)]=$151;
 label=50;break;
 case 50: 
 var $154=HEAP32[(($__a_end)>>2)];
 var $155=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a_2,$154,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=35;break; }
 case 51: 
 HEAPF64[(($__v)>>3)]=$155;
 var $157=HEAP32[(($__g_end)>>2)];
 var $158=HEAP8[($130)];
 var $159=$158&1;
 var $160=(($159<<24)>>24)==0;
 if($160){label=53;break;}else{label=52;break;}
 case 52: 
 var $162=(($__grouping+4)|0);
 var $163=HEAP32[(($162)>>2)];
 var $167=$163;label=54;break;
 case 53: 
 var $165=($158&255);
 var $166=$165>>>1;
 var $167=$166;label=54;break;
 case 54: 
 var $167;
 var $168=($167|0)==0;
 if($168){label=71;break;}else{label=55;break;}
 case 55: 
 var $170=($13|0)==($157|0);
 if($170){var $179=$158;label=59;break;}else{label=56;break;}
 case 56: 
 var $171=((($157)-(4))|0);
 var $172=($171>>>0)>($13>>>0);
 if($172){var $_012_i_i_i=$13;var $173=$171;label=57;break;}else{var $179=$158;label=59;break;}
 case 57: 
 var $173;
 var $_012_i_i_i;
 var $174=HEAP32[(($_012_i_i_i)>>2)];
 var $175=HEAP32[(($173)>>2)];
 HEAP32[(($_012_i_i_i)>>2)]=$175;
 HEAP32[(($173)>>2)]=$174;
 var $176=(($_012_i_i_i+4)|0);
 var $177=((($173)-(4))|0);
 var $178=($176>>>0)<($177>>>0);
 if($178){var $_012_i_i_i=$176;var $173=$177;label=57;break;}else{label=58;break;}
 case 58: 
 var $_pre_i=HEAP8[($130)];
 var $179=$_pre_i;label=59;break;
 case 59: 
 var $179;
 var $180=$179&1;
 var $181=(($180<<24)>>24)==0;
 if($181){label=61;break;}else{label=60;break;}
 case 60: 
 var $183=(($__grouping+8)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=(($__grouping+4)|0);
 var $186=HEAP32[(($185)>>2)];
 var $193=$186;var $192=$184;label=62;break;
 case 61: 
 var $188=$__grouping;
 var $189=(($188+1)|0);
 var $190=($179&255);
 var $191=$190>>>1;
 var $193=$191;var $192=$189;label=62;break;
 case 62: 
 var $192;
 var $193;
 var $194=((($157)-(4))|0);
 var $195=($194>>>0)>($13>>>0);
 var $196=HEAP8[($192)];
 var $_not9_i=(($196<<24)>>24)<1;
 var $197=(($196<<24)>>24)==127;
 var $or_cond210_i=$_not9_i|$197;
 if($195){label=63;break;}else{var $_lcssa6_i=$196;var $or_cond2_lcssa_i=$or_cond210_i;label=68;break;}
 case 63: 
 var $198=(($192+$193)|0);
 var $199=$198;
 var $__ig_011_i=$192;var $__r_012_i=$13;var $201=$196;var $or_cond213_i=$or_cond210_i;label=64;break;
 case 64: 
 var $or_cond213_i;
 var $201;
 var $__r_012_i;
 var $__ig_011_i;
 if($or_cond213_i){label=67;break;}else{label=65;break;}
 case 65: 
 var $203=(($201<<24)>>24);
 var $204=HEAP32[(($__r_012_i)>>2)];
 var $205=($203|0)==($204|0);
 if($205){label=67;break;}else{label=66;break;}
 case 66: 
 HEAP32[(($__err)>>2)]=4;
 label=71;break;
 case 67: 
 var $208=$__ig_011_i;
 var $209=((($199)-($208))|0);
 var $210=($209|0)>1;
 var $211=(($__ig_011_i+1)|0);
 var $___ig_0_i=($210?$211:$__ig_011_i);
 var $212=(($__r_012_i+4)|0);
 var $213=($212>>>0)<($194>>>0);
 var $214=HEAP8[($___ig_0_i)];
 var $_not_i=(($214<<24)>>24)<1;
 var $215=(($214<<24)>>24)==127;
 var $or_cond2_i=$_not_i|$215;
 if($213){var $__ig_011_i=$___ig_0_i;var $__r_012_i=$212;var $201=$214;var $or_cond213_i=$or_cond2_i;label=64;break;}else{var $_lcssa6_i=$214;var $or_cond2_lcssa_i=$or_cond2_i;label=68;break;}
 case 68: 
 var $or_cond2_lcssa_i;
 var $_lcssa6_i;
 if($or_cond2_lcssa_i){label=71;break;}else{label=69;break;}
 case 69: 
 var $217=(($_lcssa6_i<<24)>>24);
 var $218=HEAP32[(($194)>>2)];
 var $219=((($218)-(1))|0);
 var $220=($219>>>0)<($217>>>0);
 if($220){label=71;break;}else{label=70;break;}
 case 70: 
 HEAP32[(($__err)>>2)]=4;
 label=71;break;
 case 71: 
 var $222=($37|0)==0;
 if($222){var $239=1;label=78;break;}else{label=72;break;}
 case 72: 
 var $224=(($37+12)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=(($37+16)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=($225|0)==($227|0);
 if($228){label=73;break;}else{label=74;break;}
 case 73: 
 var $230=$37;
 var $231=HEAP32[(($230)>>2)];
 var $232=(($231+36)|0);
 var $233=HEAP32[(($232)>>2)];
 var $234=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$233]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$234;label=75;break; } else { label=35;break; }
 case 74: 
 var $236=HEAP32[(($225)>>2)];
 var $_0_i_i_i_i=$236;label=75;break;
 case 75: 
 var $_0_i_i_i_i;
 var $237=($_0_i_i_i_i|0)==-1;
 if($237){label=77;break;}else{label=76;break;}
 case 76: 
 var $_pre_i_i_i=HEAP32[(($14)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $239=$phitmp_i_i_i;label=78;break;
 case 77: 
 HEAP32[(($14)>>2)]=0;
 var $239=1;label=78;break;
 case 78: 
 var $239;
 var $240=($_pre_i3_i_i|0)==0;
 if($240){label=84;break;}else{label=79;break;}
 case 79: 
 var $242=(($_pre_i3_i_i+12)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=(($_pre_i3_i_i+16)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=($243|0)==($245|0);
 if($246){label=80;break;}else{label=81;break;}
 case 80: 
 var $248=$_pre_i3_i_i;
 var $249=HEAP32[(($248)>>2)];
 var $250=(($249+36)|0);
 var $251=HEAP32[(($250)>>2)];
 var $252=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$251]($_pre_i3_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$252;label=82;break; } else { label=35;break; }
 case 81: 
 var $254=HEAP32[(($243)>>2)];
 var $_0_i_i1_i_i=$254;label=82;break;
 case 82: 
 var $_0_i_i1_i_i;
 var $255=($_0_i_i1_i_i|0)==-1;
 if($255){label=83;break;}else{label=85;break;}
 case 83: 
 HEAP32[(($15)>>2)]=0;
 label=84;break;
 case 84: 
 if($239){label=86;break;}else{label=87;break;}
 case 85: 
 if($239){label=87;break;}else{label=86;break;}
 case 86: 
 var $258=HEAP32[(($__err)>>2)];
 var $259=$258|2;
 HEAP32[(($__err)>>2)]=$259;
 label=87;break;
 case 87: 
 var $261=HEAP32[(($14)>>2)];
 var $262=(($agg_result)|0);
 HEAP32[(($262)>>2)]=$261;
 var $$etemp$2$0=160;
 var $$etemp$2$1=0;

 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $$etemp$3$0=128;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__va=sp;
 var $1=(($__va)|0);
 var $2=$__va;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_uselocale($__l);
 var $4=_vsnprintf($__s,$__n,$__format,$1);

 var $5=($3|0)==0;
 if($5){label=4;break;}else{label=2;break;}
 case 2: 
 var $7=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1,0); var $9$1 = tempRet0;
 var $10=$9$0;
 ___clang_call_terminate($10);
 throw "Reached an unreachable!";
 case 4: 
 STACKTOP=sp;return $4;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$__s,$__ob,$__op,$__oe,$__iob,$__fl){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__sp=sp;
 var $1=(($__s)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=(($agg_result)|0);
 HEAP32[(($5)>>2)]=0;
 label=19;break;
 case 3: 
 var $7=$__oe;
 var $8=$__ob;
 var $9=((($7)-($8))|0);
 var $10=(($__iob+12)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)>($9|0);
 var $13=((($11)-($9))|0);
 var $__ns_0=($12?$13:0);
 var $14=$__op;
 var $15=((($14)-($8))|0);
 var $16=($15|0)>0;
 if($16){label=4;break;}else{label=6;break;}
 case 4: 
 var $18=$2;
 var $19=HEAP32[(($18)>>2)];
 var $20=(($19+48)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=FUNCTION_TABLE[$21]($2,$__ob,$15);
 var $23=($22|0)==($15|0);
 if($23){label=6;break;}else{label=5;break;}
 case 5: 
 HEAP32[(($1)>>2)]=0;
 var $25=(($agg_result)|0);
 HEAP32[(($25)>>2)]=0;
 label=19;break;
 case 6: 
 var $27=($__ns_0|0)>0;
 if($27){label=7;break;}else{label=15;break;}
 case 7: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($__sp,$__ns_0,$__fl);
 var $29=$__sp;
 var $30=HEAP8[($29)];
 var $31=$30&1;
 var $32=(($31<<24)>>24)==0;
 if($32){label=9;break;}else{label=8;break;}
 case 8: 
 var $34=(($__sp+8)|0);
 var $35=HEAP32[(($34)>>2)];
 var $39=$35;label=10;break;
 case 9: 
 var $37=$__sp;
 var $38=(($37+1)|0);
 var $39=$38;label=10;break;
 case 10: 
 var $39;
 var $40=$2;
 var $41=HEAP32[(($40)>>2)];
 var $42=(($41+48)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$43]($2,$39,$__ns_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=13;break; }
 case 11: 
 var $45=($44|0)==($__ns_0|0);
 if($45){label=14;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($1)>>2)]=0;
 var $46=(($agg_result)|0);
 HEAP32[(($46)>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
 label=19;break;
 case 13: 
 var $48$0 = ___cxa_find_matching_catch(-1, -1); var $48$1 = tempRet0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
 ___resumeException($48$0)
 case 14: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
 label=15;break;
 case 15: 
 var $51=((($7)-($14))|0);
 var $52=($51|0)>0;
 if($52){label=16;break;}else{label=18;break;}
 case 16: 
 var $54=$2;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+48)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=FUNCTION_TABLE[$57]($2,$__op,$51);
 var $59=($58|0)==($51|0);
 if($59){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP32[(($1)>>2)]=0;
 var $61=(($agg_result)|0);
 HEAP32[(($61)>>2)]=0;
 label=19;break;
 case 18: 
 HEAP32[(($10)>>2)]=0;
 var $63=(($agg_result)|0);
 HEAP32[(($63)>>2)]=$2;
 label=19;break;
 case 19: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__va=sp;
 var $1=(($__va)|0);
 var $2=$__va;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_uselocale($__l);
 var $4=(function() { try { __THREW__ = 0; return _vasprintf($__s,$__format,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 

 var $6=($3|0)==0;
 if($6){label=5;break;}else{label=3;break;}
 case 3: 
 var $8=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1,0); var $10$1 = tempRet0;
 var $11=$10$0;
 ___clang_call_terminate($11);
 throw "Reached an unreachable!";
 case 5: 
 STACKTOP=sp;return $4;
 case 6: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1); var $13$1 = tempRet0;
 var $14=($3|0)==0;
 if($14){label=9;break;}else{label=7;break;}
 case 7: 
 var $16=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1,0); var $18$1 = tempRet0;
 var $19=$18$0;
 ___clang_call_terminate($19);
 throw "Reached an unreachable!";
 case 9: 
 ___resumeException($13$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$__s,$__ob,$__op,$__oe,$__iob,$__fl){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__sp=sp;
 var $1=(($__s)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=(($agg_result)|0);
 HEAP32[(($5)>>2)]=0;
 label=19;break;
 case 3: 
 var $7=$__oe;
 var $8=$__ob;
 var $9=((($7)-($8))|0);
 var $10=$9>>2;
 var $11=(($__iob+12)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)>($10|0);
 var $14=((($12)-($10))|0);
 var $__ns_0=($13?$14:0);
 var $15=$__op;
 var $16=((($15)-($8))|0);
 var $17=$16>>2;
 var $18=($16|0)>0;
 if($18){label=4;break;}else{label=6;break;}
 case 4: 
 var $20=$2;
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+48)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=FUNCTION_TABLE[$23]($2,$__ob,$17);
 var $25=($24|0)==($17|0);
 if($25){label=6;break;}else{label=5;break;}
 case 5: 
 HEAP32[(($1)>>2)]=0;
 var $27=(($agg_result)|0);
 HEAP32[(($27)>>2)]=0;
 label=19;break;
 case 6: 
 var $29=($__ns_0|0)>0;
 if($29){label=7;break;}else{label=15;break;}
 case 7: 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns_0,$__fl);
 var $31=$__sp;
 var $32=HEAP8[($31)];
 var $33=$32&1;
 var $34=(($33<<24)>>24)==0;
 if($34){label=9;break;}else{label=8;break;}
 case 8: 
 var $36=(($__sp+8)|0);
 var $37=HEAP32[(($36)>>2)];
 var $40=$37;label=10;break;
 case 9: 
 var $39=(($__sp+4)|0);
 var $40=$39;label=10;break;
 case 10: 
 var $40;
 var $41=$2;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+48)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$44]($2,$40,$__ns_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=13;break; }
 case 11: 
 var $46=($45|0)==($__ns_0|0);
 if($46){label=14;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($1)>>2)]=0;
 var $47=(($agg_result)|0);
 HEAP32[(($47)>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
 label=19;break;
 case 13: 
 var $49$0 = ___cxa_find_matching_catch(-1, -1); var $49$1 = tempRet0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
 ___resumeException($49$0)
 case 14: 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
 label=15;break;
 case 15: 
 var $52=((($7)-($15))|0);
 var $53=$52>>2;
 var $54=($52|0)>0;
 if($54){label=16;break;}else{label=18;break;}
 case 16: 
 var $56=$2;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+48)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=FUNCTION_TABLE[$59]($2,$__op,$53);
 var $61=($60|0)==($53|0);
 if($61){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP32[(($1)>>2)]=0;
 var $63=(($agg_result)|0);
 HEAP32[(($63)>>2)]=0;
 label=19;break;
 case 18: 
 HEAP32[(($11)>>2)]=0;
 var $65=(($agg_result)|0);
 HEAP32[(($65)>>2)]=$2;
 label=19;break;
 case 19: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $17=0;label=6;break;}else{label=2;break;}
 case 2: 
 var $5=(($2+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($2+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6|0)==($8|0);
 if($9){label=3;break;}else{var $17=$2;label=6;break;}
 case 3: 
 var $10=$2;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+36)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=FUNCTION_TABLE[$13]($2);
 var $15=($14|0)==-1;
 if($15){label=5;break;}else{label=4;break;}
 case 4: 
 var $_pre_i_i_i=HEAP32[(($1)>>2)];
 var $17=$_pre_i_i_i;label=6;break;
 case 5: 
 HEAP32[(($1)>>2)]=0;
 var $17=0;label=6;break;
 case 6: 
 var $17;
 var $18=($17|0)==0;
 var $19=(($__e)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==0;
 if($21){label=11;break;}else{label=7;break;}
 case 7: 
 var $23=(($20+12)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($20+16)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($24|0)==($26|0);
 if($27){label=8;break;}else{label=10;break;}
 case 8: 
 var $28=$20;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=FUNCTION_TABLE[$31]($20);
 var $33=($32|0)==-1;
 if($33){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($19)>>2)]=0;
 label=11;break;
 case 10: 
 if($18){var $39=$20;label=13;break;}else{label=12;break;}
 case 11: 
 if($18){label=12;break;}else{var $39=0;label=13;break;}
 case 12: 
 var $36=HEAP32[(($__err)>>2)];
 var $37=$36|6;
 HEAP32[(($__err)>>2)]=$37;
 var $_02=0;label=52;break;
 case 13: 
 var $39;
 var $40=HEAP32[(($1)>>2)];
 var $41=(($40+12)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(($40+16)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=($42|0)==($44|0);
 if($45){label=14;break;}else{label=15;break;}
 case 14: 
 var $47=$40;
 var $48=HEAP32[(($47)>>2)];
 var $49=(($48+36)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=FUNCTION_TABLE[$50]($40);
 var $extract_t_i=(($51)&255);
 var $_0_i_off0_i=$extract_t_i;label=16;break;
 case 15: 
 var $53=HEAP8[($42)];
 var $_0_i_off0_i=$53;label=16;break;
 case 16: 
 var $_0_i_off0_i;
 var $isascii1_i=(($_0_i_off0_i<<24)>>24)>-1;
 if($isascii1_i){label=17;break;}else{label=18;break;}
 case 17: 
 var $54=(($_0_i_off0_i<<24)>>24);
 var $55=(($__ct+8)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56+($54<<1))|0);
 var $58=HEAP16[(($57)>>1)];
 var $59=$58&2048;
 var $60=(($59<<16)>>16)==0;
 if($60){label=18;break;}else{label=19;break;}
 case 18: 
 var $61=HEAP32[(($__err)>>2)];
 var $62=$61|4;
 HEAP32[(($__err)>>2)]=$62;
 var $_02=0;label=52;break;
 case 19: 
 var $64=$__ct;
 var $65=HEAP32[(($64)>>2)];
 var $66=(($65+36)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=FUNCTION_TABLE[$67]($__ct,$_0_i_off0_i,0);
 var $69=(($68<<24)>>24);
 var $70=HEAP32[(($1)>>2)];
 var $71=(($70+12)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(($70+16)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=($72|0)==($74|0);
 if($75){label=20;break;}else{label=21;break;}
 case 20: 
 var $77=$70;
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78+40)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=FUNCTION_TABLE[$80]($70);
 var $__r_0_in=$69;var $_0_in=$__n;var $84=$39;var $_pre_i2_i_i8=$39;label=22;break;
 case 21: 
 var $83=(($72+1)|0);
 HEAP32[(($71)>>2)]=$83;
 var $__r_0_in=$69;var $_0_in=$__n;var $84=$39;var $_pre_i2_i_i8=$39;label=22;break;
 case 22: 
 var $_pre_i2_i_i8;
 var $84;
 var $_0_in;
 var $__r_0_in;
 var $__r_0=((($__r_0_in)-(48))|0);
 var $_0=((($_0_in)-(1))|0);
 var $85=HEAP32[(($1)>>2)];
 var $86=($85|0)==0;
 if($86){var $100=0;label=27;break;}else{label=23;break;}
 case 23: 
 var $88=(($85+12)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(($85+16)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=($89|0)==($91|0);
 if($92){label=24;break;}else{var $100=$85;label=27;break;}
 case 24: 
 var $93=$85;
 var $94=HEAP32[(($93)>>2)];
 var $95=(($94+36)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=FUNCTION_TABLE[$96]($85);
 var $98=($97|0)==-1;
 if($98){label=26;break;}else{label=25;break;}
 case 25: 
 var $_pre_i_i_i4=HEAP32[(($1)>>2)];
 var $100=$_pre_i_i_i4;label=27;break;
 case 26: 
 HEAP32[(($1)>>2)]=0;
 var $100=0;label=27;break;
 case 27: 
 var $100;
 var $101=($100|0)==0;
 var $102=($84|0)==0;
 if($102){var $116=0;var $_pre_i2_i_i22=$_pre_i2_i_i8;label=31;break;}else{label=28;break;}
 case 28: 
 var $104=(($84+12)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=(($84+16)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=($105|0)==($107|0);
 if($108){label=29;break;}else{var $116=$84;var $_pre_i2_i_i22=$_pre_i2_i_i8;label=31;break;}
 case 29: 
 var $109=$84;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+36)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=FUNCTION_TABLE[$112]($84);
 var $114=($113|0)==-1;
 if($114){label=30;break;}else{var $116=$_pre_i2_i_i8;var $_pre_i2_i_i22=$_pre_i2_i_i8;label=31;break;}
 case 30: 
 HEAP32[(($19)>>2)]=0;
 var $116=0;var $_pre_i2_i_i22=0;label=31;break;
 case 31: 
 var $_pre_i2_i_i22;
 var $116;
 var $117=($116|0)==0;
 var $tmp_i_i10=$101^$117;
 var $118=($_0|0)>0;
 var $or_cond=$tmp_i_i10&$118;
 var $119=HEAP32[(($1)>>2)];
 if($or_cond){label=32;break;}else{label=40;break;}
 case 32: 
 var $121=(($119+12)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=(($119+16)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=($122|0)==($124|0);
 if($125){label=33;break;}else{label=34;break;}
 case 33: 
 var $127=$119;
 var $128=HEAP32[(($127)>>2)];
 var $129=(($128+36)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=FUNCTION_TABLE[$130]($119);
 var $extract_t_i11=(($131)&255);
 var $_0_i_off0_i12=$extract_t_i11;label=35;break;
 case 34: 
 var $133=HEAP8[($122)];
 var $_0_i_off0_i12=$133;label=35;break;
 case 35: 
 var $_0_i_off0_i12;
 var $isascii1_i14=(($_0_i_off0_i12<<24)>>24)>-1;
 if($isascii1_i14){label=36;break;}else{var $_02=$__r_0;label=52;break;}
 case 36: 
 var $134=(($_0_i_off0_i12<<24)>>24);
 var $135=HEAP32[(($55)>>2)];
 var $136=(($135+($134<<1))|0);
 var $137=HEAP16[(($136)>>1)];
 var $138=$137&2048;
 var $139=(($138<<16)>>16)==0;
 if($139){var $_02=$__r_0;label=52;break;}else{label=37;break;}
 case 37: 
 var $141=((($__r_0)*(10))&-1);
 var $142=HEAP32[(($64)>>2)];
 var $143=(($142+36)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=FUNCTION_TABLE[$144]($__ct,$_0_i_off0_i12,0);
 var $146=(($145<<24)>>24);
 var $147=((($146)+($141))|0);
 var $148=HEAP32[(($1)>>2)];
 var $149=(($148+12)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=(($148+16)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=($150|0)==($152|0);
 if($153){label=38;break;}else{label=39;break;}
 case 38: 
 var $155=$148;
 var $156=HEAP32[(($155)>>2)];
 var $157=(($156+40)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=FUNCTION_TABLE[$158]($148);
 var $__r_0_in=$147;var $_0_in=$_0;var $84=$116;var $_pre_i2_i_i8=$_pre_i2_i_i22;label=22;break;
 case 39: 
 var $161=(($150+1)|0);
 HEAP32[(($149)>>2)]=$161;
 var $__r_0_in=$147;var $_0_in=$_0;var $84=$116;var $_pre_i2_i_i8=$_pre_i2_i_i22;label=22;break;
 case 40: 
 var $163=($119|0)==0;
 if($163){var $177=0;label=45;break;}else{label=41;break;}
 case 41: 
 var $165=(($119+12)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(($119+16)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=($166|0)==($168|0);
 if($169){label=42;break;}else{var $177=$119;label=45;break;}
 case 42: 
 var $170=$119;
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+36)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=FUNCTION_TABLE[$173]($119);
 var $175=($174|0)==-1;
 if($175){label=44;break;}else{label=43;break;}
 case 43: 
 var $_pre_i_i_i18=HEAP32[(($1)>>2)];
 var $177=$_pre_i_i_i18;label=45;break;
 case 44: 
 HEAP32[(($1)>>2)]=0;
 var $177=0;label=45;break;
 case 45: 
 var $177;
 var $178=($177|0)==0;
 var $179=($_pre_i2_i_i22|0)==0;
 if($179){label=50;break;}else{label=46;break;}
 case 46: 
 var $181=(($_pre_i2_i_i22+12)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=(($_pre_i2_i_i22+16)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=($182|0)==($184|0);
 if($185){label=47;break;}else{label=49;break;}
 case 47: 
 var $186=$_pre_i2_i_i22;
 var $187=HEAP32[(($186)>>2)];
 var $188=(($187+36)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=FUNCTION_TABLE[$189]($_pre_i2_i_i22);
 var $191=($190|0)==-1;
 if($191){label=48;break;}else{label=49;break;}
 case 48: 
 HEAP32[(($19)>>2)]=0;
 label=50;break;
 case 49: 
 if($178){var $_02=$__r_0;label=52;break;}else{label=51;break;}
 case 50: 
 if($178){label=51;break;}else{var $_02=$__r_0;label=52;break;}
 case 51: 
 var $194=HEAP32[(($__err)>>2)];
 var $195=$194|2;
 HEAP32[(($__err)>>2)]=$195;
 var $_02=$__r_0;label=52;break;
 case 52: 
 var $_02;
 STACKTOP=sp;return $_02;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $20=1;label=8;break;}else{label=2;break;}
 case 2: 
 var $5=(($2+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($2+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6|0)==($8|0);
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 var $11=$2;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+36)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=FUNCTION_TABLE[$14]($2);
 var $_0_i_i_i_i=$15;label=5;break;
 case 4: 
 var $17=HEAP32[(($6)>>2)];
 var $_0_i_i_i_i=$17;label=5;break;
 case 5: 
 var $_0_i_i_i_i;
 var $18=($_0_i_i_i_i|0)==-1;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $_pre_i_i_i=HEAP32[(($1)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $20=$phitmp_i_i_i;label=8;break;
 case 7: 
 HEAP32[(($1)>>2)]=0;
 var $20=1;label=8;break;
 case 8: 
 var $20;
 var $21=(($__e)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=14;break;}else{label=9;break;}
 case 9: 
 var $25=(($22+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($22+16)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($26|0)==($28|0);
 if($29){label=10;break;}else{label=11;break;}
 case 10: 
 var $31=$22;
 var $32=HEAP32[(($31)>>2)];
 var $33=(($32+36)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=FUNCTION_TABLE[$34]($22);
 var $_0_i_i1_i_i=$35;label=12;break;
 case 11: 
 var $37=HEAP32[(($26)>>2)];
 var $_0_i_i1_i_i=$37;label=12;break;
 case 12: 
 var $_0_i_i1_i_i;
 var $38=($_0_i_i1_i_i|0)==-1;
 if($38){label=13;break;}else{label=15;break;}
 case 13: 
 HEAP32[(($21)>>2)]=0;
 label=14;break;
 case 14: 
 if($20){label=16;break;}else{var $44=0;label=17;break;}
 case 15: 
 if($20){var $44=$22;label=17;break;}else{label=16;break;}
 case 16: 
 var $41=HEAP32[(($__err)>>2)];
 var $42=$41|6;
 HEAP32[(($__err)>>2)]=$42;
 var $_02=0;label=63;break;
 case 17: 
 var $44;
 var $45=HEAP32[(($1)>>2)];
 var $46=(($45+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($45+16)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($47|0)==($49|0);
 if($50){label=18;break;}else{label=19;break;}
 case 18: 
 var $52=$45;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+36)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=FUNCTION_TABLE[$55]($45);
 var $_0_i_i=$56;label=20;break;
 case 19: 
 var $58=HEAP32[(($47)>>2)];
 var $_0_i_i=$58;label=20;break;
 case 20: 
 var $_0_i_i;
 var $59=$__ct;
 var $60=HEAP32[(($59)>>2)];
 var $61=(($60+12)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=FUNCTION_TABLE[$62]($__ct,2048,$_0_i_i);
 if($63){label=22;break;}else{label=21;break;}
 case 21: 
 var $65=HEAP32[(($__err)>>2)];
 var $66=$65|4;
 HEAP32[(($__err)>>2)]=$66;
 var $_02=0;label=63;break;
 case 22: 
 var $68=$__ct;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+52)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=FUNCTION_TABLE[$71]($__ct,$_0_i_i,0);
 var $73=(($72<<24)>>24);
 var $74=HEAP32[(($1)>>2)];
 var $75=(($74+12)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=(($74+16)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=($76|0)==($78|0);
 if($79){label=23;break;}else{label=24;break;}
 case 23: 
 var $81=$74;
 var $82=HEAP32[(($81)>>2)];
 var $83=(($82+40)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=FUNCTION_TABLE[$84]($74);
 var $__r_0_in=$73;var $_0_in=$__n;var $88=$44;var $_pre_i3_i_i11=$44;label=25;break;
 case 24: 
 var $87=(($76+4)|0);
 HEAP32[(($75)>>2)]=$87;
 var $__r_0_in=$73;var $_0_in=$__n;var $88=$44;var $_pre_i3_i_i11=$44;label=25;break;
 case 25: 
 var $_pre_i3_i_i11;
 var $88;
 var $_0_in;
 var $__r_0_in;
 var $__r_0=((($__r_0_in)-(48))|0);
 var $_0=((($_0_in)-(1))|0);
 var $89=HEAP32[(($1)>>2)];
 var $90=($89|0)==0;
 if($90){var $107=1;label=32;break;}else{label=26;break;}
 case 26: 
 var $92=(($89+12)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(($89+16)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($93|0)==($95|0);
 if($96){label=27;break;}else{label=28;break;}
 case 27: 
 var $98=$89;
 var $99=HEAP32[(($98)>>2)];
 var $100=(($99+36)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=FUNCTION_TABLE[$101]($89);
 var $_0_i_i_i_i3=$102;label=29;break;
 case 28: 
 var $104=HEAP32[(($93)>>2)];
 var $_0_i_i_i_i3=$104;label=29;break;
 case 29: 
 var $_0_i_i_i_i3;
 var $105=($_0_i_i_i_i3|0)==-1;
 if($105){label=31;break;}else{label=30;break;}
 case 30: 
 var $_pre_i_i_i5=HEAP32[(($1)>>2)];
 var $phitmp_i_i_i6=($_pre_i_i_i5|0)==0;
 var $107=$phitmp_i_i_i6;label=32;break;
 case 31: 
 HEAP32[(($1)>>2)]=0;
 var $107=1;label=32;break;
 case 32: 
 var $107;
 var $108=($88|0)==0;
 if($108){var $126=1;var $125=0;var $_pre_i3_i_i26=$_pre_i3_i_i11;label=39;break;}else{label=33;break;}
 case 33: 
 var $110=(($88+12)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=(($88+16)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($111|0)==($113|0);
 if($114){label=34;break;}else{label=35;break;}
 case 34: 
 var $116=$88;
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+36)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=FUNCTION_TABLE[$119]($88);
 var $_0_i_i1_i_i9=$120;label=36;break;
 case 35: 
 var $122=HEAP32[(($111)>>2)];
 var $_0_i_i1_i_i9=$122;label=36;break;
 case 36: 
 var $_0_i_i1_i_i9;
 var $123=($_0_i_i1_i_i9|0)==-1;
 if($123){label=38;break;}else{label=37;break;}
 case 37: 
 var $phitmp_i4_i_i12=($_pre_i3_i_i11|0)==0;
 var $126=$phitmp_i4_i_i12;var $125=$_pre_i3_i_i11;var $_pre_i3_i_i26=$_pre_i3_i_i11;label=39;break;
 case 38: 
 HEAP32[(($21)>>2)]=0;
 var $126=1;var $125=0;var $_pre_i3_i_i26=0;label=39;break;
 case 39: 
 var $_pre_i3_i_i26;
 var $125;
 var $126;
 var $tmp_i_i14=$107^$126;
 var $127=($_0|0)>0;
 var $or_cond=$tmp_i_i14&$127;
 var $128=HEAP32[(($1)>>2)];
 if($or_cond){label=40;break;}else{label=47;break;}
 case 40: 
 var $130=(($128+12)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=(($128+16)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=($131|0)==($133|0);
 if($134){label=41;break;}else{label=42;break;}
 case 41: 
 var $136=$128;
 var $137=HEAP32[(($136)>>2)];
 var $138=(($137+36)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=FUNCTION_TABLE[$139]($128);
 var $_0_i_i15=$140;label=43;break;
 case 42: 
 var $142=HEAP32[(($131)>>2)];
 var $_0_i_i15=$142;label=43;break;
 case 43: 
 var $_0_i_i15;
 var $143=HEAP32[(($59)>>2)];
 var $144=(($143+12)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=FUNCTION_TABLE[$145]($__ct,2048,$_0_i_i15);
 if($146){label=44;break;}else{var $_02=$__r_0;label=63;break;}
 case 44: 
 var $148=((($__r_0)*(10))&-1);
 var $149=HEAP32[(($68)>>2)];
 var $150=(($149+52)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=FUNCTION_TABLE[$151]($__ct,$_0_i_i15,0);
 var $153=(($152<<24)>>24);
 var $154=((($153)+($148))|0);
 var $155=HEAP32[(($1)>>2)];
 var $156=(($155+12)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($155+16)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=($157|0)==($159|0);
 if($160){label=45;break;}else{label=46;break;}
 case 45: 
 var $162=$155;
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+40)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=FUNCTION_TABLE[$165]($155);
 var $__r_0_in=$154;var $_0_in=$_0;var $88=$125;var $_pre_i3_i_i11=$_pre_i3_i_i26;label=25;break;
 case 46: 
 var $168=(($157+4)|0);
 HEAP32[(($156)>>2)]=$168;
 var $__r_0_in=$154;var $_0_in=$_0;var $88=$125;var $_pre_i3_i_i11=$_pre_i3_i_i26;label=25;break;
 case 47: 
 var $170=($128|0)==0;
 if($170){var $187=1;label=54;break;}else{label=48;break;}
 case 48: 
 var $172=(($128+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($128+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($173|0)==($175|0);
 if($176){label=49;break;}else{label=50;break;}
 case 49: 
 var $178=$128;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+36)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=FUNCTION_TABLE[$181]($128);
 var $_0_i_i_i_i18=$182;label=51;break;
 case 50: 
 var $184=HEAP32[(($173)>>2)];
 var $_0_i_i_i_i18=$184;label=51;break;
 case 51: 
 var $_0_i_i_i_i18;
 var $185=($_0_i_i_i_i18|0)==-1;
 if($185){label=53;break;}else{label=52;break;}
 case 52: 
 var $_pre_i_i_i20=HEAP32[(($1)>>2)];
 var $phitmp_i_i_i21=($_pre_i_i_i20|0)==0;
 var $187=$phitmp_i_i_i21;label=54;break;
 case 53: 
 HEAP32[(($1)>>2)]=0;
 var $187=1;label=54;break;
 case 54: 
 var $187;
 var $188=($_pre_i3_i_i26|0)==0;
 if($188){label=60;break;}else{label=55;break;}
 case 55: 
 var $190=(($_pre_i3_i_i26+12)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(($_pre_i3_i_i26+16)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=($191|0)==($193|0);
 if($194){label=56;break;}else{label=57;break;}
 case 56: 
 var $196=$_pre_i3_i_i26;
 var $197=HEAP32[(($196)>>2)];
 var $198=(($197+36)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=FUNCTION_TABLE[$199]($_pre_i3_i_i26);
 var $_0_i_i1_i_i24=$200;label=58;break;
 case 57: 
 var $202=HEAP32[(($191)>>2)];
 var $_0_i_i1_i_i24=$202;label=58;break;
 case 58: 
 var $_0_i_i1_i_i24;
 var $203=($_0_i_i1_i_i24|0)==-1;
 if($203){label=59;break;}else{label=61;break;}
 case 59: 
 HEAP32[(($21)>>2)]=0;
 label=60;break;
 case 60: 
 if($187){label=62;break;}else{var $_02=$__r_0;label=63;break;}
 case 61: 
 if($187){var $_02=$__r_0;label=63;break;}else{label=62;break;}
 case 62: 
 var $206=HEAP32[(($__err)>>2)];
 var $207=$206|2;
 HEAP32[(($__err)>>2)]=$207;
 var $_02=$__r_0;label=63;break;
 case 63: 
 var $_02;
 STACKTOP=sp;return $_02;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$__first;
 var $3=HEAP8[($1)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=($3&255);
 var $7=$6>>>1;
 var $17=10;var $16=$3;var $15=$7;label=4;break;
 case 3: 
 var $9=(($this+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($this)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&-2;
 var $phitmp_i=((($13)-(1))|0);
 var $14=(($12)&255);
 var $17=$phitmp_i;var $16=$14;var $15=$10;label=4;break;
 case 4: 
 var $15;
 var $16;
 var $17;
 var $18=$__last;
 var $19=((($18)-($2))|0);
 var $20=($__last|0)==($__first|0);
 if($20){label=15;break;}else{label=5;break;}
 case 5: 
 var $22=((($17)-($15))|0);
 var $23=($22>>>0)<($19>>>0);
 if($23){label=6;break;}else{var $28=$16;label=7;break;}
 case 6: 
 var $25=((($15)+($19))|0);
 var $26=((($25)-($17))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$17,$26,$15,$15,0,0);
 var $_pre=HEAP8[($1)];
 var $28=$_pre;label=7;break;
 case 7: 
 var $28;
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=9;break;}else{label=8;break;}
 case 8: 
 var $32=(($this+8)|0);
 var $33=HEAP32[(($32)>>2)];
 var $37=$33;label=10;break;
 case 9: 
 var $35=$this;
 var $36=(($35+1)|0);
 var $37=$36;label=10;break;
 case 10: 
 var $37;
 var $38=(($37+$15)|0);
 var $39=((($15)-($2))|0);
 var $scevgep=(($__last+$39)|0);
 var $scevgep3=$scevgep;
 var $_01=$__first;var $__p_02=$38;label=11;break;
 case 11: 
 var $__p_02;
 var $_01;
 var $41=HEAP8[($_01)];
 HEAP8[($__p_02)]=$41;
 var $42=(($__p_02+1)|0);
 var $43=(($_01+1)|0);
 var $44=($43|0)==($__last|0);
 if($44){label=12;break;}else{var $_01=$43;var $__p_02=$42;label=11;break;}
 case 12: 
 var $scevgep4=(($37+$scevgep3)|0);
 HEAP8[($scevgep4)]=0;
 var $46=((($15)+($19))|0);
 var $47=HEAP8[($1)];
 var $48=$47&1;
 var $49=(($48<<24)>>24)==0;
 if($49){label=14;break;}else{label=13;break;}
 case 13: 
 var $51=(($this+4)|0);
 HEAP32[(($51)>>2)]=$46;
 label=15;break;
 case 14: 
 var $53=$46<<1;
 var $54=(($53)&255);
 HEAP8[($1)]=$54;
 label=15;break;
 case 15: 
 return $this;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$__first;
 var $3=HEAP8[($1)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=($3&255);
 var $7=$6>>>1;
 var $17=1;var $16=$3;var $15=$7;label=4;break;
 case 3: 
 var $9=(($this+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($this)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&-2;
 var $phitmp_i=((($13)-(1))|0);
 var $14=(($12)&255);
 var $17=$phitmp_i;var $16=$14;var $15=$10;label=4;break;
 case 4: 
 var $15;
 var $16;
 var $17;
 var $18=$__last;
 var $19=((($18)-($2))|0);
 var $20=$19>>2;
 var $21=($20|0)==0;
 if($21){label=17;break;}else{label=5;break;}
 case 5: 
 var $23=((($17)-($15))|0);
 var $24=($23>>>0)<($20>>>0);
 if($24){label=6;break;}else{var $29=$16;label=7;break;}
 case 6: 
 var $26=((($15)+($20))|0);
 var $27=((($26)-($17))|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$17,$27,$15,$15,0,0);
 var $_pre=HEAP8[($1)];
 var $29=$_pre;label=7;break;
 case 7: 
 var $29;
 var $30=$29&1;
 var $31=(($30<<24)>>24)==0;
 if($31){label=9;break;}else{label=8;break;}
 case 8: 
 var $33=(($this+8)|0);
 var $34=HEAP32[(($33)>>2)];
 var $37=$34;label=10;break;
 case 9: 
 var $36=(($this+4)|0);
 var $37=$36;label=10;break;
 case 10: 
 var $37;
 var $38=(($37+($15<<2))|0);
 var $39=($__first|0)==($__last|0);
 if($39){var $__p_0_lcssa=$38;label=14;break;}else{label=11;break;}
 case 11: 
 var $scevgep=((($__last)-(4))|0);
 var $40=$scevgep;
 var $41=((($40)-($2))|0);
 var $42=$41>>>2;
 var $43=((($15)+($42))|0);
 var $44=((($43)+(1))|0);
 var $_01=$__first;var $__p_02=$38;label=12;break;
 case 12: 
 var $__p_02;
 var $_01;
 var $46=HEAP32[(($_01)>>2)];
 HEAP32[(($__p_02)>>2)]=$46;
 var $47=(($__p_02+4)|0);
 var $48=(($_01+4)|0);
 var $49=($48|0)==($__last|0);
 if($49){label=13;break;}else{var $_01=$48;var $__p_02=$47;label=12;break;}
 case 13: 
 var $scevgep5=(($37+($44<<2))|0);
 var $__p_0_lcssa=$scevgep5;label=14;break;
 case 14: 
 var $__p_0_lcssa;
 HEAP32[(($__p_0_lcssa)>>2)]=0;
 var $51=((($15)+($20))|0);
 var $52=HEAP8[($1)];
 var $53=$52&1;
 var $54=(($53<<24)>>24)==0;
 if($54){label=16;break;}else{label=15;break;}
 case 15: 
 var $56=(($this+4)|0);
 HEAP32[(($56)>>2)]=$51;
 label=17;break;
 case 16: 
 var $58=$51<<1;
 var $59=(($58)&255);
 HEAP8[($1)]=$59;
 label=17;break;
 case 17: 
 return $this;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>2;
 var $9=($8>>>0)<($__n>>>0);
 if($9){label=5;break;}else{var $_0_i=$__n;var $10=$4;label=2;break;}
 case 2: 
 var $10;
 var $_0_i;
 var $11=($10|0)==0;
 if($11){var $13=0;label=4;break;}else{label=3;break;}
 case 3: 
 HEAP32[(($10)>>2)]=0;
 var $_pre1_i=HEAP32[(($3)>>2)];
 var $13=$_pre1_i;label=4;break;
 case 4: 
 var $13;
 var $14=(($13+4)|0);
 HEAP32[(($3)>>2)]=$14;
 var $15=((($_0_i)-(1))|0);
 var $16=($15|0)==0;
 if($16){label=20;break;}else{var $_0_i=$15;var $10=$14;label=2;break;}
 case 5: 
 var $18=(($this+16)|0);
 var $19=(($this)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$20;
 var $22=((($6)-($21))|0);
 var $23=$22>>2;
 var $24=((($23)+($__n))|0);
 var $25=($24>>>0)>1073741823;
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 var $27=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($27);
 throw "Reached an unreachable!";
 case 7: 
 var $29=((($5)-($21))|0);
 var $30=$29>>2;
 var $31=($30>>>0)<536870911;
 if($31){label=8;break;}else{var $_0_i5610=1073741823;label=11;break;}
 case 8: 
 var $32=$29>>1;
 var $33=($32>>>0)<($24>>>0);
 var $34=($33?$24:$32);
 var $35=($34|0)==0;
 if($35){var $45=0;var $_0_i57=0;label=12;break;}else{label=9;break;}
 case 9: 
 var $37=(($this+128)|0);
 var $38=HEAP8[($37)];
 var $_not_i_i_i=(($38<<24)>>24)==0;
 var $39=($34>>>0)<29;
 var $or_cond_i_i_i=$_not_i_i_i&$39;
 if($or_cond_i_i_i){label=10;break;}else{var $_0_i5610=$34;label=11;break;}
 case 10: 
 HEAP8[($37)]=1;
 var $41=$18;
 var $45=$41;var $_0_i57=$34;label=12;break;
 case 11: 
 var $_0_i5610;
 var $42=$_0_i5610<<2;
 var $43=__Znwj($42);
 var $44=$43;
 var $45=$44;var $_0_i57=$_0_i5610;label=12;break;
 case 12: 
 var $_0_i57;
 var $45;
 var $46=(($45+($23<<2))|0);
 var $_0_i2=$__n;var $48=$46;label=13;break;
 case 13: 
 var $48;
 var $_0_i2;
 var $49=($48|0)==0;
 if($49){var $51=0;label=15;break;}else{label=14;break;}
 case 14: 
 HEAP32[(($48)>>2)]=0;
 var $51=$48;label=15;break;
 case 15: 
 var $51;
 var $52=(($51+4)|0);
 var $53=((($_0_i2)-(1))|0);
 var $54=($53|0)==0;
 if($54){label=16;break;}else{var $_0_i2=$53;var $48=$52;label=13;break;}
 case 16: 
 var $55=(($45+($_0_i57<<2))|0);
 var $56=HEAP32[(($19)>>2)];
 var $57=HEAP32[(($3)>>2)];
 var $58=$57;
 var $59=$56;
 var $60=((($58)-($59))|0);
 var $61=$60>>2;
 var $_sum=((($23)-($61))|0);
 var $62=(($45+($_sum<<2))|0);
 var $63=$62;
 var $64=$56;
 assert($60 % 1 === 0);(_memcpy($63, $64, $60)|0);
 HEAP32[(($19)>>2)]=$62;
 HEAP32[(($3)>>2)]=$52;
 HEAP32[(($1)>>2)]=$55;
 var $65=($56|0)==0;
 if($65){label=20;break;}else{label=17;break;}
 case 17: 
 var $67=$18;
 var $68=($67|0)==($56|0);
 if($68){label=18;break;}else{label=19;break;}
 case 18: 
 var $70=(($this+128)|0);
 HEAP8[($70)]=0;
 label=20;break;
 case 19: 
 __ZdlPv($64);
 label=20;break;
 case 20: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 var $1=$mode&2;
 var $2=($1|0)==0;
 if($2){label=4;break;}else{label=2;break;}
 case 2: 
 var $4=$to_end;
 var $5=$to;
 var $6=((($4)-($5))|0);
 var $7=($6|0)<3;
 if($7){var $_0=1;label=26;break;}else{label=3;break;}
 case 3: 
 var $9=(($to+1)|0);
 HEAP32[(($to_nxt)>>2)]=$9;
 HEAP8[($to)]=-17;
 var $10=HEAP32[(($to_nxt)>>2)];
 var $11=(($10+1)|0);
 HEAP32[(($to_nxt)>>2)]=$11;
 HEAP8[($10)]=-69;
 var $12=HEAP32[(($to_nxt)>>2)];
 var $13=(($12+1)|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 HEAP8[($12)]=-65;
 label=4;break;
 case 4: 
 var $14=$frm_end;
 var $15=HEAP32[(($frm_nxt)>>2)];
 var $16=($15>>>0)<($frm_end>>>0);
 if($16){label=5;break;}else{var $_0=0;label=26;break;}
 case 5: 
 var $17=$to_end;
 var $19=$15;label=6;break;
 case 6: 
 var $19;
 var $20=HEAP16[(($19)>>1)];
 var $21=($20&65535);
 var $22=($21>>>0)>($Maxcode>>>0);
 if($22){var $_0=2;label=26;break;}else{label=7;break;}
 case 7: 
 var $24=($20&65535)<128;
 if($24){label=8;break;}else{label=10;break;}
 case 8: 
 var $26=HEAP32[(($to_nxt)>>2)];
 var $27=$26;
 var $28=((($17)-($27))|0);
 var $29=($28|0)<1;
 if($29){var $_0=1;label=26;break;}else{label=9;break;}
 case 9: 
 var $31=(($20)&255);
 var $32=(($26+1)|0);
 HEAP32[(($to_nxt)>>2)]=$32;
 HEAP8[($26)]=$31;
 label=25;break;
 case 10: 
 var $34=($20&65535)<2048;
 if($34){label=11;break;}else{label=13;break;}
 case 11: 
 var $36=HEAP32[(($to_nxt)>>2)];
 var $37=$36;
 var $38=((($17)-($37))|0);
 var $39=($38|0)<2;
 if($39){var $_0=1;label=26;break;}else{label=12;break;}
 case 12: 
 var $41=$21>>>6;
 var $42=$41|192;
 var $43=(($42)&255);
 var $44=(($36+1)|0);
 HEAP32[(($to_nxt)>>2)]=$44;
 HEAP8[($36)]=$43;
 var $45=$21&63;
 var $46=$45|128;
 var $47=(($46)&255);
 var $48=HEAP32[(($to_nxt)>>2)];
 var $49=(($48+1)|0);
 HEAP32[(($to_nxt)>>2)]=$49;
 HEAP8[($48)]=$47;
 label=25;break;
 case 13: 
 var $51=($20&65535)<55296;
 if($51){label=14;break;}else{label=16;break;}
 case 14: 
 var $53=HEAP32[(($to_nxt)>>2)];
 var $54=$53;
 var $55=((($17)-($54))|0);
 var $56=($55|0)<3;
 if($56){var $_0=1;label=26;break;}else{label=15;break;}
 case 15: 
 var $58=$21>>>12;
 var $59=$58|224;
 var $60=(($59)&255);
 var $61=(($53+1)|0);
 HEAP32[(($to_nxt)>>2)]=$61;
 HEAP8[($53)]=$60;
 var $62=$21>>>6;
 var $63=$62&63;
 var $64=$63|128;
 var $65=(($64)&255);
 var $66=HEAP32[(($to_nxt)>>2)];
 var $67=(($66+1)|0);
 HEAP32[(($to_nxt)>>2)]=$67;
 HEAP8[($66)]=$65;
 var $68=$21&63;
 var $69=$68|128;
 var $70=(($69)&255);
 var $71=HEAP32[(($to_nxt)>>2)];
 var $72=(($71+1)|0);
 HEAP32[(($to_nxt)>>2)]=$72;
 HEAP8[($71)]=$70;
 label=25;break;
 case 16: 
 var $74=($20&65535)<56320;
 if($74){label=17;break;}else{label=22;break;}
 case 17: 
 var $76=$19;
 var $77=((($14)-($76))|0);
 var $78=($77|0)<4;
 if($78){var $_0=1;label=26;break;}else{label=18;break;}
 case 18: 
 var $80=(($19+2)|0);
 var $81=HEAP16[(($80)>>1)];
 var $82=($81&65535);
 var $83=$82&64512;
 var $84=($83|0)==56320;
 if($84){label=19;break;}else{var $_0=2;label=26;break;}
 case 19: 
 var $86=HEAP32[(($to_nxt)>>2)];
 var $87=$86;
 var $88=((($17)-($87))|0);
 var $89=($88|0)<4;
 if($89){var $_0=1;label=26;break;}else{label=20;break;}
 case 20: 
 var $91=$21&960;
 var $92=$91<<10;
 var $93=((($92)+(65536))|0);
 var $94=$21<<10;
 var $95=$94&64512;
 var $96=$93|$95;
 var $97=$82&1023;
 var $98=$96|$97;
 var $99=($98>>>0)>($Maxcode>>>0);
 if($99){var $_0=2;label=26;break;}else{label=21;break;}
 case 21: 
 HEAP32[(($frm_nxt)>>2)]=$80;
 var $101=$91>>>6;
 var $102=((($101)+(1))|0);
 var $103=$102>>>2;
 var $104=$103|240;
 var $105=(($104)&255);
 var $106=HEAP32[(($to_nxt)>>2)];
 var $107=(($106+1)|0);
 HEAP32[(($to_nxt)>>2)]=$107;
 HEAP8[($106)]=$105;
 var $108=$102<<4;
 var $109=$108&48;
 var $110=$21>>>2;
 var $111=$110&15;
 var $112=$111|$109;
 var $113=$112|128;
 var $114=(($113)&255);
 var $115=HEAP32[(($to_nxt)>>2)];
 var $116=(($115+1)|0);
 HEAP32[(($to_nxt)>>2)]=$116;
 HEAP8[($115)]=$114;
 var $117=$21<<4;
 var $118=$117&48;
 var $119=$82>>>6;
 var $120=$119&15;
 var $121=$118|$120;
 var $122=$121|128;
 var $123=(($122)&255);
 var $124=HEAP32[(($to_nxt)>>2)];
 var $125=(($124+1)|0);
 HEAP32[(($to_nxt)>>2)]=$125;
 HEAP8[($124)]=$123;
 var $126=$82&63;
 var $127=$126|128;
 var $128=(($127)&255);
 var $129=HEAP32[(($to_nxt)>>2)];
 var $130=(($129+1)|0);
 HEAP32[(($to_nxt)>>2)]=$130;
 HEAP8[($129)]=$128;
 label=25;break;
 case 22: 
 var $132=($20&65535)<57344;
 if($132){var $_0=2;label=26;break;}else{label=23;break;}
 case 23: 
 var $134=HEAP32[(($to_nxt)>>2)];
 var $135=$134;
 var $136=((($17)-($135))|0);
 var $137=($136|0)<3;
 if($137){var $_0=1;label=26;break;}else{label=24;break;}
 case 24: 
 var $139=$21>>>12;
 var $140=$139|224;
 var $141=(($140)&255);
 var $142=(($134+1)|0);
 HEAP32[(($to_nxt)>>2)]=$142;
 HEAP8[($134)]=$141;
 var $143=$21>>>6;
 var $144=$143&63;
 var $145=$144|128;
 var $146=(($145)&255);
 var $147=HEAP32[(($to_nxt)>>2)];
 var $148=(($147+1)|0);
 HEAP32[(($to_nxt)>>2)]=$148;
 HEAP8[($147)]=$146;
 var $149=$21&63;
 var $150=$149|128;
 var $151=(($150)&255);
 var $152=HEAP32[(($to_nxt)>>2)];
 var $153=(($152+1)|0);
 HEAP32[(($to_nxt)>>2)]=$153;
 HEAP8[($152)]=$151;
 label=25;break;
 case 25: 
 var $155=HEAP32[(($frm_nxt)>>2)];
 var $156=(($155+2)|0);
 HEAP32[(($frm_nxt)>>2)]=$156;
 var $157=($156>>>0)<($frm_end>>>0);
 if($157){var $19=$156;label=6;break;}else{var $_0=0;label=26;break;}
 case 26: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 var $1=$mode&4;
 var $2=($1|0)==0;
 var $_pre=HEAP32[(($frm_nxt)>>2)];
 if($2){var $21=$_pre;label=7;break;}else{label=2;break;}
 case 2: 
 var $4=$frm_end;
 var $5=$_pre;
 var $6=((($4)-($5))|0);
 var $7=($6|0)>2;
 if($7){label=3;break;}else{var $21=$_pre;label=7;break;}
 case 3: 
 var $9=HEAP8[($_pre)];
 var $10=(($9<<24)>>24)==-17;
 if($10){label=4;break;}else{var $21=$_pre;label=7;break;}
 case 4: 
 var $12=(($_pre+1)|0);
 var $13=HEAP8[($12)];
 var $14=(($13<<24)>>24)==-69;
 if($14){label=5;break;}else{var $21=$_pre;label=7;break;}
 case 5: 
 var $16=(($_pre+2)|0);
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24)==-65;
 if($18){label=6;break;}else{var $21=$_pre;label=7;break;}
 case 6: 
 var $20=(($_pre+3)|0);
 HEAP32[(($frm_nxt)>>2)]=$20;
 var $21=$20;label=7;break;
 case 7: 
 var $21;
 var $22=($21>>>0)<($frm_end>>>0);
 if($22){label=8;break;}else{var $171=$21;label=40;break;}
 case 8: 
 var $23=$frm_end;
 var $24=$to_end;
 var $_pre1=HEAP32[(($to_nxt)>>2)];
 var $27=$21;var $26=$_pre1;label=9;break;
 case 9: 
 var $26;
 var $27;
 var $28=($26>>>0)<($to_end>>>0);
 if($28){label=10;break;}else{var $171=$27;label=40;break;}
 case 10: 
 var $30=HEAP8[($27)];
 var $31=($30&255);
 var $32=($31>>>0)>($Maxcode>>>0);
 if($32){var $_0=2;label=41;break;}else{label=11;break;}
 case 11: 
 var $34=(($30<<24)>>24)>-1;
 if($34){label=12;break;}else{label=13;break;}
 case 12: 
 var $36=($30&255);
 HEAP16[(($26)>>1)]=$36;
 var $37=(($27+1)|0);
 HEAP32[(($frm_nxt)>>2)]=$37;
 label=39;break;
 case 13: 
 var $39=($30&255)<194;
 if($39){var $_0=2;label=41;break;}else{label=14;break;}
 case 14: 
 var $41=($30&255)<224;
 if($41){label=15;break;}else{label=19;break;}
 case 15: 
 var $43=$27;
 var $44=((($23)-($43))|0);
 var $45=($44|0)<2;
 if($45){var $_0=1;label=41;break;}else{label=16;break;}
 case 16: 
 var $47=(($27+1)|0);
 var $48=HEAP8[($47)];
 var $49=($48&255);
 var $50=$49&192;
 var $51=($50|0)==128;
 if($51){label=17;break;}else{var $_0=2;label=41;break;}
 case 17: 
 var $53=$31<<6;
 var $54=$53&1984;
 var $55=$49&63;
 var $56=$55|$54;
 var $57=($56>>>0)>($Maxcode>>>0);
 if($57){var $_0=2;label=41;break;}else{label=18;break;}
 case 18: 
 var $59=(($56)&65535);
 HEAP16[(($26)>>1)]=$59;
 var $60=(($27+2)|0);
 HEAP32[(($frm_nxt)>>2)]=$60;
 label=39;break;
 case 19: 
 var $62=($30&255)<240;
 if($62){label=20;break;}else{label=28;break;}
 case 20: 
 var $64=$27;
 var $65=((($23)-($64))|0);
 var $66=($65|0)<3;
 if($66){var $_0=1;label=41;break;}else{label=21;break;}
 case 21: 
 var $68=(($27+1)|0);
 var $69=HEAP8[($68)];
 var $70=(($27+2)|0);
 var $71=HEAP8[($70)];
 if(($31|0)==224){ label=22;break;}else if(($31|0)==237){ label=23;break;}else{label=24;break;}
 case 22: 
 var $73=$69&-32;
 var $74=(($73<<24)>>24)==-96;
 if($74){label=25;break;}else{var $_0=2;label=41;break;}
 case 23: 
 var $76=$69&-32;
 var $77=(($76<<24)>>24)==-128;
 if($77){label=25;break;}else{var $_0=2;label=41;break;}
 case 24: 
 var $79=$69&-64;
 var $80=(($79<<24)>>24)==-128;
 if($80){label=25;break;}else{var $_0=2;label=41;break;}
 case 25: 
 var $82=($71&255);
 var $83=$82&192;
 var $84=($83|0)==128;
 if($84){label=26;break;}else{var $_0=2;label=41;break;}
 case 26: 
 var $86=$31<<12;
 var $87=($69&255);
 var $88=$87<<6;
 var $89=$88&4032;
 var $90=$89|$86;
 var $91=$82&63;
 var $92=$90|$91;
 var $93=$92&65535;
 var $94=($93>>>0)>($Maxcode>>>0);
 if($94){var $_0=2;label=41;break;}else{label=27;break;}
 case 27: 
 var $96=(($92)&65535);
 HEAP16[(($26)>>1)]=$96;
 var $97=(($27+3)|0);
 HEAP32[(($frm_nxt)>>2)]=$97;
 label=39;break;
 case 28: 
 var $99=($30&255)<245;
 if($99){label=29;break;}else{var $_0=2;label=41;break;}
 case 29: 
 var $101=$27;
 var $102=((($23)-($101))|0);
 var $103=($102|0)<4;
 if($103){var $_0=1;label=41;break;}else{label=30;break;}
 case 30: 
 var $105=(($27+1)|0);
 var $106=HEAP8[($105)];
 var $107=(($27+2)|0);
 var $108=HEAP8[($107)];
 var $109=(($27+3)|0);
 var $110=HEAP8[($109)];
 if(($31|0)==240){ label=31;break;}else if(($31|0)==244){ label=32;break;}else{label=33;break;}
 case 31: 
 var $_off=((($106)+(112))&255);
 var $112=($_off&255)<48;
 if($112){label=34;break;}else{var $_0=2;label=41;break;}
 case 32: 
 var $114=$106&-16;
 var $115=(($114<<24)>>24)==-128;
 if($115){label=34;break;}else{var $_0=2;label=41;break;}
 case 33: 
 var $117=$106&-64;
 var $118=(($117<<24)>>24)==-128;
 if($118){label=34;break;}else{var $_0=2;label=41;break;}
 case 34: 
 var $120=($108&255);
 var $121=$120&192;
 var $122=($121|0)==128;
 if($122){label=35;break;}else{var $_0=2;label=41;break;}
 case 35: 
 var $124=($110&255);
 var $125=$124&192;
 var $126=($125|0)==128;
 if($126){label=36;break;}else{var $_0=2;label=41;break;}
 case 36: 
 var $128=$26;
 var $129=((($24)-($128))|0);
 var $130=($129|0)<4;
 if($130){var $_0=1;label=41;break;}else{label=37;break;}
 case 37: 
 var $132=$31&7;
 var $133=$132<<18;
 var $134=($106&255);
 var $135=$134<<12;
 var $136=$135&258048;
 var $137=$136|$133;
 var $138=$120<<6;
 var $139=$138&4032;
 var $140=$137|$139;
 var $141=$124&63;
 var $142=$140|$141;
 var $143=($142>>>0)>($Maxcode>>>0);
 if($143){var $_0=2;label=41;break;}else{label=38;break;}
 case 38: 
 var $145=$132<<2;
 var $146=$134>>>4;
 var $147=$146&3;
 var $148=$147|$145;
 var $149=$148<<6;
 var $150=((($149)+(16320))|0);
 var $151=$134<<2;
 var $152=$151&60;
 var $153=$120>>>4;
 var $154=$153&3;
 var $155=$152|$154;
 var $156=$155|$150;
 var $157=$156|55296;
 var $158=(($157)&65535);
 HEAP16[(($26)>>1)]=$158;
 var $159=$138&960;
 var $160=$141|$159;
 var $161=$160|56320;
 var $162=(($161)&65535);
 var $163=(($26+2)|0);
 HEAP32[(($to_nxt)>>2)]=$163;
 HEAP16[(($163)>>1)]=$162;
 var $164=HEAP32[(($frm_nxt)>>2)];
 var $165=(($164+4)|0);
 HEAP32[(($frm_nxt)>>2)]=$165;
 label=39;break;
 case 39: 
 var $167=HEAP32[(($to_nxt)>>2)];
 var $168=(($167+2)|0);
 HEAP32[(($to_nxt)>>2)]=$168;
 var $169=HEAP32[(($frm_nxt)>>2)];
 var $170=($169>>>0)<($frm_end>>>0);
 if($170){var $27=$169;var $26=$168;label=9;break;}else{var $171=$169;label=40;break;}
 case 40: 
 var $171;
 var $172=($171>>>0)<($frm_end>>>0);
 var $173=($172&1);
 var $_0=$173;label=41;break;
 case 41: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$mode&4;
 var $2=($1|0)==0;
 if($2){var $frm_nxt_1_ph=$frm;label=6;break;}else{label=2;break;}
 case 2: 
 var $4=$frm_end;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=($6|0)>2;
 if($7){label=3;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 3: 
 var $9=HEAP8[($frm)];
 var $10=(($9<<24)>>24)==-17;
 if($10){label=4;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 4: 
 var $12=(($frm+1)|0);
 var $13=HEAP8[($12)];
 var $14=(($13<<24)>>24)==-69;
 if($14){label=5;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 5: 
 var $16=(($frm+2)|0);
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24)==-65;
 var $19=(($frm+3)|0);
 var $_frm=($18?$19:$frm);
 var $frm_nxt_1_ph=$_frm;label=6;break;
 case 6: 
 var $frm_nxt_1_ph;
 var $20=($frm_nxt_1_ph>>>0)<($frm_end>>>0);
 var $21=($mx|0)!=0;
 var $or_cond15=$20&$21;
 if($or_cond15){label=7;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_1_ph;label=43;break;}
 case 7: 
 var $22=$frm_end;
 var $nchar16_t_016=0;var $frm_nxt_117=$frm_nxt_1_ph;label=8;break;
 case 8: 
 var $frm_nxt_117;
 var $nchar16_t_016;
 var $24=HEAP8[($frm_nxt_117)];
 var $25=($24&255);
 var $26=($25>>>0)>($Maxcode>>>0);
 if($26){var $frm_nxt_1_lcssa=$frm_nxt_117;label=43;break;}else{label=9;break;}
 case 9: 
 var $28=(($24<<24)>>24)>-1;
 if($28){label=10;break;}else{label=11;break;}
 case 10: 
 var $30=(($frm_nxt_117+1)|0);
 var $frm_nxt_2=$30;var $nchar16_t_1=$nchar16_t_016;label=42;break;
 case 11: 
 var $32=($24&255)<194;
 if($32){var $frm_nxt_1_lcssa=$frm_nxt_117;label=43;break;}else{label=12;break;}
 case 12: 
 var $34=($24&255)<224;
 if($34){label=13;break;}else{label=17;break;}
 case 13: 
 var $36=$frm_nxt_117;
 var $37=((($22)-($36))|0);
 var $38=($37|0)<2;
 if($38){var $frm_nxt_1_lcssa=$frm_nxt_117;label=43;break;}else{label=14;break;}
 case 14: 
 var $40=(($frm_nxt_117+1)|0);
 var $41=HEAP8[($40)];
 var $42=($41&255);
 var $43=$42&192;
 var $44=($43|0)==128;
 if($44){label=15;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_117;label=43;break;}
 case 15: 
 var $46=$25<<6;
 var $47=$46&1984;
 var $48=$42&63;
 var $49=$48|$47;
 var $50=($49>>>0)>($Maxcode>>>0);
 if($50){var $frm_nxt_1_lcssa=$frm_nxt_117;label=43;break;}else{label=16;break;}
 case 16: 
 var $52=(($frm_nxt_117+2)|0);
 var $frm_nxt_2=$52;var $nchar16_t_1=$nchar16_t_016;label=42;break;
 case 17: 
 var $54=($24&255)<240;
 if($54){label=18;break;}else{label=29;break;}
 case 18: 
 var $56=$frm_nxt_117;
 var $57=((($22)-($56))|0);
 var $58=($57|0)<3;
 if($58){var $frm_nxt_1_lcssa=$frm_nxt_117;label=43;break;}else{label=19;break;}
 case 19: 
 var $60=(($frm_nxt_117+1)|0);
 var $61=HEAP8[($60)];
 var $62=(($frm_nxt_117+2)|0);
 var $63=HEAP8[($62)];
 if(($25|0)==224){ label=20;break;}else if(($25|0)==237){ label=22;break;}else{label=24;break;}
 case 20: 
 var $65=$61&-32;
 var $66=(($65<<24)>>24)==-96;
 if($66){label=26;break;}else{label=21;break;}
 case 21: 
 var $68=$frm;
 var $69=((($56)-($68))|0);
 var $_0=$69;label=44;break;
 case 22: 
 var $71=$61&-32;
 var $72=(($71<<24)>>24)==-128;
 if($72){label=26;break;}else{label=23;break;}
 case 23: 
 var $74=$frm;
 var $75=((($56)-($74))|0);
 var $_0=$75;label=44;break;
 case 24: 
 var $77=$61&-64;
 var $78=(($77<<24)>>24)==-128;
 if($78){label=26;break;}else{label=25;break;}
 case 25: 
 var $80=$frm;
 var $81=((($56)-($80))|0);
 var $_0=$81;label=44;break;
 case 26: 
 var $83=($63&255);
 var $84=$83&192;
 var $85=($84|0)==128;
 if($85){label=27;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_117;label=43;break;}
 case 27: 
 var $87=$25<<12;
 var $88=$87&61440;
 var $89=($61&255);
 var $90=$89<<6;
 var $91=$90&4032;
 var $92=$91|$88;
 var $93=$83&63;
 var $94=$92|$93;
 var $95=($94>>>0)>($Maxcode>>>0);
 if($95){var $frm_nxt_1_lcssa=$frm_nxt_117;label=43;break;}else{label=28;break;}
 case 28: 
 var $97=(($frm_nxt_117+3)|0);
 var $frm_nxt_2=$97;var $nchar16_t_1=$nchar16_t_016;label=42;break;
 case 29: 
 var $99=($24&255)<245;
 if($99){label=30;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_117;label=43;break;}
 case 30: 
 var $101=$frm_nxt_117;
 var $102=((($22)-($101))|0);
 var $103=($102|0)<4;
 var $104=((($mx)-($nchar16_t_016))|0);
 var $105=($104>>>0)<2;
 var $or_cond2=$103|$105;
 if($or_cond2){var $frm_nxt_1_lcssa=$frm_nxt_117;label=43;break;}else{label=31;break;}
 case 31: 
 var $107=(($frm_nxt_117+1)|0);
 var $108=HEAP8[($107)];
 var $109=(($frm_nxt_117+2)|0);
 var $110=HEAP8[($109)];
 var $111=(($frm_nxt_117+3)|0);
 var $112=HEAP8[($111)];
 if(($25|0)==240){ label=32;break;}else if(($25|0)==244){ label=34;break;}else{label=36;break;}
 case 32: 
 var $_off=((($108)+(112))&255);
 var $114=($_off&255)<48;
 if($114){label=38;break;}else{label=33;break;}
 case 33: 
 var $116=$frm;
 var $117=((($101)-($116))|0);
 var $_0=$117;label=44;break;
 case 34: 
 var $119=$108&-16;
 var $120=(($119<<24)>>24)==-128;
 if($120){label=38;break;}else{label=35;break;}
 case 35: 
 var $122=$frm;
 var $123=((($101)-($122))|0);
 var $_0=$123;label=44;break;
 case 36: 
 var $125=$108&-64;
 var $126=(($125<<24)>>24)==-128;
 if($126){label=38;break;}else{label=37;break;}
 case 37: 
 var $128=$frm;
 var $129=((($101)-($128))|0);
 var $_0=$129;label=44;break;
 case 38: 
 var $131=($110&255);
 var $132=$131&192;
 var $133=($132|0)==128;
 if($133){label=39;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_117;label=43;break;}
 case 39: 
 var $135=($112&255);
 var $136=$135&192;
 var $137=($136|0)==128;
 if($137){label=40;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_117;label=43;break;}
 case 40: 
 var $139=$25<<18;
 var $140=$139&1835008;
 var $141=($108&255);
 var $142=$141<<12;
 var $143=$142&258048;
 var $144=$143|$140;
 var $145=$131<<6;
 var $146=$145&4032;
 var $147=$144|$146;
 var $148=$135&63;
 var $149=$147|$148;
 var $150=($149>>>0)>($Maxcode>>>0);
 if($150){var $frm_nxt_1_lcssa=$frm_nxt_117;label=43;break;}else{label=41;break;}
 case 41: 
 var $152=((($nchar16_t_016)+(1))|0);
 var $153=(($frm_nxt_117+4)|0);
 var $frm_nxt_2=$153;var $nchar16_t_1=$152;label=42;break;
 case 42: 
 var $nchar16_t_1;
 var $frm_nxt_2;
 var $155=((($nchar16_t_1)+(1))|0);
 var $156=($frm_nxt_2>>>0)<($frm_end>>>0);
 var $157=($155>>>0)<($mx>>>0);
 var $or_cond=$156&$157;
 if($or_cond){var $nchar16_t_016=$155;var $frm_nxt_117=$frm_nxt_2;label=8;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_2;label=43;break;}
 case 43: 
 var $frm_nxt_1_lcssa;
 var $158=$frm_nxt_1_lcssa;
 var $159=$frm;
 var $160=((($158)-($159))|0);
 var $_0=$160;label=44;break;
 case 44: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 var $1=$mode&2;
 var $2=($1|0)==0;
 if($2){label=4;break;}else{label=2;break;}
 case 2: 
 var $4=$to_end;
 var $5=$to;
 var $6=((($4)-($5))|0);
 var $7=($6|0)<3;
 if($7){var $_0=1;label=19;break;}else{label=3;break;}
 case 3: 
 var $9=(($to+1)|0);
 HEAP32[(($to_nxt)>>2)]=$9;
 HEAP8[($to)]=-17;
 var $10=HEAP32[(($to_nxt)>>2)];
 var $11=(($10+1)|0);
 HEAP32[(($to_nxt)>>2)]=$11;
 HEAP8[($10)]=-69;
 var $12=HEAP32[(($to_nxt)>>2)];
 var $13=(($12+1)|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 HEAP8[($12)]=-65;
 label=4;break;
 case 4: 
 var $14=HEAP32[(($frm_nxt)>>2)];
 var $15=($14>>>0)<($frm_end>>>0);
 if($15){label=5;break;}else{var $_0=0;label=19;break;}
 case 5: 
 var $16=$to_end;
 var $18=$14;label=6;break;
 case 6: 
 var $18;
 var $19=HEAP32[(($18)>>2)];
 var $20=$19&-2048;
 var $21=($20|0)==55296;
 var $22=($19>>>0)>($Maxcode>>>0);
 var $or_cond=$21|$22;
 if($or_cond){var $_0=2;label=19;break;}else{label=7;break;}
 case 7: 
 var $24=($19>>>0)<128;
 if($24){label=8;break;}else{label=10;break;}
 case 8: 
 var $26=HEAP32[(($to_nxt)>>2)];
 var $27=$26;
 var $28=((($16)-($27))|0);
 var $29=($28|0)<1;
 if($29){var $_0=1;label=19;break;}else{label=9;break;}
 case 9: 
 var $31=(($19)&255);
 var $32=(($26+1)|0);
 HEAP32[(($to_nxt)>>2)]=$32;
 HEAP8[($26)]=$31;
 label=18;break;
 case 10: 
 var $34=($19>>>0)<2048;
 if($34){label=11;break;}else{label=13;break;}
 case 11: 
 var $36=HEAP32[(($to_nxt)>>2)];
 var $37=$36;
 var $38=((($16)-($37))|0);
 var $39=($38|0)<2;
 if($39){var $_0=1;label=19;break;}else{label=12;break;}
 case 12: 
 var $41=$19>>>6;
 var $42=$41|192;
 var $43=(($42)&255);
 var $44=(($36+1)|0);
 HEAP32[(($to_nxt)>>2)]=$44;
 HEAP8[($36)]=$43;
 var $45=$19&63;
 var $46=$45|128;
 var $47=(($46)&255);
 var $48=HEAP32[(($to_nxt)>>2)];
 var $49=(($48+1)|0);
 HEAP32[(($to_nxt)>>2)]=$49;
 HEAP8[($48)]=$47;
 label=18;break;
 case 13: 
 var $51=($19>>>0)<65536;
 var $52=HEAP32[(($to_nxt)>>2)];
 var $53=$52;
 var $54=((($16)-($53))|0);
 if($51){label=14;break;}else{label=16;break;}
 case 14: 
 var $56=($54|0)<3;
 if($56){var $_0=1;label=19;break;}else{label=15;break;}
 case 15: 
 var $58=$19>>>12;
 var $59=$58|224;
 var $60=(($59)&255);
 var $61=(($52+1)|0);
 HEAP32[(($to_nxt)>>2)]=$61;
 HEAP8[($52)]=$60;
 var $62=$19>>>6;
 var $63=$62&63;
 var $64=$63|128;
 var $65=(($64)&255);
 var $66=HEAP32[(($to_nxt)>>2)];
 var $67=(($66+1)|0);
 HEAP32[(($to_nxt)>>2)]=$67;
 HEAP8[($66)]=$65;
 var $68=$19&63;
 var $69=$68|128;
 var $70=(($69)&255);
 var $71=HEAP32[(($to_nxt)>>2)];
 var $72=(($71+1)|0);
 HEAP32[(($to_nxt)>>2)]=$72;
 HEAP8[($71)]=$70;
 label=18;break;
 case 16: 
 var $74=($54|0)<4;
 if($74){var $_0=1;label=19;break;}else{label=17;break;}
 case 17: 
 var $76=$19>>>18;
 var $77=$76|240;
 var $78=(($77)&255);
 var $79=(($52+1)|0);
 HEAP32[(($to_nxt)>>2)]=$79;
 HEAP8[($52)]=$78;
 var $80=$19>>>12;
 var $81=$80&63;
 var $82=$81|128;
 var $83=(($82)&255);
 var $84=HEAP32[(($to_nxt)>>2)];
 var $85=(($84+1)|0);
 HEAP32[(($to_nxt)>>2)]=$85;
 HEAP8[($84)]=$83;
 var $86=$19>>>6;
 var $87=$86&63;
 var $88=$87|128;
 var $89=(($88)&255);
 var $90=HEAP32[(($to_nxt)>>2)];
 var $91=(($90+1)|0);
 HEAP32[(($to_nxt)>>2)]=$91;
 HEAP8[($90)]=$89;
 var $92=$19&63;
 var $93=$92|128;
 var $94=(($93)&255);
 var $95=HEAP32[(($to_nxt)>>2)];
 var $96=(($95+1)|0);
 HEAP32[(($to_nxt)>>2)]=$96;
 HEAP8[($95)]=$94;
 label=18;break;
 case 18: 
 var $98=HEAP32[(($frm_nxt)>>2)];
 var $99=(($98+4)|0);
 HEAP32[(($frm_nxt)>>2)]=$99;
 var $100=($99>>>0)<($frm_end>>>0);
 if($100){var $18=$99;label=6;break;}else{var $_0=0;label=19;break;}
 case 19: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 var $1=$mode&4;
 var $2=($1|0)==0;
 var $_pre=HEAP32[(($frm_nxt)>>2)];
 if($2){var $21=$_pre;label=7;break;}else{label=2;break;}
 case 2: 
 var $4=$frm_end;
 var $5=$_pre;
 var $6=((($4)-($5))|0);
 var $7=($6|0)>2;
 if($7){label=3;break;}else{var $21=$_pre;label=7;break;}
 case 3: 
 var $9=HEAP8[($_pre)];
 var $10=(($9<<24)>>24)==-17;
 if($10){label=4;break;}else{var $21=$_pre;label=7;break;}
 case 4: 
 var $12=(($_pre+1)|0);
 var $13=HEAP8[($12)];
 var $14=(($13<<24)>>24)==-69;
 if($14){label=5;break;}else{var $21=$_pre;label=7;break;}
 case 5: 
 var $16=(($_pre+2)|0);
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24)==-65;
 if($18){label=6;break;}else{var $21=$_pre;label=7;break;}
 case 6: 
 var $20=(($_pre+3)|0);
 HEAP32[(($frm_nxt)>>2)]=$20;
 var $21=$20;label=7;break;
 case 7: 
 var $21;
 var $22=($21>>>0)<($frm_end>>>0);
 if($22){label=8;break;}else{var $143=$21;label=39;break;}
 case 8: 
 var $23=$frm_end;
 var $_pre1=HEAP32[(($to_nxt)>>2)];
 var $26=$21;var $25=$_pre1;label=9;break;
 case 9: 
 var $25;
 var $26;
 var $27=($25>>>0)<($to_end>>>0);
 if($27){label=10;break;}else{var $143=$26;label=39;break;}
 case 10: 
 var $29=HEAP8[($26)];
 var $30=($29&255);
 var $31=(($29<<24)>>24)>-1;
 if($31){label=11;break;}else{label=13;break;}
 case 11: 
 var $33=($30>>>0)>($Maxcode>>>0);
 if($33){var $_0=2;label=40;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($25)>>2)]=$30;
 var $35=(($26+1)|0);
 HEAP32[(($frm_nxt)>>2)]=$35;
 label=38;break;
 case 13: 
 var $37=($29&255)<194;
 if($37){var $_0=2;label=40;break;}else{label=14;break;}
 case 14: 
 var $39=($29&255)<224;
 if($39){label=15;break;}else{label=19;break;}
 case 15: 
 var $41=$26;
 var $42=((($23)-($41))|0);
 var $43=($42|0)<2;
 if($43){var $_0=1;label=40;break;}else{label=16;break;}
 case 16: 
 var $45=(($26+1)|0);
 var $46=HEAP8[($45)];
 var $47=($46&255);
 var $48=$47&192;
 var $49=($48|0)==128;
 if($49){label=17;break;}else{var $_0=2;label=40;break;}
 case 17: 
 var $51=$30<<6;
 var $52=$51&1984;
 var $53=$47&63;
 var $54=$53|$52;
 var $55=($54>>>0)>($Maxcode>>>0);
 if($55){var $_0=2;label=40;break;}else{label=18;break;}
 case 18: 
 HEAP32[(($25)>>2)]=$54;
 var $57=(($26+2)|0);
 HEAP32[(($frm_nxt)>>2)]=$57;
 label=38;break;
 case 19: 
 var $59=($29&255)<240;
 if($59){label=20;break;}else{label=28;break;}
 case 20: 
 var $61=$26;
 var $62=((($23)-($61))|0);
 var $63=($62|0)<3;
 if($63){var $_0=1;label=40;break;}else{label=21;break;}
 case 21: 
 var $65=(($26+1)|0);
 var $66=HEAP8[($65)];
 var $67=(($26+2)|0);
 var $68=HEAP8[($67)];
 if(($30|0)==224){ label=22;break;}else if(($30|0)==237){ label=23;break;}else{label=24;break;}
 case 22: 
 var $70=$66&-32;
 var $71=(($70<<24)>>24)==-96;
 if($71){label=25;break;}else{var $_0=2;label=40;break;}
 case 23: 
 var $73=$66&-32;
 var $74=(($73<<24)>>24)==-128;
 if($74){label=25;break;}else{var $_0=2;label=40;break;}
 case 24: 
 var $76=$66&-64;
 var $77=(($76<<24)>>24)==-128;
 if($77){label=25;break;}else{var $_0=2;label=40;break;}
 case 25: 
 var $79=($68&255);
 var $80=$79&192;
 var $81=($80|0)==128;
 if($81){label=26;break;}else{var $_0=2;label=40;break;}
 case 26: 
 var $83=$30<<12;
 var $84=$83&61440;
 var $85=($66&255);
 var $86=$85<<6;
 var $87=$86&4032;
 var $88=$87|$84;
 var $89=$79&63;
 var $90=$88|$89;
 var $91=($90>>>0)>($Maxcode>>>0);
 if($91){var $_0=2;label=40;break;}else{label=27;break;}
 case 27: 
 HEAP32[(($25)>>2)]=$90;
 var $93=(($26+3)|0);
 HEAP32[(($frm_nxt)>>2)]=$93;
 label=38;break;
 case 28: 
 var $95=($29&255)<245;
 if($95){label=29;break;}else{var $_0=2;label=40;break;}
 case 29: 
 var $97=$26;
 var $98=((($23)-($97))|0);
 var $99=($98|0)<4;
 if($99){var $_0=1;label=40;break;}else{label=30;break;}
 case 30: 
 var $101=(($26+1)|0);
 var $102=HEAP8[($101)];
 var $103=(($26+2)|0);
 var $104=HEAP8[($103)];
 var $105=(($26+3)|0);
 var $106=HEAP8[($105)];
 if(($30|0)==240){ label=31;break;}else if(($30|0)==244){ label=32;break;}else{label=33;break;}
 case 31: 
 var $_off=((($102)+(112))&255);
 var $108=($_off&255)<48;
 if($108){label=34;break;}else{var $_0=2;label=40;break;}
 case 32: 
 var $110=$102&-16;
 var $111=(($110<<24)>>24)==-128;
 if($111){label=34;break;}else{var $_0=2;label=40;break;}
 case 33: 
 var $113=$102&-64;
 var $114=(($113<<24)>>24)==-128;
 if($114){label=34;break;}else{var $_0=2;label=40;break;}
 case 34: 
 var $116=($104&255);
 var $117=$116&192;
 var $118=($117|0)==128;
 if($118){label=35;break;}else{var $_0=2;label=40;break;}
 case 35: 
 var $120=($106&255);
 var $121=$120&192;
 var $122=($121|0)==128;
 if($122){label=36;break;}else{var $_0=2;label=40;break;}
 case 36: 
 var $124=$30<<18;
 var $125=$124&1835008;
 var $126=($102&255);
 var $127=$126<<12;
 var $128=$127&258048;
 var $129=$128|$125;
 var $130=$116<<6;
 var $131=$130&4032;
 var $132=$129|$131;
 var $133=$120&63;
 var $134=$132|$133;
 var $135=($134>>>0)>($Maxcode>>>0);
 if($135){var $_0=2;label=40;break;}else{label=37;break;}
 case 37: 
 HEAP32[(($25)>>2)]=$134;
 var $137=(($26+4)|0);
 HEAP32[(($frm_nxt)>>2)]=$137;
 label=38;break;
 case 38: 
 var $139=HEAP32[(($to_nxt)>>2)];
 var $140=(($139+4)|0);
 HEAP32[(($to_nxt)>>2)]=$140;
 var $141=HEAP32[(($frm_nxt)>>2)];
 var $142=($141>>>0)<($frm_end>>>0);
 if($142){var $26=$141;var $25=$140;label=9;break;}else{var $143=$141;label=39;break;}
 case 39: 
 var $143;
 var $144=($143>>>0)<($frm_end>>>0);
 var $145=($144&1);
 var $_0=$145;label=40;break;
 case 40: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}



function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$mode&4;
 var $2=($1|0)==0;
 if($2){var $frm_nxt_1_ph=$frm;label=6;break;}else{label=2;break;}
 case 2: 
 var $4=$frm_end;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=($6|0)>2;
 if($7){label=3;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 3: 
 var $9=HEAP8[($frm)];
 var $10=(($9<<24)>>24)==-17;
 if($10){label=4;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 4: 
 var $12=(($frm+1)|0);
 var $13=HEAP8[($12)];
 var $14=(($13<<24)>>24)==-69;
 if($14){label=5;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 5: 
 var $16=(($frm+2)|0);
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24)==-65;
 var $19=(($frm+3)|0);
 var $_frm=($18?$19:$frm);
 var $frm_nxt_1_ph=$_frm;label=6;break;
 case 6: 
 var $frm_nxt_1_ph;
 var $20=($frm_nxt_1_ph>>>0)<($frm_end>>>0);
 var $21=($mx|0)!=0;
 var $or_cond13=$20&$21;
 if($or_cond13){label=7;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_1_ph;label=43;break;}
 case 7: 
 var $22=$frm_end;
 var $nchar32_t_014=0;var $frm_nxt_115=$frm_nxt_1_ph;label=8;break;
 case 8: 
 var $frm_nxt_115;
 var $nchar32_t_014;
 var $24=HEAP8[($frm_nxt_115)];
 var $25=($24&255);
 var $26=(($24<<24)>>24)>-1;
 if($26){label=9;break;}else{label=11;break;}
 case 9: 
 var $28=($25>>>0)>($Maxcode>>>0);
 if($28){var $frm_nxt_1_lcssa=$frm_nxt_115;label=43;break;}else{label=10;break;}
 case 10: 
 var $30=(($frm_nxt_115+1)|0);
 var $frm_nxt_2=$30;label=42;break;
 case 11: 
 var $32=($24&255)<194;
 if($32){var $frm_nxt_1_lcssa=$frm_nxt_115;label=43;break;}else{label=12;break;}
 case 12: 
 var $34=($24&255)<224;
 if($34){label=13;break;}else{label=17;break;}
 case 13: 
 var $36=$frm_nxt_115;
 var $37=((($22)-($36))|0);
 var $38=($37|0)<2;
 if($38){var $frm_nxt_1_lcssa=$frm_nxt_115;label=43;break;}else{label=14;break;}
 case 14: 
 var $40=(($frm_nxt_115+1)|0);
 var $41=HEAP8[($40)];
 var $42=($41&255);
 var $43=$42&192;
 var $44=($43|0)==128;
 if($44){label=15;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_115;label=43;break;}
 case 15: 
 var $46=$25<<6;
 var $47=$46&1984;
 var $48=$42&63;
 var $49=$48|$47;
 var $50=($49>>>0)>($Maxcode>>>0);
 if($50){var $frm_nxt_1_lcssa=$frm_nxt_115;label=43;break;}else{label=16;break;}
 case 16: 
 var $52=(($frm_nxt_115+2)|0);
 var $frm_nxt_2=$52;label=42;break;
 case 17: 
 var $54=($24&255)<240;
 if($54){label=18;break;}else{label=29;break;}
 case 18: 
 var $56=$frm_nxt_115;
 var $57=((($22)-($56))|0);
 var $58=($57|0)<3;
 if($58){var $frm_nxt_1_lcssa=$frm_nxt_115;label=43;break;}else{label=19;break;}
 case 19: 
 var $60=(($frm_nxt_115+1)|0);
 var $61=HEAP8[($60)];
 var $62=(($frm_nxt_115+2)|0);
 var $63=HEAP8[($62)];
 if(($25|0)==224){ label=20;break;}else if(($25|0)==237){ label=22;break;}else{label=24;break;}
 case 20: 
 var $65=$61&-32;
 var $66=(($65<<24)>>24)==-96;
 if($66){label=26;break;}else{label=21;break;}
 case 21: 
 var $68=$frm;
 var $69=((($56)-($68))|0);
 var $_0=$69;label=44;break;
 case 22: 
 var $71=$61&-32;
 var $72=(($71<<24)>>24)==-128;
 if($72){label=26;break;}else{label=23;break;}
 case 23: 
 var $74=$frm;
 var $75=((($56)-($74))|0);
 var $_0=$75;label=44;break;
 case 24: 
 var $77=$61&-64;
 var $78=(($77<<24)>>24)==-128;
 if($78){label=26;break;}else{label=25;break;}
 case 25: 
 var $80=$frm;
 var $81=((($56)-($80))|0);
 var $_0=$81;label=44;break;
 case 26: 
 var $83=($63&255);
 var $84=$83&192;
 var $85=($84|0)==128;
 if($85){label=27;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_115;label=43;break;}
 case 27: 
 var $87=$25<<12;
 var $88=$87&61440;
 var $89=($61&255);
 var $90=$89<<6;
 var $91=$90&4032;
 var $92=$91|$88;
 var $93=$83&63;
 var $94=$92|$93;
 var $95=($94>>>0)>($Maxcode>>>0);
 if($95){var $frm_nxt_1_lcssa=$frm_nxt_115;label=43;break;}else{label=28;break;}
 case 28: 
 var $97=(($frm_nxt_115+3)|0);
 var $frm_nxt_2=$97;label=42;break;
 case 29: 
 var $99=($24&255)<245;
 if($99){label=30;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_115;label=43;break;}
 case 30: 
 var $101=$frm_nxt_115;
 var $102=((($22)-($101))|0);
 var $103=($102|0)<4;
 if($103){var $frm_nxt_1_lcssa=$frm_nxt_115;label=43;break;}else{label=31;break;}
 case 31: 
 var $105=(($frm_nxt_115+1)|0);
 var $106=HEAP8[($105)];
 var $107=(($frm_nxt_115+2)|0);
 var $108=HEAP8[($107)];
 var $109=(($frm_nxt_115+3)|0);
 var $110=HEAP8[($109)];
 if(($25|0)==240){ label=32;break;}else if(($25|0)==244){ label=34;break;}else{label=36;break;}
 case 32: 
 var $_off=((($106)+(112))&255);
 var $112=($_off&255)<48;
 if($112){label=38;break;}else{label=33;break;}
 case 33: 
 var $114=$frm;
 var $115=((($101)-($114))|0);
 var $_0=$115;label=44;break;
 case 34: 
 var $117=$106&-16;
 var $118=(($117<<24)>>24)==-128;
 if($118){label=38;break;}else{label=35;break;}
 case 35: 
 var $120=$frm;
 var $121=((($101)-($120))|0);
 var $_0=$121;label=44;break;
 case 36: 
 var $123=$106&-64;
 var $124=(($123<<24)>>24)==-128;
 if($124){label=38;break;}else{label=37;break;}
 case 37: 
 var $126=$frm;
 var $127=((($101)-($126))|0);
 var $_0=$127;label=44;break;
 case 38: 
 var $129=($108&255);
 var $130=$129&192;
 var $131=($130|0)==128;
 if($131){label=39;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_115;label=43;break;}
 case 39: 
 var $133=($110&255);
 var $134=$133&192;
 var $135=($134|0)==128;
 if($135){label=40;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_115;label=43;break;}
 case 40: 
 var $137=$25<<18;
 var $138=$137&1835008;
 var $139=($106&255);
 var $140=$139<<12;
 var $141=$140&258048;
 var $142=$141|$138;
 var $143=$129<<6;
 var $144=$143&4032;
 var $145=$142|$144;
 var $146=$133&63;
 var $147=$145|$146;
 var $148=($147>>>0)>($Maxcode>>>0);
 if($148){var $frm_nxt_1_lcssa=$frm_nxt_115;label=43;break;}else{label=41;break;}
 case 41: 
 var $150=(($frm_nxt_115+4)|0);
 var $frm_nxt_2=$150;label=42;break;
 case 42: 
 var $frm_nxt_2;
 var $152=((($nchar32_t_014)+(1))|0);
 var $153=($frm_nxt_2>>>0)<($frm_end>>>0);
 var $154=($152>>>0)<($mx>>>0);
 var $or_cond=$153&$154;
 if($or_cond){var $nchar32_t_014=$152;var $frm_nxt_115=$frm_nxt_2;label=8;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_2;label=43;break;}
 case 43: 
 var $frm_nxt_1_lcssa;
 var $155=$frm_nxt_1_lcssa;
 var $156=$frm;
 var $157=((($155)-($156))|0);
 var $_0=$157;label=44;break;
 case 44: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function ___cxx_global_array_dtor112($0){
 var label=0;


 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11556);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11544);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11532);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11520);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11508);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11496);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11484);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11472);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11460);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11448);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11436);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11424);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11412);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11400);
 return;
}


function ___cxx_global_array_dtor97($0){
 var label=0;


 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10812);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10800);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10788);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10776);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10764);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10752);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10740);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10728);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10716);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10704);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10692);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10680);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10668);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10656);
 return;
}


function ___cxx_global_array_dtor73($0){
 var label=0;


 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11388);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11376);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11364);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11352);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11340);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11328);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11316);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11304);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11292);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11280);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11268);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11256);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11244);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11232);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11220);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11208);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11196);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11184);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11172);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11160);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11148);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11136);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11124);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11112);
 return;
}


function ___cxx_global_array_dtor48($0){
 var label=0;


 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10644);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10632);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10620);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10608);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10596);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10584);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10572);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10560);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10548);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10536);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10524);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10512);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10500);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10488);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10476);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10464);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10452);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10440);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10428);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10416);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10404);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10392);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10380);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10368);
 return;
}


function ___cxx_global_array_dtor45($0){
 var label=0;


 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11844);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11832);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11820);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11808);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11796);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11784);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11772);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11760);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11748);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11736);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11724);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11712);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11700);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11688);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11676);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11664);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11652);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11640);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11628);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11616);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11604);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11592);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11580);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11568);
 return;
}


function ___cxx_global_array_dtor($0){
 var label=0;


 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11100);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11088);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11076);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11064);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11052);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11040);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11028);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11016);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11004);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10992);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10980);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10968);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10956);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10944);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10932);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10920);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10908);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10896);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10884);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10872);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10860);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10848);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10836);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10824);
 return;
}


function __ZNSt3__110__stdinbufIwE9__getcharEb($this,$__consume){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__enxt=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=(($this+52)|0);
 var $2=HEAP8[($1)];
 var $3=(($2<<24)>>24)==0;
 if($3){label=4;break;}else{label=2;break;}
 case 2: 
 var $5=(($this+48)|0);
 var $6=HEAP32[(($5)>>2)];
 if($__consume){label=3;break;}else{var $_0=$6;label=22;break;}
 case 3: 
 HEAP32[(($5)>>2)]=-1;
 HEAP8[($1)]=0;
 var $_0=$6;label=22;break;
 case 4: 
 var $9=(($this+44)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)>1;
 var $12=($11?$10:1);
 var $13=($12|0)>0;
 if($13){label=5;break;}else{label=8;break;}
 case 5: 
 var $14=(($this+32)|0);
 var $__i_09=0;label=6;break;
 case 6: 
 var $__i_09;
 var $16=HEAP32[(($14)>>2)];
 var $17=_fgetc($16);
 var $18=($17|0)==-1;
 if($18){var $_0=-1;label=22;break;}else{label=7;break;}
 case 7: 
 var $20=(($17)&255);
 var $21=(($__extbuf+$__i_09)|0);
 HEAP8[($21)]=$20;
 var $22=((($__i_09)+(1))|0);
 var $23=($22|0)<($12|0);
 if($23){var $__i_09=$22;label=6;break;}else{label=8;break;}
 case 8: 
 var $24=(($this+53)|0);
 var $25=HEAP8[($24)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=9;break;}else{label=10;break;}
 case 9: 
 var $27=(($this+40)|0);
 var $28=(($this+36)|0);
 var $29=(($__extbuf)|0);
 var $30=(($__1buf+4)|0);
 var $31=(($this+32)|0);
 var $__nread_0=$12;label=11;break;
 case 10: 
 var $33=(($__extbuf)|0);
 var $34=HEAP8[($33)];
 var $35=(($34<<24)>>24);
 HEAP32[(($__1buf)>>2)]=$35;
 var $__nread_2=$12;label=16;break;
 case 11: 
 var $__nread_0;
 var $37=HEAP32[(($27)>>2)];
 var $38=$37;
 var $ld$0$0=(($38)|0);
 var $39$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($38+4)|0);
 var $39$1=HEAP32[(($ld$1$1)>>2)];
 var $40=HEAP32[(($28)>>2)];
 var $41=(($__extbuf+$__nread_0)|0);
 var $42=$40;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=FUNCTION_TABLE[$45]($40,$37,$29,$41,$__enxt,$__1buf,$30,$__inxt);
 if(($46|0)==1){ label=12;break;}else if(($46|0)==3){ label=14;break;}else if(($46|0)==2){ var $_0=-1;label=22;break;}else{var $__nread_2=$__nread_0;label=16;break;}
 case 12: 
 var $48=HEAP32[(($27)>>2)];
 var $49=$48;
 var $st$2$0=(($49)|0);
 HEAP32[(($st$2$0)>>2)]=$39$0;
 var $st$3$1=(($49+4)|0);
 HEAP32[(($st$3$1)>>2)]=$39$1;
 var $50=($__nread_0|0)==8;
 if($50){var $_0=-1;label=22;break;}else{label=13;break;}
 case 13: 
 var $52=HEAP32[(($31)>>2)];
 var $53=_fgetc($52);
 var $54=($53|0)==-1;
 if($54){var $_0=-1;label=22;break;}else{label=15;break;}
 case 14: 
 var $56=HEAP8[($29)];
 var $57=(($56<<24)>>24);
 HEAP32[(($__1buf)>>2)]=$57;
 var $__nread_2=$__nread_0;label=16;break;
 case 15: 
 var $59=(($53)&255);
 HEAP8[($41)]=$59;
 var $60=((($__nread_0)+(1))|0);
 var $__nread_0=$60;label=11;break;
 case 16: 
 var $__nread_2;
 if($__consume){label=20;break;}else{label=17;break;}
 case 17: 
 var $61=(($this+32)|0);
 var $__i2_0=$__nread_2;label=18;break;
 case 18: 
 var $__i2_0;
 var $63=($__i2_0|0)>0;
 if($63){label=19;break;}else{label=21;break;}
 case 19: 
 var $65=((($__i2_0)-(1))|0);
 var $66=(($__extbuf+$65)|0);
 var $67=HEAP8[($66)];
 var $68=(($67<<24)>>24);
 var $69=HEAP32[(($61)>>2)];
 var $70=_ungetc($68,$69);
 var $71=($70|0)==-1;
 if($71){var $_0=-1;label=22;break;}else{var $__i2_0=$65;label=18;break;}
 case 20: 
 var $73=HEAP32[(($__1buf)>>2)];
 var $74=(($this+48)|0);
 HEAP32[(($74)>>2)]=$73;
 var $_0=$73;label=22;break;
 case 21: 
 var $_pre=HEAP32[(($__1buf)>>2)];
 var $_0=$_pre;label=22;break;
 case 22: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIcE9__getcharEb($this,$__consume){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__enxt=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=(($this+52)|0);
 var $2=HEAP8[($1)];
 var $3=(($2<<24)>>24)==0;
 if($3){label=4;break;}else{label=2;break;}
 case 2: 
 var $5=(($this+48)|0);
 var $6=HEAP32[(($5)>>2)];
 if($__consume){label=3;break;}else{var $_0=$6;label=23;break;}
 case 3: 
 HEAP32[(($5)>>2)]=-1;
 HEAP8[($1)]=0;
 var $_0=$6;label=23;break;
 case 4: 
 var $9=(($this+44)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)>1;
 var $12=($11?$10:1);
 var $13=($12|0)>0;
 if($13){label=5;break;}else{label=8;break;}
 case 5: 
 var $14=(($this+32)|0);
 var $__i_09=0;label=6;break;
 case 6: 
 var $__i_09;
 var $16=HEAP32[(($14)>>2)];
 var $17=_fgetc($16);
 var $18=($17|0)==-1;
 if($18){var $_0=-1;label=23;break;}else{label=7;break;}
 case 7: 
 var $20=(($17)&255);
 var $21=(($__extbuf+$__i_09)|0);
 HEAP8[($21)]=$20;
 var $22=((($__i_09)+(1))|0);
 var $23=($22|0)<($12|0);
 if($23){var $__i_09=$22;label=6;break;}else{label=8;break;}
 case 8: 
 var $24=(($this+53)|0);
 var $25=HEAP8[($24)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=9;break;}else{label=10;break;}
 case 9: 
 var $27=(($this+40)|0);
 var $28=(($this+36)|0);
 var $29=(($__extbuf)|0);
 var $30=(($__1buf+1)|0);
 var $31=(($this+32)|0);
 var $__nread_0=$12;label=11;break;
 case 10: 
 var $33=(($__extbuf)|0);
 var $34=HEAP8[($33)];
 HEAP8[($__1buf)]=$34;
 var $__nread_2=$12;label=16;break;
 case 11: 
 var $__nread_0;
 var $36=HEAP32[(($27)>>2)];
 var $37=$36;
 var $ld$0$0=(($37)|0);
 var $38$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($37+4)|0);
 var $38$1=HEAP32[(($ld$1$1)>>2)];
 var $39=HEAP32[(($28)>>2)];
 var $40=(($__extbuf+$__nread_0)|0);
 var $41=$39;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+16)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=FUNCTION_TABLE[$44]($39,$36,$29,$40,$__enxt,$__1buf,$30,$__inxt);
 if(($45|0)==1){ label=12;break;}else if(($45|0)==3){ label=14;break;}else if(($45|0)==2){ var $_0=-1;label=23;break;}else{var $__nread_2=$__nread_0;label=16;break;}
 case 12: 
 var $47=HEAP32[(($27)>>2)];
 var $48=$47;
 var $st$2$0=(($48)|0);
 HEAP32[(($st$2$0)>>2)]=$38$0;
 var $st$3$1=(($48+4)|0);
 HEAP32[(($st$3$1)>>2)]=$38$1;
 var $49=($__nread_0|0)==8;
 if($49){var $_0=-1;label=23;break;}else{label=13;break;}
 case 13: 
 var $51=HEAP32[(($31)>>2)];
 var $52=_fgetc($51);
 var $53=($52|0)==-1;
 if($53){var $_0=-1;label=23;break;}else{label=15;break;}
 case 14: 
 var $55=HEAP8[($29)];
 HEAP8[($__1buf)]=$55;
 var $__nread_2=$__nread_0;label=16;break;
 case 15: 
 var $57=(($52)&255);
 HEAP8[($40)]=$57;
 var $58=((($__nread_0)+(1))|0);
 var $__nread_0=$58;label=11;break;
 case 16: 
 var $__nread_2;
 if($__consume){label=20;break;}else{label=17;break;}
 case 17: 
 var $59=(($this+32)|0);
 var $__i2_0=$__nread_2;label=18;break;
 case 18: 
 var $__i2_0;
 var $61=($__i2_0|0)>0;
 if($61){label=19;break;}else{label=21;break;}
 case 19: 
 var $63=((($__i2_0)-(1))|0);
 var $64=(($__extbuf+$63)|0);
 var $65=HEAP8[($64)];
 var $66=($65&255);
 var $67=HEAP32[(($59)>>2)];
 var $68=_ungetc($66,$67);
 var $69=($68|0)==-1;
 if($69){var $_0=-1;label=23;break;}else{var $__i2_0=$63;label=18;break;}
 case 20: 
 var $71=HEAP8[($__1buf)];
 var $72=($71&255);
 var $73=(($this+48)|0);
 HEAP32[(($73)>>2)]=$72;
 var $75=$71;label=22;break;
 case 21: 
 var $_pre=HEAP8[($__1buf)];
 var $75=$_pre;label=22;break;
 case 22: 
 var $75;
 var $76=($75&255);
 var $_0=$76;label=23;break;
 case 23: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=19;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(13992)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(13992);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((11888)>>2)]=$11;

 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;

 ___resumeException($14$0)
 case 7: 
 var $15=HEAP32[((11888)>>2)];
 var $16$0=_strtoll_l($__a,$__p2,$__base,$15);
 var $16$1=tempRet0;
 var $17=HEAP32[(($3)>>2)];
 var $18=($17|0)==0;
 if($18){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $21=HEAP32[(($__p2)>>2)];
 var $22=($21|0)==($__a_end|0);
 if($22){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=20;break;
 case 11: 
 var $25=($17|0)==34;
 if($25){label=16;break;}else{label=12;break;}
 case 12: 
 var $$etemp$0$0=-2147483648;
 var $$etemp$0$1=-1;
 var $27=(($16$1|0) < ($$etemp$0$1|0)) | (((($16$1|0) == ($$etemp$0$1|0) & ($16$0>>>0) <  ($$etemp$0$0>>>0))));
 if($27){label=13;break;}else{label=14;break;}
 case 13: 
 HEAP32[(($__err)>>2)]=4;
 label=17;break;
 case 14: 
 var $$etemp$1$0=2147483647;
 var $$etemp$1$1=0;
 var $29=(($16$1|0) > ($$etemp$1$1|0)) | (((($16$1|0) == ($$etemp$1$1|0) & ($16$0>>>0) >  ($$etemp$1$0>>>0))));
 if($29){label=15;break;}else{label=18;break;}
 case 15: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=2147483647;label=20;break;
 case 16: 
 HEAP32[(($__err)>>2)]=4;
 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $31=(($16$1|0) > ($$etemp$2$1|0)) | (((($16$1|0) == ($$etemp$2$1|0) & ($16$0>>>0) >  ($$etemp$2$0>>>0))));
 if($31){var $_0=2147483647;label=20;break;}else{label=17;break;}
 case 17: 
 var $_0=-2147483648;label=20;break;
 case 18: 
 var $34$0=$16$0;
 var $34=$34$0;
 var $_0=$34;label=20;break;
 case 19: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=20;break;
 case 20: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=13;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(13992)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(13992);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((11888)>>2)]=$11;

 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;

 ___resumeException($14$0)
 case 7: 
 var $15=HEAP32[((11888)>>2)];
 var $16$0=_strtoll_l($__a,$__p2,$__base,$15);
 var $16$1=tempRet0;
 var $17=HEAP32[(($3)>>2)];
 var $18=($17|0)==0;
 if($18){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $21=HEAP32[(($__p2)>>2)];
 var $22=($21|0)==($__a_end|0);
 if($22){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=14;break;
 case 11: 
 var $25=($17|0)==34;
 if($25){label=12;break;}else{var $_0$1=$16$1;var $_0$0=$16$0;label=14;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $27=(($16$1|0) > ($$etemp$0$1|0)) | (((($16$1|0) == ($$etemp$0$1|0) & ($16$0>>>0) >  ($$etemp$0$0>>>0))));
 var $$etemp$2$0=0;
 var $$etemp$2$1=-2147483648;
 var $$etemp$1$0=-1;
 var $$etemp$1$1=2147483647;
 var $_$0=($27?$$etemp$1$0:$$etemp$2$0);
 var $_$1=($27?$$etemp$1$1:$$etemp$2$1);
 STACKTOP=sp;return (tempRet0=$_$1,$_$0);
 case 13: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=14;break;
 case 14: 
 var $_0$0;
 var $_0$1;
 STACKTOP=sp;return (tempRet0=$_0$1,$_0$0);
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=16;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[($__a)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=HEAP8[(13992)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=9;break;}
 case 5: 
 var $12=___cxa_guard_acquire(13992);
 var $13=($12|0)==0;
 if($13){label=9;break;}else{label=6;break;}
 case 6: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((11888)>>2)]=$15;

 label=9;break;
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;

 ___resumeException($18$0)
 case 9: 
 var $19=HEAP32[((11888)>>2)];
 var $20$0=_strtoull_l($__a,$__p2,$__base,$19);
 var $20$1=tempRet0;
 var $21=HEAP32[(($7)>>2)];
 var $22=($21|0)==0;
 if($22){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($7)>>2)]=$8;
 label=11;break;
 case 11: 
 var $25=HEAP32[(($__p2)>>2)];
 var $26=($25|0)==($__a_end|0);
 if($26){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 13: 
 var $29=($21|0)==34;
 var $$etemp$0$0=65535;
 var $$etemp$0$1=0;
 var $30=(($20$1>>>0) > ($$etemp$0$1>>>0)) | (((($20$1>>>0) == ($$etemp$0$1>>>0) & ($20$0>>>0) >  ($$etemp$0$0>>>0))));
 var $or_cond=$29|$30;
 if($or_cond){label=14;break;}else{label=15;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=-1;label=17;break;
 case 15: 
 var $33$0=$20$0;
 var $33=$33$0&65535;
 var $_0=$33;label=17;break;
 case 16: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=16;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[($__a)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=HEAP8[(13992)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=9;break;}
 case 5: 
 var $12=___cxa_guard_acquire(13992);
 var $13=($12|0)==0;
 if($13){label=9;break;}else{label=6;break;}
 case 6: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((11888)>>2)]=$15;

 label=9;break;
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;

 ___resumeException($18$0)
 case 9: 
 var $19=HEAP32[((11888)>>2)];
 var $20$0=_strtoull_l($__a,$__p2,$__base,$19);
 var $20$1=tempRet0;
 var $21=HEAP32[(($7)>>2)];
 var $22=($21|0)==0;
 if($22){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($7)>>2)]=$8;
 label=11;break;
 case 11: 
 var $25=HEAP32[(($__p2)>>2)];
 var $26=($25|0)==($__a_end|0);
 if($26){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 13: 
 var $29=($21|0)==34;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=0;
 var $30=(($20$1>>>0) > ($$etemp$0$1>>>0)) | (((($20$1>>>0) == ($$etemp$0$1>>>0) & ($20$0>>>0) >  ($$etemp$0$0>>>0))));
 var $or_cond=$29|$30;
 if($or_cond){label=14;break;}else{label=15;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=-1;label=17;break;
 case 15: 
 var $33$0=$20$0;
 var $33=$33$0;
 var $_0=$33;label=17;break;
 case 16: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=16;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[($__a)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=HEAP8[(13992)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=9;break;}
 case 5: 
 var $12=___cxa_guard_acquire(13992);
 var $13=($12|0)==0;
 if($13){label=9;break;}else{label=6;break;}
 case 6: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((11888)>>2)]=$15;

 label=9;break;
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;

 ___resumeException($18$0)
 case 9: 
 var $19=HEAP32[((11888)>>2)];
 var $20$0=_strtoull_l($__a,$__p2,$__base,$19);
 var $20$1=tempRet0;
 var $21=HEAP32[(($7)>>2)];
 var $22=($21|0)==0;
 if($22){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($7)>>2)]=$8;
 label=11;break;
 case 11: 
 var $25=HEAP32[(($__p2)>>2)];
 var $26=($25|0)==($__a_end|0);
 if($26){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 13: 
 var $29=($21|0)==34;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=0;
 var $30=(($20$1>>>0) > ($$etemp$0$1>>>0)) | (((($20$1>>>0) == ($$etemp$0$1>>>0) & ($20$0>>>0) >  ($$etemp$0$0>>>0))));
 var $or_cond=$29|$30;
 if($or_cond){label=14;break;}else{label=15;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=-1;label=17;break;
 case 15: 
 var $33$0=$20$0;
 var $33=$33$0;
 var $_0=$33;label=17;break;
 case 16: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=15;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[($__a)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=16;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=HEAP8[(13992)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=9;break;}
 case 5: 
 var $12=___cxa_guard_acquire(13992);
 var $13=($12|0)==0;
 if($13){label=9;break;}else{label=6;break;}
 case 6: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((11888)>>2)]=$15;

 label=9;break;
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;

 ___resumeException($18$0)
 case 9: 
 var $19=HEAP32[((11888)>>2)];
 var $20$0=_strtoull_l($__a,$__p2,$__base,$19);
 var $20$1=tempRet0;
 var $21=HEAP32[(($7)>>2)];
 var $22=($21|0)==0;
 if($22){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($7)>>2)]=$8;
 label=11;break;
 case 11: 
 var $25=HEAP32[(($__p2)>>2)];
 var $26=($25|0)==($__a_end|0);
 if($26){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=16;break;
 case 13: 
 var $29=($21|0)==34;
 if($29){label=14;break;}else{var $_0$1=$20$1;var $_0$0=$20$0;label=16;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=-1;var $_0$0=-1;label=16;break;
 case 15: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=16;break;
 case 16: 
 var $_0$0;
 var $_0$1;
 STACKTOP=sp;return (tempRet0=$_0$1,$_0$0);
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=14;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(13992)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(13992);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((11888)>>2)]=$11;

 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;

 ___resumeException($14$0)
 case 7: 
 var $15=HEAP32[((11888)>>2)];
 var $16=_strtold_l($__a,$__p2,$15);
 var $17=HEAP32[(($3)>>2)];
 var $18=($17|0)==0;
 if($18){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $21=HEAP32[(($__p2)>>2)];
 var $22=($21|0)==($__a_end|0);
 if($22){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=15;break;
 case 11: 
 var $25=($17|0)==34;
 if($25){label=12;break;}else{label=13;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 label=13;break;
 case 13: 
 var $28=$16;
 var $_0=$28;label=15;break;
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=15;break;
 case 15: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=13;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(13992)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(13992);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((11888)>>2)]=$11;

 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;

 ___resumeException($14$0)
 case 7: 
 var $15=HEAP32[((11888)>>2)];
 var $16=_strtold_l($__a,$__p2,$15);
 var $17=HEAP32[(($3)>>2)];
 var $18=($17|0)==0;
 if($18){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $21=HEAP32[(($__p2)>>2)];
 var $22=($21|0)==($__a_end|0);
 if($22){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=14;break;
 case 11: 
 var $25=($17|0)==34;
 if($25){label=12;break;}else{var $_0=$16;label=14;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=$16;label=14;break;
 case 13: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=14;break;
 case 14: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=13;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(13992)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(13992);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,152,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((11888)>>2)]=$11;

 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;

 ___resumeException($14$0)
 case 7: 
 var $15=HEAP32[((11888)>>2)];
 var $16=_strtold_l($__a,$__p2,$15);
 var $17=HEAP32[(($3)>>2)];
 var $18=($17|0)==0;
 if($18){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $21=HEAP32[(($__p2)>>2)];
 var $22=($21|0)==($__a_end|0);
 if($22){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=14;break;
 case 11: 
 var $25=($17|0)==34;
 if($25){label=12;break;}else{var $_0=$16;label=14;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=$16;label=14;break;
 case 13: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=14;break;
 case 14: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _mbrlen($s,$n,$st){
 var label=0;


 var $1=($st|0)!=0;
 var $2=($1?$st:9888);
 var $3=_mbrtowc(0,$s,$n,$2);
 return $3;
}


function _mbrtowc($wc,$src,$n,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 HEAP32[(($1)>>2)]=$wc;
 var $2=($st|0)==0;
 var $_01=($2?9880:$st);
 var $3=(($_01)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($src|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=($4|0)==0;
 if($7){var $_0=0;label=19;break;}else{label=18;break;}
 case 3: 
 var $9=($wc|0)==0;
 if($9){label=4;break;}else{var $13=$wc;label=5;break;}
 case 4: 
 var $11=$1;
 HEAP32[(($1)>>2)]=$11;
 var $13=$11;label=5;break;
 case 5: 
 var $13;
 var $14=($n|0)==0;
 if($14){var $_0=-2;label=19;break;}else{label=6;break;}
 case 6: 
 var $16=($4|0)==0;
 if($16){label=7;break;}else{var $s_0=$src;var $c_0=$4;var $_02=$n;label=11;break;}
 case 7: 
 var $18=HEAP8[($src)];
 var $19=($18&255);
 var $20=(($18<<24)>>24)>-1;
 if($20){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($13)>>2)]=$19;
 var $22=(($18<<24)>>24)!=0;
 var $23=($22&1);
 var $_0=$23;label=19;break;
 case 9: 
 var $25=((($19)-(194))|0);
 var $26=($25>>>0)>50;
 if($26){label=18;break;}else{label=10;break;}
 case 10: 
 var $28=(($src+1)|0);
 var $29=((1984+($25<<2))|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=((($n)-(1))|0);
 var $s_0=$28;var $c_0=$30;var $_02=$31;label=11;break;
 case 11: 
 var $_02;
 var $c_0;
 var $s_0;
 var $33=($_02|0)==0;
 if($33){var $c_2=$c_0;label=17;break;}else{label=12;break;}
 case 12: 
 var $35=HEAP8[($s_0)];
 var $36=($35&255);
 var $37=$36>>>3;
 var $38=((($37)-(16))|0);
 var $39=$c_0>>26;
 var $40=((($37)+($39))|0);
 var $41=$38|$40;
 var $42=($41>>>0)>7;
 if($42){label=18;break;}else{var $s_1=$s_0;var $c_1=$c_0;var $_1=$_02;var $43=$35;label=13;break;}
 case 13: 
 var $43;
 var $_1;
 var $c_1;
 var $s_1;
 var $44=$c_1<<6;
 var $45=(($s_1+1)|0);
 var $46=($43&255);
 var $47=((($46)-(128))|0);
 var $48=$47|$44;
 var $49=((($_1)-(1))|0);
 var $50=($48|0)<0;
 if($50){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP32[(($3)>>2)]=0;
 HEAP32[(($13)>>2)]=$48;
 var $52=((($n)-($49))|0);
 var $_0=$52;label=19;break;
 case 15: 
 var $54=($49|0)==0;
 if($54){var $c_2=$48;label=17;break;}else{label=16;break;}
 case 16: 
 var $56=HEAP8[($45)];
 var $57=$56&-64;
 var $58=(($57<<24)>>24)==-128;
 if($58){var $s_1=$45;var $c_1=$48;var $_1=$49;var $43=$56;label=13;break;}else{label=18;break;}
 case 17: 
 var $c_2;
 HEAP32[(($3)>>2)]=$c_2;
 var $_0=-2;label=19;break;
 case 18: 
 HEAP32[(($3)>>2)]=0;
 var $59=___errno_location();
 HEAP32[(($59)>>2)]=84;
 var $_0=-1;label=19;break;
 case 19: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _mbsnrtowcs($wcs,$src,$n,$wn,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1032)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $wbuf=sp;
 var $s=(sp)+(1024);
 var $1=$wbuf;
 var $$etemp$0$0=1024;
 var $$etemp$0$1=0;

 var $2=HEAP32[(($src)>>2)];
 HEAP32[(($s)>>2)]=$2;
 var $3=($wcs|0)!=0;
 var $4=(($wbuf)|0);
 var $wn_=($3?$wn:256);
 var $wcs_=($3?$wcs:$4);
 var $5=($2|0)!=0;
 var $6=($wn_|0)!=0;
 var $or_cond27=$5&$6;
 if($or_cond27){var $_01428=$wn_;var $cnt_029=0;var $ws_030=$wcs_;var $_031=$n;var $7=$2;label=2;break;}else{var $_014_lcssa=$wn_;var $cnt_0_lcssa=0;var $ws_0_lcssa=$wcs_;var $_0_lcssa=$n;var $24=$2;label=7;break;}
 case 2: 
 var $7;
 var $_031;
 var $ws_030;
 var $cnt_029;
 var $_01428;
 var $8=$_031>>>2;
 var $9=($8>>>0)>=($_01428>>>0);
 var $10=($_031>>>0)>131;
 var $or_cond13=$9|$10;
 if($or_cond13){label=3;break;}else{var $_014_lcssa=$_01428;var $cnt_0_lcssa=$cnt_029;var $ws_0_lcssa=$ws_030;var $_0_lcssa=$_031;var $24=$7;label=7;break;}
 case 3: 
 var $_014_=($9?$_01428:$8);
 var $11=((($_031)-($_014_))|0);
 var $12=_mbsrtowcs($ws_030,$s,$_014_,$st);
 var $13=($12|0)==-1;
 if($13){var $cnt_3=-1;label=13;break;}else{label=4;break;}
 case 4: 
 var $15=($ws_030|0)==($4|0);
 if($15){var $ws_1=$4;var $_115=$_01428;label=6;break;}else{label=5;break;}
 case 5: 
 var $17=(($ws_030+($12<<2))|0);
 var $18=((($_01428)-($12))|0);
 var $ws_1=$17;var $_115=$18;label=6;break;
 case 6: 
 var $_115;
 var $ws_1;
 var $20=((($12)+($cnt_029))|0);
 var $21=HEAP32[(($s)>>2)];
 var $22=($21|0)!=0;
 var $23=($_115|0)!=0;
 var $or_cond=$22&$23;
 if($or_cond){var $_01428=$_115;var $cnt_029=$20;var $ws_030=$ws_1;var $_031=$11;var $7=$21;label=2;break;}else{var $_014_lcssa=$_115;var $cnt_0_lcssa=$20;var $ws_0_lcssa=$ws_1;var $_0_lcssa=$11;var $24=$21;label=7;break;}
 case 7: 
 var $24;
 var $_0_lcssa;
 var $ws_0_lcssa;
 var $cnt_0_lcssa;
 var $_014_lcssa;
 var $25=($24|0)!=0;
 var $26=($_014_lcssa|0)!=0;
 var $or_cond5=$25&$26;
 var $27=($_0_lcssa|0)!=0;
 var $or_cond8=$or_cond5&$27;
 if($or_cond8){var $_2=$_0_lcssa;var $ws_2=$ws_0_lcssa;var $cnt_2=$cnt_0_lcssa;var $_3=$_014_lcssa;var $28=$24;label=8;break;}else{var $cnt_3=$cnt_0_lcssa;label=13;break;}
 case 8: 
 var $28;
 var $_3;
 var $cnt_2;
 var $ws_2;
 var $_2;
 var $29=_mbrtowc($ws_2,$28,$_2,$st);
 var $30=((($29)+(2))|0);
 var $31=($30>>>0)<3;
 if($31){label=9;break;}else{label=12;break;}
 case 9: 
 if(($29|0)==0){ label=10;break;}else if(($29|0)==-1){ var $cnt_3=-1;label=13;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($s)>>2)]=0;
 var $cnt_3=$cnt_2;label=13;break;
 case 11: 
 var $35=(($st)|0);
 HEAP32[(($35)>>2)]=0;
 var $cnt_3=$cnt_2;label=13;break;
 case 12: 
 var $37=HEAP32[(($s)>>2)];
 var $38=(($37+$29)|0);
 HEAP32[(($s)>>2)]=$38;
 var $39=((($_2)-($29))|0);
 var $40=(($ws_2+4)|0);
 var $41=((($_3)-(1))|0);
 var $42=((($cnt_2)+(1))|0);
 var $_old4=($41|0)!=0;
 var $_old7=($_2|0)!=($29|0);
 var $or_cond10=$_old4&$_old7;
 if($or_cond10){var $_2=$39;var $ws_2=$40;var $cnt_2=$42;var $_3=$41;var $28=$38;label=8;break;}else{var $cnt_3=$42;label=13;break;}
 case 13: 
 var $cnt_3;
 if($3){label=14;break;}else{label=15;break;}
 case 14: 
 var $44=HEAP32[(($s)>>2)];
 HEAP32[(($src)>>2)]=$44;
 label=15;break;
 case 15: 
 var $$etemp$1$0=1024;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $cnt_3;
  default: assert(0, "bad label: " + label);
 }

}


function _mbsrtowcs($ws,$src,$wn,$st){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($src)>>2)];
 var $2=($st|0)==0;
 if($2){label=5;break;}else{label=2;break;}
 case 2: 
 var $4=(($st)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=5;break;}else{label=3;break;}
 case 3: 
 var $8=($ws|0)==0;
 if($8){var $c_2=$5;var $s_3=$1;var $_36=$wn;label=16;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($4)>>2)]=0;
 var $c_4=$5;var $s_8=$1;var $_3=$ws;var $_7=$wn;label=35;break;
 case 5: 
 var $11=($ws|0)==0;
 if($11){var $s_0=$1;var $_03=$wn;label=7;break;}else{var $s_5_ph=$1;var $_02_ph=$ws;var $_47_ph=$wn;label=6;break;}
 case 6: 
 var $_47_ph;
 var $_02_ph;
 var $s_5_ph;
 var $12=($_47_ph|0)==0;
 if($12){var $_0=$wn;label=52;break;}else{var $_4716=$_47_ph;var $_0217=$_02_ph;var $s_518=$s_5_ph;label=26;break;}
 case 7: 
 var $_03;
 var $s_0;
 var $13=HEAP8[($s_0)];
 var $14=($13&255);
 var $15=((($14)-(1))|0);
 var $16=($15>>>0)<127;
 if($16){label=8;break;}else{var $s_2=$s_0;var $_25=$_03;var $37=$13;label=12;break;}
 case 8: 
 var $18=$s_0;
 var $19=$18&3;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{var $s_2=$s_0;var $_25=$_03;var $37=$13;label=12;break;}
 case 9: 
 var $21=$s_0;
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)-(16843009))|0);
 var $24=$23|$22;
 var $25=$24&-2139062144;
 var $26=($25|0)==0;
 var $27=(($22)&255);
 if($26){var $_148=$_03;var $s_19=$s_0;label=10;break;}else{var $s_2=$s_0;var $_25=$_03;var $37=$27;label=12;break;}
 case 10: 
 var $s_19;
 var $_148;
 var $28=(($s_19+4)|0);
 var $29=((($_148)-(4))|0);
 var $30=$28;
 var $31=HEAP32[(($30)>>2)];
 var $32=((($31)-(16843009))|0);
 var $33=$32|$31;
 var $34=$33&-2139062144;
 var $35=($34|0)==0;
 if($35){var $_148=$29;var $s_19=$28;label=10;break;}else{label=11;break;}
 case 11: 
 var $36=(($31)&255);
 var $s_2=$28;var $_25=$29;var $37=$36;label=12;break;
 case 12: 
 var $37;
 var $_25;
 var $s_2;
 var $38=($37&255);
 var $39=((($38)-(1))|0);
 var $40=($39>>>0)<127;
 if($40){label=13;break;}else{label=14;break;}
 case 13: 
 var $42=(($s_2+1)|0);
 var $43=((($_25)-(1))|0);
 var $s_0=$42;var $_03=$43;label=7;break;
 case 14: 
 var $45=((($38)-(194))|0);
 var $46=($45>>>0)>50;
 if($46){var $_828=$_25;var $_430=$ws;var $s_1032=$s_2;label=46;break;}else{label=15;break;}
 case 15: 
 var $48=(($s_2+1)|0);
 var $49=((1984+($45<<2))|0);
 var $50=HEAP32[(($49)>>2)];
 var $c_2=$50;var $s_3=$48;var $_36=$_25;label=16;break;
 case 16: 
 var $_36;
 var $s_3;
 var $c_2;
 var $52=HEAP8[($s_3)];
 var $53=($52&255);
 var $54=$53>>>3;
 var $55=((($54)-(16))|0);
 var $56=$c_2>>26;
 var $57=((($54)+($56))|0);
 var $58=$55|$57;
 var $59=($58>>>0)>7;
 if($59){label=17;break;}else{label=18;break;}
 case 17: 
 var $61=((($s_3)-(1))|0);
 var $c_6=$c_2;var $s_10=$61;var $_4=$ws;var $_8=$_36;label=45;break;
 case 18: 
 var $63=(($s_3+1)|0);
 var $64=$c_2&33554432;
 var $65=($64|0)==0;
 if($65){var $s_4=$63;label=25;break;}else{label=19;break;}
 case 19: 
 var $67=HEAP8[($63)];
 var $68=$67&-64;
 var $69=(($68<<24)>>24)==-128;
 if($69){label=21;break;}else{label=20;break;}
 case 20: 
 var $71=((($s_3)-(1))|0);
 var $c_6=$c_2;var $s_10=$71;var $_4=$ws;var $_8=$_36;label=45;break;
 case 21: 
 var $73=(($s_3+2)|0);
 var $74=$c_2&524288;
 var $75=($74|0)==0;
 if($75){var $s_4=$73;label=25;break;}else{label=22;break;}
 case 22: 
 var $77=HEAP8[($73)];
 var $78=$77&-64;
 var $79=(($78<<24)>>24)==-128;
 if($79){label=24;break;}else{label=23;break;}
 case 23: 
 var $81=((($s_3)-(1))|0);
 var $c_6=$c_2;var $s_10=$81;var $_4=$ws;var $_8=$_36;label=45;break;
 case 24: 
 var $83=(($s_3+3)|0);
 var $s_4=$83;label=25;break;
 case 25: 
 var $s_4;
 var $85=((($_36)-(1))|0);
 var $s_0=$s_4;var $_03=$85;label=7;break;
 case 26: 
 var $s_518;
 var $_0217;
 var $_4716;
 var $86=HEAP8[($s_518)];
 var $87=($86&255);
 var $88=((($87)-(1))|0);
 var $89=($88>>>0)<127;
 if($89){label=27;break;}else{var $s_7=$s_518;var $_2=$_0217;var $_6=$_4716;var $119=$86;label=31;break;}
 case 27: 
 var $91=$s_518;
 var $92=$91&3;
 var $93=($92|0)==0;
 var $94=($_4716>>>0)>3;
 var $or_cond=$93&$94;
 if($or_cond){var $s_6=$s_518;var $_1=$_0217;var $_5=$_4716;label=28;break;}else{var $s_7=$s_518;var $_2=$_0217;var $_6=$_4716;var $119=$86;label=31;break;}
 case 28: 
 var $_5;
 var $_1;
 var $s_6;
 var $95=$s_6;
 var $96=HEAP32[(($95)>>2)];
 var $97=((($96)-(16843009))|0);
 var $98=$97|$96;
 var $99=$98&-2139062144;
 var $100=($99|0)==0;
 var $101=(($96)&255);
 if($100){label=29;break;}else{var $s_7=$s_6;var $_2=$_1;var $_6=$_5;var $119=$101;label=31;break;}
 case 29: 
 var $103=(($s_6+1)|0);
 var $104=$96&255;
 var $105=(($_1+4)|0);
 HEAP32[(($_1)>>2)]=$104;
 var $106=(($s_6+2)|0);
 var $107=HEAP8[($103)];
 var $108=($107&255);
 var $109=(($_1+8)|0);
 HEAP32[(($105)>>2)]=$108;
 var $110=(($s_6+3)|0);
 var $111=HEAP8[($106)];
 var $112=($111&255);
 var $113=(($_1+12)|0);
 HEAP32[(($109)>>2)]=$112;
 var $114=(($s_6+4)|0);
 var $115=HEAP8[($110)];
 var $116=($115&255);
 var $117=(($_1+16)|0);
 HEAP32[(($113)>>2)]=$116;
 var $118=((($_5)-(4))|0);
 var $_old1=($118>>>0)>3;
 if($_old1){var $s_6=$114;var $_1=$117;var $_5=$118;label=28;break;}else{label=30;break;}
 case 30: 
 var $_pre_pre=HEAP8[($114)];
 var $s_7=$114;var $_2=$117;var $_6=$118;var $119=$_pre_pre;label=31;break;
 case 31: 
 var $119;
 var $_6;
 var $_2;
 var $s_7;
 var $120=($119&255);
 var $121=((($120)-(1))|0);
 var $122=($121>>>0)<127;
 if($122){label=32;break;}else{label=33;break;}
 case 32: 
 var $124=(($s_7+1)|0);
 var $125=(($_2+4)|0);
 HEAP32[(($_2)>>2)]=$120;
 var $126=((($_6)-(1))|0);
 var $127=($126|0)==0;
 if($127){var $_0=$wn;label=52;break;}else{var $_4716=$126;var $_0217=$125;var $s_518=$124;label=26;break;}
 case 33: 
 var $129=((($120)-(194))|0);
 var $130=($129>>>0)>50;
 if($130){var $_828=$_6;var $_430=$_2;var $s_1032=$s_7;label=46;break;}else{label=34;break;}
 case 34: 
 var $132=(($s_7+1)|0);
 var $133=((1984+($129<<2))|0);
 var $134=HEAP32[(($133)>>2)];
 var $c_4=$134;var $s_8=$132;var $_3=$_2;var $_7=$_6;label=35;break;
 case 35: 
 var $_7;
 var $_3;
 var $s_8;
 var $c_4;
 var $136=HEAP8[($s_8)];
 var $137=($136&255);
 var $138=$137>>>3;
 var $139=((($138)-(16))|0);
 var $140=$c_4>>26;
 var $141=((($138)+($140))|0);
 var $142=$139|$141;
 var $143=($142>>>0)>7;
 if($143){label=36;break;}else{label=37;break;}
 case 36: 
 var $145=((($s_8)-(1))|0);
 var $c_6=$c_4;var $s_10=$145;var $_4=$_3;var $_8=$_7;label=45;break;
 case 37: 
 var $147=$c_4<<6;
 var $148=(($s_8+1)|0);
 var $149=((($137)-(128))|0);
 var $150=$149|$147;
 var $151=($150|0)<0;
 if($151){label=38;break;}else{var $c_5=$150;var $s_9=$148;label=44;break;}
 case 38: 
 var $153=HEAP8[($148)];
 var $154=($153&255);
 var $155=$154&192;
 var $156=($155|0)==128;
 if($156){label=40;break;}else{label=39;break;}
 case 39: 
 var $158=((($s_8)-(1))|0);
 var $c_6=$150;var $s_10=$158;var $_4=$_3;var $_8=$_7;label=45;break;
 case 40: 
 var $160=$150<<6;
 var $161=(($s_8+2)|0);
 var $162=((($154)-(128))|0);
 var $163=$162|$160;
 var $164=($163|0)<0;
 if($164){label=41;break;}else{var $c_5=$163;var $s_9=$161;label=44;break;}
 case 41: 
 var $166=HEAP8[($161)];
 var $167=($166&255);
 var $168=$167&192;
 var $169=($168|0)==128;
 if($169){label=43;break;}else{label=42;break;}
 case 42: 
 var $171=((($s_8)-(1))|0);
 var $c_6=$163;var $s_10=$171;var $_4=$_3;var $_8=$_7;label=45;break;
 case 43: 
 var $173=$163<<6;
 var $174=(($s_8+3)|0);
 var $175=((($167)-(128))|0);
 var $176=$175|$173;
 var $c_5=$176;var $s_9=$174;label=44;break;
 case 44: 
 var $s_9;
 var $c_5;
 var $178=(($_3+4)|0);
 HEAP32[(($_3)>>2)]=$c_5;
 var $179=((($_7)-(1))|0);
 var $s_5_ph=$s_9;var $_02_ph=$178;var $_47_ph=$179;label=6;break;
 case 45: 
 var $_8;
 var $_4;
 var $s_10;
 var $c_6;
 var $181=($c_6|0)==0;
 if($181){var $_828=$_8;var $_430=$_4;var $s_1032=$s_10;label=46;break;}else{var $_429=$_4;var $s_1031=$s_10;label=50;break;}
 case 46: 
 var $s_1032;
 var $_430;
 var $_828;
 var $182=HEAP8[($s_1032)];
 var $183=(($182<<24)>>24)==0;
 if($183){label=47;break;}else{var $_429=$_430;var $s_1031=$s_1032;label=50;break;}
 case 47: 
 var $185=($_430|0)==0;
 if($185){label=49;break;}else{label=48;break;}
 case 48: 
 HEAP32[(($_430)>>2)]=0;
 HEAP32[(($src)>>2)]=0;
 label=49;break;
 case 49: 
 var $188=((($wn)-($_828))|0);
 var $_0=$188;label=52;break;
 case 50: 
 var $s_1031;
 var $_429;
 var $190=___errno_location();
 HEAP32[(($190)>>2)]=84;
 var $191=($_429|0)==0;
 if($191){var $_0=-1;label=52;break;}else{label=51;break;}
 case 51: 
 HEAP32[(($src)>>2)]=$s_1031;
 var $_0=-1;label=52;break;
 case 52: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _mbtowc($wc,$src,$n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 HEAP32[(($1)>>2)]=$wc;
 var $2=($src|0)==0;
 if($2){var $_0=0;label=19;break;}else{label=2;break;}
 case 2: 
 var $4=($n|0)==0;
 if($4){label=18;break;}else{label=3;break;}
 case 3: 
 var $6=($wc|0)==0;
 if($6){label=4;break;}else{var $10=$wc;label=5;break;}
 case 4: 
 var $8=$1;
 HEAP32[(($1)>>2)]=$8;
 var $10=$8;label=5;break;
 case 5: 
 var $10;
 var $11=HEAP8[($src)];
 var $12=($11&255);
 var $13=(($11<<24)>>24)>-1;
 if($13){label=6;break;}else{label=7;break;}
 case 6: 
 HEAP32[(($10)>>2)]=$12;
 var $15=(($11<<24)>>24)!=0;
 var $16=($15&1);
 var $_0=$16;label=19;break;
 case 7: 
 var $18=((($12)-(194))|0);
 var $19=($18>>>0)>50;
 if($19){label=18;break;}else{label=8;break;}
 case 8: 
 var $21=(($src+1)|0);
 var $22=((1984+($18<<2))|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($n>>>0)<4;
 if($24){label=9;break;}else{label=10;break;}
 case 9: 
 var $26=((($n)*(6))&-1);
 var $27=((($26)-(6))|0);
 var $28=-2147483648>>>($27>>>0);
 var $29=$23&$28;
 var $30=($29|0)==0;
 if($30){label=10;break;}else{label=18;break;}
 case 10: 
 var $32=HEAP8[($21)];
 var $33=($32&255);
 var $34=$33>>>3;
 var $35=((($34)-(16))|0);
 var $36=$23>>26;
 var $37=((($34)+($36))|0);
 var $38=$35|$37;
 var $39=($38>>>0)>7;
 if($39){label=18;break;}else{label=11;break;}
 case 11: 
 var $41=$23<<6;
 var $42=((($33)-(128))|0);
 var $43=$42|$41;
 var $44=($43|0)<0;
 if($44){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($10)>>2)]=$43;
 var $_0=2;label=19;break;
 case 13: 
 var $47=(($src+2)|0);
 var $48=HEAP8[($47)];
 var $49=($48&255);
 var $50=$49&192;
 var $51=($50|0)==128;
 if($51){label=14;break;}else{label=18;break;}
 case 14: 
 var $53=$43<<6;
 var $54=((($49)-(128))|0);
 var $55=$54|$53;
 var $56=($55|0)<0;
 if($56){label=16;break;}else{label=15;break;}
 case 15: 
 HEAP32[(($10)>>2)]=$55;
 var $_0=3;label=19;break;
 case 16: 
 var $59=(($src+3)|0);
 var $60=HEAP8[($59)];
 var $61=($60&255);
 var $62=$61&192;
 var $63=($62|0)==128;
 if($63){label=17;break;}else{label=18;break;}
 case 17: 
 var $65=$55<<6;
 var $66=((($61)-(128))|0);
 var $67=$66|$65;
 HEAP32[(($10)>>2)]=$67;
 var $_0=4;label=19;break;
 case 18: 
 var $69=___errno_location();
 HEAP32[(($69)>>2)]=84;
 var $_0=-1;label=19;break;
 case 19: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _wcrtomb($s,$wc,$st){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($s|0)==0;
 if($1){var $_0=1;label=11;break;}else{label=2;break;}
 case 2: 
 var $3=($wc>>>0)<128;
 if($3){label=3;break;}else{label=4;break;}
 case 3: 
 var $5=(($wc)&255);
 HEAP8[($s)]=$5;
 var $_0=1;label=11;break;
 case 4: 
 var $7=($wc>>>0)<2048;
 if($7){label=5;break;}else{label=6;break;}
 case 5: 
 var $9=$wc>>>6;
 var $10=$9|192;
 var $11=(($10)&255);
 var $12=(($s+1)|0);
 HEAP8[($s)]=$11;
 var $13=$wc&63;
 var $14=$13|128;
 var $15=(($14)&255);
 HEAP8[($12)]=$15;
 var $_0=2;label=11;break;
 case 6: 
 var $17=($wc>>>0)<55296;
 var $18=$wc&-8192;
 var $19=($18|0)==57344;
 var $or_cond=$17|$19;
 if($or_cond){label=7;break;}else{label=8;break;}
 case 7: 
 var $21=$wc>>>12;
 var $22=$21|224;
 var $23=(($22)&255);
 var $24=(($s+1)|0);
 HEAP8[($s)]=$23;
 var $25=$wc>>>6;
 var $26=$25&63;
 var $27=$26|128;
 var $28=(($27)&255);
 var $29=(($s+2)|0);
 HEAP8[($24)]=$28;
 var $30=$wc&63;
 var $31=$30|128;
 var $32=(($31)&255);
 HEAP8[($29)]=$32;
 var $_0=3;label=11;break;
 case 8: 
 var $34=((($wc)-(65536))|0);
 var $35=($34>>>0)<1048576;
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 var $37=$wc>>>18;
 var $38=$37|240;
 var $39=(($38)&255);
 var $40=(($s+1)|0);
 HEAP8[($s)]=$39;
 var $41=$wc>>>12;
 var $42=$41&63;
 var $43=$42|128;
 var $44=(($43)&255);
 var $45=(($s+2)|0);
 HEAP8[($40)]=$44;
 var $46=$wc>>>6;
 var $47=$46&63;
 var $48=$47|128;
 var $49=(($48)&255);
 var $50=(($s+3)|0);
 HEAP8[($45)]=$49;
 var $51=$wc&63;
 var $52=$51|128;
 var $53=(($52)&255);
 HEAP8[($50)]=$53;
 var $_0=4;label=11;break;
 case 10: 
 var $55=___errno_location();
 HEAP32[(($55)>>2)]=84;
 var $_0=-1;label=11;break;
 case 11: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _wcsnrtombs($dst,$wcs,$wn,$n,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+264)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $buf=sp;
 var $ws=(sp)+(256);
 var $1=(($buf)|0);
 var $$etemp$0$0=256;
 var $$etemp$0$1=0;

 var $2=HEAP32[(($wcs)>>2)];
 HEAP32[(($ws)>>2)]=$2;
 var $3=($dst|0)!=0;
 var $n_=($3?$n:256);
 var $dst_=($3?$dst:$1);
 var $4=($2|0)!=0;
 var $5=($n_|0)!=0;
 var $or_cond27=$4&$5;
 if($or_cond27){var $_01428=$n_;var $cnt_029=0;var $s_030=$dst_;var $_031=$wn;var $6=$2;label=2;break;}else{var $_014_lcssa=$n_;var $cnt_0_lcssa=0;var $s_0_lcssa=$dst_;var $_0_lcssa=$wn;var $22=$2;label=7;break;}
 case 2: 
 var $6;
 var $_031;
 var $s_030;
 var $cnt_029;
 var $_01428;
 var $7=($_031>>>0)>=($_01428>>>0);
 var $8=($_031>>>0)>32;
 var $or_cond13=$7|$8;
 if($or_cond13){label=3;break;}else{var $_014_lcssa=$_01428;var $cnt_0_lcssa=$cnt_029;var $s_0_lcssa=$s_030;var $_0_lcssa=$_031;var $22=$6;label=7;break;}
 case 3: 
 var $_014__0=($7?$_01428:$_031);
 var $9=((($_031)-($_014__0))|0);
 var $10=_wcsrtombs($s_030,$ws,$_014__0,0);
 var $11=($10|0)==-1;
 if($11){var $cnt_3=-1;label=12;break;}else{label=4;break;}
 case 4: 
 var $13=($s_030|0)==($1|0);
 if($13){var $s_1=$1;var $_115=$_01428;label=6;break;}else{label=5;break;}
 case 5: 
 var $15=(($s_030+$10)|0);
 var $16=((($_01428)-($10))|0);
 var $s_1=$15;var $_115=$16;label=6;break;
 case 6: 
 var $_115;
 var $s_1;
 var $18=((($10)+($cnt_029))|0);
 var $19=HEAP32[(($ws)>>2)];
 var $20=($19|0)!=0;
 var $21=($_115|0)!=0;
 var $or_cond=$20&$21;
 if($or_cond){var $_01428=$_115;var $cnt_029=$18;var $s_030=$s_1;var $_031=$9;var $6=$19;label=2;break;}else{var $_014_lcssa=$_115;var $cnt_0_lcssa=$18;var $s_0_lcssa=$s_1;var $_0_lcssa=$9;var $22=$19;label=7;break;}
 case 7: 
 var $22;
 var $_0_lcssa;
 var $s_0_lcssa;
 var $cnt_0_lcssa;
 var $_014_lcssa;
 var $23=($22|0)!=0;
 var $24=($_014_lcssa|0)!=0;
 var $or_cond5=$23&$24;
 var $25=($_0_lcssa|0)!=0;
 var $or_cond8=$or_cond5&$25;
 if($or_cond8){var $_2=$_0_lcssa;var $s_2=$s_0_lcssa;var $cnt_2=$cnt_0_lcssa;var $_3=$_014_lcssa;var $26=$22;label=8;break;}else{var $cnt_3=$cnt_0_lcssa;label=12;break;}
 case 8: 
 var $26;
 var $_3;
 var $cnt_2;
 var $s_2;
 var $_2;
 var $27=HEAP32[(($26)>>2)];
 var $28=_wcrtomb($s_2,$27,0);
 var $29=((($28)+(1))|0);
 var $30=($29>>>0)<2;
 if($30){label=9;break;}else{label=11;break;}
 case 9: 
 var $32=($28|0)==0;
 if($32){label=10;break;}else{var $cnt_3=-1;label=12;break;}
 case 10: 
 HEAP32[(($ws)>>2)]=0;
 var $cnt_3=$cnt_2;label=12;break;
 case 11: 
 var $35=HEAP32[(($ws)>>2)];
 var $36=(($35+4)|0);
 HEAP32[(($ws)>>2)]=$36;
 var $37=((($_2)-(1))|0);
 var $38=(($s_2+$28)|0);
 var $39=((($_3)-($28))|0);
 var $40=((($cnt_2)+(1))|0);
 var $_old4=($_3|0)!=($28|0);
 var $_old7=($37|0)!=0;
 var $or_cond10=$_old4&$_old7;
 if($or_cond10){var $_2=$37;var $s_2=$38;var $cnt_2=$40;var $_3=$39;var $26=$36;label=8;break;}else{var $cnt_3=$40;label=12;break;}
 case 12: 
 var $cnt_3;
 if($3){label=13;break;}else{label=14;break;}
 case 13: 
 var $42=HEAP32[(($ws)>>2)];
 HEAP32[(($wcs)>>2)]=$42;
 label=14;break;
 case 14: 
 var $$etemp$1$0=256;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $cnt_3;
  default: assert(0, "bad label: " + label);
 }

}


function _wcsrtombs($s,$ws,$n,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $buf=sp;
 var $1=($s|0)==0;
 if($1){label=4;break;}else{label=2;break;}
 case 2: 
 var $2=($n>>>0)>3;
 if($2){label=3;break;}else{var $_25_lcssa=$n;var $_02_lcssa=$s;label=9;break;}
 case 3: 
 var $_pre41=HEAP32[(($ws)>>2)];
 var $_2525=$n;var $_0226=$s;var $18=$_pre41;label=8;break;
 case 4: 
 var $4=HEAP32[(($ws)>>2)];
 var $5=(($buf)|0);
 var $6=HEAP32[(($4)>>2)];
 var $7=($6|0)==0;
 if($7){var $_0=0;label=26;break;}else{var $_038=0;var $ws2_09=$4;var $8=$6;label=5;break;}
 case 5: 
 var $8;
 var $ws2_09;
 var $_038;
 var $9=($8>>>0)>127;
 if($9){label=6;break;}else{var $_pn=1;label=7;break;}
 case 6: 
 var $11=_wcrtomb($5,$8,0);
 var $12=($11|0)==-1;
 if($12){var $_0=-1;label=26;break;}else{var $_pn=$11;label=7;break;}
 case 7: 
 var $_pn;
 var $_14=((($_pn)+($_038))|0);
 var $14=(($ws2_09+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==0;
 if($16){var $_0=$_14;label=26;break;}else{var $_038=$_14;var $ws2_09=$14;var $8=$15;label=5;break;}
 case 8: 
 var $18;
 var $_0226;
 var $_2525;
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){var $_25_lcssa=$_2525;var $_02_lcssa=$_0226;label=9;break;}else{label=11;break;}
 case 9: 
 var $_02_lcssa;
 var $_25_lcssa;
 var $21=($_25_lcssa|0)==0;
 if($21){var $_414=0;label=25;break;}else{label=10;break;}
 case 10: 
 var $22=(($buf)|0);
 var $_pre=HEAP32[(($ws)>>2)];
 var $_418=$_25_lcssa;var $_219=$_02_lcssa;var $40=$_pre;label=16;break;
 case 11: 
 var $24=($19>>>0)>127;
 if($24){label=12;break;}else{label=14;break;}
 case 12: 
 var $26=_wcrtomb($_0226,$19,0);
 var $27=($26|0)==-1;
 if($27){var $_0=-1;label=26;break;}else{label=13;break;}
 case 13: 
 var $29=(($_0226+$26)|0);
 var $30=((($_2525)-($26))|0);
 var $_1=$29;var $_36=$30;var $36=$18;label=15;break;
 case 14: 
 var $32=(($19)&255);
 var $33=(($_0226+1)|0);
 HEAP8[($_0226)]=$32;
 var $34=((($_2525)-(1))|0);
 var $_pre42=HEAP32[(($ws)>>2)];
 var $_1=$33;var $_36=$34;var $36=$_pre42;label=15;break;
 case 15: 
 var $36;
 var $_36;
 var $_1;
 var $37=(($36+4)|0);
 HEAP32[(($ws)>>2)]=$37;
 var $38=($_36>>>0)>3;
 if($38){var $_2525=$_36;var $_0226=$_1;var $18=$37;label=8;break;}else{var $_25_lcssa=$_36;var $_02_lcssa=$_1;label=9;break;}
 case 16: 
 var $40;
 var $_219;
 var $_418;
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)==0;
 if($42){label=24;break;}else{label=17;break;}
 case 17: 
 var $44=($41>>>0)>127;
 if($44){label=18;break;}else{label=22;break;}
 case 18: 
 var $46=_wcrtomb($22,$41,0);
 var $47=($46|0)==-1;
 if($47){var $_0=-1;label=26;break;}else{label=19;break;}
 case 19: 
 var $49=($_418>>>0)<($46>>>0);
 if($49){label=20;break;}else{label=21;break;}
 case 20: 
 var $51=((($n)-($_418))|0);
 var $_0=$51;label=26;break;
 case 21: 
 var $53=HEAP32[(($40)>>2)];
 var $54=_wcrtomb($_219,$53,0);
 var $55=(($_219+$46)|0);
 var $56=((($_418)-($46))|0);
 var $_3=$55;var $_5=$56;var $61=$40;label=23;break;
 case 22: 
 var $58=(($41)&255);
 var $59=(($_219+1)|0);
 HEAP8[($_219)]=$58;
 var $60=((($_418)-(1))|0);
 var $_pre40=HEAP32[(($ws)>>2)];
 var $_3=$59;var $_5=$60;var $61=$_pre40;label=23;break;
 case 23: 
 var $61;
 var $_5;
 var $_3;
 var $62=(($61+4)|0);
 HEAP32[(($ws)>>2)]=$62;
 var $63=($_5|0)==0;
 if($63){var $_414=0;label=25;break;}else{var $_418=$_5;var $_219=$_3;var $40=$62;label=16;break;}
 case 24: 
 HEAP8[($_219)]=0;
 var $_414=$_418;label=25;break;
 case 25: 
 var $_414;
 HEAP32[(($ws)>>2)]=0;
 var $65=((($n)-($_414))|0);
 var $_0=$65;label=26;break;
 case 26: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _wcslen($s){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_0=$s;label=2;break;
 case 2: 
 var $_0;
 var $2=HEAP32[(($_0)>>2)];
 var $3=($2|0)==0;
 var $4=(($_0+4)|0);
 if($3){label=3;break;}else{var $_0=$4;label=2;break;}
 case 3: 
 var $6=$_0;
 var $7=$s;
 var $8=((($6)-($7))|0);
 var $9=$8>>2;
 return $9;
  default: assert(0, "bad label: " + label);
 }

}


function _wmemcpy($d,$s,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)==0;
 if($1){label=3;break;}else{var $_023=$s;var $_014=$n;var $_05=$d;label=2;break;}
 case 2: 
 var $_05;
 var $_014;
 var $_023;
 var $2=((($_014)-(1))|0);
 var $3=(($_023+4)|0);
 var $4=HEAP32[(($_023)>>2)];
 var $5=(($_05+4)|0);
 HEAP32[(($_05)>>2)]=$4;
 var $6=($2|0)==0;
 if($6){label=3;break;}else{var $_023=$3;var $_014=$2;var $_05=$5;label=2;break;}
 case 3: 
 return $d;
  default: assert(0, "bad label: " + label);
 }

}


function _wmemmove($d,$s,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$d;
 var $2=$s;
 var $3=((($1)-($2))|0);
 var $4=$3>>2;
 var $5=($4>>>0)<($n>>>0);
 var $6=($n|0)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 if($6){label=6;break;}else{var $_025=$s;var $_16=$n;var $_07=$d;label=5;break;}
 case 3: 
 if($6){label=6;break;}else{var $_in=$n;label=4;break;}
 case 4: 
 var $_in;
 var $7=((($_in)-(1))|0);
 var $8=(($s+($7<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($d+($7<<2))|0);
 HEAP32[(($10)>>2)]=$9;
 var $11=($7|0)==0;
 if($11){label=6;break;}else{var $_in=$7;label=4;break;}
 case 5: 
 var $_07;
 var $_16;
 var $_025;
 var $12=((($_16)-(1))|0);
 var $13=(($_025+4)|0);
 var $14=HEAP32[(($_025)>>2)];
 var $15=(($_07+4)|0);
 HEAP32[(($_07)>>2)]=$14;
 var $16=($12|0)==0;
 if($16){label=6;break;}else{var $_025=$13;var $_16=$12;var $_07=$15;label=5;break;}
 case 6: 
 return $d;
  default: assert(0, "bad label: " + label);
 }

}


function _wmemset($d,$c,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)==0;
 if($1){label=3;break;}else{var $_012=$n;var $_03=$d;label=2;break;}
 case 2: 
 var $_03;
 var $_012;
 var $2=((($_012)-(1))|0);
 var $3=(($_03+4)|0);
 HEAP32[(($_03)>>2)]=$c;
 var $4=($2|0)==0;
 if($4){label=3;break;}else{var $_012=$2;var $_03=$3;label=2;break;}
 case 3: 
 return $d;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt9type_infoD2Ev($this){
 var label=0;


 return;
}


function __ZNSt8bad_castC2Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=2536;
 return;
}


function __ZNSt8bad_castD0Ev($this){
 var label=0;


 var $1=(($this)|0);

 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt8bad_castD2Ev($this){
 var label=0;


 var $1=(($this)|0);

 return;
}


function __ZNKSt8bad_cast4whatEv($this){
 var label=0;


 return 1312;
}


function __ZN10__cxxabiv116__shim_type_infoD2Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 return;
}


function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this){
 var label=0;


 return;
}


function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this){
 var label=0;


 return;
}


function __ZN10__cxxabiv117__class_type_infoD0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $info=sp;
 var $1=(($this)|0);
 var $2=(($thrown_type)|0);
 var $3=($1|0)==($2|0);
 if($3){var $_1=1;label=6;break;}else{label=2;break;}
 case 2: 
 var $5=($thrown_type|0)==0;
 if($5){var $_1=0;label=6;break;}else{label=3;break;}
 case 3: 
 var $7=$thrown_type;
 var $8=___dynamic_cast($7,9728,9712,0);
 var $9=$8;
 var $10=($8|0)==0;
 if($10){var $_1=0;label=6;break;}else{label=4;break;}
 case 4: 
 var $12=$info;
 var $$etemp$0$0=56;
 var $$etemp$0$1=0;

 _memset($12, 0, 56)|0;
 var $13=(($info)|0);
 HEAP32[(($13)>>2)]=$9;
 var $14=(($info+8)|0);
 HEAP32[(($14)>>2)]=$this;
 var $15=(($info+12)|0);
 HEAP32[(($15)>>2)]=-1;
 var $16=(($info+48)|0);
 HEAP32[(($16)>>2)]=1;
 var $17=$8;
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+28)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=HEAP32[(($adjustedPtr)>>2)];
 FUNCTION_TABLE[$20]($9,$info,$21,1);
 var $22=(($info+24)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==1;
 if($24){label=5;break;}else{var $_1=0;label=6;break;}
 case 5: 
 var $26=(($info+16)|0);
 var $27=HEAP32[(($26)>>2)];
 HEAP32[(($adjustedPtr)>>2)]=$27;
 var $_1=1;label=6;break;
 case 6: 
 var $_1;
 STACKTOP=sp;return $_1;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($info+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{label=8;break;}
 case 2: 
 var $5=(($info+16)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==0;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($5)>>2)]=$adjustedPtr;
 var $9=(($info+24)|0);
 HEAP32[(($9)>>2)]=$path_below;
 var $10=(($info+36)|0);
 HEAP32[(($10)>>2)]=1;
 label=8;break;
 case 4: 
 var $12=($6|0)==($adjustedPtr|0);
 if($12){label=5;break;}else{label=7;break;}
 case 5: 
 var $14=(($info+24)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==2;
 if($16){label=6;break;}else{label=8;break;}
 case 6: 
 HEAP32[(($14)>>2)]=$path_below;
 label=8;break;
 case 7: 
 var $19=(($info+36)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=((($20)+(1))|0);
 HEAP32[(($19)>>2)]=$21;
 var $22=(($info+24)|0);
 HEAP32[(($22)>>2)]=2;
 var $23=(($info+54)|0);
 HEAP8[($23)]=1;
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=8;break;}
 case 2: 
 var $7=(($info+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($7)>>2)]=$adjustedPtr;
 var $11=(($info+24)|0);
 HEAP32[(($11)>>2)]=$path_below;
 var $12=(($info+36)|0);
 HEAP32[(($12)>>2)]=1;
 label=9;break;
 case 4: 
 var $14=($8|0)==($adjustedPtr|0);
 if($14){label=5;break;}else{label=7;break;}
 case 5: 
 var $16=(($info+24)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17|0)==2;
 if($18){label=6;break;}else{label=9;break;}
 case 6: 
 HEAP32[(($16)>>2)]=$path_below;
 label=9;break;
 case 7: 
 var $21=(($info+36)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)+(1))|0);
 HEAP32[(($21)>>2)]=$23;
 var $24=(($info+24)|0);
 HEAP32[(($24)>>2)]=2;
 var $25=(($info+54)|0);
 HEAP8[($25)]=1;
 label=9;break;
 case 8: 
 var $27=(($this+8)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$28;
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+28)|0);
 var $32=HEAP32[(($31)>>2)];
 FUNCTION_TABLE[$32]($28,$info,$adjustedPtr,$path_below);
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=8;break;}
 case 2: 
 var $7=(($info+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($7)>>2)]=$adjustedPtr;
 var $11=(($info+24)|0);
 HEAP32[(($11)>>2)]=$path_below;
 var $12=(($info+36)|0);
 HEAP32[(($12)>>2)]=1;
 label=16;break;
 case 4: 
 var $14=($8|0)==($adjustedPtr|0);
 if($14){label=5;break;}else{label=7;break;}
 case 5: 
 var $16=(($info+24)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17|0)==2;
 if($18){label=6;break;}else{label=16;break;}
 case 6: 
 HEAP32[(($16)>>2)]=$path_below;
 label=16;break;
 case 7: 
 var $21=(($info+36)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)+(1))|0);
 HEAP32[(($21)>>2)]=$23;
 var $24=(($info+24)|0);
 HEAP32[(($24)>>2)]=2;
 var $25=(($info+54)|0);
 HEAP8[($25)]=1;
 label=16;break;
 case 8: 
 var $27=(($this+12)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($this+16+($28<<3))|0);
 var $30=(($this+20)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$31>>8;
 var $33=$31&1;
 var $34=($33|0)==0;
 if($34){var $offset_to_base_0_i1=$32;label=10;break;}else{label=9;break;}
 case 9: 
 var $36=$adjustedPtr;
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+$32)|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $offset_to_base_0_i1=$40;label=10;break;
 case 10: 
 var $offset_to_base_0_i1;
 var $41=(($this+16)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$42;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+28)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($adjustedPtr+$offset_to_base_0_i1)|0);
 var $48=$31&2;
 var $49=($48|0)!=0;
 var $50=($49?$path_below:2);
 FUNCTION_TABLE[$46]($42,$info,$47,$50);
 var $51=($28|0)>1;
 if($51){label=11;break;}else{label=16;break;}
 case 11: 
 var $52=(($this+24)|0);
 var $53=(($info+54)|0);
 var $54=$adjustedPtr;
 var $p_0=$52;label=12;break;
 case 12: 
 var $p_0;
 var $56=(($p_0+4)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=$57>>8;
 var $59=$57&1;
 var $60=($59|0)==0;
 if($60){var $offset_to_base_0_i=$58;label=14;break;}else{label=13;break;}
 case 13: 
 var $62=HEAP32[(($54)>>2)];
 var $63=(($62+$58)|0);
 var $64=$63;
 var $65=HEAP32[(($64)>>2)];
 var $offset_to_base_0_i=$65;label=14;break;
 case 14: 
 var $offset_to_base_0_i;
 var $66=(($p_0)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=$67;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+28)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(($adjustedPtr+$offset_to_base_0_i)|0);
 var $73=$57&2;
 var $74=($73|0)!=0;
 var $75=($74?$path_below:2);
 FUNCTION_TABLE[$71]($67,$info,$72,$75);
 var $76=HEAP8[($53)];
 var $77=(($76<<24)>>24)==0;
 if($77){label=15;break;}else{label=16;break;}
 case 15: 
 var $79=(($p_0+8)|0);
 var $80=($79>>>0)<($29>>>0);
 if($80){var $p_0=$79;label=12;break;}else{label=16;break;}
 case 16: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $info=sp;
 var $1=$static_ptr;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(8))|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 var $6=(($static_ptr+$5)|0);
 var $7=((($2)-(4))|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8;
 var $10=$info;
 var $$etemp$0$0=56;
 var $$etemp$0$1=0;

 var $11=(($info)|0);
 HEAP32[(($11)>>2)]=$dst_type;
 var $12=(($info+4)|0);
 HEAP32[(($12)>>2)]=$static_ptr;
 var $13=(($info+8)|0);
 HEAP32[(($13)>>2)]=$static_type;
 var $14=(($info+12)|0);
 HEAP32[(($14)>>2)]=$src2dst_offset;
 var $15=(($info+16)|0);
 var $16=(($info+20)|0);
 var $17=(($info+24)|0);
 var $18=(($info+28)|0);
 var $19=(($info+32)|0);
 var $20=(($info+40)|0);
 var $21=$8;
 var $22=(($dst_type)|0);
 var $23=($21|0)==($22|0);
 var $24=$15;
 _memset($24, 0, 39)|0;
 if($23){label=2;break;}else{label=3;break;}
 case 2: 
 var $26=(($info+48)|0);
 HEAP32[(($26)>>2)]=1;
 var $27=$8;
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+20)|0);
 var $30=HEAP32[(($29)>>2)];
 FUNCTION_TABLE[$30]($9,$info,$6,$6,1,0);
 var $31=HEAP32[(($17)>>2)];
 var $32=($31|0)==1;
 var $_=($32?$6:0);
 var $dst_ptr_0=$_;label=8;break;
 case 3: 
 var $34=(($info+36)|0);
 var $35=$8;
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36+24)|0);
 var $38=HEAP32[(($37)>>2)];
 FUNCTION_TABLE[$38]($9,$info,$6,1,0);
 var $39=HEAP32[(($34)>>2)];
 if(($39|0)==0){ label=4;break;}else if(($39|0)==1){ label=5;break;}else{var $dst_ptr_0=0;label=8;break;}
 case 4: 
 var $41=HEAP32[(($20)>>2)];
 var $42=($41|0)==1;
 var $43=HEAP32[(($18)>>2)];
 var $44=($43|0)==1;
 var $or_cond=$42&$44;
 var $45=HEAP32[(($19)>>2)];
 var $46=($45|0)==1;
 var $or_cond3=$or_cond&$46;
 var $47=HEAP32[(($16)>>2)];
 var $_8=($or_cond3?$47:0);
 var $dst_ptr_0=$_8;label=8;break;
 case 5: 
 var $49=HEAP32[(($17)>>2)];
 var $50=($49|0)==1;
 if($50){label=7;break;}else{label=6;break;}
 case 6: 
 var $52=HEAP32[(($20)>>2)];
 var $53=($52|0)==0;
 var $54=HEAP32[(($18)>>2)];
 var $55=($54|0)==1;
 var $or_cond5=$53&$55;
 var $56=HEAP32[(($19)>>2)];
 var $57=($56|0)==1;
 var $or_cond7=$or_cond5&$57;
 if($or_cond7){label=7;break;}else{var $dst_ptr_0=0;label=8;break;}
 case 7: 
 var $59=HEAP32[(($15)>>2)];
 var $dst_ptr_0=$59;label=8;break;
 case 8: 
 var $dst_ptr_0;
 var $$etemp$1$0=56;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $dst_ptr_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=5;break;}
 case 2: 
 var $7=(($info+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==($current_ptr|0);
 if($9){label=3;break;}else{label=53;break;}
 case 3: 
 var $11=(($info+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==1;
 if($13){label=53;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($11)>>2)]=$path_below;
 label=53;break;
 case 5: 
 var $16=(($info)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17)|0);
 var $19=($1|0)==($18|0);
 if($19){label=6;break;}else{label=29;break;}
 case 6: 
 var $21=(($info+16)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==($current_ptr|0);
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 var $25=(($info+20)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)==($current_ptr|0);
 if($27){label=8;break;}else{label=10;break;}
 case 8: 
 var $29=($path_below|0)==1;
 if($29){label=9;break;}else{label=53;break;}
 case 9: 
 var $31=(($info+32)|0);
 HEAP32[(($31)>>2)]=1;
 label=53;break;
 case 10: 
 var $33=(($info+32)|0);
 HEAP32[(($33)>>2)]=$path_below;
 var $34=(($info+44)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==4;
 if($36){label=53;break;}else{label=11;break;}
 case 11: 
 var $38=(($this+12)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($this+16+($39<<3))|0);
 var $41=($39|0)>0;
 if($41){label=12;break;}else{var $is_dst_type_derived_from_static_type_2_off030=0;label=23;break;}
 case 12: 
 var $42=(($this+16)|0);
 var $43=(($info+52)|0);
 var $44=(($info+53)|0);
 var $45=(($info+54)|0);
 var $46=(($this+8)|0);
 var $47=(($info+24)|0);
 var $48=$current_ptr;
 var $does_dst_type_point_to_our_static_type_0_off019=0;var $p_020=$42;var $is_dst_type_derived_from_static_type_0_off021=0;label=13;break;
 case 13: 
 var $is_dst_type_derived_from_static_type_0_off021;
 var $p_020;
 var $does_dst_type_point_to_our_static_type_0_off019;
 HEAP8[($43)]=0;
 HEAP8[($44)]=0;
 var $50=(($p_020+4)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=$51>>8;
 var $53=$51&1;
 var $54=($53|0)==0;
 if($54){var $offset_to_base_0_i13=$52;label=15;break;}else{label=14;break;}
 case 14: 
 var $56=HEAP32[(($48)>>2)];
 var $57=(($56+$52)|0);
 var $58=$57;
 var $59=HEAP32[(($58)>>2)];
 var $offset_to_base_0_i13=$59;label=15;break;
 case 15: 
 var $offset_to_base_0_i13;
 var $60=(($p_020)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=$61;
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+20)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(($current_ptr+$offset_to_base_0_i13)|0);
 var $67=$51>>>1;
 var $68=$67&1;
 var $69=(((2)-($68))|0);
 FUNCTION_TABLE[$65]($61,$info,$current_ptr,$66,$69,$use_strcmp);
 var $70=HEAP8[($45)];
 var $71=(($70<<24)>>24)==0;
 if($71){label=16;break;}else{var $is_dst_type_derived_from_static_type_2_off0=$is_dst_type_derived_from_static_type_0_off021;var $does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_0_off019;label=22;break;}
 case 16: 
 var $73=HEAP8[($44)];
 var $74=(($73<<24)>>24)==0;
 if($74){var $is_dst_type_derived_from_static_type_1_off0=$is_dst_type_derived_from_static_type_0_off021;var $does_dst_type_point_to_our_static_type_1_off0=$does_dst_type_point_to_our_static_type_0_off019;label=21;break;}else{label=17;break;}
 case 17: 
 var $76=HEAP8[($43)];
 var $77=(($76<<24)>>24)==0;
 if($77){label=20;break;}else{label=18;break;}
 case 18: 
 var $79=HEAP32[(($47)>>2)];
 var $80=($79|0)==1;
 if($80){label=27;break;}else{label=19;break;}
 case 19: 
 var $82=HEAP32[(($46)>>2)];
 var $83=$82&2;
 var $84=($83|0)==0;
 if($84){label=27;break;}else{var $is_dst_type_derived_from_static_type_1_off0=1;var $does_dst_type_point_to_our_static_type_1_off0=1;label=21;break;}
 case 20: 
 var $86=HEAP32[(($46)>>2)];
 var $87=$86&1;
 var $88=($87|0)==0;
 if($88){var $is_dst_type_derived_from_static_type_2_off0=1;var $does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_0_off019;label=22;break;}else{var $is_dst_type_derived_from_static_type_1_off0=1;var $does_dst_type_point_to_our_static_type_1_off0=$does_dst_type_point_to_our_static_type_0_off019;label=21;break;}
 case 21: 
 var $does_dst_type_point_to_our_static_type_1_off0;
 var $is_dst_type_derived_from_static_type_1_off0;
 var $90=(($p_020+8)|0);
 var $91=($90>>>0)<($40>>>0);
 if($91){var $does_dst_type_point_to_our_static_type_0_off019=$does_dst_type_point_to_our_static_type_1_off0;var $p_020=$90;var $is_dst_type_derived_from_static_type_0_off021=$is_dst_type_derived_from_static_type_1_off0;label=13;break;}else{var $is_dst_type_derived_from_static_type_2_off0=$is_dst_type_derived_from_static_type_1_off0;var $does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_1_off0;label=22;break;}
 case 22: 
 var $does_dst_type_point_to_our_static_type_0_off0_lcssa;
 var $is_dst_type_derived_from_static_type_2_off0;
 if($does_dst_type_point_to_our_static_type_0_off0_lcssa){var $is_dst_type_derived_from_static_type_2_off031=$is_dst_type_derived_from_static_type_2_off0;label=26;break;}else{var $is_dst_type_derived_from_static_type_2_off030=$is_dst_type_derived_from_static_type_2_off0;label=23;break;}
 case 23: 
 var $is_dst_type_derived_from_static_type_2_off030;
 HEAP32[(($25)>>2)]=$current_ptr;
 var $92=(($info+40)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=((($93)+(1))|0);
 HEAP32[(($92)>>2)]=$94;
 var $95=(($info+36)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=($96|0)==1;
 if($97){label=24;break;}else{var $is_dst_type_derived_from_static_type_2_off031=$is_dst_type_derived_from_static_type_2_off030;label=26;break;}
 case 24: 
 var $99=(($info+24)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=($100|0)==2;
 if($101){label=25;break;}else{var $is_dst_type_derived_from_static_type_2_off031=$is_dst_type_derived_from_static_type_2_off030;label=26;break;}
 case 25: 
 var $103=(($info+54)|0);
 HEAP8[($103)]=1;
 if($is_dst_type_derived_from_static_type_2_off030){label=27;break;}else{label=28;break;}
 case 26: 
 var $is_dst_type_derived_from_static_type_2_off031;
 if($is_dst_type_derived_from_static_type_2_off031){label=27;break;}else{label=28;break;}
 case 27: 
 HEAP32[(($34)>>2)]=3;
 label=53;break;
 case 28: 
 HEAP32[(($34)>>2)]=4;
 label=53;break;
 case 29: 
 var $107=(($this+12)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(($this+16+($108<<3))|0);
 var $110=(($this+20)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=$111>>8;
 var $113=$111&1;
 var $114=($113|0)==0;
 if($114){var $offset_to_base_0_i14=$112;label=31;break;}else{label=30;break;}
 case 30: 
 var $116=$current_ptr;
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+$112)|0);
 var $119=$118;
 var $120=HEAP32[(($119)>>2)];
 var $offset_to_base_0_i14=$120;label=31;break;
 case 31: 
 var $offset_to_base_0_i14;
 var $121=(($this+16)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=$122;
 var $124=HEAP32[(($123)>>2)];
 var $125=(($124+24)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=(($current_ptr+$offset_to_base_0_i14)|0);
 var $128=$111&2;
 var $129=($128|0)!=0;
 var $130=($129?$path_below:2);
 FUNCTION_TABLE[$126]($122,$info,$127,$130,$use_strcmp);
 var $131=(($this+24)|0);
 var $132=($108|0)>1;
 if($132){label=32;break;}else{label=53;break;}
 case 32: 
 var $134=(($this+8)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=$135&2;
 var $137=($136|0)==0;
 if($137){label=33;break;}else{label=34;break;}
 case 33: 
 var $139=(($info+36)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=($140|0)==1;
 if($141){label=34;break;}else{label=39;break;}
 case 34: 
 var $142=(($info+54)|0);
 var $143=$current_ptr;
 var $p2_0=$131;label=35;break;
 case 35: 
 var $p2_0;
 var $145=HEAP8[($142)];
 var $146=(($145<<24)>>24)==0;
 if($146){label=36;break;}else{label=53;break;}
 case 36: 
 var $148=(($p2_0+4)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=$149>>8;
 var $151=$149&1;
 var $152=($151|0)==0;
 if($152){var $offset_to_base_0_i11=$150;label=38;break;}else{label=37;break;}
 case 37: 
 var $154=HEAP32[(($143)>>2)];
 var $155=(($154+$150)|0);
 var $156=$155;
 var $157=HEAP32[(($156)>>2)];
 var $offset_to_base_0_i11=$157;label=38;break;
 case 38: 
 var $offset_to_base_0_i11;
 var $158=(($p2_0)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=$159;
 var $161=HEAP32[(($160)>>2)];
 var $162=(($161+24)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(($current_ptr+$offset_to_base_0_i11)|0);
 var $165=$149&2;
 var $166=($165|0)!=0;
 var $167=($166?$path_below:2);
 FUNCTION_TABLE[$163]($159,$info,$164,$167,$use_strcmp);
 var $168=(($p2_0+8)|0);
 var $169=($168>>>0)<($109>>>0);
 if($169){var $p2_0=$168;label=35;break;}else{label=53;break;}
 case 39: 
 var $171=$135&1;
 var $172=($171|0)==0;
 if($172){label=41;break;}else{label=40;break;}
 case 40: 
 var $173=(($info+24)|0);
 var $174=(($info+54)|0);
 var $175=$current_ptr;
 var $p2_1=$131;label=42;break;
 case 41: 
 var $176=(($info+54)|0);
 var $177=$current_ptr;
 var $p2_2=$131;label=48;break;
 case 42: 
 var $p2_1;
 var $179=HEAP8[($174)];
 var $180=(($179<<24)>>24)==0;
 if($180){label=43;break;}else{label=53;break;}
 case 43: 
 var $182=HEAP32[(($139)>>2)];
 var $183=($182|0)==1;
 if($183){label=44;break;}else{label=45;break;}
 case 44: 
 var $185=HEAP32[(($173)>>2)];
 var $186=($185|0)==1;
 if($186){label=53;break;}else{label=45;break;}
 case 45: 
 var $188=(($p2_1+4)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=$189>>8;
 var $191=$189&1;
 var $192=($191|0)==0;
 if($192){var $offset_to_base_0_i9=$190;label=47;break;}else{label=46;break;}
 case 46: 
 var $194=HEAP32[(($175)>>2)];
 var $195=(($194+$190)|0);
 var $196=$195;
 var $197=HEAP32[(($196)>>2)];
 var $offset_to_base_0_i9=$197;label=47;break;
 case 47: 
 var $offset_to_base_0_i9;
 var $198=(($p2_1)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=$199;
 var $201=HEAP32[(($200)>>2)];
 var $202=(($201+24)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=(($current_ptr+$offset_to_base_0_i9)|0);
 var $205=$189&2;
 var $206=($205|0)!=0;
 var $207=($206?$path_below:2);
 FUNCTION_TABLE[$203]($199,$info,$204,$207,$use_strcmp);
 var $208=(($p2_1+8)|0);
 var $209=($208>>>0)<($109>>>0);
 if($209){var $p2_1=$208;label=42;break;}else{label=53;break;}
 case 48: 
 var $p2_2;
 var $211=HEAP8[($176)];
 var $212=(($211<<24)>>24)==0;
 if($212){label=49;break;}else{label=53;break;}
 case 49: 
 var $214=HEAP32[(($139)>>2)];
 var $215=($214|0)==1;
 if($215){label=53;break;}else{label=50;break;}
 case 50: 
 var $217=(($p2_2+4)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=$218>>8;
 var $220=$218&1;
 var $221=($220|0)==0;
 if($221){var $offset_to_base_0_i=$219;label=52;break;}else{label=51;break;}
 case 51: 
 var $223=HEAP32[(($177)>>2)];
 var $224=(($223+$219)|0);
 var $225=$224;
 var $226=HEAP32[(($225)>>2)];
 var $offset_to_base_0_i=$226;label=52;break;
 case 52: 
 var $offset_to_base_0_i;
 var $227=(($p2_2)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=$228;
 var $230=HEAP32[(($229)>>2)];
 var $231=(($230+24)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=(($current_ptr+$offset_to_base_0_i)|0);
 var $234=$218&2;
 var $235=($234|0)!=0;
 var $236=($235?$path_below:2);
 FUNCTION_TABLE[$232]($228,$info,$233,$236,$use_strcmp);
 var $237=(($p2_2+8)|0);
 var $238=($237>>>0)<($109>>>0);
 if($238){var $p2_2=$237;label=48;break;}else{label=53;break;}
 case 53: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=5;break;}
 case 2: 
 var $7=(($info+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==($current_ptr|0);
 if($9){label=3;break;}else{label=20;break;}
 case 3: 
 var $11=(($info+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==1;
 if($13){label=20;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($11)>>2)]=$path_below;
 label=20;break;
 case 5: 
 var $16=(($info)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17)|0);
 var $19=($1|0)==($18|0);
 if($19){label=6;break;}else{label=19;break;}
 case 6: 
 var $21=(($info+16)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==($current_ptr|0);
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 var $25=(($info+20)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)==($current_ptr|0);
 if($27){label=8;break;}else{label=10;break;}
 case 8: 
 var $29=($path_below|0)==1;
 if($29){label=9;break;}else{label=20;break;}
 case 9: 
 var $31=(($info+32)|0);
 HEAP32[(($31)>>2)]=1;
 label=20;break;
 case 10: 
 var $33=(($info+32)|0);
 HEAP32[(($33)>>2)]=$path_below;
 var $34=(($info+44)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==4;
 if($36){label=20;break;}else{label=11;break;}
 case 11: 
 var $38=(($info+52)|0);
 HEAP8[($38)]=0;
 var $39=(($info+53)|0);
 HEAP8[($39)]=0;
 var $40=(($this+8)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=$41;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+20)|0);
 var $45=HEAP32[(($44)>>2)];
 FUNCTION_TABLE[$45]($41,$info,$current_ptr,$current_ptr,1,$use_strcmp);
 var $46=HEAP8[($39)];
 var $47=(($46<<24)>>24)==0;
 if($47){var $is_dst_type_derived_from_static_type_0_off01=0;label=13;break;}else{label=12;break;}
 case 12: 
 var $49=HEAP8[($38)];
 var $not_=(($49<<24)>>24)==0;
 if($not_){var $is_dst_type_derived_from_static_type_0_off01=1;label=13;break;}else{label=17;break;}
 case 13: 
 var $is_dst_type_derived_from_static_type_0_off01;
 HEAP32[(($25)>>2)]=$current_ptr;
 var $50=(($info+40)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=((($51)+(1))|0);
 HEAP32[(($50)>>2)]=$52;
 var $53=(($info+36)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=($54|0)==1;
 if($55){label=14;break;}else{label=16;break;}
 case 14: 
 var $57=(($info+24)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=($58|0)==2;
 if($59){label=15;break;}else{label=16;break;}
 case 15: 
 var $61=(($info+54)|0);
 HEAP8[($61)]=1;
 if($is_dst_type_derived_from_static_type_0_off01){label=17;break;}else{label=18;break;}
 case 16: 
 if($is_dst_type_derived_from_static_type_0_off01){label=17;break;}else{label=18;break;}
 case 17: 
 HEAP32[(($34)>>2)]=3;
 label=20;break;
 case 18: 
 HEAP32[(($34)>>2)]=4;
 label=20;break;
 case 19: 
 var $65=(($this+8)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=$66;
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68+24)|0);
 var $70=HEAP32[(($69)>>2)];
 FUNCTION_TABLE[$70]($66,$info,$current_ptr,$path_below,$use_strcmp);
 label=20;break;
 case 20: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($info+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{label=5;break;}
 case 2: 
 var $5=(($info+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==($current_ptr|0);
 if($7){label=3;break;}else{label=14;break;}
 case 3: 
 var $9=(($info+28)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==1;
 if($11){label=14;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($9)>>2)]=$path_below;
 label=14;break;
 case 5: 
 var $14=(($info)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==($this|0);
 if($16){label=6;break;}else{label=14;break;}
 case 6: 
 var $18=(($info+16)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==($current_ptr|0);
 if($20){label=8;break;}else{label=7;break;}
 case 7: 
 var $22=(($info+20)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==($current_ptr|0);
 if($24){label=8;break;}else{label=10;break;}
 case 8: 
 var $26=($path_below|0)==1;
 if($26){label=9;break;}else{label=14;break;}
 case 9: 
 var $28=(($info+32)|0);
 HEAP32[(($28)>>2)]=1;
 label=14;break;
 case 10: 
 var $30=(($info+32)|0);
 HEAP32[(($30)>>2)]=$path_below;
 HEAP32[(($22)>>2)]=$current_ptr;
 var $31=(($info+40)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=((($32)+(1))|0);
 HEAP32[(($31)>>2)]=$33;
 var $34=(($info+36)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==1;
 if($36){label=11;break;}else{label=13;break;}
 case 11: 
 var $38=(($info+24)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($39|0)==2;
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=(($info+54)|0);
 HEAP8[($42)]=1;
 label=13;break;
 case 13: 
 var $44=(($info+44)|0);
 HEAP32[(($44)>>2)]=4;
 label=14;break;
 case 14: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=12;break;}
 case 2: 
 var $7=(($info+53)|0);
 HEAP8[($7)]=1;
 var $8=(($info+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==($current_ptr|0);
 if($10){label=3;break;}else{label=26;break;}
 case 3: 
 var $12=(($info+52)|0);
 HEAP8[($12)]=1;
 var $13=(($info+16)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($13)>>2)]=$dst_ptr;
 var $17=(($info+24)|0);
 HEAP32[(($17)>>2)]=$path_below;
 var $18=(($info+36)|0);
 HEAP32[(($18)>>2)]=1;
 var $19=(($info+48)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==1;
 var $22=($path_below|0)==1;
 var $or_cond_i=$21&$22;
 if($or_cond_i){label=5;break;}else{label=26;break;}
 case 5: 
 var $24=(($info+54)|0);
 HEAP8[($24)]=1;
 label=26;break;
 case 6: 
 var $26=($14|0)==($dst_ptr|0);
 if($26){label=7;break;}else{label=11;break;}
 case 7: 
 var $28=(($info+24)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)==2;
 if($30){label=8;break;}else{var $33=$29;label=9;break;}
 case 8: 
 HEAP32[(($28)>>2)]=$path_below;
 var $33=$path_below;label=9;break;
 case 9: 
 var $33;
 var $34=(($info+48)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==1;
 var $37=($33|0)==1;
 var $or_cond1_i=$36&$37;
 if($or_cond1_i){label=10;break;}else{label=26;break;}
 case 10: 
 var $39=(($info+54)|0);
 HEAP8[($39)]=1;
 label=26;break;
 case 11: 
 var $41=(($info+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=((($42)+(1))|0);
 HEAP32[(($41)>>2)]=$43;
 var $44=(($info+54)|0);
 HEAP8[($44)]=1;
 label=26;break;
 case 12: 
 var $46=(($info+52)|0);
 var $47=HEAP8[($46)];
 var $48=(($info+53)|0);
 var $49=HEAP8[($48)];
 var $50=(($this+12)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($this+16+($51<<3))|0);
 HEAP8[($46)]=0;
 HEAP8[($48)]=0;
 var $53=(($this+20)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=$54>>8;
 var $56=$54&1;
 var $57=($56|0)==0;
 if($57){var $offset_to_base_0_i1=$55;label=14;break;}else{label=13;break;}
 case 13: 
 var $59=$current_ptr;
 var $60=HEAP32[(($59)>>2)];
 var $61=(($60+$55)|0);
 var $62=$61;
 var $63=HEAP32[(($62)>>2)];
 var $offset_to_base_0_i1=$63;label=14;break;
 case 14: 
 var $offset_to_base_0_i1;
 var $64=(($this+16)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=$65;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+20)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(($current_ptr+$offset_to_base_0_i1)|0);
 var $71=$54&2;
 var $72=($71|0)!=0;
 var $73=($72?$path_below:2);
 FUNCTION_TABLE[$69]($65,$info,$dst_ptr,$70,$73,$use_strcmp);
 var $74=($51|0)>1;
 if($74){label=15;break;}else{label=25;break;}
 case 15: 
 var $75=(($this+24)|0);
 var $76=(($info+24)|0);
 var $77=(($this+8)|0);
 var $78=(($info+54)|0);
 var $79=$current_ptr;
 var $p_0=$75;label=16;break;
 case 16: 
 var $p_0;
 var $81=HEAP8[($78)];
 var $82=(($81<<24)>>24)==0;
 if($82){label=17;break;}else{label=25;break;}
 case 17: 
 var $84=HEAP8[($46)];
 var $85=(($84<<24)>>24)==0;
 if($85){label=20;break;}else{label=18;break;}
 case 18: 
 var $87=HEAP32[(($76)>>2)];
 var $88=($87|0)==1;
 if($88){label=25;break;}else{label=19;break;}
 case 19: 
 var $90=HEAP32[(($77)>>2)];
 var $91=$90&2;
 var $92=($91|0)==0;
 if($92){label=25;break;}else{label=22;break;}
 case 20: 
 var $94=HEAP8[($48)];
 var $95=(($94<<24)>>24)==0;
 if($95){label=22;break;}else{label=21;break;}
 case 21: 
 var $97=HEAP32[(($77)>>2)];
 var $98=$97&1;
 var $99=($98|0)==0;
 if($99){label=25;break;}else{label=22;break;}
 case 22: 
 HEAP8[($46)]=0;
 HEAP8[($48)]=0;
 var $101=(($p_0+4)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=$102>>8;
 var $104=$102&1;
 var $105=($104|0)==0;
 if($105){var $offset_to_base_0_i=$103;label=24;break;}else{label=23;break;}
 case 23: 
 var $107=HEAP32[(($79)>>2)];
 var $108=(($107+$103)|0);
 var $109=$108;
 var $110=HEAP32[(($109)>>2)];
 var $offset_to_base_0_i=$110;label=24;break;
 case 24: 
 var $offset_to_base_0_i;
 var $111=(($p_0)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=$112;
 var $114=HEAP32[(($113)>>2)];
 var $115=(($114+20)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=(($current_ptr+$offset_to_base_0_i)|0);
 var $118=$102&2;
 var $119=($118|0)!=0;
 var $120=($119?$path_below:2);
 FUNCTION_TABLE[$116]($112,$info,$dst_ptr,$117,$120,$use_strcmp);
 var $121=(($p_0+8)|0);
 var $122=($121>>>0)<($52>>>0);
 if($122){var $p_0=$121;label=16;break;}else{label=25;break;}
 case 25: 
 HEAP8[($46)]=$47;
 HEAP8[($48)]=$49;
 label=26;break;
 case 26: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=12;break;}
 case 2: 
 var $7=(($info+53)|0);
 HEAP8[($7)]=1;
 var $8=(($info+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==($current_ptr|0);
 if($10){label=3;break;}else{label=13;break;}
 case 3: 
 var $12=(($info+52)|0);
 HEAP8[($12)]=1;
 var $13=(($info+16)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($13)>>2)]=$dst_ptr;
 var $17=(($info+24)|0);
 HEAP32[(($17)>>2)]=$path_below;
 var $18=(($info+36)|0);
 HEAP32[(($18)>>2)]=1;
 var $19=(($info+48)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==1;
 var $22=($path_below|0)==1;
 var $or_cond_i=$21&$22;
 if($or_cond_i){label=5;break;}else{label=13;break;}
 case 5: 
 var $24=(($info+54)|0);
 HEAP8[($24)]=1;
 label=13;break;
 case 6: 
 var $26=($14|0)==($dst_ptr|0);
 if($26){label=7;break;}else{label=11;break;}
 case 7: 
 var $28=(($info+24)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)==2;
 if($30){label=8;break;}else{var $33=$29;label=9;break;}
 case 8: 
 HEAP32[(($28)>>2)]=$path_below;
 var $33=$path_below;label=9;break;
 case 9: 
 var $33;
 var $34=(($info+48)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==1;
 var $37=($33|0)==1;
 var $or_cond1_i=$36&$37;
 if($or_cond1_i){label=10;break;}else{label=13;break;}
 case 10: 
 var $39=(($info+54)|0);
 HEAP8[($39)]=1;
 label=13;break;
 case 11: 
 var $41=(($info+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=((($42)+(1))|0);
 HEAP32[(($41)>>2)]=$43;
 var $44=(($info+54)|0);
 HEAP8[($44)]=1;
 label=13;break;
 case 12: 
 var $46=(($this+8)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=$47;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+20)|0);
 var $51=HEAP32[(($50)>>2)];
 FUNCTION_TABLE[$51]($47,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 label=13;break;
 case 13: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($info+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{label=12;break;}
 case 2: 
 var $5=(($info+53)|0);
 HEAP8[($5)]=1;
 var $6=(($info+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)==($current_ptr|0);
 if($8){label=3;break;}else{label=12;break;}
 case 3: 
 var $10=(($info+52)|0);
 HEAP8[($10)]=1;
 var $11=(($info+16)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($11)>>2)]=$dst_ptr;
 var $15=(($info+24)|0);
 HEAP32[(($15)>>2)]=$path_below;
 var $16=(($info+36)|0);
 HEAP32[(($16)>>2)]=1;
 var $17=(($info+48)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($18|0)==1;
 var $20=($path_below|0)==1;
 var $or_cond_i=$19&$20;
 if($or_cond_i){label=5;break;}else{label=12;break;}
 case 5: 
 var $22=(($info+54)|0);
 HEAP8[($22)]=1;
 label=12;break;
 case 6: 
 var $24=($12|0)==($dst_ptr|0);
 if($24){label=7;break;}else{label=11;break;}
 case 7: 
 var $26=(($info+24)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==2;
 if($28){label=8;break;}else{var $31=$27;label=9;break;}
 case 8: 
 HEAP32[(($26)>>2)]=$path_below;
 var $31=$path_below;label=9;break;
 case 9: 
 var $31;
 var $32=(($info+48)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)==1;
 var $35=($31|0)==1;
 var $or_cond1_i=$34&$35;
 if($or_cond1_i){label=10;break;}else{label=12;break;}
 case 10: 
 var $37=(($info+54)|0);
 HEAP8[($37)]=1;
 label=12;break;
 case 11: 
 var $39=(($info+36)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=((($40)+(1))|0);
 HEAP32[(($39)>>2)]=$41;
 var $42=(($info+54)|0);
 HEAP8[($42)]=1;
 label=12;break;
 case 12: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function _malloc($bytes){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($bytes>>>0)<245;
 if($1){label=2;break;}else{label=78;break;}
 case 2: 
 var $3=($bytes>>>0)<11;
 if($3){var $8=16;label=4;break;}else{label=3;break;}
 case 3: 
 var $5=((($bytes)+(11))|0);
 var $6=$5&-8;
 var $8=$6;label=4;break;
 case 4: 
 var $8;
 var $9=$8>>>3;
 var $10=HEAP32[((9896)>>2)];
 var $11=$10>>>($9>>>0);
 var $12=$11&3;
 var $13=($12|0)==0;
 if($13){label=12;break;}else{label=5;break;}
 case 5: 
 var $15=$11&1;
 var $16=$15^1;
 var $17=((($16)+($9))|0);
 var $18=$17<<1;
 var $19=((9936+($18<<2))|0);
 var $20=$19;
 var $_sum11=((($18)+(2))|0);
 var $21=((9936+($_sum11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($20|0)==($24|0);
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 var $27=1<<$17;
 var $28=$27^-1;
 var $29=$10&$28;
 HEAP32[((9896)>>2)]=$29;
 label=11;break;
 case 7: 
 var $31=$24;
 var $32=HEAP32[((9912)>>2)];
 var $33=($31>>>0)<($32>>>0);
 if($33){label=10;break;}else{label=8;break;}
 case 8: 
 var $35=(($24+12)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=($36|0)==($22|0);
 if($37){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($35)>>2)]=$20;
 HEAP32[(($21)>>2)]=$24;
 label=11;break;
 case 10: 
 _abort();
 throw "Reached an unreachable!";
 case 11: 
 var $40=$17<<3;
 var $41=$40|3;
 var $42=(($22+4)|0);
 HEAP32[(($42)>>2)]=$41;
 var $43=$22;
 var $_sum1314=$40|4;
 var $44=(($43+$_sum1314)|0);
 var $45=$44;
 var $46=HEAP32[(($45)>>2)];
 var $47=$46|1;
 HEAP32[(($45)>>2)]=$47;
 var $48=$23;
 var $mem_0=$48;label=341;break;
 case 12: 
 var $50=HEAP32[((9904)>>2)];
 var $51=($8>>>0)>($50>>>0);
 if($51){label=13;break;}else{var $nb_0=$8;label=160;break;}
 case 13: 
 var $53=($11|0)==0;
 if($53){label=27;break;}else{label=14;break;}
 case 14: 
 var $55=$11<<$9;
 var $56=2<<$9;
 var $57=(((-$56))|0);
 var $58=$56|$57;
 var $59=$55&$58;
 var $60=(((-$59))|0);
 var $61=$59&$60;
 var $62=((($61)-(1))|0);
 var $63=$62>>>12;
 var $64=$63&16;
 var $65=$62>>>($64>>>0);
 var $66=$65>>>5;
 var $67=$66&8;
 var $68=$67|$64;
 var $69=$65>>>($67>>>0);
 var $70=$69>>>2;
 var $71=$70&4;
 var $72=$68|$71;
 var $73=$69>>>($71>>>0);
 var $74=$73>>>1;
 var $75=$74&2;
 var $76=$72|$75;
 var $77=$73>>>($75>>>0);
 var $78=$77>>>1;
 var $79=$78&1;
 var $80=$76|$79;
 var $81=$77>>>($79>>>0);
 var $82=((($80)+($81))|0);
 var $83=$82<<1;
 var $84=((9936+($83<<2))|0);
 var $85=$84;
 var $_sum4=((($83)+(2))|0);
 var $86=((9936+($_sum4<<2))|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+8)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($85|0)==($89|0);
 if($90){label=15;break;}else{label=16;break;}
 case 15: 
 var $92=1<<$82;
 var $93=$92^-1;
 var $94=$10&$93;
 HEAP32[((9896)>>2)]=$94;
 var $105=$50;label=20;break;
 case 16: 
 var $96=$89;
 var $97=HEAP32[((9912)>>2)];
 var $98=($96>>>0)<($97>>>0);
 if($98){label=19;break;}else{label=17;break;}
 case 17: 
 var $100=(($89+12)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($101|0)==($87|0);
 if($102){label=18;break;}else{label=19;break;}
 case 18: 
 HEAP32[(($100)>>2)]=$85;
 HEAP32[(($86)>>2)]=$89;
 var $_pre=HEAP32[((9904)>>2)];
 var $105=$_pre;label=20;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 var $105;
 var $106=$82<<3;
 var $107=((($106)-($8))|0);
 var $108=$8|3;
 var $109=(($87+4)|0);
 HEAP32[(($109)>>2)]=$108;
 var $110=$87;
 var $111=(($110+$8)|0);
 var $112=$111;
 var $113=$107|1;
 var $_sum67=$8|4;
 var $114=(($110+$_sum67)|0);
 var $115=$114;
 HEAP32[(($115)>>2)]=$113;
 var $116=(($110+$106)|0);
 var $117=$116;
 HEAP32[(($117)>>2)]=$107;
 var $118=($105|0)==0;
 if($118){label=26;break;}else{label=21;break;}
 case 21: 
 var $120=HEAP32[((9916)>>2)];
 var $121=$105>>>3;
 var $122=$121<<1;
 var $123=((9936+($122<<2))|0);
 var $124=$123;
 var $125=HEAP32[((9896)>>2)];
 var $126=1<<$121;
 var $127=$125&$126;
 var $128=($127|0)==0;
 if($128){label=22;break;}else{label=23;break;}
 case 22: 
 var $130=$125|$126;
 HEAP32[((9896)>>2)]=$130;
 var $_sum9_pre=((($122)+(2))|0);
 var $_pre107=((9936+($_sum9_pre<<2))|0);
 var $F4_0=$124;var $_pre_phi=$_pre107;label=25;break;
 case 23: 
 var $_sum10=((($122)+(2))|0);
 var $132=((9936+($_sum10<<2))|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=$133;
 var $135=HEAP32[((9912)>>2)];
 var $136=($134>>>0)<($135>>>0);
 if($136){label=24;break;}else{var $F4_0=$133;var $_pre_phi=$132;label=25;break;}
 case 24: 
 _abort();
 throw "Reached an unreachable!";
 case 25: 
 var $_pre_phi;
 var $F4_0;
 HEAP32[(($_pre_phi)>>2)]=$120;
 var $139=(($F4_0+12)|0);
 HEAP32[(($139)>>2)]=$120;
 var $140=(($120+8)|0);
 HEAP32[(($140)>>2)]=$F4_0;
 var $141=(($120+12)|0);
 HEAP32[(($141)>>2)]=$124;
 label=26;break;
 case 26: 
 HEAP32[((9904)>>2)]=$107;
 HEAP32[((9916)>>2)]=$112;
 var $143=$88;
 var $mem_0=$143;label=341;break;
 case 27: 
 var $145=HEAP32[((9900)>>2)];
 var $146=($145|0)==0;
 if($146){var $nb_0=$8;label=160;break;}else{label=28;break;}
 case 28: 
 var $148=(((-$145))|0);
 var $149=$145&$148;
 var $150=((($149)-(1))|0);
 var $151=$150>>>12;
 var $152=$151&16;
 var $153=$150>>>($152>>>0);
 var $154=$153>>>5;
 var $155=$154&8;
 var $156=$155|$152;
 var $157=$153>>>($155>>>0);
 var $158=$157>>>2;
 var $159=$158&4;
 var $160=$156|$159;
 var $161=$157>>>($159>>>0);
 var $162=$161>>>1;
 var $163=$162&2;
 var $164=$160|$163;
 var $165=$161>>>($163>>>0);
 var $166=$165>>>1;
 var $167=$166&1;
 var $168=$164|$167;
 var $169=$165>>>($167>>>0);
 var $170=((($168)+($169))|0);
 var $171=((10200+($170<<2))|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=(($172+4)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=$174&-8;
 var $176=((($175)-($8))|0);
 var $t_0_i=$172;var $v_0_i=$172;var $rsize_0_i=$176;label=29;break;
 case 29: 
 var $rsize_0_i;
 var $v_0_i;
 var $t_0_i;
 var $178=(($t_0_i+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($179|0)==0;
 if($180){label=30;break;}else{var $185=$179;label=31;break;}
 case 30: 
 var $182=(($t_0_i+20)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($183|0)==0;
 if($184){label=32;break;}else{var $185=$183;label=31;break;}
 case 31: 
 var $185;
 var $186=(($185+4)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=$187&-8;
 var $189=((($188)-($8))|0);
 var $190=($189>>>0)<($rsize_0_i>>>0);
 var $_rsize_0_i=($190?$189:$rsize_0_i);
 var $_v_0_i=($190?$185:$v_0_i);
 var $t_0_i=$185;var $v_0_i=$_v_0_i;var $rsize_0_i=$_rsize_0_i;label=29;break;
 case 32: 
 var $192=$v_0_i;
 var $193=HEAP32[((9912)>>2)];
 var $194=($192>>>0)<($193>>>0);
 if($194){label=76;break;}else{label=33;break;}
 case 33: 
 var $196=(($192+$8)|0);
 var $197=$196;
 var $198=($192>>>0)<($196>>>0);
 if($198){label=34;break;}else{label=76;break;}
 case 34: 
 var $200=(($v_0_i+24)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(($v_0_i+12)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=($203|0)==($v_0_i|0);
 if($204){label=40;break;}else{label=35;break;}
 case 35: 
 var $206=(($v_0_i+8)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=$207;
 var $209=($208>>>0)<($193>>>0);
 if($209){label=39;break;}else{label=36;break;}
 case 36: 
 var $211=(($207+12)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($212|0)==($v_0_i|0);
 if($213){label=37;break;}else{label=39;break;}
 case 37: 
 var $215=(($203+8)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=($216|0)==($v_0_i|0);
 if($217){label=38;break;}else{label=39;break;}
 case 38: 
 HEAP32[(($211)>>2)]=$203;
 HEAP32[(($215)>>2)]=$207;
 var $R_1_i=$203;label=47;break;
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $220=(($v_0_i+20)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=($221|0)==0;
 if($222){label=41;break;}else{var $R_0_i=$221;var $RP_0_i=$220;label=42;break;}
 case 41: 
 var $224=(($v_0_i+16)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=($225|0)==0;
 if($226){var $R_1_i=0;label=47;break;}else{var $R_0_i=$225;var $RP_0_i=$224;label=42;break;}
 case 42: 
 var $RP_0_i;
 var $R_0_i;
 var $227=(($R_0_i+20)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=($228|0)==0;
 if($229){label=43;break;}else{var $R_0_i=$228;var $RP_0_i=$227;label=42;break;}
 case 43: 
 var $231=(($R_0_i+16)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=($232|0)==0;
 if($233){label=44;break;}else{var $R_0_i=$232;var $RP_0_i=$231;label=42;break;}
 case 44: 
 var $235=$RP_0_i;
 var $236=($235>>>0)<($193>>>0);
 if($236){label=46;break;}else{label=45;break;}
 case 45: 
 HEAP32[(($RP_0_i)>>2)]=0;
 var $R_1_i=$R_0_i;label=47;break;
 case 46: 
 _abort();
 throw "Reached an unreachable!";
 case 47: 
 var $R_1_i;
 var $240=($201|0)==0;
 if($240){label=67;break;}else{label=48;break;}
 case 48: 
 var $242=(($v_0_i+28)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=((10200+($243<<2))|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=($v_0_i|0)==($245|0);
 if($246){label=49;break;}else{label=51;break;}
 case 49: 
 HEAP32[(($244)>>2)]=$R_1_i;
 var $cond_i=($R_1_i|0)==0;
 if($cond_i){label=50;break;}else{label=57;break;}
 case 50: 
 var $248=1<<$243;
 var $249=$248^-1;
 var $250=HEAP32[((9900)>>2)];
 var $251=$250&$249;
 HEAP32[((9900)>>2)]=$251;
 label=67;break;
 case 51: 
 var $253=$201;
 var $254=HEAP32[((9912)>>2)];
 var $255=($253>>>0)<($254>>>0);
 if($255){label=55;break;}else{label=52;break;}
 case 52: 
 var $257=(($201+16)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=($258|0)==($v_0_i|0);
 if($259){label=53;break;}else{label=54;break;}
 case 53: 
 HEAP32[(($257)>>2)]=$R_1_i;
 label=56;break;
 case 54: 
 var $262=(($201+20)|0);
 HEAP32[(($262)>>2)]=$R_1_i;
 label=56;break;
 case 55: 
 _abort();
 throw "Reached an unreachable!";
 case 56: 
 var $265=($R_1_i|0)==0;
 if($265){label=67;break;}else{label=57;break;}
 case 57: 
 var $267=$R_1_i;
 var $268=HEAP32[((9912)>>2)];
 var $269=($267>>>0)<($268>>>0);
 if($269){label=66;break;}else{label=58;break;}
 case 58: 
 var $271=(($R_1_i+24)|0);
 HEAP32[(($271)>>2)]=$201;
 var $272=(($v_0_i+16)|0);
 var $273=HEAP32[(($272)>>2)];
 var $274=($273|0)==0;
 if($274){label=62;break;}else{label=59;break;}
 case 59: 
 var $276=$273;
 var $277=($276>>>0)<($268>>>0);
 if($277){label=61;break;}else{label=60;break;}
 case 60: 
 var $279=(($R_1_i+16)|0);
 HEAP32[(($279)>>2)]=$273;
 var $280=(($273+24)|0);
 HEAP32[(($280)>>2)]=$R_1_i;
 label=62;break;
 case 61: 
 _abort();
 throw "Reached an unreachable!";
 case 62: 
 var $283=(($v_0_i+20)|0);
 var $284=HEAP32[(($283)>>2)];
 var $285=($284|0)==0;
 if($285){label=67;break;}else{label=63;break;}
 case 63: 
 var $287=$284;
 var $288=HEAP32[((9912)>>2)];
 var $289=($287>>>0)<($288>>>0);
 if($289){label=65;break;}else{label=64;break;}
 case 64: 
 var $291=(($R_1_i+20)|0);
 HEAP32[(($291)>>2)]=$284;
 var $292=(($284+24)|0);
 HEAP32[(($292)>>2)]=$R_1_i;
 label=67;break;
 case 65: 
 _abort();
 throw "Reached an unreachable!";
 case 66: 
 _abort();
 throw "Reached an unreachable!";
 case 67: 
 var $296=($rsize_0_i>>>0)<16;
 if($296){label=68;break;}else{label=69;break;}
 case 68: 
 var $298=((($rsize_0_i)+($8))|0);
 var $299=$298|3;
 var $300=(($v_0_i+4)|0);
 HEAP32[(($300)>>2)]=$299;
 var $_sum4_i=((($298)+(4))|0);
 var $301=(($192+$_sum4_i)|0);
 var $302=$301;
 var $303=HEAP32[(($302)>>2)];
 var $304=$303|1;
 HEAP32[(($302)>>2)]=$304;
 label=77;break;
 case 69: 
 var $306=$8|3;
 var $307=(($v_0_i+4)|0);
 HEAP32[(($307)>>2)]=$306;
 var $308=$rsize_0_i|1;
 var $_sum_i41=$8|4;
 var $309=(($192+$_sum_i41)|0);
 var $310=$309;
 HEAP32[(($310)>>2)]=$308;
 var $_sum1_i=((($rsize_0_i)+($8))|0);
 var $311=(($192+$_sum1_i)|0);
 var $312=$311;
 HEAP32[(($312)>>2)]=$rsize_0_i;
 var $313=HEAP32[((9904)>>2)];
 var $314=($313|0)==0;
 if($314){label=75;break;}else{label=70;break;}
 case 70: 
 var $316=HEAP32[((9916)>>2)];
 var $317=$313>>>3;
 var $318=$317<<1;
 var $319=((9936+($318<<2))|0);
 var $320=$319;
 var $321=HEAP32[((9896)>>2)];
 var $322=1<<$317;
 var $323=$321&$322;
 var $324=($323|0)==0;
 if($324){label=71;break;}else{label=72;break;}
 case 71: 
 var $326=$321|$322;
 HEAP32[((9896)>>2)]=$326;
 var $_sum2_pre_i=((($318)+(2))|0);
 var $_pre_i=((9936+($_sum2_pre_i<<2))|0);
 var $F1_0_i=$320;var $_pre_phi_i=$_pre_i;label=74;break;
 case 72: 
 var $_sum3_i=((($318)+(2))|0);
 var $328=((9936+($_sum3_i<<2))|0);
 var $329=HEAP32[(($328)>>2)];
 var $330=$329;
 var $331=HEAP32[((9912)>>2)];
 var $332=($330>>>0)<($331>>>0);
 if($332){label=73;break;}else{var $F1_0_i=$329;var $_pre_phi_i=$328;label=74;break;}
 case 73: 
 _abort();
 throw "Reached an unreachable!";
 case 74: 
 var $_pre_phi_i;
 var $F1_0_i;
 HEAP32[(($_pre_phi_i)>>2)]=$316;
 var $335=(($F1_0_i+12)|0);
 HEAP32[(($335)>>2)]=$316;
 var $336=(($316+8)|0);
 HEAP32[(($336)>>2)]=$F1_0_i;
 var $337=(($316+12)|0);
 HEAP32[(($337)>>2)]=$320;
 label=75;break;
 case 75: 
 HEAP32[((9904)>>2)]=$rsize_0_i;
 HEAP32[((9916)>>2)]=$197;
 label=77;break;
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $340=(($v_0_i+8)|0);
 var $341=$340;
 var $mem_0=$341;label=341;break;
 case 78: 
 var $343=($bytes>>>0)>4294967231;
 if($343){var $nb_0=-1;label=160;break;}else{label=79;break;}
 case 79: 
 var $345=((($bytes)+(11))|0);
 var $346=$345&-8;
 var $347=HEAP32[((9900)>>2)];
 var $348=($347|0)==0;
 if($348){var $nb_0=$346;label=160;break;}else{label=80;break;}
 case 80: 
 var $350=(((-$346))|0);
 var $351=$345>>>8;
 var $352=($351|0)==0;
 if($352){var $idx_0_i=0;label=83;break;}else{label=81;break;}
 case 81: 
 var $354=($346>>>0)>16777215;
 if($354){var $idx_0_i=31;label=83;break;}else{label=82;break;}
 case 82: 
 var $356=((($351)+(1048320))|0);
 var $357=$356>>>16;
 var $358=$357&8;
 var $359=$351<<$358;
 var $360=((($359)+(520192))|0);
 var $361=$360>>>16;
 var $362=$361&4;
 var $363=$362|$358;
 var $364=$359<<$362;
 var $365=((($364)+(245760))|0);
 var $366=$365>>>16;
 var $367=$366&2;
 var $368=$363|$367;
 var $369=(((14)-($368))|0);
 var $370=$364<<$367;
 var $371=$370>>>15;
 var $372=((($369)+($371))|0);
 var $373=$372<<1;
 var $374=((($372)+(7))|0);
 var $375=$346>>>($374>>>0);
 var $376=$375&1;
 var $377=$376|$373;
 var $idx_0_i=$377;label=83;break;
 case 83: 
 var $idx_0_i;
 var $379=((10200+($idx_0_i<<2))|0);
 var $380=HEAP32[(($379)>>2)];
 var $381=($380|0)==0;
 if($381){var $v_2_i=0;var $rsize_2_i=$350;var $t_1_i=0;label=90;break;}else{label=84;break;}
 case 84: 
 var $383=($idx_0_i|0)==31;
 if($383){var $388=0;label=86;break;}else{label=85;break;}
 case 85: 
 var $385=$idx_0_i>>>1;
 var $386=(((25)-($385))|0);
 var $388=$386;label=86;break;
 case 86: 
 var $388;
 var $389=$346<<$388;
 var $v_0_i18=0;var $rsize_0_i17=$350;var $t_0_i16=$380;var $sizebits_0_i=$389;var $rst_0_i=0;label=87;break;
 case 87: 
 var $rst_0_i;
 var $sizebits_0_i;
 var $t_0_i16;
 var $rsize_0_i17;
 var $v_0_i18;
 var $391=(($t_0_i16+4)|0);
 var $392=HEAP32[(($391)>>2)];
 var $393=$392&-8;
 var $394=((($393)-($346))|0);
 var $395=($394>>>0)<($rsize_0_i17>>>0);
 if($395){label=88;break;}else{var $v_1_i=$v_0_i18;var $rsize_1_i=$rsize_0_i17;label=89;break;}
 case 88: 
 var $397=($393|0)==($346|0);
 if($397){var $v_2_i=$t_0_i16;var $rsize_2_i=$394;var $t_1_i=$t_0_i16;label=90;break;}else{var $v_1_i=$t_0_i16;var $rsize_1_i=$394;label=89;break;}
 case 89: 
 var $rsize_1_i;
 var $v_1_i;
 var $399=(($t_0_i16+20)|0);
 var $400=HEAP32[(($399)>>2)];
 var $401=$sizebits_0_i>>>31;
 var $402=(($t_0_i16+16+($401<<2))|0);
 var $403=HEAP32[(($402)>>2)];
 var $404=($400|0)==0;
 var $405=($400|0)==($403|0);
 var $or_cond21_i=$404|$405;
 var $rst_1_i=($or_cond21_i?$rst_0_i:$400);
 var $406=($403|0)==0;
 var $407=$sizebits_0_i<<1;
 if($406){var $v_2_i=$v_1_i;var $rsize_2_i=$rsize_1_i;var $t_1_i=$rst_1_i;label=90;break;}else{var $v_0_i18=$v_1_i;var $rsize_0_i17=$rsize_1_i;var $t_0_i16=$403;var $sizebits_0_i=$407;var $rst_0_i=$rst_1_i;label=87;break;}
 case 90: 
 var $t_1_i;
 var $rsize_2_i;
 var $v_2_i;
 var $408=($t_1_i|0)==0;
 var $409=($v_2_i|0)==0;
 var $or_cond_i=$408&$409;
 if($or_cond_i){label=91;break;}else{var $t_2_ph_i=$t_1_i;label=93;break;}
 case 91: 
 var $411=2<<$idx_0_i;
 var $412=(((-$411))|0);
 var $413=$411|$412;
 var $414=$347&$413;
 var $415=($414|0)==0;
 if($415){var $nb_0=$346;label=160;break;}else{label=92;break;}
 case 92: 
 var $417=(((-$414))|0);
 var $418=$414&$417;
 var $419=((($418)-(1))|0);
 var $420=$419>>>12;
 var $421=$420&16;
 var $422=$419>>>($421>>>0);
 var $423=$422>>>5;
 var $424=$423&8;
 var $425=$424|$421;
 var $426=$422>>>($424>>>0);
 var $427=$426>>>2;
 var $428=$427&4;
 var $429=$425|$428;
 var $430=$426>>>($428>>>0);
 var $431=$430>>>1;
 var $432=$431&2;
 var $433=$429|$432;
 var $434=$430>>>($432>>>0);
 var $435=$434>>>1;
 var $436=$435&1;
 var $437=$433|$436;
 var $438=$434>>>($436>>>0);
 var $439=((($437)+($438))|0);
 var $440=((10200+($439<<2))|0);
 var $441=HEAP32[(($440)>>2)];
 var $t_2_ph_i=$441;label=93;break;
 case 93: 
 var $t_2_ph_i;
 var $442=($t_2_ph_i|0)==0;
 if($442){var $rsize_3_lcssa_i=$rsize_2_i;var $v_3_lcssa_i=$v_2_i;label=96;break;}else{var $t_232_i=$t_2_ph_i;var $rsize_333_i=$rsize_2_i;var $v_334_i=$v_2_i;label=94;break;}
 case 94: 
 var $v_334_i;
 var $rsize_333_i;
 var $t_232_i;
 var $443=(($t_232_i+4)|0);
 var $444=HEAP32[(($443)>>2)];
 var $445=$444&-8;
 var $446=((($445)-($346))|0);
 var $447=($446>>>0)<($rsize_333_i>>>0);
 var $_rsize_3_i=($447?$446:$rsize_333_i);
 var $t_2_v_3_i=($447?$t_232_i:$v_334_i);
 var $448=(($t_232_i+16)|0);
 var $449=HEAP32[(($448)>>2)];
 var $450=($449|0)==0;
 if($450){label=95;break;}else{var $t_232_i=$449;var $rsize_333_i=$_rsize_3_i;var $v_334_i=$t_2_v_3_i;label=94;break;}
 case 95: 
 var $451=(($t_232_i+20)|0);
 var $452=HEAP32[(($451)>>2)];
 var $453=($452|0)==0;
 if($453){var $rsize_3_lcssa_i=$_rsize_3_i;var $v_3_lcssa_i=$t_2_v_3_i;label=96;break;}else{var $t_232_i=$452;var $rsize_333_i=$_rsize_3_i;var $v_334_i=$t_2_v_3_i;label=94;break;}
 case 96: 
 var $v_3_lcssa_i;
 var $rsize_3_lcssa_i;
 var $454=($v_3_lcssa_i|0)==0;
 if($454){var $nb_0=$346;label=160;break;}else{label=97;break;}
 case 97: 
 var $456=HEAP32[((9904)>>2)];
 var $457=((($456)-($346))|0);
 var $458=($rsize_3_lcssa_i>>>0)<($457>>>0);
 if($458){label=98;break;}else{var $nb_0=$346;label=160;break;}
 case 98: 
 var $460=$v_3_lcssa_i;
 var $461=HEAP32[((9912)>>2)];
 var $462=($460>>>0)<($461>>>0);
 if($462){label=158;break;}else{label=99;break;}
 case 99: 
 var $464=(($460+$346)|0);
 var $465=$464;
 var $466=($460>>>0)<($464>>>0);
 if($466){label=100;break;}else{label=158;break;}
 case 100: 
 var $468=(($v_3_lcssa_i+24)|0);
 var $469=HEAP32[(($468)>>2)];
 var $470=(($v_3_lcssa_i+12)|0);
 var $471=HEAP32[(($470)>>2)];
 var $472=($471|0)==($v_3_lcssa_i|0);
 if($472){label=106;break;}else{label=101;break;}
 case 101: 
 var $474=(($v_3_lcssa_i+8)|0);
 var $475=HEAP32[(($474)>>2)];
 var $476=$475;
 var $477=($476>>>0)<($461>>>0);
 if($477){label=105;break;}else{label=102;break;}
 case 102: 
 var $479=(($475+12)|0);
 var $480=HEAP32[(($479)>>2)];
 var $481=($480|0)==($v_3_lcssa_i|0);
 if($481){label=103;break;}else{label=105;break;}
 case 103: 
 var $483=(($471+8)|0);
 var $484=HEAP32[(($483)>>2)];
 var $485=($484|0)==($v_3_lcssa_i|0);
 if($485){label=104;break;}else{label=105;break;}
 case 104: 
 HEAP32[(($479)>>2)]=$471;
 HEAP32[(($483)>>2)]=$475;
 var $R_1_i22=$471;label=113;break;
 case 105: 
 _abort();
 throw "Reached an unreachable!";
 case 106: 
 var $488=(($v_3_lcssa_i+20)|0);
 var $489=HEAP32[(($488)>>2)];
 var $490=($489|0)==0;
 if($490){label=107;break;}else{var $R_0_i20=$489;var $RP_0_i19=$488;label=108;break;}
 case 107: 
 var $492=(($v_3_lcssa_i+16)|0);
 var $493=HEAP32[(($492)>>2)];
 var $494=($493|0)==0;
 if($494){var $R_1_i22=0;label=113;break;}else{var $R_0_i20=$493;var $RP_0_i19=$492;label=108;break;}
 case 108: 
 var $RP_0_i19;
 var $R_0_i20;
 var $495=(($R_0_i20+20)|0);
 var $496=HEAP32[(($495)>>2)];
 var $497=($496|0)==0;
 if($497){label=109;break;}else{var $R_0_i20=$496;var $RP_0_i19=$495;label=108;break;}
 case 109: 
 var $499=(($R_0_i20+16)|0);
 var $500=HEAP32[(($499)>>2)];
 var $501=($500|0)==0;
 if($501){label=110;break;}else{var $R_0_i20=$500;var $RP_0_i19=$499;label=108;break;}
 case 110: 
 var $503=$RP_0_i19;
 var $504=($503>>>0)<($461>>>0);
 if($504){label=112;break;}else{label=111;break;}
 case 111: 
 HEAP32[(($RP_0_i19)>>2)]=0;
 var $R_1_i22=$R_0_i20;label=113;break;
 case 112: 
 _abort();
 throw "Reached an unreachable!";
 case 113: 
 var $R_1_i22;
 var $508=($469|0)==0;
 if($508){label=133;break;}else{label=114;break;}
 case 114: 
 var $510=(($v_3_lcssa_i+28)|0);
 var $511=HEAP32[(($510)>>2)];
 var $512=((10200+($511<<2))|0);
 var $513=HEAP32[(($512)>>2)];
 var $514=($v_3_lcssa_i|0)==($513|0);
 if($514){label=115;break;}else{label=117;break;}
 case 115: 
 HEAP32[(($512)>>2)]=$R_1_i22;
 var $cond_i23=($R_1_i22|0)==0;
 if($cond_i23){label=116;break;}else{label=123;break;}
 case 116: 
 var $516=1<<$511;
 var $517=$516^-1;
 var $518=HEAP32[((9900)>>2)];
 var $519=$518&$517;
 HEAP32[((9900)>>2)]=$519;
 label=133;break;
 case 117: 
 var $521=$469;
 var $522=HEAP32[((9912)>>2)];
 var $523=($521>>>0)<($522>>>0);
 if($523){label=121;break;}else{label=118;break;}
 case 118: 
 var $525=(($469+16)|0);
 var $526=HEAP32[(($525)>>2)];
 var $527=($526|0)==($v_3_lcssa_i|0);
 if($527){label=119;break;}else{label=120;break;}
 case 119: 
 HEAP32[(($525)>>2)]=$R_1_i22;
 label=122;break;
 case 120: 
 var $530=(($469+20)|0);
 HEAP32[(($530)>>2)]=$R_1_i22;
 label=122;break;
 case 121: 
 _abort();
 throw "Reached an unreachable!";
 case 122: 
 var $533=($R_1_i22|0)==0;
 if($533){label=133;break;}else{label=123;break;}
 case 123: 
 var $535=$R_1_i22;
 var $536=HEAP32[((9912)>>2)];
 var $537=($535>>>0)<($536>>>0);
 if($537){label=132;break;}else{label=124;break;}
 case 124: 
 var $539=(($R_1_i22+24)|0);
 HEAP32[(($539)>>2)]=$469;
 var $540=(($v_3_lcssa_i+16)|0);
 var $541=HEAP32[(($540)>>2)];
 var $542=($541|0)==0;
 if($542){label=128;break;}else{label=125;break;}
 case 125: 
 var $544=$541;
 var $545=($544>>>0)<($536>>>0);
 if($545){label=127;break;}else{label=126;break;}
 case 126: 
 var $547=(($R_1_i22+16)|0);
 HEAP32[(($547)>>2)]=$541;
 var $548=(($541+24)|0);
 HEAP32[(($548)>>2)]=$R_1_i22;
 label=128;break;
 case 127: 
 _abort();
 throw "Reached an unreachable!";
 case 128: 
 var $551=(($v_3_lcssa_i+20)|0);
 var $552=HEAP32[(($551)>>2)];
 var $553=($552|0)==0;
 if($553){label=133;break;}else{label=129;break;}
 case 129: 
 var $555=$552;
 var $556=HEAP32[((9912)>>2)];
 var $557=($555>>>0)<($556>>>0);
 if($557){label=131;break;}else{label=130;break;}
 case 130: 
 var $559=(($R_1_i22+20)|0);
 HEAP32[(($559)>>2)]=$552;
 var $560=(($552+24)|0);
 HEAP32[(($560)>>2)]=$R_1_i22;
 label=133;break;
 case 131: 
 _abort();
 throw "Reached an unreachable!";
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 var $564=($rsize_3_lcssa_i>>>0)<16;
 if($564){label=134;break;}else{label=135;break;}
 case 134: 
 var $566=((($rsize_3_lcssa_i)+($346))|0);
 var $567=$566|3;
 var $568=(($v_3_lcssa_i+4)|0);
 HEAP32[(($568)>>2)]=$567;
 var $_sum19_i=((($566)+(4))|0);
 var $569=(($460+$_sum19_i)|0);
 var $570=$569;
 var $571=HEAP32[(($570)>>2)];
 var $572=$571|1;
 HEAP32[(($570)>>2)]=$572;
 label=159;break;
 case 135: 
 var $574=$346|3;
 var $575=(($v_3_lcssa_i+4)|0);
 HEAP32[(($575)>>2)]=$574;
 var $576=$rsize_3_lcssa_i|1;
 var $_sum_i2540=$346|4;
 var $577=(($460+$_sum_i2540)|0);
 var $578=$577;
 HEAP32[(($578)>>2)]=$576;
 var $_sum1_i26=((($rsize_3_lcssa_i)+($346))|0);
 var $579=(($460+$_sum1_i26)|0);
 var $580=$579;
 HEAP32[(($580)>>2)]=$rsize_3_lcssa_i;
 var $581=$rsize_3_lcssa_i>>>3;
 var $582=($rsize_3_lcssa_i>>>0)<256;
 if($582){label=136;break;}else{label=141;break;}
 case 136: 
 var $584=$581<<1;
 var $585=((9936+($584<<2))|0);
 var $586=$585;
 var $587=HEAP32[((9896)>>2)];
 var $588=1<<$581;
 var $589=$587&$588;
 var $590=($589|0)==0;
 if($590){label=137;break;}else{label=138;break;}
 case 137: 
 var $592=$587|$588;
 HEAP32[((9896)>>2)]=$592;
 var $_sum15_pre_i=((($584)+(2))|0);
 var $_pre_i27=((9936+($_sum15_pre_i<<2))|0);
 var $F5_0_i=$586;var $_pre_phi_i28=$_pre_i27;label=140;break;
 case 138: 
 var $_sum18_i=((($584)+(2))|0);
 var $594=((9936+($_sum18_i<<2))|0);
 var $595=HEAP32[(($594)>>2)];
 var $596=$595;
 var $597=HEAP32[((9912)>>2)];
 var $598=($596>>>0)<($597>>>0);
 if($598){label=139;break;}else{var $F5_0_i=$595;var $_pre_phi_i28=$594;label=140;break;}
 case 139: 
 _abort();
 throw "Reached an unreachable!";
 case 140: 
 var $_pre_phi_i28;
 var $F5_0_i;
 HEAP32[(($_pre_phi_i28)>>2)]=$465;
 var $601=(($F5_0_i+12)|0);
 HEAP32[(($601)>>2)]=$465;
 var $_sum16_i=((($346)+(8))|0);
 var $602=(($460+$_sum16_i)|0);
 var $603=$602;
 HEAP32[(($603)>>2)]=$F5_0_i;
 var $_sum17_i=((($346)+(12))|0);
 var $604=(($460+$_sum17_i)|0);
 var $605=$604;
 HEAP32[(($605)>>2)]=$586;
 label=159;break;
 case 141: 
 var $607=$464;
 var $608=$rsize_3_lcssa_i>>>8;
 var $609=($608|0)==0;
 if($609){var $I7_0_i=0;label=144;break;}else{label=142;break;}
 case 142: 
 var $611=($rsize_3_lcssa_i>>>0)>16777215;
 if($611){var $I7_0_i=31;label=144;break;}else{label=143;break;}
 case 143: 
 var $613=((($608)+(1048320))|0);
 var $614=$613>>>16;
 var $615=$614&8;
 var $616=$608<<$615;
 var $617=((($616)+(520192))|0);
 var $618=$617>>>16;
 var $619=$618&4;
 var $620=$619|$615;
 var $621=$616<<$619;
 var $622=((($621)+(245760))|0);
 var $623=$622>>>16;
 var $624=$623&2;
 var $625=$620|$624;
 var $626=(((14)-($625))|0);
 var $627=$621<<$624;
 var $628=$627>>>15;
 var $629=((($626)+($628))|0);
 var $630=$629<<1;
 var $631=((($629)+(7))|0);
 var $632=$rsize_3_lcssa_i>>>($631>>>0);
 var $633=$632&1;
 var $634=$633|$630;
 var $I7_0_i=$634;label=144;break;
 case 144: 
 var $I7_0_i;
 var $636=((10200+($I7_0_i<<2))|0);
 var $_sum2_i=((($346)+(28))|0);
 var $637=(($460+$_sum2_i)|0);
 var $638=$637;
 HEAP32[(($638)>>2)]=$I7_0_i;
 var $_sum3_i29=((($346)+(16))|0);
 var $639=(($460+$_sum3_i29)|0);
 var $_sum4_i30=((($346)+(20))|0);
 var $640=(($460+$_sum4_i30)|0);
 var $641=$640;
 HEAP32[(($641)>>2)]=0;
 var $642=$639;
 HEAP32[(($642)>>2)]=0;
 var $643=HEAP32[((9900)>>2)];
 var $644=1<<$I7_0_i;
 var $645=$643&$644;
 var $646=($645|0)==0;
 if($646){label=145;break;}else{label=146;break;}
 case 145: 
 var $648=$643|$644;
 HEAP32[((9900)>>2)]=$648;
 HEAP32[(($636)>>2)]=$607;
 var $649=$636;
 var $_sum5_i=((($346)+(24))|0);
 var $650=(($460+$_sum5_i)|0);
 var $651=$650;
 HEAP32[(($651)>>2)]=$649;
 var $_sum6_i=((($346)+(12))|0);
 var $652=(($460+$_sum6_i)|0);
 var $653=$652;
 HEAP32[(($653)>>2)]=$607;
 var $_sum7_i=((($346)+(8))|0);
 var $654=(($460+$_sum7_i)|0);
 var $655=$654;
 HEAP32[(($655)>>2)]=$607;
 label=159;break;
 case 146: 
 var $657=HEAP32[(($636)>>2)];
 var $658=($I7_0_i|0)==31;
 if($658){var $663=0;label=148;break;}else{label=147;break;}
 case 147: 
 var $660=$I7_0_i>>>1;
 var $661=(((25)-($660))|0);
 var $663=$661;label=148;break;
 case 148: 
 var $663;
 var $664=(($657+4)|0);
 var $665=HEAP32[(($664)>>2)];
 var $666=$665&-8;
 var $667=($666|0)==($rsize_3_lcssa_i|0);
 if($667){var $T_0_lcssa_i=$657;label=155;break;}else{label=149;break;}
 case 149: 
 var $668=$rsize_3_lcssa_i<<$663;
 var $T_028_i=$657;var $K12_029_i=$668;label=151;break;
 case 150: 
 var $670=$K12_029_i<<1;
 var $671=(($678+4)|0);
 var $672=HEAP32[(($671)>>2)];
 var $673=$672&-8;
 var $674=($673|0)==($rsize_3_lcssa_i|0);
 if($674){var $T_0_lcssa_i=$678;label=155;break;}else{var $T_028_i=$678;var $K12_029_i=$670;label=151;break;}
 case 151: 
 var $K12_029_i;
 var $T_028_i;
 var $676=$K12_029_i>>>31;
 var $677=(($T_028_i+16+($676<<2))|0);
 var $678=HEAP32[(($677)>>2)];
 var $679=($678|0)==0;
 if($679){label=152;break;}else{label=150;break;}
 case 152: 
 var $681=$677;
 var $682=HEAP32[((9912)>>2)];
 var $683=($681>>>0)<($682>>>0);
 if($683){label=154;break;}else{label=153;break;}
 case 153: 
 HEAP32[(($677)>>2)]=$607;
 var $_sum12_i=((($346)+(24))|0);
 var $685=(($460+$_sum12_i)|0);
 var $686=$685;
 HEAP32[(($686)>>2)]=$T_028_i;
 var $_sum13_i=((($346)+(12))|0);
 var $687=(($460+$_sum13_i)|0);
 var $688=$687;
 HEAP32[(($688)>>2)]=$607;
 var $_sum14_i=((($346)+(8))|0);
 var $689=(($460+$_sum14_i)|0);
 var $690=$689;
 HEAP32[(($690)>>2)]=$607;
 label=159;break;
 case 154: 
 _abort();
 throw "Reached an unreachable!";
 case 155: 
 var $T_0_lcssa_i;
 var $692=(($T_0_lcssa_i+8)|0);
 var $693=HEAP32[(($692)>>2)];
 var $694=$T_0_lcssa_i;
 var $695=HEAP32[((9912)>>2)];
 var $696=($694>>>0)>=($695>>>0);
 var $697=$693;
 var $698=($697>>>0)>=($695>>>0);
 var $or_cond26_i=$696&$698;
 if($or_cond26_i){label=156;break;}else{label=157;break;}
 case 156: 
 var $700=(($693+12)|0);
 HEAP32[(($700)>>2)]=$607;
 HEAP32[(($692)>>2)]=$607;
 var $_sum9_i=((($346)+(8))|0);
 var $701=(($460+$_sum9_i)|0);
 var $702=$701;
 HEAP32[(($702)>>2)]=$693;
 var $_sum10_i=((($346)+(12))|0);
 var $703=(($460+$_sum10_i)|0);
 var $704=$703;
 HEAP32[(($704)>>2)]=$T_0_lcssa_i;
 var $_sum11_i=((($346)+(24))|0);
 var $705=(($460+$_sum11_i)|0);
 var $706=$705;
 HEAP32[(($706)>>2)]=0;
 label=159;break;
 case 157: 
 _abort();
 throw "Reached an unreachable!";
 case 158: 
 _abort();
 throw "Reached an unreachable!";
 case 159: 
 var $708=(($v_3_lcssa_i+8)|0);
 var $709=$708;
 var $mem_0=$709;label=341;break;
 case 160: 
 var $nb_0;
 var $710=HEAP32[((9904)>>2)];
 var $711=($710>>>0)<($nb_0>>>0);
 if($711){label=165;break;}else{label=161;break;}
 case 161: 
 var $713=((($710)-($nb_0))|0);
 var $714=HEAP32[((9916)>>2)];
 var $715=($713>>>0)>15;
 if($715){label=162;break;}else{label=163;break;}
 case 162: 
 var $717=$714;
 var $718=(($717+$nb_0)|0);
 var $719=$718;
 HEAP32[((9916)>>2)]=$719;
 HEAP32[((9904)>>2)]=$713;
 var $720=$713|1;
 var $_sum2=((($nb_0)+(4))|0);
 var $721=(($717+$_sum2)|0);
 var $722=$721;
 HEAP32[(($722)>>2)]=$720;
 var $723=(($717+$710)|0);
 var $724=$723;
 HEAP32[(($724)>>2)]=$713;
 var $725=$nb_0|3;
 var $726=(($714+4)|0);
 HEAP32[(($726)>>2)]=$725;
 label=164;break;
 case 163: 
 HEAP32[((9904)>>2)]=0;
 HEAP32[((9916)>>2)]=0;
 var $728=$710|3;
 var $729=(($714+4)|0);
 HEAP32[(($729)>>2)]=$728;
 var $730=$714;
 var $_sum1=((($710)+(4))|0);
 var $731=(($730+$_sum1)|0);
 var $732=$731;
 var $733=HEAP32[(($732)>>2)];
 var $734=$733|1;
 HEAP32[(($732)>>2)]=$734;
 label=164;break;
 case 164: 
 var $736=(($714+8)|0);
 var $737=$736;
 var $mem_0=$737;label=341;break;
 case 165: 
 var $739=HEAP32[((9908)>>2)];
 var $740=($739>>>0)>($nb_0>>>0);
 if($740){label=166;break;}else{label=167;break;}
 case 166: 
 var $742=((($739)-($nb_0))|0);
 HEAP32[((9908)>>2)]=$742;
 var $743=HEAP32[((9920)>>2)];
 var $744=$743;
 var $745=(($744+$nb_0)|0);
 var $746=$745;
 HEAP32[((9920)>>2)]=$746;
 var $747=$742|1;
 var $_sum=((($nb_0)+(4))|0);
 var $748=(($744+$_sum)|0);
 var $749=$748;
 HEAP32[(($749)>>2)]=$747;
 var $750=$nb_0|3;
 var $751=(($743+4)|0);
 HEAP32[(($751)>>2)]=$750;
 var $752=(($743+8)|0);
 var $753=$752;
 var $mem_0=$753;label=341;break;
 case 167: 
 var $755=HEAP32[((9840)>>2)];
 var $756=($755|0)==0;
 if($756){label=168;break;}else{label=171;break;}
 case 168: 
 var $758=_sysconf(30);
 var $759=((($758)-(1))|0);
 var $760=$759&$758;
 var $761=($760|0)==0;
 if($761){label=170;break;}else{label=169;break;}
 case 169: 
 _abort();
 throw "Reached an unreachable!";
 case 170: 
 HEAP32[((9848)>>2)]=$758;
 HEAP32[((9844)>>2)]=$758;
 HEAP32[((9852)>>2)]=-1;
 HEAP32[((9856)>>2)]=-1;
 HEAP32[((9860)>>2)]=0;
 HEAP32[((10340)>>2)]=0;
 var $763=_time(0);
 var $764=$763&-16;
 var $765=$764^1431655768;
 HEAP32[((9840)>>2)]=$765;
 label=171;break;
 case 171: 
 var $767=((($nb_0)+(48))|0);
 var $768=HEAP32[((9848)>>2)];
 var $769=((($nb_0)+(47))|0);
 var $770=((($768)+($769))|0);
 var $771=(((-$768))|0);
 var $772=$770&$771;
 var $773=($772>>>0)>($nb_0>>>0);
 if($773){label=172;break;}else{var $mem_0=0;label=341;break;}
 case 172: 
 var $775=HEAP32[((10336)>>2)];
 var $776=($775|0)==0;
 if($776){label=174;break;}else{label=173;break;}
 case 173: 
 var $778=HEAP32[((10328)>>2)];
 var $779=((($778)+($772))|0);
 var $780=($779>>>0)<=($778>>>0);
 var $781=($779>>>0)>($775>>>0);
 var $or_cond1_i=$780|$781;
 if($or_cond1_i){var $mem_0=0;label=341;break;}else{label=174;break;}
 case 174: 
 var $783=HEAP32[((10340)>>2)];
 var $784=$783&4;
 var $785=($784|0)==0;
 if($785){label=175;break;}else{var $tsize_1_i=0;label=198;break;}
 case 175: 
 var $787=HEAP32[((9920)>>2)];
 var $788=($787|0)==0;
 if($788){label=181;break;}else{label=176;break;}
 case 176: 
 var $790=$787;
 var $sp_0_i_i=10344;label=177;break;
 case 177: 
 var $sp_0_i_i;
 var $792=(($sp_0_i_i)|0);
 var $793=HEAP32[(($792)>>2)];
 var $794=($793>>>0)>($790>>>0);
 if($794){label=179;break;}else{label=178;break;}
 case 178: 
 var $796=(($sp_0_i_i+4)|0);
 var $797=HEAP32[(($796)>>2)];
 var $798=(($793+$797)|0);
 var $799=($798>>>0)>($790>>>0);
 if($799){label=180;break;}else{label=179;break;}
 case 179: 
 var $801=(($sp_0_i_i+8)|0);
 var $802=HEAP32[(($801)>>2)];
 var $803=($802|0)==0;
 if($803){label=181;break;}else{var $sp_0_i_i=$802;label=177;break;}
 case 180: 
 var $804=($sp_0_i_i|0)==0;
 if($804){label=181;break;}else{label=188;break;}
 case 181: 
 var $805=_sbrk(0);
 var $806=($805|0)==-1;
 if($806){var $tsize_03141_i=0;label=197;break;}else{label=182;break;}
 case 182: 
 var $808=$805;
 var $809=HEAP32[((9844)>>2)];
 var $810=((($809)-(1))|0);
 var $811=$810&$808;
 var $812=($811|0)==0;
 if($812){var $ssize_0_i=$772;label=184;break;}else{label=183;break;}
 case 183: 
 var $814=((($810)+($808))|0);
 var $815=(((-$809))|0);
 var $816=$814&$815;
 var $817=((($772)-($808))|0);
 var $818=((($817)+($816))|0);
 var $ssize_0_i=$818;label=184;break;
 case 184: 
 var $ssize_0_i;
 var $820=HEAP32[((10328)>>2)];
 var $821=((($820)+($ssize_0_i))|0);
 var $822=($ssize_0_i>>>0)>($nb_0>>>0);
 var $823=($ssize_0_i>>>0)<2147483647;
 var $or_cond_i31=$822&$823;
 if($or_cond_i31){label=185;break;}else{var $tsize_03141_i=0;label=197;break;}
 case 185: 
 var $825=HEAP32[((10336)>>2)];
 var $826=($825|0)==0;
 if($826){label=187;break;}else{label=186;break;}
 case 186: 
 var $828=($821>>>0)<=($820>>>0);
 var $829=($821>>>0)>($825>>>0);
 var $or_cond2_i=$828|$829;
 if($or_cond2_i){var $tsize_03141_i=0;label=197;break;}else{label=187;break;}
 case 187: 
 var $831=_sbrk($ssize_0_i);
 var $832=($831|0)==($805|0);
 if($832){var $br_0_i=$805;var $ssize_1_i=$ssize_0_i;label=190;break;}else{var $ssize_129_i=$ssize_0_i;var $br_030_i=$831;label=191;break;}
 case 188: 
 var $834=HEAP32[((9908)>>2)];
 var $835=((($770)-($834))|0);
 var $836=$835&$771;
 var $837=($836>>>0)<2147483647;
 if($837){label=189;break;}else{var $tsize_03141_i=0;label=197;break;}
 case 189: 
 var $839=_sbrk($836);
 var $840=HEAP32[(($792)>>2)];
 var $841=HEAP32[(($796)>>2)];
 var $842=(($840+$841)|0);
 var $843=($839|0)==($842|0);
 if($843){var $br_0_i=$839;var $ssize_1_i=$836;label=190;break;}else{var $ssize_129_i=$836;var $br_030_i=$839;label=191;break;}
 case 190: 
 var $ssize_1_i;
 var $br_0_i;
 var $845=($br_0_i|0)==-1;
 if($845){var $tsize_03141_i=$ssize_1_i;label=197;break;}else{var $tsize_244_i=$ssize_1_i;var $tbase_245_i=$br_0_i;label=201;break;}
 case 191: 
 var $br_030_i;
 var $ssize_129_i;
 var $846=(((-$ssize_129_i))|0);
 var $847=($br_030_i|0)!=-1;
 var $848=($ssize_129_i>>>0)<2147483647;
 var $or_cond5_i=$847&$848;
 var $849=($767>>>0)>($ssize_129_i>>>0);
 var $or_cond4_i=$or_cond5_i&$849;
 if($or_cond4_i){label=192;break;}else{var $ssize_2_i=$ssize_129_i;label=196;break;}
 case 192: 
 var $851=HEAP32[((9848)>>2)];
 var $852=((($769)-($ssize_129_i))|0);
 var $853=((($852)+($851))|0);
 var $854=(((-$851))|0);
 var $855=$853&$854;
 var $856=($855>>>0)<2147483647;
 if($856){label=193;break;}else{var $ssize_2_i=$ssize_129_i;label=196;break;}
 case 193: 
 var $858=_sbrk($855);
 var $859=($858|0)==-1;
 if($859){label=195;break;}else{label=194;break;}
 case 194: 
 var $861=((($855)+($ssize_129_i))|0);
 var $ssize_2_i=$861;label=196;break;
 case 195: 
 var $862=_sbrk($846);
 var $tsize_03141_i=0;label=197;break;
 case 196: 
 var $ssize_2_i;
 var $864=($br_030_i|0)==-1;
 if($864){var $tsize_03141_i=0;label=197;break;}else{var $tsize_244_i=$ssize_2_i;var $tbase_245_i=$br_030_i;label=201;break;}
 case 197: 
 var $tsize_03141_i;
 var $865=HEAP32[((10340)>>2)];
 var $866=$865|4;
 HEAP32[((10340)>>2)]=$866;
 var $tsize_1_i=$tsize_03141_i;label=198;break;
 case 198: 
 var $tsize_1_i;
 var $868=($772>>>0)<2147483647;
 if($868){label=199;break;}else{label=340;break;}
 case 199: 
 var $870=_sbrk($772);
 var $871=_sbrk(0);
 var $872=($870|0)!=-1;
 var $873=($871|0)!=-1;
 var $or_cond3_i=$872&$873;
 var $874=($870>>>0)<($871>>>0);
 var $or_cond6_i=$or_cond3_i&$874;
 if($or_cond6_i){label=200;break;}else{label=340;break;}
 case 200: 
 var $876=$871;
 var $877=$870;
 var $878=((($876)-($877))|0);
 var $879=((($nb_0)+(40))|0);
 var $880=($878>>>0)>($879>>>0);
 var $_tsize_1_i=($880?$878:$tsize_1_i);
 if($880){var $tsize_244_i=$_tsize_1_i;var $tbase_245_i=$870;label=201;break;}else{label=340;break;}
 case 201: 
 var $tbase_245_i;
 var $tsize_244_i;
 var $881=HEAP32[((10328)>>2)];
 var $882=((($881)+($tsize_244_i))|0);
 HEAP32[((10328)>>2)]=$882;
 var $883=HEAP32[((10332)>>2)];
 var $884=($882>>>0)>($883>>>0);
 if($884){label=202;break;}else{label=203;break;}
 case 202: 
 HEAP32[((10332)>>2)]=$882;
 label=203;break;
 case 203: 
 var $887=HEAP32[((9920)>>2)];
 var $888=($887|0)==0;
 if($888){label=204;break;}else{var $sp_073_i=10344;label=211;break;}
 case 204: 
 var $890=HEAP32[((9912)>>2)];
 var $891=($890|0)==0;
 var $892=($tbase_245_i>>>0)<($890>>>0);
 var $or_cond8_i=$891|$892;
 if($or_cond8_i){label=205;break;}else{label=206;break;}
 case 205: 
 HEAP32[((9912)>>2)]=$tbase_245_i;
 label=206;break;
 case 206: 
 HEAP32[((10344)>>2)]=$tbase_245_i;
 HEAP32[((10348)>>2)]=$tsize_244_i;
 HEAP32[((10356)>>2)]=0;
 var $895=HEAP32[((9840)>>2)];
 HEAP32[((9932)>>2)]=$895;
 HEAP32[((9928)>>2)]=-1;
 var $i_02_i_i=0;label=207;break;
 case 207: 
 var $i_02_i_i;
 var $897=$i_02_i_i<<1;
 var $898=((9936+($897<<2))|0);
 var $899=$898;
 var $_sum_i_i=((($897)+(3))|0);
 var $900=((9936+($_sum_i_i<<2))|0);
 HEAP32[(($900)>>2)]=$899;
 var $_sum1_i_i=((($897)+(2))|0);
 var $901=((9936+($_sum1_i_i<<2))|0);
 HEAP32[(($901)>>2)]=$899;
 var $902=((($i_02_i_i)+(1))|0);
 var $903=($902>>>0)<32;
 if($903){var $i_02_i_i=$902;label=207;break;}else{label=208;break;}
 case 208: 
 var $904=((($tsize_244_i)-(40))|0);
 var $905=(($tbase_245_i+8)|0);
 var $906=$905;
 var $907=$906&7;
 var $908=($907|0)==0;
 if($908){var $912=0;label=210;break;}else{label=209;break;}
 case 209: 
 var $910=(((-$906))|0);
 var $911=$910&7;
 var $912=$911;label=210;break;
 case 210: 
 var $912;
 var $913=(($tbase_245_i+$912)|0);
 var $914=$913;
 var $915=((($904)-($912))|0);
 HEAP32[((9920)>>2)]=$914;
 HEAP32[((9908)>>2)]=$915;
 var $916=$915|1;
 var $_sum_i12_i=((($912)+(4))|0);
 var $917=(($tbase_245_i+$_sum_i12_i)|0);
 var $918=$917;
 HEAP32[(($918)>>2)]=$916;
 var $_sum2_i_i=((($tsize_244_i)-(36))|0);
 var $919=(($tbase_245_i+$_sum2_i_i)|0);
 var $920=$919;
 HEAP32[(($920)>>2)]=40;
 var $921=HEAP32[((9856)>>2)];
 HEAP32[((9924)>>2)]=$921;
 label=338;break;
 case 211: 
 var $sp_073_i;
 var $922=(($sp_073_i)|0);
 var $923=HEAP32[(($922)>>2)];
 var $924=(($sp_073_i+4)|0);
 var $925=HEAP32[(($924)>>2)];
 var $926=(($923+$925)|0);
 var $927=($tbase_245_i|0)==($926|0);
 if($927){label=213;break;}else{label=212;break;}
 case 212: 
 var $929=(($sp_073_i+8)|0);
 var $930=HEAP32[(($929)>>2)];
 var $931=($930|0)==0;
 if($931){label=218;break;}else{var $sp_073_i=$930;label=211;break;}
 case 213: 
 var $932=(($sp_073_i+12)|0);
 var $933=HEAP32[(($932)>>2)];
 var $934=$933&8;
 var $935=($934|0)==0;
 if($935){label=214;break;}else{label=218;break;}
 case 214: 
 var $937=$887;
 var $938=($937>>>0)>=($923>>>0);
 var $939=($937>>>0)<($tbase_245_i>>>0);
 var $or_cond47_i=$938&$939;
 if($or_cond47_i){label=215;break;}else{label=218;break;}
 case 215: 
 var $941=((($925)+($tsize_244_i))|0);
 HEAP32[(($924)>>2)]=$941;
 var $942=HEAP32[((9908)>>2)];
 var $943=((($942)+($tsize_244_i))|0);
 var $944=(($887+8)|0);
 var $945=$944;
 var $946=$945&7;
 var $947=($946|0)==0;
 if($947){var $951=0;label=217;break;}else{label=216;break;}
 case 216: 
 var $949=(((-$945))|0);
 var $950=$949&7;
 var $951=$950;label=217;break;
 case 217: 
 var $951;
 var $952=(($937+$951)|0);
 var $953=$952;
 var $954=((($943)-($951))|0);
 HEAP32[((9920)>>2)]=$953;
 HEAP32[((9908)>>2)]=$954;
 var $955=$954|1;
 var $_sum_i16_i=((($951)+(4))|0);
 var $956=(($937+$_sum_i16_i)|0);
 var $957=$956;
 HEAP32[(($957)>>2)]=$955;
 var $_sum2_i17_i=((($943)+(4))|0);
 var $958=(($937+$_sum2_i17_i)|0);
 var $959=$958;
 HEAP32[(($959)>>2)]=40;
 var $960=HEAP32[((9856)>>2)];
 HEAP32[((9924)>>2)]=$960;
 label=338;break;
 case 218: 
 var $961=HEAP32[((9912)>>2)];
 var $962=($tbase_245_i>>>0)<($961>>>0);
 if($962){label=219;break;}else{var $964=$961;label=220;break;}
 case 219: 
 HEAP32[((9912)>>2)]=$tbase_245_i;
 var $964=$tbase_245_i;label=220;break;
 case 220: 
 var $964;
 var $965=(($tbase_245_i+$tsize_244_i)|0);
 var $sp_166_i=10344;label=221;break;
 case 221: 
 var $sp_166_i;
 var $967=(($sp_166_i)|0);
 var $968=HEAP32[(($967)>>2)];
 var $969=($968|0)==($965|0);
 if($969){label=223;break;}else{label=222;break;}
 case 222: 
 var $971=(($sp_166_i+8)|0);
 var $972=HEAP32[(($971)>>2)];
 var $973=($972|0)==0;
 if($973){label=304;break;}else{var $sp_166_i=$972;label=221;break;}
 case 223: 
 var $974=(($sp_166_i+12)|0);
 var $975=HEAP32[(($974)>>2)];
 var $976=$975&8;
 var $977=($976|0)==0;
 if($977){label=224;break;}else{label=304;break;}
 case 224: 
 HEAP32[(($967)>>2)]=$tbase_245_i;
 var $979=(($sp_166_i+4)|0);
 var $980=HEAP32[(($979)>>2)];
 var $981=((($980)+($tsize_244_i))|0);
 HEAP32[(($979)>>2)]=$981;
 var $982=(($tbase_245_i+8)|0);
 var $983=$982;
 var $984=$983&7;
 var $985=($984|0)==0;
 if($985){var $990=0;label=226;break;}else{label=225;break;}
 case 225: 
 var $987=(((-$983))|0);
 var $988=$987&7;
 var $990=$988;label=226;break;
 case 226: 
 var $990;
 var $991=(($tbase_245_i+$990)|0);
 var $_sum102_i=((($tsize_244_i)+(8))|0);
 var $992=(($tbase_245_i+$_sum102_i)|0);
 var $993=$992;
 var $994=$993&7;
 var $995=($994|0)==0;
 if($995){var $1000=0;label=228;break;}else{label=227;break;}
 case 227: 
 var $997=(((-$993))|0);
 var $998=$997&7;
 var $1000=$998;label=228;break;
 case 228: 
 var $1000;
 var $_sum103_i=((($1000)+($tsize_244_i))|0);
 var $1001=(($tbase_245_i+$_sum103_i)|0);
 var $1002=$1001;
 var $1003=$1001;
 var $1004=$991;
 var $1005=((($1003)-($1004))|0);
 var $_sum_i19_i=((($990)+($nb_0))|0);
 var $1006=(($tbase_245_i+$_sum_i19_i)|0);
 var $1007=$1006;
 var $1008=((($1005)-($nb_0))|0);
 var $1009=$nb_0|3;
 var $_sum1_i20_i=((($990)+(4))|0);
 var $1010=(($tbase_245_i+$_sum1_i20_i)|0);
 var $1011=$1010;
 HEAP32[(($1011)>>2)]=$1009;
 var $1012=($1002|0)==($887|0);
 if($1012){label=229;break;}else{label=230;break;}
 case 229: 
 var $1014=HEAP32[((9908)>>2)];
 var $1015=((($1014)+($1008))|0);
 HEAP32[((9908)>>2)]=$1015;
 HEAP32[((9920)>>2)]=$1007;
 var $1016=$1015|1;
 var $_sum46_i_i=((($_sum_i19_i)+(4))|0);
 var $1017=(($tbase_245_i+$_sum46_i_i)|0);
 var $1018=$1017;
 HEAP32[(($1018)>>2)]=$1016;
 label=303;break;
 case 230: 
 var $1020=HEAP32[((9916)>>2)];
 var $1021=($1002|0)==($1020|0);
 if($1021){label=231;break;}else{label=232;break;}
 case 231: 
 var $1023=HEAP32[((9904)>>2)];
 var $1024=((($1023)+($1008))|0);
 HEAP32[((9904)>>2)]=$1024;
 HEAP32[((9916)>>2)]=$1007;
 var $1025=$1024|1;
 var $_sum44_i_i=((($_sum_i19_i)+(4))|0);
 var $1026=(($tbase_245_i+$_sum44_i_i)|0);
 var $1027=$1026;
 HEAP32[(($1027)>>2)]=$1025;
 var $_sum45_i_i=((($1024)+($_sum_i19_i))|0);
 var $1028=(($tbase_245_i+$_sum45_i_i)|0);
 var $1029=$1028;
 HEAP32[(($1029)>>2)]=$1024;
 label=303;break;
 case 232: 
 var $_sum2_i21_i=((($tsize_244_i)+(4))|0);
 var $_sum104_i=((($_sum2_i21_i)+($1000))|0);
 var $1031=(($tbase_245_i+$_sum104_i)|0);
 var $1032=$1031;
 var $1033=HEAP32[(($1032)>>2)];
 var $1034=$1033&3;
 var $1035=($1034|0)==1;
 if($1035){label=233;break;}else{var $oldfirst_0_i_i=$1002;var $qsize_0_i_i=$1008;label=280;break;}
 case 233: 
 var $1037=$1033&-8;
 var $1038=$1033>>>3;
 var $1039=($1033>>>0)<256;
 if($1039){label=234;break;}else{label=246;break;}
 case 234: 
 var $_sum3940_i_i=$1000|8;
 var $_sum114_i=((($_sum3940_i_i)+($tsize_244_i))|0);
 var $1041=(($tbase_245_i+$_sum114_i)|0);
 var $1042=$1041;
 var $1043=HEAP32[(($1042)>>2)];
 var $_sum41_i_i=((($tsize_244_i)+(12))|0);
 var $_sum115_i=((($_sum41_i_i)+($1000))|0);
 var $1044=(($tbase_245_i+$_sum115_i)|0);
 var $1045=$1044;
 var $1046=HEAP32[(($1045)>>2)];
 var $1047=$1038<<1;
 var $1048=((9936+($1047<<2))|0);
 var $1049=$1048;
 var $1050=($1043|0)==($1049|0);
 if($1050){label=237;break;}else{label=235;break;}
 case 235: 
 var $1052=$1043;
 var $1053=($1052>>>0)<($964>>>0);
 if($1053){label=245;break;}else{label=236;break;}
 case 236: 
 var $1055=(($1043+12)|0);
 var $1056=HEAP32[(($1055)>>2)];
 var $1057=($1056|0)==($1002|0);
 if($1057){label=237;break;}else{label=245;break;}
 case 237: 
 var $1058=($1046|0)==($1043|0);
 if($1058){label=238;break;}else{label=239;break;}
 case 238: 
 var $1060=1<<$1038;
 var $1061=$1060^-1;
 var $1062=HEAP32[((9896)>>2)];
 var $1063=$1062&$1061;
 HEAP32[((9896)>>2)]=$1063;
 label=279;break;
 case 239: 
 var $1065=($1046|0)==($1049|0);
 if($1065){label=240;break;}else{label=241;break;}
 case 240: 
 var $_pre62_i_i=(($1046+8)|0);
 var $_pre_phi63_i_i=$_pre62_i_i;label=243;break;
 case 241: 
 var $1067=$1046;
 var $1068=($1067>>>0)<($964>>>0);
 if($1068){label=244;break;}else{label=242;break;}
 case 242: 
 var $1070=(($1046+8)|0);
 var $1071=HEAP32[(($1070)>>2)];
 var $1072=($1071|0)==($1002|0);
 if($1072){var $_pre_phi63_i_i=$1070;label=243;break;}else{label=244;break;}
 case 243: 
 var $_pre_phi63_i_i;
 var $1073=(($1043+12)|0);
 HEAP32[(($1073)>>2)]=$1046;
 HEAP32[(($_pre_phi63_i_i)>>2)]=$1043;
 label=279;break;
 case 244: 
 _abort();
 throw "Reached an unreachable!";
 case 245: 
 _abort();
 throw "Reached an unreachable!";
 case 246: 
 var $1075=$1001;
 var $_sum34_i_i=$1000|24;
 var $_sum105_i=((($_sum34_i_i)+($tsize_244_i))|0);
 var $1076=(($tbase_245_i+$_sum105_i)|0);
 var $1077=$1076;
 var $1078=HEAP32[(($1077)>>2)];
 var $_sum5_i_i=((($tsize_244_i)+(12))|0);
 var $_sum106_i=((($_sum5_i_i)+($1000))|0);
 var $1079=(($tbase_245_i+$_sum106_i)|0);
 var $1080=$1079;
 var $1081=HEAP32[(($1080)>>2)];
 var $1082=($1081|0)==($1075|0);
 if($1082){label=252;break;}else{label=247;break;}
 case 247: 
 var $_sum3637_i_i=$1000|8;
 var $_sum107_i=((($_sum3637_i_i)+($tsize_244_i))|0);
 var $1084=(($tbase_245_i+$_sum107_i)|0);
 var $1085=$1084;
 var $1086=HEAP32[(($1085)>>2)];
 var $1087=$1086;
 var $1088=($1087>>>0)<($964>>>0);
 if($1088){label=251;break;}else{label=248;break;}
 case 248: 
 var $1090=(($1086+12)|0);
 var $1091=HEAP32[(($1090)>>2)];
 var $1092=($1091|0)==($1075|0);
 if($1092){label=249;break;}else{label=251;break;}
 case 249: 
 var $1094=(($1081+8)|0);
 var $1095=HEAP32[(($1094)>>2)];
 var $1096=($1095|0)==($1075|0);
 if($1096){label=250;break;}else{label=251;break;}
 case 250: 
 HEAP32[(($1090)>>2)]=$1081;
 HEAP32[(($1094)>>2)]=$1086;
 var $R_1_i_i=$1081;label=259;break;
 case 251: 
 _abort();
 throw "Reached an unreachable!";
 case 252: 
 var $_sum67_i_i=$1000|16;
 var $_sum112_i=((($_sum2_i21_i)+($_sum67_i_i))|0);
 var $1099=(($tbase_245_i+$_sum112_i)|0);
 var $1100=$1099;
 var $1101=HEAP32[(($1100)>>2)];
 var $1102=($1101|0)==0;
 if($1102){label=253;break;}else{var $R_0_i_i=$1101;var $RP_0_i_i=$1100;label=254;break;}
 case 253: 
 var $_sum113_i=((($_sum67_i_i)+($tsize_244_i))|0);
 var $1104=(($tbase_245_i+$_sum113_i)|0);
 var $1105=$1104;
 var $1106=HEAP32[(($1105)>>2)];
 var $1107=($1106|0)==0;
 if($1107){var $R_1_i_i=0;label=259;break;}else{var $R_0_i_i=$1106;var $RP_0_i_i=$1105;label=254;break;}
 case 254: 
 var $RP_0_i_i;
 var $R_0_i_i;
 var $1108=(($R_0_i_i+20)|0);
 var $1109=HEAP32[(($1108)>>2)];
 var $1110=($1109|0)==0;
 if($1110){label=255;break;}else{var $R_0_i_i=$1109;var $RP_0_i_i=$1108;label=254;break;}
 case 255: 
 var $1112=(($R_0_i_i+16)|0);
 var $1113=HEAP32[(($1112)>>2)];
 var $1114=($1113|0)==0;
 if($1114){label=256;break;}else{var $R_0_i_i=$1113;var $RP_0_i_i=$1112;label=254;break;}
 case 256: 
 var $1116=$RP_0_i_i;
 var $1117=($1116>>>0)<($964>>>0);
 if($1117){label=258;break;}else{label=257;break;}
 case 257: 
 HEAP32[(($RP_0_i_i)>>2)]=0;
 var $R_1_i_i=$R_0_i_i;label=259;break;
 case 258: 
 _abort();
 throw "Reached an unreachable!";
 case 259: 
 var $R_1_i_i;
 var $1121=($1078|0)==0;
 if($1121){label=279;break;}else{label=260;break;}
 case 260: 
 var $_sum31_i_i=((($tsize_244_i)+(28))|0);
 var $_sum108_i=((($_sum31_i_i)+($1000))|0);
 var $1123=(($tbase_245_i+$_sum108_i)|0);
 var $1124=$1123;
 var $1125=HEAP32[(($1124)>>2)];
 var $1126=((10200+($1125<<2))|0);
 var $1127=HEAP32[(($1126)>>2)];
 var $1128=($1075|0)==($1127|0);
 if($1128){label=261;break;}else{label=263;break;}
 case 261: 
 HEAP32[(($1126)>>2)]=$R_1_i_i;
 var $cond_i_i=($R_1_i_i|0)==0;
 if($cond_i_i){label=262;break;}else{label=269;break;}
 case 262: 
 var $1130=1<<$1125;
 var $1131=$1130^-1;
 var $1132=HEAP32[((9900)>>2)];
 var $1133=$1132&$1131;
 HEAP32[((9900)>>2)]=$1133;
 label=279;break;
 case 263: 
 var $1135=$1078;
 var $1136=HEAP32[((9912)>>2)];
 var $1137=($1135>>>0)<($1136>>>0);
 if($1137){label=267;break;}else{label=264;break;}
 case 264: 
 var $1139=(($1078+16)|0);
 var $1140=HEAP32[(($1139)>>2)];
 var $1141=($1140|0)==($1075|0);
 if($1141){label=265;break;}else{label=266;break;}
 case 265: 
 HEAP32[(($1139)>>2)]=$R_1_i_i;
 label=268;break;
 case 266: 
 var $1144=(($1078+20)|0);
 HEAP32[(($1144)>>2)]=$R_1_i_i;
 label=268;break;
 case 267: 
 _abort();
 throw "Reached an unreachable!";
 case 268: 
 var $1147=($R_1_i_i|0)==0;
 if($1147){label=279;break;}else{label=269;break;}
 case 269: 
 var $1149=$R_1_i_i;
 var $1150=HEAP32[((9912)>>2)];
 var $1151=($1149>>>0)<($1150>>>0);
 if($1151){label=278;break;}else{label=270;break;}
 case 270: 
 var $1153=(($R_1_i_i+24)|0);
 HEAP32[(($1153)>>2)]=$1078;
 var $_sum3233_i_i=$1000|16;
 var $_sum109_i=((($_sum3233_i_i)+($tsize_244_i))|0);
 var $1154=(($tbase_245_i+$_sum109_i)|0);
 var $1155=$1154;
 var $1156=HEAP32[(($1155)>>2)];
 var $1157=($1156|0)==0;
 if($1157){label=274;break;}else{label=271;break;}
 case 271: 
 var $1159=$1156;
 var $1160=($1159>>>0)<($1150>>>0);
 if($1160){label=273;break;}else{label=272;break;}
 case 272: 
 var $1162=(($R_1_i_i+16)|0);
 HEAP32[(($1162)>>2)]=$1156;
 var $1163=(($1156+24)|0);
 HEAP32[(($1163)>>2)]=$R_1_i_i;
 label=274;break;
 case 273: 
 _abort();
 throw "Reached an unreachable!";
 case 274: 
 var $_sum110_i=((($_sum2_i21_i)+($_sum3233_i_i))|0);
 var $1166=(($tbase_245_i+$_sum110_i)|0);
 var $1167=$1166;
 var $1168=HEAP32[(($1167)>>2)];
 var $1169=($1168|0)==0;
 if($1169){label=279;break;}else{label=275;break;}
 case 275: 
 var $1171=$1168;
 var $1172=HEAP32[((9912)>>2)];
 var $1173=($1171>>>0)<($1172>>>0);
 if($1173){label=277;break;}else{label=276;break;}
 case 276: 
 var $1175=(($R_1_i_i+20)|0);
 HEAP32[(($1175)>>2)]=$1168;
 var $1176=(($1168+24)|0);
 HEAP32[(($1176)>>2)]=$R_1_i_i;
 label=279;break;
 case 277: 
 _abort();
 throw "Reached an unreachable!";
 case 278: 
 _abort();
 throw "Reached an unreachable!";
 case 279: 
 var $_sum9_i_i=$1037|$1000;
 var $_sum111_i=((($_sum9_i_i)+($tsize_244_i))|0);
 var $1180=(($tbase_245_i+$_sum111_i)|0);
 var $1181=$1180;
 var $1182=((($1037)+($1008))|0);
 var $oldfirst_0_i_i=$1181;var $qsize_0_i_i=$1182;label=280;break;
 case 280: 
 var $qsize_0_i_i;
 var $oldfirst_0_i_i;
 var $1184=(($oldfirst_0_i_i+4)|0);
 var $1185=HEAP32[(($1184)>>2)];
 var $1186=$1185&-2;
 HEAP32[(($1184)>>2)]=$1186;
 var $1187=$qsize_0_i_i|1;
 var $_sum10_i_i=((($_sum_i19_i)+(4))|0);
 var $1188=(($tbase_245_i+$_sum10_i_i)|0);
 var $1189=$1188;
 HEAP32[(($1189)>>2)]=$1187;
 var $_sum11_i_i=((($qsize_0_i_i)+($_sum_i19_i))|0);
 var $1190=(($tbase_245_i+$_sum11_i_i)|0);
 var $1191=$1190;
 HEAP32[(($1191)>>2)]=$qsize_0_i_i;
 var $1192=$qsize_0_i_i>>>3;
 var $1193=($qsize_0_i_i>>>0)<256;
 if($1193){label=281;break;}else{label=286;break;}
 case 281: 
 var $1195=$1192<<1;
 var $1196=((9936+($1195<<2))|0);
 var $1197=$1196;
 var $1198=HEAP32[((9896)>>2)];
 var $1199=1<<$1192;
 var $1200=$1198&$1199;
 var $1201=($1200|0)==0;
 if($1201){label=282;break;}else{label=283;break;}
 case 282: 
 var $1203=$1198|$1199;
 HEAP32[((9896)>>2)]=$1203;
 var $_sum27_pre_i_i=((($1195)+(2))|0);
 var $_pre_i22_i=((9936+($_sum27_pre_i_i<<2))|0);
 var $F4_0_i_i=$1197;var $_pre_phi_i23_i=$_pre_i22_i;label=285;break;
 case 283: 
 var $_sum30_i_i=((($1195)+(2))|0);
 var $1205=((9936+($_sum30_i_i<<2))|0);
 var $1206=HEAP32[(($1205)>>2)];
 var $1207=$1206;
 var $1208=HEAP32[((9912)>>2)];
 var $1209=($1207>>>0)<($1208>>>0);
 if($1209){label=284;break;}else{var $F4_0_i_i=$1206;var $_pre_phi_i23_i=$1205;label=285;break;}
 case 284: 
 _abort();
 throw "Reached an unreachable!";
 case 285: 
 var $_pre_phi_i23_i;
 var $F4_0_i_i;
 HEAP32[(($_pre_phi_i23_i)>>2)]=$1007;
 var $1212=(($F4_0_i_i+12)|0);
 HEAP32[(($1212)>>2)]=$1007;
 var $_sum28_i_i=((($_sum_i19_i)+(8))|0);
 var $1213=(($tbase_245_i+$_sum28_i_i)|0);
 var $1214=$1213;
 HEAP32[(($1214)>>2)]=$F4_0_i_i;
 var $_sum29_i_i=((($_sum_i19_i)+(12))|0);
 var $1215=(($tbase_245_i+$_sum29_i_i)|0);
 var $1216=$1215;
 HEAP32[(($1216)>>2)]=$1197;
 label=303;break;
 case 286: 
 var $1218=$1006;
 var $1219=$qsize_0_i_i>>>8;
 var $1220=($1219|0)==0;
 if($1220){var $I7_0_i_i=0;label=289;break;}else{label=287;break;}
 case 287: 
 var $1222=($qsize_0_i_i>>>0)>16777215;
 if($1222){var $I7_0_i_i=31;label=289;break;}else{label=288;break;}
 case 288: 
 var $1224=((($1219)+(1048320))|0);
 var $1225=$1224>>>16;
 var $1226=$1225&8;
 var $1227=$1219<<$1226;
 var $1228=((($1227)+(520192))|0);
 var $1229=$1228>>>16;
 var $1230=$1229&4;
 var $1231=$1230|$1226;
 var $1232=$1227<<$1230;
 var $1233=((($1232)+(245760))|0);
 var $1234=$1233>>>16;
 var $1235=$1234&2;
 var $1236=$1231|$1235;
 var $1237=(((14)-($1236))|0);
 var $1238=$1232<<$1235;
 var $1239=$1238>>>15;
 var $1240=((($1237)+($1239))|0);
 var $1241=$1240<<1;
 var $1242=((($1240)+(7))|0);
 var $1243=$qsize_0_i_i>>>($1242>>>0);
 var $1244=$1243&1;
 var $1245=$1244|$1241;
 var $I7_0_i_i=$1245;label=289;break;
 case 289: 
 var $I7_0_i_i;
 var $1247=((10200+($I7_0_i_i<<2))|0);
 var $_sum12_i24_i=((($_sum_i19_i)+(28))|0);
 var $1248=(($tbase_245_i+$_sum12_i24_i)|0);
 var $1249=$1248;
 HEAP32[(($1249)>>2)]=$I7_0_i_i;
 var $_sum13_i_i=((($_sum_i19_i)+(16))|0);
 var $1250=(($tbase_245_i+$_sum13_i_i)|0);
 var $_sum14_i_i=((($_sum_i19_i)+(20))|0);
 var $1251=(($tbase_245_i+$_sum14_i_i)|0);
 var $1252=$1251;
 HEAP32[(($1252)>>2)]=0;
 var $1253=$1250;
 HEAP32[(($1253)>>2)]=0;
 var $1254=HEAP32[((9900)>>2)];
 var $1255=1<<$I7_0_i_i;
 var $1256=$1254&$1255;
 var $1257=($1256|0)==0;
 if($1257){label=290;break;}else{label=291;break;}
 case 290: 
 var $1259=$1254|$1255;
 HEAP32[((9900)>>2)]=$1259;
 HEAP32[(($1247)>>2)]=$1218;
 var $1260=$1247;
 var $_sum15_i_i=((($_sum_i19_i)+(24))|0);
 var $1261=(($tbase_245_i+$_sum15_i_i)|0);
 var $1262=$1261;
 HEAP32[(($1262)>>2)]=$1260;
 var $_sum16_i_i=((($_sum_i19_i)+(12))|0);
 var $1263=(($tbase_245_i+$_sum16_i_i)|0);
 var $1264=$1263;
 HEAP32[(($1264)>>2)]=$1218;
 var $_sum17_i_i=((($_sum_i19_i)+(8))|0);
 var $1265=(($tbase_245_i+$_sum17_i_i)|0);
 var $1266=$1265;
 HEAP32[(($1266)>>2)]=$1218;
 label=303;break;
 case 291: 
 var $1268=HEAP32[(($1247)>>2)];
 var $1269=($I7_0_i_i|0)==31;
 if($1269){var $1274=0;label=293;break;}else{label=292;break;}
 case 292: 
 var $1271=$I7_0_i_i>>>1;
 var $1272=(((25)-($1271))|0);
 var $1274=$1272;label=293;break;
 case 293: 
 var $1274;
 var $1275=(($1268+4)|0);
 var $1276=HEAP32[(($1275)>>2)];
 var $1277=$1276&-8;
 var $1278=($1277|0)==($qsize_0_i_i|0);
 if($1278){var $T_0_lcssa_i26_i=$1268;label=300;break;}else{label=294;break;}
 case 294: 
 var $1279=$qsize_0_i_i<<$1274;
 var $T_056_i_i=$1268;var $K8_057_i_i=$1279;label=296;break;
 case 295: 
 var $1281=$K8_057_i_i<<1;
 var $1282=(($1289+4)|0);
 var $1283=HEAP32[(($1282)>>2)];
 var $1284=$1283&-8;
 var $1285=($1284|0)==($qsize_0_i_i|0);
 if($1285){var $T_0_lcssa_i26_i=$1289;label=300;break;}else{var $T_056_i_i=$1289;var $K8_057_i_i=$1281;label=296;break;}
 case 296: 
 var $K8_057_i_i;
 var $T_056_i_i;
 var $1287=$K8_057_i_i>>>31;
 var $1288=(($T_056_i_i+16+($1287<<2))|0);
 var $1289=HEAP32[(($1288)>>2)];
 var $1290=($1289|0)==0;
 if($1290){label=297;break;}else{label=295;break;}
 case 297: 
 var $1292=$1288;
 var $1293=HEAP32[((9912)>>2)];
 var $1294=($1292>>>0)<($1293>>>0);
 if($1294){label=299;break;}else{label=298;break;}
 case 298: 
 HEAP32[(($1288)>>2)]=$1218;
 var $_sum24_i_i=((($_sum_i19_i)+(24))|0);
 var $1296=(($tbase_245_i+$_sum24_i_i)|0);
 var $1297=$1296;
 HEAP32[(($1297)>>2)]=$T_056_i_i;
 var $_sum25_i_i=((($_sum_i19_i)+(12))|0);
 var $1298=(($tbase_245_i+$_sum25_i_i)|0);
 var $1299=$1298;
 HEAP32[(($1299)>>2)]=$1218;
 var $_sum26_i_i=((($_sum_i19_i)+(8))|0);
 var $1300=(($tbase_245_i+$_sum26_i_i)|0);
 var $1301=$1300;
 HEAP32[(($1301)>>2)]=$1218;
 label=303;break;
 case 299: 
 _abort();
 throw "Reached an unreachable!";
 case 300: 
 var $T_0_lcssa_i26_i;
 var $1303=(($T_0_lcssa_i26_i+8)|0);
 var $1304=HEAP32[(($1303)>>2)];
 var $1305=$T_0_lcssa_i26_i;
 var $1306=HEAP32[((9912)>>2)];
 var $1307=($1305>>>0)>=($1306>>>0);
 var $1308=$1304;
 var $1309=($1308>>>0)>=($1306>>>0);
 var $or_cond_i27_i=$1307&$1309;
 if($or_cond_i27_i){label=301;break;}else{label=302;break;}
 case 301: 
 var $1311=(($1304+12)|0);
 HEAP32[(($1311)>>2)]=$1218;
 HEAP32[(($1303)>>2)]=$1218;
 var $_sum21_i_i=((($_sum_i19_i)+(8))|0);
 var $1312=(($tbase_245_i+$_sum21_i_i)|0);
 var $1313=$1312;
 HEAP32[(($1313)>>2)]=$1304;
 var $_sum22_i_i=((($_sum_i19_i)+(12))|0);
 var $1314=(($tbase_245_i+$_sum22_i_i)|0);
 var $1315=$1314;
 HEAP32[(($1315)>>2)]=$T_0_lcssa_i26_i;
 var $_sum23_i_i=((($_sum_i19_i)+(24))|0);
 var $1316=(($tbase_245_i+$_sum23_i_i)|0);
 var $1317=$1316;
 HEAP32[(($1317)>>2)]=0;
 label=303;break;
 case 302: 
 _abort();
 throw "Reached an unreachable!";
 case 303: 
 var $_sum1819_i_i=$990|8;
 var $1318=(($tbase_245_i+$_sum1819_i_i)|0);
 var $mem_0=$1318;label=341;break;
 case 304: 
 var $1319=$887;
 var $sp_0_i_i_i=10344;label=305;break;
 case 305: 
 var $sp_0_i_i_i;
 var $1321=(($sp_0_i_i_i)|0);
 var $1322=HEAP32[(($1321)>>2)];
 var $1323=($1322>>>0)>($1319>>>0);
 if($1323){label=307;break;}else{label=306;break;}
 case 306: 
 var $1325=(($sp_0_i_i_i+4)|0);
 var $1326=HEAP32[(($1325)>>2)];
 var $1327=(($1322+$1326)|0);
 var $1328=($1327>>>0)>($1319>>>0);
 if($1328){label=308;break;}else{label=307;break;}
 case 307: 
 var $1330=(($sp_0_i_i_i+8)|0);
 var $1331=HEAP32[(($1330)>>2)];
 var $sp_0_i_i_i=$1331;label=305;break;
 case 308: 
 var $_sum_i13_i=((($1326)-(47))|0);
 var $_sum1_i14_i=((($1326)-(39))|0);
 var $1332=(($1322+$_sum1_i14_i)|0);
 var $1333=$1332;
 var $1334=$1333&7;
 var $1335=($1334|0)==0;
 if($1335){var $1340=0;label=310;break;}else{label=309;break;}
 case 309: 
 var $1337=(((-$1333))|0);
 var $1338=$1337&7;
 var $1340=$1338;label=310;break;
 case 310: 
 var $1340;
 var $_sum2_i15_i=((($_sum_i13_i)+($1340))|0);
 var $1341=(($1322+$_sum2_i15_i)|0);
 var $1342=(($887+16)|0);
 var $1343=$1342;
 var $1344=($1341>>>0)<($1343>>>0);
 var $1345=($1344?$1319:$1341);
 var $1346=(($1345+8)|0);
 var $1347=$1346;
 var $1348=((($tsize_244_i)-(40))|0);
 var $1349=(($tbase_245_i+8)|0);
 var $1350=$1349;
 var $1351=$1350&7;
 var $1352=($1351|0)==0;
 if($1352){var $1356=0;label=312;break;}else{label=311;break;}
 case 311: 
 var $1354=(((-$1350))|0);
 var $1355=$1354&7;
 var $1356=$1355;label=312;break;
 case 312: 
 var $1356;
 var $1357=(($tbase_245_i+$1356)|0);
 var $1358=$1357;
 var $1359=((($1348)-($1356))|0);
 HEAP32[((9920)>>2)]=$1358;
 HEAP32[((9908)>>2)]=$1359;
 var $1360=$1359|1;
 var $_sum_i_i_i=((($1356)+(4))|0);
 var $1361=(($tbase_245_i+$_sum_i_i_i)|0);
 var $1362=$1361;
 HEAP32[(($1362)>>2)]=$1360;
 var $_sum2_i_i_i=((($tsize_244_i)-(36))|0);
 var $1363=(($tbase_245_i+$_sum2_i_i_i)|0);
 var $1364=$1363;
 HEAP32[(($1364)>>2)]=40;
 var $1365=HEAP32[((9856)>>2)];
 HEAP32[((9924)>>2)]=$1365;
 var $1366=(($1345+4)|0);
 var $1367=$1366;
 HEAP32[(($1367)>>2)]=27;
 assert(16 % 1 === 0);HEAP32[(($1346)>>2)]=HEAP32[((10344)>>2)];HEAP32[((($1346)+(4))>>2)]=HEAP32[((10348)>>2)];HEAP32[((($1346)+(8))>>2)]=HEAP32[((10352)>>2)];HEAP32[((($1346)+(12))>>2)]=HEAP32[((10356)>>2)];
 HEAP32[((10344)>>2)]=$tbase_245_i;
 HEAP32[((10348)>>2)]=$tsize_244_i;
 HEAP32[((10356)>>2)]=0;
 HEAP32[((10352)>>2)]=$1347;
 var $1368=(($1345+28)|0);
 var $1369=$1368;
 HEAP32[(($1369)>>2)]=7;
 var $1370=(($1345+32)|0);
 var $1371=($1370>>>0)<($1327>>>0);
 if($1371){var $1372=$1369;label=313;break;}else{label=314;break;}
 case 313: 
 var $1372;
 var $1373=(($1372+4)|0);
 HEAP32[(($1373)>>2)]=7;
 var $1374=(($1372+8)|0);
 var $1375=$1374;
 var $1376=($1375>>>0)<($1327>>>0);
 if($1376){var $1372=$1373;label=313;break;}else{label=314;break;}
 case 314: 
 var $1377=($1345|0)==($1319|0);
 if($1377){label=338;break;}else{label=315;break;}
 case 315: 
 var $1379=$1345;
 var $1380=$887;
 var $1381=((($1379)-($1380))|0);
 var $1382=(($1319+$1381)|0);
 var $_sum3_i_i=((($1381)+(4))|0);
 var $1383=(($1319+$_sum3_i_i)|0);
 var $1384=$1383;
 var $1385=HEAP32[(($1384)>>2)];
 var $1386=$1385&-2;
 HEAP32[(($1384)>>2)]=$1386;
 var $1387=$1381|1;
 var $1388=(($887+4)|0);
 HEAP32[(($1388)>>2)]=$1387;
 var $1389=$1382;
 HEAP32[(($1389)>>2)]=$1381;
 var $1390=$1381>>>3;
 var $1391=($1381>>>0)<256;
 if($1391){label=316;break;}else{label=321;break;}
 case 316: 
 var $1393=$1390<<1;
 var $1394=((9936+($1393<<2))|0);
 var $1395=$1394;
 var $1396=HEAP32[((9896)>>2)];
 var $1397=1<<$1390;
 var $1398=$1396&$1397;
 var $1399=($1398|0)==0;
 if($1399){label=317;break;}else{label=318;break;}
 case 317: 
 var $1401=$1396|$1397;
 HEAP32[((9896)>>2)]=$1401;
 var $_sum11_pre_i_i=((($1393)+(2))|0);
 var $_pre_i_i=((9936+($_sum11_pre_i_i<<2))|0);
 var $F_0_i_i=$1395;var $_pre_phi_i_i=$_pre_i_i;label=320;break;
 case 318: 
 var $_sum12_i_i=((($1393)+(2))|0);
 var $1403=((9936+($_sum12_i_i<<2))|0);
 var $1404=HEAP32[(($1403)>>2)];
 var $1405=$1404;
 var $1406=HEAP32[((9912)>>2)];
 var $1407=($1405>>>0)<($1406>>>0);
 if($1407){label=319;break;}else{var $F_0_i_i=$1404;var $_pre_phi_i_i=$1403;label=320;break;}
 case 319: 
 _abort();
 throw "Reached an unreachable!";
 case 320: 
 var $_pre_phi_i_i;
 var $F_0_i_i;
 HEAP32[(($_pre_phi_i_i)>>2)]=$887;
 var $1410=(($F_0_i_i+12)|0);
 HEAP32[(($1410)>>2)]=$887;
 var $1411=(($887+8)|0);
 HEAP32[(($1411)>>2)]=$F_0_i_i;
 var $1412=(($887+12)|0);
 HEAP32[(($1412)>>2)]=$1395;
 label=338;break;
 case 321: 
 var $1414=$887;
 var $1415=$1381>>>8;
 var $1416=($1415|0)==0;
 if($1416){var $I1_0_i_i=0;label=324;break;}else{label=322;break;}
 case 322: 
 var $1418=($1381>>>0)>16777215;
 if($1418){var $I1_0_i_i=31;label=324;break;}else{label=323;break;}
 case 323: 
 var $1420=((($1415)+(1048320))|0);
 var $1421=$1420>>>16;
 var $1422=$1421&8;
 var $1423=$1415<<$1422;
 var $1424=((($1423)+(520192))|0);
 var $1425=$1424>>>16;
 var $1426=$1425&4;
 var $1427=$1426|$1422;
 var $1428=$1423<<$1426;
 var $1429=((($1428)+(245760))|0);
 var $1430=$1429>>>16;
 var $1431=$1430&2;
 var $1432=$1427|$1431;
 var $1433=(((14)-($1432))|0);
 var $1434=$1428<<$1431;
 var $1435=$1434>>>15;
 var $1436=((($1433)+($1435))|0);
 var $1437=$1436<<1;
 var $1438=((($1436)+(7))|0);
 var $1439=$1381>>>($1438>>>0);
 var $1440=$1439&1;
 var $1441=$1440|$1437;
 var $I1_0_i_i=$1441;label=324;break;
 case 324: 
 var $I1_0_i_i;
 var $1443=((10200+($I1_0_i_i<<2))|0);
 var $1444=(($887+28)|0);
 var $I1_0_c_i_i=$I1_0_i_i;
 HEAP32[(($1444)>>2)]=$I1_0_c_i_i;
 var $1445=(($887+20)|0);
 HEAP32[(($1445)>>2)]=0;
 var $1446=(($887+16)|0);
 HEAP32[(($1446)>>2)]=0;
 var $1447=HEAP32[((9900)>>2)];
 var $1448=1<<$I1_0_i_i;
 var $1449=$1447&$1448;
 var $1450=($1449|0)==0;
 if($1450){label=325;break;}else{label=326;break;}
 case 325: 
 var $1452=$1447|$1448;
 HEAP32[((9900)>>2)]=$1452;
 HEAP32[(($1443)>>2)]=$1414;
 var $1453=(($887+24)|0);
 var $_c_i_i=$1443;
 HEAP32[(($1453)>>2)]=$_c_i_i;
 var $1454=(($887+12)|0);
 HEAP32[(($1454)>>2)]=$887;
 var $1455=(($887+8)|0);
 HEAP32[(($1455)>>2)]=$887;
 label=338;break;
 case 326: 
 var $1457=HEAP32[(($1443)>>2)];
 var $1458=($I1_0_i_i|0)==31;
 if($1458){var $1463=0;label=328;break;}else{label=327;break;}
 case 327: 
 var $1460=$I1_0_i_i>>>1;
 var $1461=(((25)-($1460))|0);
 var $1463=$1461;label=328;break;
 case 328: 
 var $1463;
 var $1464=(($1457+4)|0);
 var $1465=HEAP32[(($1464)>>2)];
 var $1466=$1465&-8;
 var $1467=($1466|0)==($1381|0);
 if($1467){var $T_0_lcssa_i_i=$1457;label=335;break;}else{label=329;break;}
 case 329: 
 var $1468=$1381<<$1463;
 var $T_015_i_i=$1457;var $K2_016_i_i=$1468;label=331;break;
 case 330: 
 var $1470=$K2_016_i_i<<1;
 var $1471=(($1478+4)|0);
 var $1472=HEAP32[(($1471)>>2)];
 var $1473=$1472&-8;
 var $1474=($1473|0)==($1381|0);
 if($1474){var $T_0_lcssa_i_i=$1478;label=335;break;}else{var $T_015_i_i=$1478;var $K2_016_i_i=$1470;label=331;break;}
 case 331: 
 var $K2_016_i_i;
 var $T_015_i_i;
 var $1476=$K2_016_i_i>>>31;
 var $1477=(($T_015_i_i+16+($1476<<2))|0);
 var $1478=HEAP32[(($1477)>>2)];
 var $1479=($1478|0)==0;
 if($1479){label=332;break;}else{label=330;break;}
 case 332: 
 var $1481=$1477;
 var $1482=HEAP32[((9912)>>2)];
 var $1483=($1481>>>0)<($1482>>>0);
 if($1483){label=334;break;}else{label=333;break;}
 case 333: 
 HEAP32[(($1477)>>2)]=$1414;
 var $1485=(($887+24)|0);
 var $T_0_c8_i_i=$T_015_i_i;
 HEAP32[(($1485)>>2)]=$T_0_c8_i_i;
 var $1486=(($887+12)|0);
 HEAP32[(($1486)>>2)]=$887;
 var $1487=(($887+8)|0);
 HEAP32[(($1487)>>2)]=$887;
 label=338;break;
 case 334: 
 _abort();
 throw "Reached an unreachable!";
 case 335: 
 var $T_0_lcssa_i_i;
 var $1489=(($T_0_lcssa_i_i+8)|0);
 var $1490=HEAP32[(($1489)>>2)];
 var $1491=$T_0_lcssa_i_i;
 var $1492=HEAP32[((9912)>>2)];
 var $1493=($1491>>>0)>=($1492>>>0);
 var $1494=$1490;
 var $1495=($1494>>>0)>=($1492>>>0);
 var $or_cond_i_i=$1493&$1495;
 if($or_cond_i_i){label=336;break;}else{label=337;break;}
 case 336: 
 var $1497=(($1490+12)|0);
 HEAP32[(($1497)>>2)]=$1414;
 HEAP32[(($1489)>>2)]=$1414;
 var $1498=(($887+8)|0);
 var $_c7_i_i=$1490;
 HEAP32[(($1498)>>2)]=$_c7_i_i;
 var $1499=(($887+12)|0);
 var $T_0_c_i_i=$T_0_lcssa_i_i;
 HEAP32[(($1499)>>2)]=$T_0_c_i_i;
 var $1500=(($887+24)|0);
 HEAP32[(($1500)>>2)]=0;
 label=338;break;
 case 337: 
 _abort();
 throw "Reached an unreachable!";
 case 338: 
 var $1501=HEAP32[((9908)>>2)];
 var $1502=($1501>>>0)>($nb_0>>>0);
 if($1502){label=339;break;}else{label=340;break;}
 case 339: 
 var $1504=((($1501)-($nb_0))|0);
 HEAP32[((9908)>>2)]=$1504;
 var $1505=HEAP32[((9920)>>2)];
 var $1506=$1505;
 var $1507=(($1506+$nb_0)|0);
 var $1508=$1507;
 HEAP32[((9920)>>2)]=$1508;
 var $1509=$1504|1;
 var $_sum_i34=((($nb_0)+(4))|0);
 var $1510=(($1506+$_sum_i34)|0);
 var $1511=$1510;
 HEAP32[(($1511)>>2)]=$1509;
 var $1512=$nb_0|3;
 var $1513=(($1505+4)|0);
 HEAP32[(($1513)>>2)]=$1512;
 var $1514=(($1505+8)|0);
 var $1515=$1514;
 var $mem_0=$1515;label=341;break;
 case 340: 
 var $1516=___errno_location();
 HEAP32[(($1516)>>2)]=12;
 var $mem_0=0;label=341;break;
 case 341: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }

}
Module["_malloc"] = _malloc;

function _free($mem){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($mem|0)==0;
 if($1){label=140;break;}else{label=2;break;}
 case 2: 
 var $3=((($mem)-(8))|0);
 var $4=$3;
 var $5=HEAP32[((9912)>>2)];
 var $6=($3>>>0)<($5>>>0);
 if($6){label=139;break;}else{label=3;break;}
 case 3: 
 var $8=((($mem)-(4))|0);
 var $9=$8;
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&3;
 var $12=($11|0)==1;
 if($12){label=139;break;}else{label=4;break;}
 case 4: 
 var $14=$10&-8;
 var $_sum=((($14)-(8))|0);
 var $15=(($mem+$_sum)|0);
 var $16=$15;
 var $17=$10&1;
 var $18=($17|0)==0;
 if($18){label=5;break;}else{var $p_0=$4;var $psize_0=$14;label=56;break;}
 case 5: 
 var $20=$3;
 var $21=HEAP32[(($20)>>2)];
 var $22=($11|0)==0;
 if($22){label=140;break;}else{label=6;break;}
 case 6: 
 var $_sum3=(((-8)-($21))|0);
 var $24=(($mem+$_sum3)|0);
 var $25=$24;
 var $26=((($21)+($14))|0);
 var $27=($24>>>0)<($5>>>0);
 if($27){label=139;break;}else{label=7;break;}
 case 7: 
 var $29=HEAP32[((9916)>>2)];
 var $30=($25|0)==($29|0);
 if($30){label=54;break;}else{label=8;break;}
 case 8: 
 var $32=$21>>>3;
 var $33=($21>>>0)<256;
 if($33){label=9;break;}else{label=21;break;}
 case 9: 
 var $_sum47=((($_sum3)+(8))|0);
 var $35=(($mem+$_sum47)|0);
 var $36=$35;
 var $37=HEAP32[(($36)>>2)];
 var $_sum48=((($_sum3)+(12))|0);
 var $38=(($mem+$_sum48)|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $41=$32<<1;
 var $42=((9936+($41<<2))|0);
 var $43=$42;
 var $44=($37|0)==($43|0);
 if($44){label=12;break;}else{label=10;break;}
 case 10: 
 var $46=$37;
 var $47=($46>>>0)<($5>>>0);
 if($47){label=20;break;}else{label=11;break;}
 case 11: 
 var $49=(($37+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($50|0)==($25|0);
 if($51){label=12;break;}else{label=20;break;}
 case 12: 
 var $52=($40|0)==($37|0);
 if($52){label=13;break;}else{label=14;break;}
 case 13: 
 var $54=1<<$32;
 var $55=$54^-1;
 var $56=HEAP32[((9896)>>2)];
 var $57=$56&$55;
 HEAP32[((9896)>>2)]=$57;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 14: 
 var $59=($40|0)==($43|0);
 if($59){label=15;break;}else{label=16;break;}
 case 15: 
 var $_pre82=(($40+8)|0);
 var $_pre_phi83=$_pre82;label=18;break;
 case 16: 
 var $61=$40;
 var $62=($61>>>0)<($5>>>0);
 if($62){label=19;break;}else{label=17;break;}
 case 17: 
 var $64=(($40+8)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($65|0)==($25|0);
 if($66){var $_pre_phi83=$64;label=18;break;}else{label=19;break;}
 case 18: 
 var $_pre_phi83;
 var $67=(($37+12)|0);
 HEAP32[(($67)>>2)]=$40;
 HEAP32[(($_pre_phi83)>>2)]=$37;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 _abort();
 throw "Reached an unreachable!";
 case 21: 
 var $69=$24;
 var $_sum37=((($_sum3)+(24))|0);
 var $70=(($mem+$_sum37)|0);
 var $71=$70;
 var $72=HEAP32[(($71)>>2)];
 var $_sum38=((($_sum3)+(12))|0);
 var $73=(($mem+$_sum38)|0);
 var $74=$73;
 var $75=HEAP32[(($74)>>2)];
 var $76=($75|0)==($69|0);
 if($76){label=27;break;}else{label=22;break;}
 case 22: 
 var $_sum44=((($_sum3)+(8))|0);
 var $78=(($mem+$_sum44)|0);
 var $79=$78;
 var $80=HEAP32[(($79)>>2)];
 var $81=$80;
 var $82=($81>>>0)<($5>>>0);
 if($82){label=26;break;}else{label=23;break;}
 case 23: 
 var $84=(($80+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($85|0)==($69|0);
 if($86){label=24;break;}else{label=26;break;}
 case 24: 
 var $88=(($75+8)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($89|0)==($69|0);
 if($90){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP32[(($84)>>2)]=$75;
 HEAP32[(($88)>>2)]=$80;
 var $R_1=$75;label=34;break;
 case 26: 
 _abort();
 throw "Reached an unreachable!";
 case 27: 
 var $_sum40=((($_sum3)+(20))|0);
 var $93=(($mem+$_sum40)|0);
 var $94=$93;
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==0;
 if($96){label=28;break;}else{var $R_0=$95;var $RP_0=$94;label=29;break;}
 case 28: 
 var $_sum39=((($_sum3)+(16))|0);
 var $98=(($mem+$_sum39)|0);
 var $99=$98;
 var $100=HEAP32[(($99)>>2)];
 var $101=($100|0)==0;
 if($101){var $R_1=0;label=34;break;}else{var $R_0=$100;var $RP_0=$99;label=29;break;}
 case 29: 
 var $RP_0;
 var $R_0;
 var $102=(($R_0+20)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)==0;
 if($104){label=30;break;}else{var $R_0=$103;var $RP_0=$102;label=29;break;}
 case 30: 
 var $106=(($R_0+16)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=($107|0)==0;
 if($108){label=31;break;}else{var $R_0=$107;var $RP_0=$106;label=29;break;}
 case 31: 
 var $110=$RP_0;
 var $111=($110>>>0)<($5>>>0);
 if($111){label=33;break;}else{label=32;break;}
 case 32: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=34;break;
 case 33: 
 _abort();
 throw "Reached an unreachable!";
 case 34: 
 var $R_1;
 var $115=($72|0)==0;
 if($115){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=35;break;}
 case 35: 
 var $_sum41=((($_sum3)+(28))|0);
 var $117=(($mem+$_sum41)|0);
 var $118=$117;
 var $119=HEAP32[(($118)>>2)];
 var $120=((10200+($119<<2))|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($69|0)==($121|0);
 if($122){label=36;break;}else{label=38;break;}
 case 36: 
 HEAP32[(($120)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=37;break;}else{label=44;break;}
 case 37: 
 var $124=1<<$119;
 var $125=$124^-1;
 var $126=HEAP32[((9900)>>2)];
 var $127=$126&$125;
 HEAP32[((9900)>>2)]=$127;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 38: 
 var $129=$72;
 var $130=HEAP32[((9912)>>2)];
 var $131=($129>>>0)<($130>>>0);
 if($131){label=42;break;}else{label=39;break;}
 case 39: 
 var $133=(($72+16)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=($134|0)==($69|0);
 if($135){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP32[(($133)>>2)]=$R_1;
 label=43;break;
 case 41: 
 var $138=(($72+20)|0);
 HEAP32[(($138)>>2)]=$R_1;
 label=43;break;
 case 42: 
 _abort();
 throw "Reached an unreachable!";
 case 43: 
 var $141=($R_1|0)==0;
 if($141){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=44;break;}
 case 44: 
 var $143=$R_1;
 var $144=HEAP32[((9912)>>2)];
 var $145=($143>>>0)<($144>>>0);
 if($145){label=53;break;}else{label=45;break;}
 case 45: 
 var $147=(($R_1+24)|0);
 HEAP32[(($147)>>2)]=$72;
 var $_sum42=((($_sum3)+(16))|0);
 var $148=(($mem+$_sum42)|0);
 var $149=$148;
 var $150=HEAP32[(($149)>>2)];
 var $151=($150|0)==0;
 if($151){label=49;break;}else{label=46;break;}
 case 46: 
 var $153=$150;
 var $154=($153>>>0)<($144>>>0);
 if($154){label=48;break;}else{label=47;break;}
 case 47: 
 var $156=(($R_1+16)|0);
 HEAP32[(($156)>>2)]=$150;
 var $157=(($150+24)|0);
 HEAP32[(($157)>>2)]=$R_1;
 label=49;break;
 case 48: 
 _abort();
 throw "Reached an unreachable!";
 case 49: 
 var $_sum43=((($_sum3)+(20))|0);
 var $160=(($mem+$_sum43)|0);
 var $161=$160;
 var $162=HEAP32[(($161)>>2)];
 var $163=($162|0)==0;
 if($163){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=50;break;}
 case 50: 
 var $165=$162;
 var $166=HEAP32[((9912)>>2)];
 var $167=($165>>>0)<($166>>>0);
 if($167){label=52;break;}else{label=51;break;}
 case 51: 
 var $169=(($R_1+20)|0);
 HEAP32[(($169)>>2)]=$162;
 var $170=(($162+24)|0);
 HEAP32[(($170)>>2)]=$R_1;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 52: 
 _abort();
 throw "Reached an unreachable!";
 case 53: 
 _abort();
 throw "Reached an unreachable!";
 case 54: 
 var $_sum4=((($14)-(4))|0);
 var $174=(($mem+$_sum4)|0);
 var $175=$174;
 var $176=HEAP32[(($175)>>2)];
 var $177=$176&3;
 var $178=($177|0)==3;
 if($178){label=55;break;}else{var $p_0=$25;var $psize_0=$26;label=56;break;}
 case 55: 
 HEAP32[((9904)>>2)]=$26;
 var $180=$176&-2;
 HEAP32[(($175)>>2)]=$180;
 var $181=$26|1;
 var $_sum35=((($_sum3)+(4))|0);
 var $182=(($mem+$_sum35)|0);
 var $183=$182;
 HEAP32[(($183)>>2)]=$181;
 var $184=$15;
 HEAP32[(($184)>>2)]=$26;
 label=140;break;
 case 56: 
 var $psize_0;
 var $p_0;
 var $186=$p_0;
 var $187=($186>>>0)<($15>>>0);
 if($187){label=57;break;}else{label=139;break;}
 case 57: 
 var $_sum34=((($14)-(4))|0);
 var $189=(($mem+$_sum34)|0);
 var $190=$189;
 var $191=HEAP32[(($190)>>2)];
 var $192=$191&1;
 var $phitmp=($192|0)==0;
 if($phitmp){label=139;break;}else{label=58;break;}
 case 58: 
 var $194=$191&2;
 var $195=($194|0)==0;
 if($195){label=59;break;}else{label=112;break;}
 case 59: 
 var $197=HEAP32[((9920)>>2)];
 var $198=($16|0)==($197|0);
 if($198){label=60;break;}else{label=62;break;}
 case 60: 
 var $200=HEAP32[((9908)>>2)];
 var $201=((($200)+($psize_0))|0);
 HEAP32[((9908)>>2)]=$201;
 HEAP32[((9920)>>2)]=$p_0;
 var $202=$201|1;
 var $203=(($p_0+4)|0);
 HEAP32[(($203)>>2)]=$202;
 var $204=HEAP32[((9916)>>2)];
 var $205=($p_0|0)==($204|0);
 if($205){label=61;break;}else{label=140;break;}
 case 61: 
 HEAP32[((9916)>>2)]=0;
 HEAP32[((9904)>>2)]=0;
 label=140;break;
 case 62: 
 var $208=HEAP32[((9916)>>2)];
 var $209=($16|0)==($208|0);
 if($209){label=63;break;}else{label=64;break;}
 case 63: 
 var $211=HEAP32[((9904)>>2)];
 var $212=((($211)+($psize_0))|0);
 HEAP32[((9904)>>2)]=$212;
 HEAP32[((9916)>>2)]=$p_0;
 var $213=$212|1;
 var $214=(($p_0+4)|0);
 HEAP32[(($214)>>2)]=$213;
 var $215=(($186+$212)|0);
 var $216=$215;
 HEAP32[(($216)>>2)]=$212;
 label=140;break;
 case 64: 
 var $218=$191&-8;
 var $219=((($218)+($psize_0))|0);
 var $220=$191>>>3;
 var $221=($191>>>0)<256;
 if($221){label=65;break;}else{label=77;break;}
 case 65: 
 var $223=(($mem+$14)|0);
 var $224=$223;
 var $225=HEAP32[(($224)>>2)];
 var $_sum2829=$14|4;
 var $226=(($mem+$_sum2829)|0);
 var $227=$226;
 var $228=HEAP32[(($227)>>2)];
 var $229=$220<<1;
 var $230=((9936+($229<<2))|0);
 var $231=$230;
 var $232=($225|0)==($231|0);
 if($232){label=68;break;}else{label=66;break;}
 case 66: 
 var $234=$225;
 var $235=HEAP32[((9912)>>2)];
 var $236=($234>>>0)<($235>>>0);
 if($236){label=76;break;}else{label=67;break;}
 case 67: 
 var $238=(($225+12)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=($239|0)==($16|0);
 if($240){label=68;break;}else{label=76;break;}
 case 68: 
 var $241=($228|0)==($225|0);
 if($241){label=69;break;}else{label=70;break;}
 case 69: 
 var $243=1<<$220;
 var $244=$243^-1;
 var $245=HEAP32[((9896)>>2)];
 var $246=$245&$244;
 HEAP32[((9896)>>2)]=$246;
 label=110;break;
 case 70: 
 var $248=($228|0)==($231|0);
 if($248){label=71;break;}else{label=72;break;}
 case 71: 
 var $_pre80=(($228+8)|0);
 var $_pre_phi81=$_pre80;label=74;break;
 case 72: 
 var $250=$228;
 var $251=HEAP32[((9912)>>2)];
 var $252=($250>>>0)<($251>>>0);
 if($252){label=75;break;}else{label=73;break;}
 case 73: 
 var $254=(($228+8)|0);
 var $255=HEAP32[(($254)>>2)];
 var $256=($255|0)==($16|0);
 if($256){var $_pre_phi81=$254;label=74;break;}else{label=75;break;}
 case 74: 
 var $_pre_phi81;
 var $257=(($225+12)|0);
 HEAP32[(($257)>>2)]=$228;
 HEAP32[(($_pre_phi81)>>2)]=$225;
 label=110;break;
 case 75: 
 _abort();
 throw "Reached an unreachable!";
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $259=$15;
 var $_sum6=((($14)+(16))|0);
 var $260=(($mem+$_sum6)|0);
 var $261=$260;
 var $262=HEAP32[(($261)>>2)];
 var $_sum78=$14|4;
 var $263=(($mem+$_sum78)|0);
 var $264=$263;
 var $265=HEAP32[(($264)>>2)];
 var $266=($265|0)==($259|0);
 if($266){label=83;break;}else{label=78;break;}
 case 78: 
 var $268=(($mem+$14)|0);
 var $269=$268;
 var $270=HEAP32[(($269)>>2)];
 var $271=$270;
 var $272=HEAP32[((9912)>>2)];
 var $273=($271>>>0)<($272>>>0);
 if($273){label=82;break;}else{label=79;break;}
 case 79: 
 var $275=(($270+12)|0);
 var $276=HEAP32[(($275)>>2)];
 var $277=($276|0)==($259|0);
 if($277){label=80;break;}else{label=82;break;}
 case 80: 
 var $279=(($265+8)|0);
 var $280=HEAP32[(($279)>>2)];
 var $281=($280|0)==($259|0);
 if($281){label=81;break;}else{label=82;break;}
 case 81: 
 HEAP32[(($275)>>2)]=$265;
 HEAP32[(($279)>>2)]=$270;
 var $R7_1=$265;label=90;break;
 case 82: 
 _abort();
 throw "Reached an unreachable!";
 case 83: 
 var $_sum10=((($14)+(12))|0);
 var $284=(($mem+$_sum10)|0);
 var $285=$284;
 var $286=HEAP32[(($285)>>2)];
 var $287=($286|0)==0;
 if($287){label=84;break;}else{var $R7_0=$286;var $RP9_0=$285;label=85;break;}
 case 84: 
 var $_sum9=((($14)+(8))|0);
 var $289=(($mem+$_sum9)|0);
 var $290=$289;
 var $291=HEAP32[(($290)>>2)];
 var $292=($291|0)==0;
 if($292){var $R7_1=0;label=90;break;}else{var $R7_0=$291;var $RP9_0=$290;label=85;break;}
 case 85: 
 var $RP9_0;
 var $R7_0;
 var $293=(($R7_0+20)|0);
 var $294=HEAP32[(($293)>>2)];
 var $295=($294|0)==0;
 if($295){label=86;break;}else{var $R7_0=$294;var $RP9_0=$293;label=85;break;}
 case 86: 
 var $297=(($R7_0+16)|0);
 var $298=HEAP32[(($297)>>2)];
 var $299=($298|0)==0;
 if($299){label=87;break;}else{var $R7_0=$298;var $RP9_0=$297;label=85;break;}
 case 87: 
 var $301=$RP9_0;
 var $302=HEAP32[((9912)>>2)];
 var $303=($301>>>0)<($302>>>0);
 if($303){label=89;break;}else{label=88;break;}
 case 88: 
 HEAP32[(($RP9_0)>>2)]=0;
 var $R7_1=$R7_0;label=90;break;
 case 89: 
 _abort();
 throw "Reached an unreachable!";
 case 90: 
 var $R7_1;
 var $307=($262|0)==0;
 if($307){label=110;break;}else{label=91;break;}
 case 91: 
 var $_sum21=((($14)+(20))|0);
 var $309=(($mem+$_sum21)|0);
 var $310=$309;
 var $311=HEAP32[(($310)>>2)];
 var $312=((10200+($311<<2))|0);
 var $313=HEAP32[(($312)>>2)];
 var $314=($259|0)==($313|0);
 if($314){label=92;break;}else{label=94;break;}
 case 92: 
 HEAP32[(($312)>>2)]=$R7_1;
 var $cond69=($R7_1|0)==0;
 if($cond69){label=93;break;}else{label=100;break;}
 case 93: 
 var $316=1<<$311;
 var $317=$316^-1;
 var $318=HEAP32[((9900)>>2)];
 var $319=$318&$317;
 HEAP32[((9900)>>2)]=$319;
 label=110;break;
 case 94: 
 var $321=$262;
 var $322=HEAP32[((9912)>>2)];
 var $323=($321>>>0)<($322>>>0);
 if($323){label=98;break;}else{label=95;break;}
 case 95: 
 var $325=(($262+16)|0);
 var $326=HEAP32[(($325)>>2)];
 var $327=($326|0)==($259|0);
 if($327){label=96;break;}else{label=97;break;}
 case 96: 
 HEAP32[(($325)>>2)]=$R7_1;
 label=99;break;
 case 97: 
 var $330=(($262+20)|0);
 HEAP32[(($330)>>2)]=$R7_1;
 label=99;break;
 case 98: 
 _abort();
 throw "Reached an unreachable!";
 case 99: 
 var $333=($R7_1|0)==0;
 if($333){label=110;break;}else{label=100;break;}
 case 100: 
 var $335=$R7_1;
 var $336=HEAP32[((9912)>>2)];
 var $337=($335>>>0)<($336>>>0);
 if($337){label=109;break;}else{label=101;break;}
 case 101: 
 var $339=(($R7_1+24)|0);
 HEAP32[(($339)>>2)]=$262;
 var $_sum22=((($14)+(8))|0);
 var $340=(($mem+$_sum22)|0);
 var $341=$340;
 var $342=HEAP32[(($341)>>2)];
 var $343=($342|0)==0;
 if($343){label=105;break;}else{label=102;break;}
 case 102: 
 var $345=$342;
 var $346=($345>>>0)<($336>>>0);
 if($346){label=104;break;}else{label=103;break;}
 case 103: 
 var $348=(($R7_1+16)|0);
 HEAP32[(($348)>>2)]=$342;
 var $349=(($342+24)|0);
 HEAP32[(($349)>>2)]=$R7_1;
 label=105;break;
 case 104: 
 _abort();
 throw "Reached an unreachable!";
 case 105: 
 var $_sum23=((($14)+(12))|0);
 var $352=(($mem+$_sum23)|0);
 var $353=$352;
 var $354=HEAP32[(($353)>>2)];
 var $355=($354|0)==0;
 if($355){label=110;break;}else{label=106;break;}
 case 106: 
 var $357=$354;
 var $358=HEAP32[((9912)>>2)];
 var $359=($357>>>0)<($358>>>0);
 if($359){label=108;break;}else{label=107;break;}
 case 107: 
 var $361=(($R7_1+20)|0);
 HEAP32[(($361)>>2)]=$354;
 var $362=(($354+24)|0);
 HEAP32[(($362)>>2)]=$R7_1;
 label=110;break;
 case 108: 
 _abort();
 throw "Reached an unreachable!";
 case 109: 
 _abort();
 throw "Reached an unreachable!";
 case 110: 
 var $366=$219|1;
 var $367=(($p_0+4)|0);
 HEAP32[(($367)>>2)]=$366;
 var $368=(($186+$219)|0);
 var $369=$368;
 HEAP32[(($369)>>2)]=$219;
 var $370=HEAP32[((9916)>>2)];
 var $371=($p_0|0)==($370|0);
 if($371){label=111;break;}else{var $psize_1=$219;label=113;break;}
 case 111: 
 HEAP32[((9904)>>2)]=$219;
 label=140;break;
 case 112: 
 var $374=$191&-2;
 HEAP32[(($190)>>2)]=$374;
 var $375=$psize_0|1;
 var $376=(($p_0+4)|0);
 HEAP32[(($376)>>2)]=$375;
 var $377=(($186+$psize_0)|0);
 var $378=$377;
 HEAP32[(($378)>>2)]=$psize_0;
 var $psize_1=$psize_0;label=113;break;
 case 113: 
 var $psize_1;
 var $380=$psize_1>>>3;
 var $381=($psize_1>>>0)<256;
 if($381){label=114;break;}else{label=119;break;}
 case 114: 
 var $383=$380<<1;
 var $384=((9936+($383<<2))|0);
 var $385=$384;
 var $386=HEAP32[((9896)>>2)];
 var $387=1<<$380;
 var $388=$386&$387;
 var $389=($388|0)==0;
 if($389){label=115;break;}else{label=116;break;}
 case 115: 
 var $391=$386|$387;
 HEAP32[((9896)>>2)]=$391;
 var $_sum19_pre=((($383)+(2))|0);
 var $_pre=((9936+($_sum19_pre<<2))|0);
 var $F16_0=$385;var $_pre_phi=$_pre;label=118;break;
 case 116: 
 var $_sum20=((($383)+(2))|0);
 var $393=((9936+($_sum20<<2))|0);
 var $394=HEAP32[(($393)>>2)];
 var $395=$394;
 var $396=HEAP32[((9912)>>2)];
 var $397=($395>>>0)<($396>>>0);
 if($397){label=117;break;}else{var $F16_0=$394;var $_pre_phi=$393;label=118;break;}
 case 117: 
 _abort();
 throw "Reached an unreachable!";
 case 118: 
 var $_pre_phi;
 var $F16_0;
 HEAP32[(($_pre_phi)>>2)]=$p_0;
 var $400=(($F16_0+12)|0);
 HEAP32[(($400)>>2)]=$p_0;
 var $401=(($p_0+8)|0);
 HEAP32[(($401)>>2)]=$F16_0;
 var $402=(($p_0+12)|0);
 HEAP32[(($402)>>2)]=$385;
 label=140;break;
 case 119: 
 var $404=$p_0;
 var $405=$psize_1>>>8;
 var $406=($405|0)==0;
 if($406){var $I18_0=0;label=122;break;}else{label=120;break;}
 case 120: 
 var $408=($psize_1>>>0)>16777215;
 if($408){var $I18_0=31;label=122;break;}else{label=121;break;}
 case 121: 
 var $410=((($405)+(1048320))|0);
 var $411=$410>>>16;
 var $412=$411&8;
 var $413=$405<<$412;
 var $414=((($413)+(520192))|0);
 var $415=$414>>>16;
 var $416=$415&4;
 var $417=$416|$412;
 var $418=$413<<$416;
 var $419=((($418)+(245760))|0);
 var $420=$419>>>16;
 var $421=$420&2;
 var $422=$417|$421;
 var $423=(((14)-($422))|0);
 var $424=$418<<$421;
 var $425=$424>>>15;
 var $426=((($423)+($425))|0);
 var $427=$426<<1;
 var $428=((($426)+(7))|0);
 var $429=$psize_1>>>($428>>>0);
 var $430=$429&1;
 var $431=$430|$427;
 var $I18_0=$431;label=122;break;
 case 122: 
 var $I18_0;
 var $433=((10200+($I18_0<<2))|0);
 var $434=(($p_0+28)|0);
 var $I18_0_c=$I18_0;
 HEAP32[(($434)>>2)]=$I18_0_c;
 var $435=(($p_0+20)|0);
 HEAP32[(($435)>>2)]=0;
 var $436=(($p_0+16)|0);
 HEAP32[(($436)>>2)]=0;
 var $437=HEAP32[((9900)>>2)];
 var $438=1<<$I18_0;
 var $439=$437&$438;
 var $440=($439|0)==0;
 if($440){label=123;break;}else{label=124;break;}
 case 123: 
 var $442=$437|$438;
 HEAP32[((9900)>>2)]=$442;
 HEAP32[(($433)>>2)]=$404;
 var $443=(($p_0+24)|0);
 var $_c=$433;
 HEAP32[(($443)>>2)]=$_c;
 var $444=(($p_0+12)|0);
 HEAP32[(($444)>>2)]=$p_0;
 var $445=(($p_0+8)|0);
 HEAP32[(($445)>>2)]=$p_0;
 label=136;break;
 case 124: 
 var $447=HEAP32[(($433)>>2)];
 var $448=($I18_0|0)==31;
 if($448){var $453=0;label=126;break;}else{label=125;break;}
 case 125: 
 var $450=$I18_0>>>1;
 var $451=(((25)-($450))|0);
 var $453=$451;label=126;break;
 case 126: 
 var $453;
 var $454=(($447+4)|0);
 var $455=HEAP32[(($454)>>2)];
 var $456=$455&-8;
 var $457=($456|0)==($psize_1|0);
 if($457){var $T_0_lcssa=$447;label=133;break;}else{label=127;break;}
 case 127: 
 var $458=$psize_1<<$453;
 var $T_072=$447;var $K19_073=$458;label=129;break;
 case 128: 
 var $460=$K19_073<<1;
 var $461=(($468+4)|0);
 var $462=HEAP32[(($461)>>2)];
 var $463=$462&-8;
 var $464=($463|0)==($psize_1|0);
 if($464){var $T_0_lcssa=$468;label=133;break;}else{var $T_072=$468;var $K19_073=$460;label=129;break;}
 case 129: 
 var $K19_073;
 var $T_072;
 var $466=$K19_073>>>31;
 var $467=(($T_072+16+($466<<2))|0);
 var $468=HEAP32[(($467)>>2)];
 var $469=($468|0)==0;
 if($469){label=130;break;}else{label=128;break;}
 case 130: 
 var $471=$467;
 var $472=HEAP32[((9912)>>2)];
 var $473=($471>>>0)<($472>>>0);
 if($473){label=132;break;}else{label=131;break;}
 case 131: 
 HEAP32[(($467)>>2)]=$404;
 var $475=(($p_0+24)|0);
 var $T_0_c16=$T_072;
 HEAP32[(($475)>>2)]=$T_0_c16;
 var $476=(($p_0+12)|0);
 HEAP32[(($476)>>2)]=$p_0;
 var $477=(($p_0+8)|0);
 HEAP32[(($477)>>2)]=$p_0;
 label=136;break;
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 var $T_0_lcssa;
 var $479=(($T_0_lcssa+8)|0);
 var $480=HEAP32[(($479)>>2)];
 var $481=$T_0_lcssa;
 var $482=HEAP32[((9912)>>2)];
 var $483=($481>>>0)>=($482>>>0);
 var $484=$480;
 var $485=($484>>>0)>=($482>>>0);
 var $or_cond=$483&$485;
 if($or_cond){label=134;break;}else{label=135;break;}
 case 134: 
 var $487=(($480+12)|0);
 HEAP32[(($487)>>2)]=$404;
 HEAP32[(($479)>>2)]=$404;
 var $488=(($p_0+8)|0);
 var $_c15=$480;
 HEAP32[(($488)>>2)]=$_c15;
 var $489=(($p_0+12)|0);
 var $T_0_c=$T_0_lcssa;
 HEAP32[(($489)>>2)]=$T_0_c;
 var $490=(($p_0+24)|0);
 HEAP32[(($490)>>2)]=0;
 label=136;break;
 case 135: 
 _abort();
 throw "Reached an unreachable!";
 case 136: 
 var $492=HEAP32[((9928)>>2)];
 var $493=((($492)-(1))|0);
 HEAP32[((9928)>>2)]=$493;
 var $494=($493|0)==0;
 if($494){var $sp_0_in_i=10352;label=137;break;}else{label=140;break;}
 case 137: 
 var $sp_0_in_i;
 var $sp_0_i=HEAP32[(($sp_0_in_i)>>2)];
 var $495=($sp_0_i|0)==0;
 var $496=(($sp_0_i+8)|0);
 if($495){label=138;break;}else{var $sp_0_in_i=$496;label=137;break;}
 case 138: 
 HEAP32[((9928)>>2)]=-1;
 label=140;break;
 case 139: 
 _abort();
 throw "Reached an unreachable!";
 case 140: 
 return;
  default: assert(0, "bad label: " + label);
 }

}
Module["_free"] = _free;

function _realloc($oldmem,$bytes){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($oldmem|0)==0;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 var $3=_malloc($bytes);
 var $mem_0=$3;label=11;break;
 case 3: 
 var $5=($bytes>>>0)>4294967231;
 if($5){label=4;break;}else{label=5;break;}
 case 4: 
 var $7=___errno_location();
 HEAP32[(($7)>>2)]=12;
 var $mem_0=0;label=11;break;
 case 5: 
 var $9=($bytes>>>0)<11;
 if($9){var $14=16;label=7;break;}else{label=6;break;}
 case 6: 
 var $11=((($bytes)+(11))|0);
 var $12=$11&-8;
 var $14=$12;label=7;break;
 case 7: 
 var $14;
 var $15=((($oldmem)-(8))|0);
 var $16=$15;
 var $17=_try_realloc_chunk($16,$14);
 var $18=($17|0)==0;
 if($18){label=9;break;}else{label=8;break;}
 case 8: 
 var $20=(($17+8)|0);
 var $21=$20;
 var $mem_0=$21;label=11;break;
 case 9: 
 var $23=_malloc($bytes);
 var $24=($23|0)==0;
 if($24){var $mem_0=0;label=11;break;}else{label=10;break;}
 case 10: 
 var $26=((($oldmem)-(4))|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $29=$28&-8;
 var $30=$28&3;
 var $31=($30|0)==0;
 var $32=($31?8:4);
 var $33=((($29)-($32))|0);
 var $34=($33>>>0)<($bytes>>>0);
 var $35=($34?$33:$bytes);
 assert($35 % 1 === 0);(_memcpy($23, $oldmem, $35)|0);
 _free($oldmem);
 var $mem_0=$23;label=11;break;
 case 11: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }

}
Module["_realloc"] = _realloc;

function __Znwj($size){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($size|0)==0;
 var $_size=($1?1:$size);
 label=2;break;
 case 2: 
 var $3=_malloc($_size);
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=10;break;}
 case 3: 
 var $6=(tempValue=HEAP32[((13920)>>2)],HEAP32[((13920)>>2)]=tempValue+0,tempValue);
 var $7=($6|0)==0;
 if($7){label=9;break;}else{label=4;break;}
 case 4: 
 var $9=$6;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$9]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 5: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=7;break;
 case 6: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=7;break;
 case 7: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $11=$lpad_phi$1;
 var $12=($11|0)<0;
 if($12){label=8;break;}else{label=11;break;}
 case 8: 
 var $14=$lpad_phi$0;
 ___cxa_call_unexpected($14);
 throw "Reached an unreachable!";
 case 9: 
 var $16=___cxa_allocate_exception(4);
 var $17=$16;
 HEAP32[(($17)>>2)]=2504;
 (function() { try { __THREW__ = 0; return ___cxa_throw($16,8184,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=6;break; }
 case 10: 
 return $3;
 case 11: 
 ___resumeException($lpad_phi$0)
 case 12: 
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __Znaj($size){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(function() { try { __THREW__ = 0; return __Znwj($size) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 return $1;
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1); var $4$1 = tempRet0;
 var $5=$4$1;
 var $6=($5|0)<0;
 if($6){label=4;break;}else{label=5;break;}
 case 4: 
 var $8=$4$0;
 ___cxa_call_unexpected($8);
 throw "Reached an unreachable!";
 case 5: 
 ___resumeException($4$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZdlPv($ptr){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($ptr|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 _free($ptr);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZdaPv($ptr){
 var label=0;


 __ZdlPv($ptr);
 return;
}


function __ZNSt9bad_allocD0Ev($this){
 var label=0;


 var $1=(($this)|0);

 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt9bad_allocD2Ev($this){
 var label=0;


 var $1=(($this)|0);

 return;
}


function __ZNKSt9bad_alloc4whatEv($this){
 var label=0;


 return 1048;
}


function __ZSt17__throw_bad_allocv(){
 var label=0;


 var $1=___cxa_allocate_exception(4);
 var $2=$1;
 HEAP32[(($2)>>2)]=2504;
 ___cxa_throw($1,8184,(68));
 throw "Reached an unreachable!";
}


function ___floatscan($f,$prec,$pok){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+512)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $x_i=sp;
 if(($prec|0)==1){ label=2;break;}else if(($prec|0)==2){ label=3;break;}else if(($prec|0)==0){ var $emin_0_ph=-149;var $bits_0_ph=24;label=4;break;}else{var $_0=0;label=267;break;}
 case 2: 
 var $emin_0_ph=-1074;var $bits_0_ph=53;label=4;break;
 case 3: 
 var $emin_0_ph=-1074;var $bits_0_ph=53;label=4;break;
 case 4: 
 var $bits_0_ph;
 var $emin_0_ph;
 var $3=(($f+4)|0);
 var $4=(($f+100)|0);
 label=5;break;
 case 5: 
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=6;break;}else{label=7;break;}
 case 6: 
 var $10=(($6+1)|0);
 HEAP32[(($3)>>2)]=$10;
 var $11=HEAP8[($6)];
 var $12=($11&255);
 var $16=$12;label=8;break;
 case 7: 
 var $14=___shgetc($f);
 var $16=$14;label=8;break;
 case 8: 
 var $16;
 var $17=_isspace($16);
 var $18=($17|0)==0;
 if($18){label=9;break;}else{label=5;break;}
 case 9: 
 var $20=($16|0)==45;
 if(($16|0)==45|($16|0)==43){ label=10;break;}else{var $c_0=$16;var $sign_0=1;label=13;break;}
 case 10: 
 var $22=($20&1);
 var $23=$22<<1;
 var $24=(((1)-($23))|0);
 var $25=HEAP32[(($3)>>2)];
 var $26=HEAP32[(($4)>>2)];
 var $27=($25>>>0)<($26>>>0);
 if($27){label=11;break;}else{label=12;break;}
 case 11: 
 var $29=(($25+1)|0);
 HEAP32[(($3)>>2)]=$29;
 var $30=HEAP8[($25)];
 var $31=($30&255);
 var $c_0=$31;var $sign_0=$24;label=13;break;
 case 12: 
 var $33=___shgetc($f);
 var $c_0=$33;var $sign_0=$24;label=13;break;
 case 13: 
 var $sign_0;
 var $c_0;
 var $i_070=0;var $c_171=$c_0;label=14;break;
 case 14: 
 var $c_171;
 var $i_070;
 var $36=$c_171|32;
 var $37=((544+$i_070)|0);
 var $38=HEAP8[($37)];
 var $39=(($38<<24)>>24);
 var $40=($36|0)==($39|0);
 if($40){label=15;break;}else{var $i_0_lcssa=$i_070;var $c_1_lcssa=$c_171;label=20;break;}
 case 15: 
 var $42=($i_070>>>0)<7;
 if($42){label=16;break;}else{var $c_2=$c_171;label=19;break;}
 case 16: 
 var $44=HEAP32[(($3)>>2)];
 var $45=HEAP32[(($4)>>2)];
 var $46=($44>>>0)<($45>>>0);
 if($46){label=17;break;}else{label=18;break;}
 case 17: 
 var $48=(($44+1)|0);
 HEAP32[(($3)>>2)]=$48;
 var $49=HEAP8[($44)];
 var $50=($49&255);
 var $c_2=$50;label=19;break;
 case 18: 
 var $52=___shgetc($f);
 var $c_2=$52;label=19;break;
 case 19: 
 var $c_2;
 var $54=((($i_070)+(1))|0);
 var $55=($54>>>0)<8;
 if($55){var $i_070=$54;var $c_171=$c_2;label=14;break;}else{var $i_0_lcssa=$54;var $c_1_lcssa=$c_2;label=20;break;}
 case 20: 
 var $c_1_lcssa;
 var $i_0_lcssa;
 if(($i_0_lcssa|0)==3){ label=23;break;}else if(($i_0_lcssa|0)==8){ label=27;break;}else{label=21;break;}
 case 21: 
 var $58=($i_0_lcssa>>>0)>3;
 var $59=($pok|0)!=0;
 var $or_cond5=$58&$59;
 if($or_cond5){label=22;break;}else{label=28;break;}
 case 22: 
 var $61=($i_0_lcssa|0)==8;
 if($61){label=27;break;}else{label=23;break;}
 case 23: 
 var $63=HEAP32[(($4)>>2)];
 var $64=($63|0)==0;
 if($64){label=25;break;}else{label=24;break;}
 case 24: 
 var $66=HEAP32[(($3)>>2)];
 var $67=((($66)-(1))|0);
 HEAP32[(($3)>>2)]=$67;
 label=25;break;
 case 25: 
 var $notlhs=($pok|0)==0;
 var $notrhs=($i_0_lcssa>>>0)<4;
 var $or_cond9_not=$notrhs|$notlhs;
 var $brmerge=$or_cond9_not|$64;
 if($brmerge){label=27;break;}else{var $i_1=$i_0_lcssa;label=26;break;}
 case 26: 
 var $i_1;
 var $70=HEAP32[(($3)>>2)];
 var $71=((($70)-(1))|0);
 HEAP32[(($3)>>2)]=$71;
 var $72=((($i_1)-(1))|0);
 var $_old8=($72>>>0)>3;
 if($_old8){var $i_1=$72;label=26;break;}else{label=27;break;}
 case 27: 
 var $73=($sign_0|0);
 var $74=($73)*(Infinity);
 var $75=$74;
 var $_0=$75;label=267;break;
 case 28: 
 var $77=($i_0_lcssa|0)==0;
 if($77){var $i_268=0;var $c_369=$c_1_lcssa;label=29;break;}else{var $c_5=$c_1_lcssa;var $i_3=$i_0_lcssa;label=35;break;}
 case 29: 
 var $c_369;
 var $i_268;
 var $78=$c_369|32;
 var $79=((1480+$i_268)|0);
 var $80=HEAP8[($79)];
 var $81=(($80<<24)>>24);
 var $82=($78|0)==($81|0);
 if($82){label=30;break;}else{var $c_5=$c_369;var $i_3=$i_268;label=35;break;}
 case 30: 
 var $84=($i_268>>>0)<2;
 if($84){label=31;break;}else{var $c_4=$c_369;label=34;break;}
 case 31: 
 var $86=HEAP32[(($3)>>2)];
 var $87=HEAP32[(($4)>>2)];
 var $88=($86>>>0)<($87>>>0);
 if($88){label=32;break;}else{label=33;break;}
 case 32: 
 var $90=(($86+1)|0);
 HEAP32[(($3)>>2)]=$90;
 var $91=HEAP8[($86)];
 var $92=($91&255);
 var $c_4=$92;label=34;break;
 case 33: 
 var $94=___shgetc($f);
 var $c_4=$94;label=34;break;
 case 34: 
 var $c_4;
 var $96=((($i_268)+(1))|0);
 var $97=($96>>>0)<3;
 if($97){var $i_268=$96;var $c_369=$c_4;label=29;break;}else{var $c_5=$c_4;var $i_3=$96;label=35;break;}
 case 35: 
 var $i_3;
 var $c_5;
 if(($i_3|0)==3){ label=36;break;}else if(($i_3|0)==0){ label=58;break;}else{label=55;break;}
 case 36: 
 var $99=HEAP32[(($3)>>2)];
 var $100=HEAP32[(($4)>>2)];
 var $101=($99>>>0)<($100>>>0);
 if($101){label=37;break;}else{label=38;break;}
 case 37: 
 var $103=(($99+1)|0);
 HEAP32[(($3)>>2)]=$103;
 var $104=HEAP8[($99)];
 var $105=($104&255);
 var $109=$105;label=39;break;
 case 38: 
 var $107=___shgetc($f);
 var $109=$107;label=39;break;
 case 39: 
 var $109;
 var $110=($109|0)==40;
 if($110){var $i_4=1;label=42;break;}else{label=40;break;}
 case 40: 
 var $112=HEAP32[(($4)>>2)];
 var $113=($112|0)==0;
 if($113){var $_0=NaN;label=267;break;}else{label=41;break;}
 case 41: 
 var $115=HEAP32[(($3)>>2)];
 var $116=((($115)-(1))|0);
 HEAP32[(($3)>>2)]=$116;
 var $_0=NaN;label=267;break;
 case 42: 
 var $i_4;
 var $117=HEAP32[(($3)>>2)];
 var $118=HEAP32[(($4)>>2)];
 var $119=($117>>>0)<($118>>>0);
 if($119){label=43;break;}else{label=44;break;}
 case 43: 
 var $121=(($117+1)|0);
 HEAP32[(($3)>>2)]=$121;
 var $122=HEAP8[($117)];
 var $123=($122&255);
 var $127=$123;label=45;break;
 case 44: 
 var $125=___shgetc($f);
 var $127=$125;label=45;break;
 case 45: 
 var $127;
 var $128=((($127)-(48))|0);
 var $129=($128>>>0)<10;
 var $130=((($127)-(65))|0);
 var $131=($130>>>0)<26;
 var $or_cond=$129|$131;
 if($or_cond){label=54;break;}else{label=46;break;}
 case 46: 
 var $133=((($127)-(97))|0);
 var $134=($133>>>0)<26;
 var $135=($127|0)==95;
 var $or_cond7=$134|$135;
 if($or_cond7){label=54;break;}else{label=47;break;}
 case 47: 
 var $137=($127|0)==41;
 if($137){var $_0=NaN;label=267;break;}else{label=48;break;}
 case 48: 
 var $139=HEAP32[(($4)>>2)];
 var $140=($139|0)==0;
 if($140){label=50;break;}else{label=49;break;}
 case 49: 
 var $142=HEAP32[(($3)>>2)];
 var $143=((($142)-(1))|0);
 HEAP32[(($3)>>2)]=$143;
 label=50;break;
 case 50: 
 if($59){label=51;break;}else{label=52;break;}
 case 51: 
 var $145=($i_4|0)==0;
 var $brmerge108=$145|$140;
 if($brmerge108){var $_0=NaN;label=267;break;}else{var $_in=$i_4;label=53;break;}
 case 52: 
 var $147=___errno_location();
 HEAP32[(($147)>>2)]=22;
 ___shlim($f,0);
 var $_0=0;label=267;break;
 case 53: 
 var $_in;
 var $148=((($_in)-(1))|0);
 var $149=HEAP32[(($3)>>2)];
 var $150=((($149)-(1))|0);
 HEAP32[(($3)>>2)]=$150;
 var $151=($148|0)==0;
 if($151){var $_0=NaN;label=267;break;}else{var $_in=$148;label=53;break;}
 case 54: 
 var $153=((($i_4)+(1))|0);
 var $i_4=$153;label=42;break;
 case 55: 
 var $155=HEAP32[(($4)>>2)];
 var $156=($155|0)==0;
 if($156){label=57;break;}else{label=56;break;}
 case 56: 
 var $158=HEAP32[(($3)>>2)];
 var $159=((($158)-(1))|0);
 HEAP32[(($3)>>2)]=$159;
 label=57;break;
 case 57: 
 var $161=___errno_location();
 HEAP32[(($161)>>2)]=22;
 ___shlim($f,0);
 var $_0=0;label=267;break;
 case 58: 
 var $163=($c_5|0)==48;
 if($163){label=59;break;}else{var $c_6=$c_5;label=132;break;}
 case 59: 
 var $165=HEAP32[(($3)>>2)];
 var $166=HEAP32[(($4)>>2)];
 var $167=($165>>>0)<($166>>>0);
 if($167){label=60;break;}else{label=61;break;}
 case 60: 
 var $169=(($165+1)|0);
 HEAP32[(($3)>>2)]=$169;
 var $170=HEAP8[($165)];
 var $171=($170&255);
 var $175=$171;label=62;break;
 case 61: 
 var $173=___shgetc($f);
 var $175=$173;label=62;break;
 case 62: 
 var $175;
 var $176=$175|32;
 var $177=($176|0)==120;
 if($177){label=63;break;}else{label=130;break;}
 case 63: 
 var $179=HEAP32[(($3)>>2)];
 var $180=HEAP32[(($4)>>2)];
 var $181=($179>>>0)<($180>>>0);
 if($181){label=64;break;}else{label=65;break;}
 case 64: 
 var $183=(($179+1)|0);
 HEAP32[(($3)>>2)]=$183;
 var $184=HEAP8[($179)];
 var $185=($184&255);
 var $c_0_i=$185;var $gotdig_0_i=0;label=66;break;
 case 65: 
 var $187=___shgetc($f);
 var $c_0_i=$187;var $gotdig_0_i=0;label=66;break;
 case 66: 
 var $gotdig_0_i;
 var $c_0_i;
 if(($c_0_i|0)==48){ label=67;break;}else if(($c_0_i|0)==46){ label=70;break;}else{var $c_2_i=$c_0_i;var $dc_0_i$1=0;var $dc_0_i$0=0;var $rp_1_i$1=0;var $rp_1_i$0=0;var $gotdig_2_i=$gotdig_0_i;var $gotrad_0_i=0;var $gottail_0_i=0;var $scale_0_i=1;var $y_0_i=0;var $x_0_i=0;label=78;break;}
 case 67: 
 var $189=HEAP32[(($3)>>2)];
 var $190=HEAP32[(($4)>>2)];
 var $191=($189>>>0)<($190>>>0);
 if($191){label=68;break;}else{label=69;break;}
 case 68: 
 var $193=(($189+1)|0);
 HEAP32[(($3)>>2)]=$193;
 var $194=HEAP8[($189)];
 var $195=($194&255);
 var $c_0_i=$195;var $gotdig_0_i=1;label=66;break;
 case 69: 
 var $197=___shgetc($f);
 var $c_0_i=$197;var $gotdig_0_i=1;label=66;break;
 case 70: 
 var $199=HEAP32[(($3)>>2)];
 var $200=HEAP32[(($4)>>2)];
 var $201=($199>>>0)<($200>>>0);
 if($201){label=71;break;}else{label=72;break;}
 case 71: 
 var $203=(($199+1)|0);
 HEAP32[(($3)>>2)]=$203;
 var $204=HEAP8[($199)];
 var $205=($204&255);
 var $c_1_ph_i=$205;label=73;break;
 case 72: 
 var $207=___shgetc($f);
 var $c_1_ph_i=$207;label=73;break;
 case 73: 
 var $c_1_ph_i;
 var $208=($c_1_ph_i|0)==48;
 if($208){var $rp_026_i$1=0;var $rp_026_i$0=0;label=74;break;}else{var $c_2_i=$c_1_ph_i;var $dc_0_i$1=0;var $dc_0_i$0=0;var $rp_1_i$1=0;var $rp_1_i$0=0;var $gotdig_2_i=$gotdig_0_i;var $gotrad_0_i=1;var $gottail_0_i=0;var $scale_0_i=1;var $y_0_i=0;var $x_0_i=0;label=78;break;}
 case 74: 
 var $rp_026_i$0;
 var $rp_026_i$1;
 var $209=HEAP32[(($3)>>2)];
 var $210=HEAP32[(($4)>>2)];
 var $211=($209>>>0)<($210>>>0);
 if($211){label=75;break;}else{label=76;break;}
 case 75: 
 var $213=(($209+1)|0);
 HEAP32[(($3)>>2)]=$213;
 var $214=HEAP8[($209)];
 var $215=($214&255);
 var $219=$215;label=77;break;
 case 76: 
 var $217=___shgetc($f);
 var $219=$217;label=77;break;
 case 77: 
 var $219;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=-1;
 var $220$0=_i64Add($rp_026_i$0,$rp_026_i$1,$$etemp$0$0,$$etemp$0$1);var $220$1=tempRet0;
 var $221=($219|0)==48;
 if($221){var $rp_026_i$1=$220$1;var $rp_026_i$0=$220$0;label=74;break;}else{var $c_2_i=$219;var $dc_0_i$1=0;var $dc_0_i$0=0;var $rp_1_i$1=$220$1;var $rp_1_i$0=$220$0;var $gotdig_2_i=1;var $gotrad_0_i=1;var $gottail_0_i=0;var $scale_0_i=1;var $y_0_i=0;var $x_0_i=0;label=78;break;}
 case 78: 
 var $x_0_i;
 var $y_0_i;
 var $scale_0_i;
 var $gottail_0_i;
 var $gotrad_0_i;
 var $gotdig_2_i;
 var $rp_1_i$0;
 var $rp_1_i$1;
 var $dc_0_i$0;
 var $dc_0_i$1;
 var $c_2_i;
 var $222=((($c_2_i)-(48))|0);
 var $223=($222>>>0)<10;
 if($223){var $d_0_i=$222;label=83;break;}else{label=79;break;}
 case 79: 
 var $225=$c_2_i|32;
 var $226=((($225)-(97))|0);
 var $227=($226>>>0)<6;
 var $228=($c_2_i|0)==46;
 var $or_cond_i=$227|$228;
 if($or_cond_i){label=80;break;}else{var $c_2_lcssa_i=$c_2_i;label=93;break;}
 case 80: 
 if($228){label=81;break;}else{label=82;break;}
 case 81: 
 var $231=($gotrad_0_i|0)==0;
 if($231){var $dc_1_i$1=$dc_0_i$1;var $dc_1_i$0=$dc_0_i$0;var $rp_2_i$1=$dc_0_i$1;var $rp_2_i$0=$dc_0_i$0;var $gotdig_3_i=$gotdig_2_i;var $gotrad_1_i=1;var $gottail_2_i=$gottail_0_i;var $scale_2_i=$scale_0_i;var $y_2_i=$y_0_i;var $x_2_i=$x_0_i;label=90;break;}else{var $c_2_lcssa_i=46;label=93;break;}
 case 82: 
 var $233=($c_2_i|0)>57;
 var $234=((($225)-(87))|0);
 var $__i=($233?$234:$222);
 var $d_0_i=$__i;label=83;break;
 case 83: 
 var $d_0_i;
 var $$etemp$1$0=8;
 var $$etemp$1$1=0;
 var $235=(($dc_0_i$1|0) < ($$etemp$1$1|0)) | (((($dc_0_i$1|0) == ($$etemp$1$1|0) & ($dc_0_i$0>>>0) <  ($$etemp$1$0>>>0))));
 if($235){label=84;break;}else{label=85;break;}
 case 84: 
 var $237=$x_0_i<<4;
 var $238=((($d_0_i)+($237))|0);
 var $gottail_1_i=$gottail_0_i;var $scale_1_i=$scale_0_i;var $y_1_i=$y_0_i;var $x_1_i=$238;label=89;break;
 case 85: 
 var $$etemp$2$0=14;
 var $$etemp$2$1=0;
 var $240=(($dc_0_i$1|0) < ($$etemp$2$1|0)) | (((($dc_0_i$1|0) == ($$etemp$2$1|0) & ($dc_0_i$0>>>0) <  ($$etemp$2$0>>>0))));
 if($240){label=86;break;}else{label=87;break;}
 case 86: 
 var $242=($d_0_i|0);
 var $243=($scale_0_i)*((0.0625));
 var $244=($243)*($242);
 var $245=($y_0_i)+($244);
 var $gottail_1_i=$gottail_0_i;var $scale_1_i=$243;var $y_1_i=$245;var $x_1_i=$x_0_i;label=89;break;
 case 87: 
 var $247=($d_0_i|0)==0;
 var $248=($gottail_0_i|0)!=0;
 var $or_cond3_i=$247|$248;
 if($or_cond3_i){var $gottail_1_i=$gottail_0_i;var $scale_1_i=$scale_0_i;var $y_1_i=$y_0_i;var $x_1_i=$x_0_i;label=89;break;}else{label=88;break;}
 case 88: 
 var $250=($scale_0_i)*((0.5));
 var $251=($y_0_i)+($250);
 var $gottail_1_i=1;var $scale_1_i=$scale_0_i;var $y_1_i=$251;var $x_1_i=$x_0_i;label=89;break;
 case 89: 
 var $x_1_i;
 var $y_1_i;
 var $scale_1_i;
 var $gottail_1_i;
 var $$etemp$3$0=1;
 var $$etemp$3$1=0;
 var $253$0=_i64Add($dc_0_i$0,$dc_0_i$1,$$etemp$3$0,$$etemp$3$1);var $253$1=tempRet0;
 var $dc_1_i$1=$253$1;var $dc_1_i$0=$253$0;var $rp_2_i$1=$rp_1_i$1;var $rp_2_i$0=$rp_1_i$0;var $gotdig_3_i=1;var $gotrad_1_i=$gotrad_0_i;var $gottail_2_i=$gottail_1_i;var $scale_2_i=$scale_1_i;var $y_2_i=$y_1_i;var $x_2_i=$x_1_i;label=90;break;
 case 90: 
 var $x_2_i;
 var $y_2_i;
 var $scale_2_i;
 var $gottail_2_i;
 var $gotrad_1_i;
 var $gotdig_3_i;
 var $rp_2_i$0;
 var $rp_2_i$1;
 var $dc_1_i$0;
 var $dc_1_i$1;
 var $255=HEAP32[(($3)>>2)];
 var $256=HEAP32[(($4)>>2)];
 var $257=($255>>>0)<($256>>>0);
 if($257){label=91;break;}else{label=92;break;}
 case 91: 
 var $259=(($255+1)|0);
 HEAP32[(($3)>>2)]=$259;
 var $260=HEAP8[($255)];
 var $261=($260&255);
 var $c_2_i=$261;var $dc_0_i$1=$dc_1_i$1;var $dc_0_i$0=$dc_1_i$0;var $rp_1_i$1=$rp_2_i$1;var $rp_1_i$0=$rp_2_i$0;var $gotdig_2_i=$gotdig_3_i;var $gotrad_0_i=$gotrad_1_i;var $gottail_0_i=$gottail_2_i;var $scale_0_i=$scale_2_i;var $y_0_i=$y_2_i;var $x_0_i=$x_2_i;label=78;break;
 case 92: 
 var $263=___shgetc($f);
 var $c_2_i=$263;var $dc_0_i$1=$dc_1_i$1;var $dc_0_i$0=$dc_1_i$0;var $rp_1_i$1=$rp_2_i$1;var $rp_1_i$0=$rp_2_i$0;var $gotdig_2_i=$gotdig_3_i;var $gotrad_0_i=$gotrad_1_i;var $gottail_0_i=$gottail_2_i;var $scale_0_i=$scale_2_i;var $y_0_i=$y_2_i;var $x_0_i=$x_2_i;label=78;break;
 case 93: 
 var $c_2_lcssa_i;
 var $265=($gotdig_2_i|0)==0;
 if($265){label=94;break;}else{label=102;break;}
 case 94: 
 var $267=HEAP32[(($4)>>2)];
 var $268=($267|0)==0;
 if($268){label=96;break;}else{label=95;break;}
 case 95: 
 var $270=HEAP32[(($3)>>2)];
 var $271=((($270)-(1))|0);
 HEAP32[(($3)>>2)]=$271;
 label=96;break;
 case 96: 
 var $273=($pok|0)==0;
 if($273){label=100;break;}else{label=97;break;}
 case 97: 
 if($268){label=101;break;}else{label=98;break;}
 case 98: 
 var $276=HEAP32[(($3)>>2)];
 var $277=((($276)-(1))|0);
 HEAP32[(($3)>>2)]=$277;
 var $278=($gotrad_0_i|0)==0;
 if($278){label=101;break;}else{label=99;break;}
 case 99: 
 var $280=((($276)-(2))|0);
 HEAP32[(($3)>>2)]=$280;
 label=101;break;
 case 100: 
 ___shlim($f,0);
 label=101;break;
 case 101: 
 var $282=($sign_0|0);
 var $283=($282)*(0);
 var $_0=$283;label=267;break;
 case 102: 
 var $285=($gotrad_0_i|0)==0;
 var $dc_0_rp_1_i$0=($285?$dc_0_i$0:$rp_1_i$0);
 var $dc_0_rp_1_i$1=($285?$dc_0_i$1:$rp_1_i$1);
 var $$etemp$4$0=8;
 var $$etemp$4$1=0;
 var $286=(($dc_0_i$1|0) < ($$etemp$4$1|0)) | (((($dc_0_i$1|0) == ($$etemp$4$1|0) & ($dc_0_i$0>>>0) <  ($$etemp$4$0>>>0))));
 if($286){var $x_318_i=$x_0_i;var $dc_219_i$1=$dc_0_i$1;var $dc_219_i$0=$dc_0_i$0;label=103;break;}else{var $x_3_lcssa_i=$x_0_i;label=104;break;}
 case 103: 
 var $dc_219_i$0;
 var $dc_219_i$1;
 var $x_318_i;
 var $287=$x_318_i<<4;
 var $$etemp$5$0=1;
 var $$etemp$5$1=0;
 var $288$0=_i64Add($dc_219_i$0,$dc_219_i$1,$$etemp$5$0,$$etemp$5$1);var $288$1=tempRet0;
 var $$etemp$6$0=8;
 var $$etemp$6$1=0;
 var $289=(($288$1|0) < ($$etemp$6$1|0)) | (((($288$1|0) == ($$etemp$6$1|0) & ($288$0>>>0) <  ($$etemp$6$0>>>0))));
 if($289){var $x_318_i=$287;var $dc_219_i$1=$288$1;var $dc_219_i$0=$288$0;label=103;break;}else{var $x_3_lcssa_i=$287;label=104;break;}
 case 104: 
 var $x_3_lcssa_i;
 var $290=$c_2_lcssa_i|32;
 var $291=($290|0)==112;
 if($291){label=105;break;}else{label=110;break;}
 case 105: 
 var $293$0=_scanexp($f,$pok);
 var $293$1=tempRet0;
 var $$etemp$7$0=0;
 var $$etemp$7$1=-2147483648;
 var $294=(($293$0|0) == ($$etemp$7$0|0)) & (($293$1|0) == ($$etemp$7$1|0));
 if($294){label=106;break;}else{var $e2_0_i$1=$293$1;var $e2_0_i$0=$293$0;label=112;break;}
 case 106: 
 var $296=($pok|0)==0;
 if($296){label=109;break;}else{label=107;break;}
 case 107: 
 var $298=HEAP32[(($4)>>2)];
 var $299=($298|0)==0;
 if($299){var $e2_0_i$1=0;var $e2_0_i$0=0;label=112;break;}else{label=108;break;}
 case 108: 
 var $301=HEAP32[(($3)>>2)];
 var $302=((($301)-(1))|0);
 HEAP32[(($3)>>2)]=$302;
 var $e2_0_i$1=0;var $e2_0_i$0=0;label=112;break;
 case 109: 
 ___shlim($f,0);
 var $_0=0;label=267;break;
 case 110: 
 var $305=HEAP32[(($4)>>2)];
 var $306=($305|0)==0;
 if($306){var $e2_0_i$1=0;var $e2_0_i$0=0;label=112;break;}else{label=111;break;}
 case 111: 
 var $308=HEAP32[(($3)>>2)];
 var $309=((($308)-(1))|0);
 HEAP32[(($3)>>2)]=$309;
 var $e2_0_i$1=0;var $e2_0_i$0=0;label=112;break;
 case 112: 
 var $e2_0_i$0;
 var $e2_0_i$1;
 var $311$0=($dc_0_rp_1_i$0<<2)|(0>>>30);
 var $311$1=($dc_0_rp_1_i$1<<2)|($dc_0_rp_1_i$0>>>30);
 var $$etemp$8$0=-32;
 var $$etemp$8$1=-1;
 var $312$0=_i64Add($311$0,$311$1,$$etemp$8$0,$$etemp$8$1);var $312$1=tempRet0;
 var $313$0=_i64Add($312$0,$312$1,$e2_0_i$0,$e2_0_i$1);var $313$1=tempRet0;
 var $314=($x_3_lcssa_i|0)==0;
 if($314){label=113;break;}else{label=114;break;}
 case 113: 
 var $316=($sign_0|0);
 var $317=($316)*(0);
 var $_0=$317;label=267;break;
 case 114: 
 var $319=(((-$emin_0_ph))|0);
 var $320$0=$319;
 var $320$1=0;
 var $321=(($313$1|0) > ($320$1|0)) | (((($313$1|0) == ($320$1|0) & ($313$0>>>0) >  ($320$0>>>0))));
 if($321){label=115;break;}else{label=116;break;}
 case 115: 
 var $323=___errno_location();
 HEAP32[(($323)>>2)]=34;
 var $324=($sign_0|0);
 var $325=($324)*((1.7976931348623157e+308));
 var $326=($325)*((1.7976931348623157e+308));
 var $_0=$326;label=267;break;
 case 116: 
 var $328=((($emin_0_ph)-(106))|0);
 var $329$0=$328;
 var $329$1=((((($328|0)<0))|0)?-1:0);
 var $330=(($313$1|0) < ($329$1|0)) | (((($313$1|0) == ($329$1|0) & ($313$0>>>0) <  ($329$0>>>0))));
 if($330){label=118;break;}else{label=117;break;}
 case 117: 
 var $331=($x_3_lcssa_i|0)>-1;
 if($331){var $x_413_i=$x_3_lcssa_i;var $y_314_i=$y_0_i;var $e2_115_i$1=$313$1;var $e2_115_i$0=$313$0;label=119;break;}else{var $x_4_lcssa_i=$x_3_lcssa_i;var $y_3_lcssa_i=$y_0_i;var $e2_1_lcssa_i$1=$313$1;var $e2_1_lcssa_i$0=$313$0;label=122;break;}
 case 118: 
 var $333=___errno_location();
 HEAP32[(($333)>>2)]=34;
 var $334=($sign_0|0);
 var $335=($334)*((2.2250738585072014e-308));
 var $336=($335)*((2.2250738585072014e-308));
 var $_0=$336;label=267;break;
 case 119: 
 var $e2_115_i$0;
 var $e2_115_i$1;
 var $y_314_i;
 var $x_413_i;
 var $337=$y_314_i<(0.5);
 var $338=$x_413_i<<1;
 if($337){var $_pn_i=$y_314_i;var $x_5_i=$338;label=121;break;}else{label=120;break;}
 case 120: 
 var $340=$338|1;
 var $341=($y_314_i)-(1);
 var $_pn_i=$341;var $x_5_i=$340;label=121;break;
 case 121: 
 var $x_5_i;
 var $_pn_i;
 var $y_4_i=($y_314_i)+($_pn_i);
 var $$etemp$9$0=-1;
 var $$etemp$9$1=-1;
 var $343$0=_i64Add($e2_115_i$0,$e2_115_i$1,$$etemp$9$0,$$etemp$9$1);var $343$1=tempRet0;
 var $344=($x_5_i|0)>-1;
 if($344){var $x_413_i=$x_5_i;var $y_314_i=$y_4_i;var $e2_115_i$1=$343$1;var $e2_115_i$0=$343$0;label=119;break;}else{var $x_4_lcssa_i=$x_5_i;var $y_3_lcssa_i=$y_4_i;var $e2_1_lcssa_i$1=$343$1;var $e2_1_lcssa_i$0=$343$0;label=122;break;}
 case 122: 
 var $e2_1_lcssa_i$0;
 var $e2_1_lcssa_i$1;
 var $y_3_lcssa_i;
 var $x_4_lcssa_i;
 var $345$0=$bits_0_ph;
 var $345$1=0;
 var $346$0=$emin_0_ph;
 var $346$1=((((($emin_0_ph|0)<0))|0)?-1:0);
 var $$etemp$10$0=32;
 var $$etemp$10$1=0;
 var $347$0=_i64Subtract($$etemp$10$0,$$etemp$10$1,$346$0,$346$1);var $347$1=tempRet0;
 var $348$0=_i64Add($e2_1_lcssa_i$0,$e2_1_lcssa_i$1,$347$0,$347$1);var $348$1=tempRet0;
 var $349=(($345$1|0) > ($348$1|0)) | (((($345$1|0) == ($348$1|0) & ($345$0>>>0) >  ($348$0>>>0))));
 if($349){label=123;break;}else{var $_06_i=$bits_0_ph;label=124;break;}
 case 123: 
 var $351$0=$348$0;
 var $351=$351$0;
 var $352=($351|0)<0;
 if($352){var $_0611_i=0;label=126;break;}else{var $_06_i=$351;label=124;break;}
 case 124: 
 var $_06_i;
 var $354=($_06_i|0)<53;
 if($354){var $_0611_i=$_06_i;label=126;break;}else{label=125;break;}
 case 125: 
 var $_pre_i=($sign_0|0);
 var $bias_0_i=0;var $_0612_i=$_06_i;var $_pre_phi_i=$_pre_i;label=127;break;
 case 126: 
 var $_0611_i;
 var $355=(((84)-($_0611_i))|0);
 var $356=_scalbn(1,$355);
 var $357=($sign_0|0);
 var $358=_copysign($356,$357);
 var $bias_0_i=$358;var $_0612_i=$_0611_i;var $_pre_phi_i=$357;label=127;break;
 case 127: 
 var $_pre_phi_i;
 var $_0612_i;
 var $bias_0_i;
 var $360=($_0612_i|0)<32;
 var $361=$y_3_lcssa_i!=0;
 var $or_cond5_i=$360&$361;
 var $362=$x_4_lcssa_i&1;
 var $363=($362|0)==0;
 var $or_cond8_i=$or_cond5_i&$363;
 var $364=($or_cond8_i&1);
 var $x_6_i=((($364)+($x_4_lcssa_i))|0);
 var $y_5_i=($or_cond8_i?0:$y_3_lcssa_i);
 var $365=($x_6_i>>>0);
 var $366=($_pre_phi_i)*($365);
 var $367=($bias_0_i)+($366);
 var $368=($_pre_phi_i)*($y_5_i);
 var $369=($368)+($367);
 var $370=($369)-($bias_0_i);
 var $371=$370!=0;
 if($371){label=129;break;}else{label=128;break;}
 case 128: 
 var $373=___errno_location();
 HEAP32[(($373)>>2)]=34;
 label=129;break;
 case 129: 
 var $375$0=$e2_1_lcssa_i$0;
 var $375=$375$0;
 var $376=_scalbnl($370,$375);
 var $_0=$376;label=267;break;
 case 130: 
 var $378=HEAP32[(($4)>>2)];
 var $379=($378|0)==0;
 if($379){var $c_6=48;label=132;break;}else{label=131;break;}
 case 131: 
 var $381=HEAP32[(($3)>>2)];
 var $382=((($381)-(1))|0);
 HEAP32[(($3)>>2)]=$382;
 var $c_6=48;label=132;break;
 case 132: 
 var $c_6;
 var $384=$x_i;
 var $$etemp$11$0=512;
 var $$etemp$11$1=0;

 var $sum_i=((($emin_0_ph)+($bits_0_ph))|0);
 var $385=(((-$sum_i))|0);
 var $_011_i=$c_6;var $gotdig_0_i11=0;label=133;break;
 case 133: 
 var $gotdig_0_i11;
 var $_011_i;
 if(($_011_i|0)==48){ label=134;break;}else if(($_011_i|0)==46){ label=137;break;}else{var $_2_i=$_011_i;var $gotrad_0_i13=0;var $gotdig_2_i12=$gotdig_0_i11;var $lrp_1_i$1=0;var $lrp_1_i$0=0;label=145;break;}
 case 134: 
 var $387=HEAP32[(($3)>>2)];
 var $388=HEAP32[(($4)>>2)];
 var $389=($387>>>0)<($388>>>0);
 if($389){label=135;break;}else{label=136;break;}
 case 135: 
 var $391=(($387+1)|0);
 HEAP32[(($3)>>2)]=$391;
 var $392=HEAP8[($387)];
 var $393=($392&255);
 var $_011_i=$393;var $gotdig_0_i11=1;label=133;break;
 case 136: 
 var $395=___shgetc($f);
 var $_011_i=$395;var $gotdig_0_i11=1;label=133;break;
 case 137: 
 var $397=HEAP32[(($3)>>2)];
 var $398=HEAP32[(($4)>>2)];
 var $399=($397>>>0)<($398>>>0);
 if($399){label=138;break;}else{label=139;break;}
 case 138: 
 var $401=(($397+1)|0);
 HEAP32[(($3)>>2)]=$401;
 var $402=HEAP8[($397)];
 var $403=($402&255);
 var $_1_ph_i=$403;label=140;break;
 case 139: 
 var $405=___shgetc($f);
 var $_1_ph_i=$405;label=140;break;
 case 140: 
 var $_1_ph_i;
 var $406=($_1_ph_i|0)==48;
 if($406){var $lrp_0134_i$1=0;var $lrp_0134_i$0=0;label=141;break;}else{var $_2_i=$_1_ph_i;var $gotrad_0_i13=1;var $gotdig_2_i12=$gotdig_0_i11;var $lrp_1_i$1=0;var $lrp_1_i$0=0;label=145;break;}
 case 141: 
 var $lrp_0134_i$0;
 var $lrp_0134_i$1;
 var $$etemp$12$0=-1;
 var $$etemp$12$1=-1;
 var $407$0=_i64Add($lrp_0134_i$0,$lrp_0134_i$1,$$etemp$12$0,$$etemp$12$1);var $407$1=tempRet0;
 var $408=HEAP32[(($3)>>2)];
 var $409=HEAP32[(($4)>>2)];
 var $410=($408>>>0)<($409>>>0);
 if($410){label=142;break;}else{label=143;break;}
 case 142: 
 var $412=(($408+1)|0);
 HEAP32[(($3)>>2)]=$412;
 var $413=HEAP8[($408)];
 var $414=($413&255);
 var $_1_be_i=$414;label=144;break;
 case 143: 
 var $416=___shgetc($f);
 var $_1_be_i=$416;label=144;break;
 case 144: 
 var $_1_be_i;
 var $417=($_1_be_i|0)==48;
 if($417){var $lrp_0134_i$1=$407$1;var $lrp_0134_i$0=$407$0;label=141;break;}else{var $_2_i=$_1_be_i;var $gotrad_0_i13=1;var $gotdig_2_i12=1;var $lrp_1_i$1=$407$1;var $lrp_1_i$0=$407$0;label=145;break;}
 case 145: 
 var $lrp_1_i$0;
 var $lrp_1_i$1;
 var $gotdig_2_i12;
 var $gotrad_0_i13;
 var $_2_i;
 var $418=(($x_i)|0);
 HEAP32[(($418)>>2)]=0;
 var $419=((($_2_i)-(48))|0);
 var $420=($419>>>0)<10;
 var $421=($_2_i|0)==46;
 var $or_cond112_i=$420|$421;
 if($or_cond112_i){label=146;break;}else{var $lrp_2_lcssa_i$1=$lrp_1_i$1;var $lrp_2_lcssa_i$0=$lrp_1_i$0;var $dc_0_lcssa_i$1=0;var $dc_0_lcssa_i$0=0;var $lnz_0_lcssa_i=0;var $gotdig_3_lcssa_i=$gotdig_2_i12;var $gotrad_1_lcssa_i=$gotrad_0_i13;var $k_0_lcssa_i=0;var $j_0_lcssa_i=0;var $_3_lcssa_i=$_2_i;label=160;break;}
 case 146: 
 var $422=(($x_i+496)|0);
 var $lrp_2113_i$1=$lrp_1_i$1;var $lrp_2113_i$0=$lrp_1_i$0;var $dc_0114_i$1=0;var $dc_0114_i$0=0;var $lnz_0115_i=0;var $gotdig_3116_i=$gotdig_2_i12;var $gotrad_1117_i=$gotrad_0_i13;var $k_0118_i=0;var $j_0119_i=0;var $_3120_i=$_2_i;var $425=$419;var $424=$421;label=147;break;
 case 147: 
 var $424;
 var $425;
 var $_3120_i;
 var $j_0119_i;
 var $k_0118_i;
 var $gotrad_1117_i;
 var $gotdig_3116_i;
 var $lnz_0115_i;
 var $dc_0114_i$0;
 var $dc_0114_i$1;
 var $lrp_2113_i$0;
 var $lrp_2113_i$1;
 if($424){label=148;break;}else{label=150;break;}
 case 148: 
 var $cond_i=($gotrad_1117_i|0)==0;
 if($cond_i){var $j_2_i=$j_0119_i;var $k_2_i=$k_0118_i;var $gotrad_2_i=1;var $gotdig_4_i=$gotdig_3116_i;var $lnz_2_i=$lnz_0115_i;var $dc_1_i14$1=$dc_0114_i$1;var $dc_1_i14$0=$dc_0114_i$0;var $lrp_3_i$1=$dc_0114_i$1;var $lrp_3_i$0=$dc_0114_i$0;label=156;break;}else{label=149;break;}
 case 149: 
 var $427=($gotdig_3116_i|0)!=0;
 var $483=$427;var $lrp_42426_i$1=$lrp_2113_i$1;var $lrp_42426_i$0=$lrp_2113_i$0;var $dc_096_i$1=$dc_0114_i$1;var $dc_096_i$0=$dc_0114_i$0;var $lnz_0100_i=$lnz_0115_i;var $k_0106_i=$k_0118_i;var $j_0110_i=$j_0119_i;label=168;break;
 case 150: 
 var $429=($k_0118_i|0)<125;
 var $$etemp$13$0=1;
 var $$etemp$13$1=0;
 var $430$0=_i64Add($dc_0114_i$0,$dc_0114_i$1,$$etemp$13$0,$$etemp$13$1);var $430$1=tempRet0;
 var $431=($_3120_i|0)!=48;
 if($429){label=151;break;}else{label=154;break;}
 case 151: 
 var $433$0=$430$0;
 var $433=$433$0;
 var $_lnz_0_i=($431?$433:$lnz_0115_i);
 var $434=($j_0119_i|0)==0;
 var $435=(($x_i+($k_0118_i<<2))|0);
 if($434){var $storemerge_i=$425;label=153;break;}else{label=152;break;}
 case 152: 
 var $437=HEAP32[(($435)>>2)];
 var $438=((($437)*(10))&-1);
 var $439=((($_3120_i)-(48))|0);
 var $440=((($439)+($438))|0);
 var $storemerge_i=$440;label=153;break;
 case 153: 
 var $storemerge_i;
 HEAP32[(($435)>>2)]=$storemerge_i;
 var $442=((($j_0119_i)+(1))|0);
 var $443=($442|0)==9;
 var $444=($443&1);
 var $_k_0_i=((($444)+($k_0118_i))|0);
 var $_13_i=($443?0:$442);
 var $j_2_i=$_13_i;var $k_2_i=$_k_0_i;var $gotrad_2_i=$gotrad_1117_i;var $gotdig_4_i=1;var $lnz_2_i=$_lnz_0_i;var $dc_1_i14$1=$430$1;var $dc_1_i14$0=$430$0;var $lrp_3_i$1=$lrp_2113_i$1;var $lrp_3_i$0=$lrp_2113_i$0;label=156;break;
 case 154: 
 if($431){label=155;break;}else{var $j_2_i=$j_0119_i;var $k_2_i=$k_0118_i;var $gotrad_2_i=$gotrad_1117_i;var $gotdig_4_i=$gotdig_3116_i;var $lnz_2_i=$lnz_0115_i;var $dc_1_i14$1=$430$1;var $dc_1_i14$0=$430$0;var $lrp_3_i$1=$lrp_2113_i$1;var $lrp_3_i$0=$lrp_2113_i$0;label=156;break;}
 case 155: 
 var $447=HEAP32[(($422)>>2)];
 var $448=$447|1;
 HEAP32[(($422)>>2)]=$448;
 var $j_2_i=$j_0119_i;var $k_2_i=$k_0118_i;var $gotrad_2_i=$gotrad_1117_i;var $gotdig_4_i=$gotdig_3116_i;var $lnz_2_i=$lnz_0115_i;var $dc_1_i14$1=$430$1;var $dc_1_i14$0=$430$0;var $lrp_3_i$1=$lrp_2113_i$1;var $lrp_3_i$0=$lrp_2113_i$0;label=156;break;
 case 156: 
 var $lrp_3_i$0;
 var $lrp_3_i$1;
 var $dc_1_i14$0;
 var $dc_1_i14$1;
 var $lnz_2_i;
 var $gotdig_4_i;
 var $gotrad_2_i;
 var $k_2_i;
 var $j_2_i;
 var $450=HEAP32[(($3)>>2)];
 var $451=HEAP32[(($4)>>2)];
 var $452=($450>>>0)<($451>>>0);
 if($452){label=157;break;}else{label=158;break;}
 case 157: 
 var $454=(($450+1)|0);
 HEAP32[(($3)>>2)]=$454;
 var $455=HEAP8[($450)];
 var $456=($455&255);
 var $_3_be_i=$456;label=159;break;
 case 158: 
 var $458=___shgetc($f);
 var $_3_be_i=$458;label=159;break;
 case 159: 
 var $_3_be_i;
 var $459=((($_3_be_i)-(48))|0);
 var $460=($459>>>0)<10;
 var $461=($_3_be_i|0)==46;
 var $or_cond_i15=$460|$461;
 if($or_cond_i15){var $lrp_2113_i$1=$lrp_3_i$1;var $lrp_2113_i$0=$lrp_3_i$0;var $dc_0114_i$1=$dc_1_i14$1;var $dc_0114_i$0=$dc_1_i14$0;var $lnz_0115_i=$lnz_2_i;var $gotdig_3116_i=$gotdig_4_i;var $gotrad_1117_i=$gotrad_2_i;var $k_0118_i=$k_2_i;var $j_0119_i=$j_2_i;var $_3120_i=$_3_be_i;var $425=$459;var $424=$461;label=147;break;}else{var $lrp_2_lcssa_i$1=$lrp_3_i$1;var $lrp_2_lcssa_i$0=$lrp_3_i$0;var $dc_0_lcssa_i$1=$dc_1_i14$1;var $dc_0_lcssa_i$0=$dc_1_i14$0;var $lnz_0_lcssa_i=$lnz_2_i;var $gotdig_3_lcssa_i=$gotdig_4_i;var $gotrad_1_lcssa_i=$gotrad_2_i;var $k_0_lcssa_i=$k_2_i;var $j_0_lcssa_i=$j_2_i;var $_3_lcssa_i=$_3_be_i;label=160;break;}
 case 160: 
 var $_3_lcssa_i;
 var $j_0_lcssa_i;
 var $k_0_lcssa_i;
 var $gotrad_1_lcssa_i;
 var $gotdig_3_lcssa_i;
 var $lnz_0_lcssa_i;
 var $dc_0_lcssa_i$0;
 var $dc_0_lcssa_i$1;
 var $lrp_2_lcssa_i$0;
 var $lrp_2_lcssa_i$1;
 var $462=($gotrad_1_lcssa_i|0)==0;
 var $dc_0_lrp_2_i$0=($462?$dc_0_lcssa_i$0:$lrp_2_lcssa_i$0);
 var $dc_0_lrp_2_i$1=($462?$dc_0_lcssa_i$1:$lrp_2_lcssa_i$1);
 var $463=($gotdig_3_lcssa_i|0)!=0;
 var $464=$_3_lcssa_i|32;
 var $465=($464|0)==101;
 var $or_cond15_i=$463&$465;
 if($or_cond15_i){label=161;break;}else{label=167;break;}
 case 161: 
 var $467$0=_scanexp($f,$pok);
 var $467$1=tempRet0;
 var $$etemp$14$0=0;
 var $$etemp$14$1=-2147483648;
 var $468=(($467$0|0) == ($$etemp$14$0|0)) & (($467$1|0) == ($$etemp$14$1|0));
 if($468){label=162;break;}else{var $e10_0_i$1=$467$1;var $e10_0_i$0=$467$0;label=166;break;}
 case 162: 
 var $470=($pok|0)==0;
 if($470){label=165;break;}else{label=163;break;}
 case 163: 
 var $472=HEAP32[(($4)>>2)];
 var $473=($472|0)==0;
 if($473){var $e10_0_i$1=0;var $e10_0_i$0=0;label=166;break;}else{label=164;break;}
 case 164: 
 var $475=HEAP32[(($3)>>2)];
 var $476=((($475)-(1))|0);
 HEAP32[(($3)>>2)]=$476;
 var $e10_0_i$1=0;var $e10_0_i$0=0;label=166;break;
 case 165: 
 ___shlim($f,0);
 var $_0=0;label=267;break;
 case 166: 
 var $e10_0_i$0;
 var $e10_0_i$1;
 var $479$0=_i64Add($e10_0_i$0,$e10_0_i$1,$dc_0_lrp_2_i$0,$dc_0_lrp_2_i$1);var $479$1=tempRet0;
 var $lrp_527_i$1=$479$1;var $lrp_527_i$0=$479$0;var $dc_094_i$1=$dc_0_lcssa_i$1;var $dc_094_i$0=$dc_0_lcssa_i$0;var $lnz_098_i=$lnz_0_lcssa_i;var $k_0104_i=$k_0_lcssa_i;var $j_0108_i=$j_0_lcssa_i;label=172;break;
 case 167: 
 var $481=($_3_lcssa_i|0)>-1;
 if($481){var $483=$463;var $lrp_42426_i$1=$dc_0_lrp_2_i$1;var $lrp_42426_i$0=$dc_0_lrp_2_i$0;var $dc_096_i$1=$dc_0_lcssa_i$1;var $dc_096_i$0=$dc_0_lcssa_i$0;var $lnz_0100_i=$lnz_0_lcssa_i;var $k_0106_i=$k_0_lcssa_i;var $j_0110_i=$j_0_lcssa_i;label=168;break;}else{var $lrp_5_i$1=$dc_0_lrp_2_i$1;var $lrp_5_i$0=$dc_0_lrp_2_i$0;var $490=$463;var $dc_095_i$1=$dc_0_lcssa_i$1;var $dc_095_i$0=$dc_0_lcssa_i$0;var $lnz_099_i=$lnz_0_lcssa_i;var $k_0105_i=$k_0_lcssa_i;var $j_0109_i=$j_0_lcssa_i;label=170;break;}
 case 168: 
 var $j_0110_i;
 var $k_0106_i;
 var $lnz_0100_i;
 var $dc_096_i$0;
 var $dc_096_i$1;
 var $lrp_42426_i$0;
 var $lrp_42426_i$1;
 var $483;
 var $484=HEAP32[(($4)>>2)];
 var $485=($484|0)==0;
 if($485){var $lrp_5_i$1=$lrp_42426_i$1;var $lrp_5_i$0=$lrp_42426_i$0;var $490=$483;var $dc_095_i$1=$dc_096_i$1;var $dc_095_i$0=$dc_096_i$0;var $lnz_099_i=$lnz_0100_i;var $k_0105_i=$k_0106_i;var $j_0109_i=$j_0110_i;label=170;break;}else{label=169;break;}
 case 169: 
 var $487=HEAP32[(($3)>>2)];
 var $488=((($487)-(1))|0);
 HEAP32[(($3)>>2)]=$488;
 if($483){var $lrp_527_i$1=$lrp_42426_i$1;var $lrp_527_i$0=$lrp_42426_i$0;var $dc_094_i$1=$dc_096_i$1;var $dc_094_i$0=$dc_096_i$0;var $lnz_098_i=$lnz_0100_i;var $k_0104_i=$k_0106_i;var $j_0108_i=$j_0110_i;label=172;break;}else{label=171;break;}
 case 170: 
 var $j_0109_i;
 var $k_0105_i;
 var $lnz_099_i;
 var $dc_095_i$0;
 var $dc_095_i$1;
 var $490;
 var $lrp_5_i$0;
 var $lrp_5_i$1;
 if($490){var $lrp_527_i$1=$lrp_5_i$1;var $lrp_527_i$0=$lrp_5_i$0;var $dc_094_i$1=$dc_095_i$1;var $dc_094_i$0=$dc_095_i$0;var $lnz_098_i=$lnz_099_i;var $k_0104_i=$k_0105_i;var $j_0108_i=$j_0109_i;label=172;break;}else{label=171;break;}
 case 171: 
 var $492=___errno_location();
 HEAP32[(($492)>>2)]=22;
 ___shlim($f,0);
 var $_0=0;label=267;break;
 case 172: 
 var $j_0108_i;
 var $k_0104_i;
 var $lnz_098_i;
 var $dc_094_i$0;
 var $dc_094_i$1;
 var $lrp_527_i$0;
 var $lrp_527_i$1;
 var $494=HEAP32[(($418)>>2)];
 var $495=($494|0)==0;
 if($495){label=173;break;}else{label=174;break;}
 case 173: 
 var $497=($sign_0|0);
 var $498=($497)*(0);
 var $_0=$498;label=267;break;
 case 174: 
 var $500=(($lrp_527_i$0|0) == ($dc_094_i$0|0)) & (($lrp_527_i$1|0) == ($dc_094_i$1|0));
 var $$etemp$15$0=10;
 var $$etemp$15$1=0;
 var $501=(($dc_094_i$1|0) < ($$etemp$15$1|0)) | (((($dc_094_i$1|0) == ($$etemp$15$1|0) & ($dc_094_i$0>>>0) <  ($$etemp$15$0>>>0))));
 var $or_cond3_i16=$500&$501;
 if($or_cond3_i16){label=175;break;}else{label=177;break;}
 case 175: 
 var $503=($bits_0_ph>>>0)>30;
 var $504=$494>>>($bits_0_ph>>>0);
 var $505=($504|0)==0;
 var $or_cond17_i=$503|$505;
 if($or_cond17_i){label=176;break;}else{label=177;break;}
 case 176: 
 var $507=($sign_0|0);
 var $508=($494>>>0);
 var $509=($507)*($508);
 var $_0=$509;label=267;break;
 case 177: 
 var $511=(((($emin_0_ph|0))/(-2))&-1);
 var $512$0=$511;
 var $512$1=((((($511|0)<0))|0)?-1:0);
 var $513=(($lrp_527_i$1|0) > ($512$1|0)) | (((($lrp_527_i$1|0) == ($512$1|0) & ($lrp_527_i$0>>>0) >  ($512$0>>>0))));
 if($513){label=178;break;}else{label=179;break;}
 case 178: 
 var $515=___errno_location();
 HEAP32[(($515)>>2)]=34;
 var $516=($sign_0|0);
 var $517=($516)*((1.7976931348623157e+308));
 var $518=($517)*((1.7976931348623157e+308));
 var $_0=$518;label=267;break;
 case 179: 
 var $520=((($emin_0_ph)-(106))|0);
 var $521$0=$520;
 var $521$1=((((($520|0)<0))|0)?-1:0);
 var $522=(($lrp_527_i$1|0) < ($521$1|0)) | (((($lrp_527_i$1|0) == ($521$1|0) & ($lrp_527_i$0>>>0) <  ($521$0>>>0))));
 if($522){label=180;break;}else{label=181;break;}
 case 180: 
 var $524=___errno_location();
 HEAP32[(($524)>>2)]=34;
 var $525=($sign_0|0);
 var $526=($525)*((2.2250738585072014e-308));
 var $527=($526)*((2.2250738585072014e-308));
 var $_0=$527;label=267;break;
 case 181: 
 var $529=($j_0108_i|0)==0;
 if($529){var $k_3_i=$k_0104_i;label=187;break;}else{label=182;break;}
 case 182: 
 var $530=($j_0108_i|0)<9;
 if($530){label=183;break;}else{label=186;break;}
 case 183: 
 var $531=(($x_i+($k_0104_i<<2))|0);
 var $_promoted_i=HEAP32[(($531)>>2)];
 var $j_388_i=$j_0108_i;var $533=$_promoted_i;label=184;break;
 case 184: 
 var $533;
 var $j_388_i;
 var $534=((($533)*(10))&-1);
 var $535=((($j_388_i)+(1))|0);
 var $536=($535|0)<9;
 if($536){var $j_388_i=$535;var $533=$534;label=184;break;}else{label=185;break;}
 case 185: 
 HEAP32[(($531)>>2)]=$534;
 label=186;break;
 case 186: 
 var $538=((($k_0104_i)+(1))|0);
 var $k_3_i=$538;label=187;break;
 case 187: 
 var $k_3_i;
 var $540$0=$lrp_527_i$0;
 var $540=$540$0;
 var $541=($lnz_098_i|0)<9;
 if($541){label=188;break;}else{label=195;break;}
 case 188: 
 var $543=($lnz_098_i|0)<=($540|0);
 var $544=($540|0)<18;
 var $or_cond5_i17=$543&$544;
 if($or_cond5_i17){label=189;break;}else{label=195;break;}
 case 189: 
 var $546=($540|0)==9;
 if($546){label=190;break;}else{label=191;break;}
 case 190: 
 var $548=($sign_0|0);
 var $549=HEAP32[(($418)>>2)];
 var $550=($549>>>0);
 var $551=($548)*($550);
 var $_0=$551;label=267;break;
 case 191: 
 var $553=($540|0)<9;
 if($553){label=192;break;}else{label=193;break;}
 case 192: 
 var $555=($sign_0|0);
 var $556=HEAP32[(($418)>>2)];
 var $557=($556>>>0);
 var $558=($555)*($557);
 var $559=(((8)-($540))|0);
 var $560=((24+($559<<2))|0);
 var $561=HEAP32[(($560)>>2)];
 var $562=($561|0);
 var $563=($558)/($562);
 var $_0=$563;label=267;break;
 case 193: 
 var $565=((($540)*(-3))&-1);
 var $_neg37_i=((($bits_0_ph)+(27))|0);
 var $566=((($_neg37_i)+($565))|0);
 var $567=($566|0)>30;
 var $_pre_i18=HEAP32[(($418)>>2)];
 var $568=$_pre_i18>>>($566>>>0);
 var $569=($568|0)==0;
 var $or_cond187_i=$567|$569;
 if($or_cond187_i){label=194;break;}else{label=195;break;}
 case 194: 
 var $570=($sign_0|0);
 var $571=($_pre_i18>>>0);
 var $572=($570)*($571);
 var $573=((($540)-(10))|0);
 var $574=((24+($573<<2))|0);
 var $575=HEAP32[(($574)>>2)];
 var $576=($575|0);
 var $577=($572)*($576);
 var $_0=$577;label=267;break;
 case 195: 
 var $579=(((($540|0))%(9))&-1);
 var $580=($579|0)==0;
 if($580){var $a_2_ph57_i=0;var $z_1_ph56_i=$k_3_i;var $e2_0_ph_i=0;var $rp_2_ph55_i=$540;label=204;break;}else{label=196;break;}
 case 196: 
 var $582=($540|0)>-1;
 var $583=((($579)+(9))|0);
 var $584=($582?$579:$583);
 var $585=(((8)-($584))|0);
 var $586=((24+($585<<2))|0);
 var $587=HEAP32[(($586)>>2)];
 var $588=($k_3_i|0)==0;
 if($588){var $z_0_i=0;var $a_0_lcssa182_i=0;var $rp_0_lcssa183_i=$540;label=203;break;}else{label=197;break;}
 case 197: 
 var $589=(((1000000000)/(($587|0)))&-1);
 var $rp_077_i=$540;var $a_078_i=0;var $k_479_i=0;var $carry_080_i=0;label=198;break;
 case 198: 
 var $carry_080_i;
 var $k_479_i;
 var $a_078_i;
 var $rp_077_i;
 var $591=(($x_i+($k_479_i<<2))|0);
 var $592=HEAP32[(($591)>>2)];
 var $593=(((($592>>>0))%(($587>>>0)))&-1);
 var $594=(((($592>>>0))/(($587>>>0)))&-1);
 var $595=((($594)+($carry_080_i))|0);
 HEAP32[(($591)>>2)]=$595;
 var $596=(Math_imul($593,$589)|0);
 var $597=($k_479_i|0)==($a_078_i|0);
 var $598=($595|0)==0;
 var $or_cond18_i=$597&$598;
 var $599=((($k_479_i)+(1))|0);
 if($or_cond18_i){label=199;break;}else{var $a_1_i=$a_078_i;var $rp_1_i19=$rp_077_i;label=200;break;}
 case 199: 
 var $601=$599&127;
 var $602=((($rp_077_i)-(9))|0);
 var $a_1_i=$601;var $rp_1_i19=$602;label=200;break;
 case 200: 
 var $rp_1_i19;
 var $a_1_i;
 var $603=($599|0)==($k_3_i|0);
 if($603){label=201;break;}else{var $rp_077_i=$rp_1_i19;var $a_078_i=$a_1_i;var $k_479_i=$599;var $carry_080_i=$596;label=198;break;}
 case 201: 
 var $604=($596|0)==0;
 if($604){var $z_0_i=$k_3_i;var $a_0_lcssa182_i=$a_1_i;var $rp_0_lcssa183_i=$rp_1_i19;label=203;break;}else{label=202;break;}
 case 202: 
 var $606=((($k_3_i)+(1))|0);
 var $607=(($x_i+($k_3_i<<2))|0);
 HEAP32[(($607)>>2)]=$596;
 var $z_0_i=$606;var $a_0_lcssa182_i=$a_1_i;var $rp_0_lcssa183_i=$rp_1_i19;label=203;break;
 case 203: 
 var $rp_0_lcssa183_i;
 var $a_0_lcssa182_i;
 var $z_0_i;
 var $608=(((9)-($584))|0);
 var $609=((($608)+($rp_0_lcssa183_i))|0);
 var $a_2_ph57_i=$a_0_lcssa182_i;var $z_1_ph56_i=$z_0_i;var $e2_0_ph_i=0;var $rp_2_ph55_i=$609;label=204;break;
 case 204: 
 var $rp_2_ph55_i;
 var $e2_0_ph_i;
 var $z_1_ph56_i;
 var $a_2_ph57_i;
 var $610=($rp_2_ph55_i|0)<18;
 var $611=(($x_i+($a_2_ph57_i<<2))|0);
 if($610){var $z_1_us_i=$z_1_ph56_i;var $e2_0_us_i=$e2_0_ph_i;label=206;break;}else{label=205;break;}
 case 205: 
 var $612=($rp_2_ph55_i|0)==18;
 if($612){var $z_1_us62_i=$z_1_ph56_i;var $e2_0_us61_i=$e2_0_ph_i;label=213;break;}else{var $a_3_ph_i=$a_2_ph57_i;var $z_5_ph_i=$z_1_ph56_i;var $e2_1_ph_i=$e2_0_ph_i;var $rp_3_ph50_i=$rp_2_ph55_i;label=237;break;}
 case 206: 
 var $e2_0_us_i;
 var $z_1_us_i;
 var $613=((($z_1_us_i)+(127))|0);
 var $carry1_0_us_i=0;var $k_5_in_us_i=$613;var $z_2_us_i=$z_1_us_i;label=207;break;
 case 207: 
 var $z_2_us_i;
 var $k_5_in_us_i;
 var $carry1_0_us_i;
 var $k_5_us_i=$k_5_in_us_i&127;
 var $615=(($x_i+($k_5_us_i<<2))|0);
 var $616=HEAP32[(($615)>>2)];
 var $617$0=$616;
 var $617$1=0;
 var $618$0=($617$0<<29)|(0>>>3);
 var $618$1=($617$1<<29)|($617$0>>>3);
 var $619$0=$carry1_0_us_i;
 var $619$1=0;
 var $620$0=_i64Add($618$0,$618$1,$619$0,$619$1);var $620$1=tempRet0;
 var $$etemp$16$0=1000000000;
 var $$etemp$16$1=0;
 var $621=(($620$1>>>0) > ($$etemp$16$1>>>0)) | (((($620$1>>>0) == ($$etemp$16$1>>>0) & ($620$0>>>0) >  ($$etemp$16$0>>>0))));
 var $extract_t36_us_i$0=$620$0;
 var $extract_t36_us_i=$extract_t36_us_i$0;
 if($621){label=208;break;}else{var $carry1_1_us_i=0;var $_sink_off0_us_i=$extract_t36_us_i;label=209;break;}
 case 208: 
 var $$etemp$17$0=1000000000;
 var $$etemp$17$1=0;
 var $623$0=___udivdi3($620$0,$620$1,$$etemp$17$0,$$etemp$17$1);var $623$1=tempRet0;
 var $624$0=$623$0;
 var $624=$624$0;
 var $$etemp$18$0=1000000000;
 var $$etemp$18$1=0;
 var $625$0=___uremdi3($620$0,$620$1,$$etemp$18$0,$$etemp$18$1);var $625$1=tempRet0;
 var $extract_t_us_i$0=$625$0;
 var $extract_t_us_i=$extract_t_us_i$0;
 var $carry1_1_us_i=$624;var $_sink_off0_us_i=$extract_t_us_i;label=209;break;
 case 209: 
 var $_sink_off0_us_i;
 var $carry1_1_us_i;
 HEAP32[(($615)>>2)]=$_sink_off0_us_i;
 var $627=((($z_2_us_i)+(127))|0);
 var $628=$627&127;
 var $629=($k_5_us_i|0)!=($628|0);
 var $630=($k_5_us_i|0)==($a_2_ph57_i|0);
 var $or_cond19_us_i=$629|$630;
 if($or_cond19_us_i){var $z_3_us_i=$z_2_us_i;label=211;break;}else{label=210;break;}
 case 210: 
 var $632=($_sink_off0_us_i|0)==0;
 var $k_5_z_2_us_i=($632?$k_5_us_i:$z_2_us_i);
 var $z_3_us_i=$k_5_z_2_us_i;label=211;break;
 case 211: 
 var $z_3_us_i;
 var $634=((($k_5_us_i)-(1))|0);
 if($630){label=212;break;}else{var $carry1_0_us_i=$carry1_1_us_i;var $k_5_in_us_i=$634;var $z_2_us_i=$z_3_us_i;label=207;break;}
 case 212: 
 var $636=((($e2_0_us_i)-(29))|0);
 var $637=($carry1_1_us_i|0)==0;
 if($637){var $z_1_us_i=$z_3_us_i;var $e2_0_us_i=$636;label=206;break;}else{var $_lcssa60_i=$636;var $z_3_lcssa_lcssa_i=$z_3_us_i;var $carry1_1_lcssa_lcssa_i=$carry1_1_us_i;label=221;break;}
 case 213: 
 var $e2_0_us61_i;
 var $z_1_us62_i;
 var $638=HEAP32[(($611)>>2)];
 var $639=($638>>>0)<9007199;
 if($639){label=214;break;}else{var $a_3_ph_i=$a_2_ph57_i;var $z_5_ph_i=$z_1_us62_i;var $e2_1_ph_i=$e2_0_us61_i;var $rp_3_ph50_i=18;label=237;break;}
 case 214: 
 var $640=((($z_1_us62_i)+(127))|0);
 var $carry1_0_us66_i=0;var $k_5_in_us65_i=$640;var $z_2_us64_i=$z_1_us62_i;label=215;break;
 case 215: 
 var $z_2_us64_i;
 var $k_5_in_us65_i;
 var $carry1_0_us66_i;
 var $k_5_us67_i=$k_5_in_us65_i&127;
 var $642=(($x_i+($k_5_us67_i<<2))|0);
 var $643=HEAP32[(($642)>>2)];
 var $644$0=$643;
 var $644$1=0;
 var $645$0=($644$0<<29)|(0>>>3);
 var $645$1=($644$1<<29)|($644$0>>>3);
 var $646$0=$carry1_0_us66_i;
 var $646$1=0;
 var $647$0=_i64Add($645$0,$645$1,$646$0,$646$1);var $647$1=tempRet0;
 var $$etemp$19$0=1000000000;
 var $$etemp$19$1=0;
 var $648=(($647$1>>>0) > ($$etemp$19$1>>>0)) | (((($647$1>>>0) == ($$etemp$19$1>>>0) & ($647$0>>>0) >  ($$etemp$19$0>>>0))));
 var $extract_t36_us68_i$0=$647$0;
 var $extract_t36_us68_i=$extract_t36_us68_i$0;
 if($648){label=216;break;}else{var $carry1_1_us71_i=0;var $_sink_off0_us70_i=$extract_t36_us68_i;label=217;break;}
 case 216: 
 var $$etemp$20$0=1000000000;
 var $$etemp$20$1=0;
 var $650$0=___udivdi3($647$0,$647$1,$$etemp$20$0,$$etemp$20$1);var $650$1=tempRet0;
 var $651$0=$650$0;
 var $651=$651$0;
 var $$etemp$21$0=1000000000;
 var $$etemp$21$1=0;
 var $652$0=___uremdi3($647$0,$647$1,$$etemp$21$0,$$etemp$21$1);var $652$1=tempRet0;
 var $extract_t_us69_i$0=$652$0;
 var $extract_t_us69_i=$extract_t_us69_i$0;
 var $carry1_1_us71_i=$651;var $_sink_off0_us70_i=$extract_t_us69_i;label=217;break;
 case 217: 
 var $_sink_off0_us70_i;
 var $carry1_1_us71_i;
 HEAP32[(($642)>>2)]=$_sink_off0_us70_i;
 var $654=((($z_2_us64_i)+(127))|0);
 var $655=$654&127;
 var $656=($k_5_us67_i|0)!=($655|0);
 var $657=($k_5_us67_i|0)==($a_2_ph57_i|0);
 var $or_cond19_us72_i=$656|$657;
 if($or_cond19_us72_i){var $z_3_us74_i=$z_2_us64_i;label=219;break;}else{label=218;break;}
 case 218: 
 var $659=($_sink_off0_us70_i|0)==0;
 var $k_5_z_2_us73_i=($659?$k_5_us67_i:$z_2_us64_i);
 var $z_3_us74_i=$k_5_z_2_us73_i;label=219;break;
 case 219: 
 var $z_3_us74_i;
 var $661=((($k_5_us67_i)-(1))|0);
 if($657){label=220;break;}else{var $carry1_0_us66_i=$carry1_1_us71_i;var $k_5_in_us65_i=$661;var $z_2_us64_i=$z_3_us74_i;label=215;break;}
 case 220: 
 var $663=((($e2_0_us61_i)-(29))|0);
 var $664=($carry1_1_us71_i|0)==0;
 if($664){var $z_1_us62_i=$z_3_us74_i;var $e2_0_us61_i=$663;label=213;break;}else{var $_lcssa60_i=$663;var $z_3_lcssa_lcssa_i=$z_3_us74_i;var $carry1_1_lcssa_lcssa_i=$carry1_1_us71_i;label=221;break;}
 case 221: 
 var $carry1_1_lcssa_lcssa_i;
 var $z_3_lcssa_lcssa_i;
 var $_lcssa60_i;
 var $665=((($rp_2_ph55_i)+(9))|0);
 var $666=((($a_2_ph57_i)+(127))|0);
 var $667=$666&127;
 var $668=($667|0)==($z_3_lcssa_lcssa_i|0);
 if($668){label=222;break;}else{var $z_4_i=$z_3_lcssa_lcssa_i;label=223;break;}
 case 222: 
 var $670=((($z_3_lcssa_lcssa_i)+(127))|0);
 var $671=$670&127;
 var $672=(($x_i+($671<<2))|0);
 var $673=HEAP32[(($672)>>2)];
 var $674=((($z_3_lcssa_lcssa_i)+(126))|0);
 var $675=$674&127;
 var $676=(($x_i+($675<<2))|0);
 var $677=HEAP32[(($676)>>2)];
 var $678=$677|$673;
 HEAP32[(($676)>>2)]=$678;
 var $z_4_i=$671;label=223;break;
 case 223: 
 var $z_4_i;
 var $680=(($x_i+($667<<2))|0);
 HEAP32[(($680)>>2)]=$carry1_1_lcssa_lcssa_i;
 var $a_2_ph57_i=$667;var $z_1_ph56_i=$z_4_i;var $e2_0_ph_i=$_lcssa60_i;var $rp_2_ph55_i=$665;label=204;break;
 case 224: 
 var $e2_1_i;
 var $a_3_i;
 var $i_042_i=0;label=226;break;
 case 225: 
 var $682=($695|0)<2;
 if($682){var $i_042_i=$695;label=226;break;}else{var $i_1_i=$695;label=229;break;}
 case 226: 
 var $i_042_i;
 var $684=((($i_042_i)+($a_3_i))|0);
 var $685=$684&127;
 var $686=($685|0)==($z_5_ph_i|0);
 if($686){var $i_1_i=2;label=229;break;}else{label=227;break;}
 case 227: 
 var $688=(($x_i+($685<<2))|0);
 var $689=HEAP32[(($688)>>2)];
 var $690=((16+($i_042_i<<2))|0);
 var $691=HEAP32[(($690)>>2)];
 var $692=($689>>>0)<($691>>>0);
 if($692){var $i_1_i=2;label=229;break;}else{label=228;break;}
 case 228: 
 var $694=($689>>>0)>($691>>>0);
 var $695=((($i_042_i)+(1))|0);
 if($694){var $i_1_i=$i_042_i;label=229;break;}else{label=225;break;}
 case 229: 
 var $i_1_i;
 var $697=($i_1_i|0)==2;
 var $or_cond8_i20=$697&$728;
 if($or_cond8_i20){label=230;break;}else{label=231;break;}
 case 230: 
 var $698=$a_3_i&127;
 var $699=($698|0)==($z_5_ph_i|0);
 if($699){label=240;break;}else{var $z_7_i=$z_5_ph_i;label=241;break;}
 case 231: 
 var $701=((($_20_i)+($e2_1_i))|0);
 var $702=($a_3_i|0)==($z_5_ph_i|0);
 if($702){var $a_3_i=$z_5_ph_i;var $e2_1_i=$701;label=224;break;}else{label=232;break;}
 case 232: 
 var $703=1<<$_20_i;
 var $704=((($703)-(1))|0);
 var $705=1000000000>>>($_20_i>>>0);
 var $rp_443_i=$rp_3_i_ph;var $a_444_i=$a_3_i;var $k_645_i=$a_3_i;var $carry3_047_i=0;label=233;break;
 case 233: 
 var $carry3_047_i;
 var $k_645_i;
 var $a_444_i;
 var $rp_443_i;
 var $706=(($x_i+($k_645_i<<2))|0);
 var $707=HEAP32[(($706)>>2)];
 var $708=$707&$704;
 var $709=$707>>>($_20_i>>>0);
 var $710=((($709)+($carry3_047_i))|0);
 HEAP32[(($706)>>2)]=$710;
 var $711=(Math_imul($708,$705)|0);
 var $712=($k_645_i|0)==($a_444_i|0);
 var $713=($710|0)==0;
 var $or_cond21_i=$712&$713;
 var $714=((($k_645_i)+(1))|0);
 var $715=$714&127;
 var $716=((($rp_443_i)-(9))|0);
 var $rp_5_i=($or_cond21_i?$716:$rp_443_i);
 var $a_5_i=($or_cond21_i?$715:$a_444_i);
 var $717=($715|0)==($z_5_ph_i|0);
 if($717){label=234;break;}else{var $rp_443_i=$rp_5_i;var $a_444_i=$a_5_i;var $k_645_i=$715;var $carry3_047_i=$711;label=233;break;}
 case 234: 
 var $718=($711|0)==0;
 if($718){var $a_3_i_ph=$a_5_i;var $e2_1_i_ph=$701;var $rp_3_i_ph=$rp_5_i;label=238;break;}else{label=235;break;}
 case 235: 
 var $720=($724|0)==($a_5_i|0);
 if($720){label=239;break;}else{label=236;break;}
 case 236: 
 var $722=(($x_i+($z_5_ph_i<<2))|0);
 HEAP32[(($722)>>2)]=$711;
 var $a_3_ph_i=$a_5_i;var $z_5_ph_i=$724;var $e2_1_ph_i=$701;var $rp_3_ph50_i=$rp_5_i;label=237;break;
 case 237: 
 var $rp_3_ph50_i;
 var $e2_1_ph_i;
 var $z_5_ph_i;
 var $a_3_ph_i;
 var $723=((($z_5_ph_i)+(1))|0);
 var $724=$723&127;
 var $725=((($z_5_ph_i)+(127))|0);
 var $726=$725&127;
 var $727=(($x_i+($726<<2))|0);
 var $a_3_i_ph=$a_3_ph_i;var $e2_1_i_ph=$e2_1_ph_i;var $rp_3_i_ph=$rp_3_ph50_i;label=238;break;
 case 238: 
 var $rp_3_i_ph;
 var $e2_1_i_ph;
 var $a_3_i_ph;
 var $728=($rp_3_i_ph|0)==18;
 var $729=($rp_3_i_ph|0)>27;
 var $_20_i=($729?9:1);
 var $a_3_i=$a_3_i_ph;var $e2_1_i=$e2_1_i_ph;label=224;break;
 case 239: 
 var $731=HEAP32[(($727)>>2)];
 var $732=$731|1;
 HEAP32[(($727)>>2)]=$732;
 var $a_3_i_ph=$a_5_i;var $e2_1_i_ph=$701;var $rp_3_i_ph=$rp_5_i;label=238;break;
 case 240: 
 var $734=((($724)-(1))|0);
 var $735=(($x_i+($734<<2))|0);
 HEAP32[(($735)>>2)]=0;
 var $z_7_i=$724;label=241;break;
 case 241: 
 var $z_7_i;
 var $737=(($x_i+($698<<2))|0);
 var $738=HEAP32[(($737)>>2)];
 var $739=($738>>>0);
 var $740=((($a_3_i)+(1))|0);
 var $741=$740&127;
 var $742=($741|0)==($z_7_i|0);
 if($742){label=265;break;}else{var $z_7_1_i=$z_7_i;label=266;break;}
 case 242: 
 var $744=($833|0)<0;
 if($744){var $denormal_030_i=1;var $_01231_i=0;label=244;break;}else{var $_012_i=$833;var $denormal_0_i=1;label=243;break;}
 case 243: 
 var $denormal_0_i;
 var $_012_i;
 var $746=($_012_i|0)<53;
 if($746){var $denormal_030_i=$denormal_0_i;var $_01231_i=$_012_i;label=244;break;}else{var $bias_0_i25=0;var $frac_0_i=0;var $y_1_i24=$831;var $denormal_029_i=$denormal_0_i;var $_01232_i=$_012_i;label=245;break;}
 case 244: 
 var $_01231_i;
 var $denormal_030_i;
 var $747=(((105)-($_01231_i))|0);
 var $748=_scalbn(1,$747);
 var $749=_copysign($748,$831);
 var $750=(((53)-($_01231_i))|0);
 var $751=_scalbn(1,$750);
 var $752=_fmod($831,$751);
 var $753=($831)-($752);
 var $754=($749)+($753);
 var $bias_0_i25=$749;var $frac_0_i=$752;var $y_1_i24=$754;var $denormal_029_i=$denormal_030_i;var $_01232_i=$_01231_i;label=245;break;
 case 245: 
 var $_01232_i;
 var $denormal_029_i;
 var $y_1_i24;
 var $frac_0_i;
 var $bias_0_i25;
 var $756=((($a_3_i)+(2))|0);
 var $757=$756&127;
 var $758=($757|0)==($z_7_1_i|0);
 if($758){var $frac_2_i=$frac_0_i;label=258;break;}else{label=246;break;}
 case 246: 
 var $760=(($x_i+($757<<2))|0);
 var $761=HEAP32[(($760)>>2)];
 var $762=($761>>>0)<500000000;
 if($762){label=247;break;}else{label=250;break;}
 case 247: 
 var $764=($761|0)==0;
 if($764){label=248;break;}else{label=249;break;}
 case 248: 
 var $766=((($a_3_i)+(3))|0);
 var $767=$766&127;
 var $768=($767|0)==($z_7_1_i|0);
 if($768){var $frac_1_i=$frac_0_i;label=255;break;}else{label=249;break;}
 case 249: 
 var $770=($830)*((0.25));
 var $771=($770)+($frac_0_i);
 var $frac_1_i=$771;label=255;break;
 case 250: 
 var $773=($761>>>0)>500000000;
 if($773){label=251;break;}else{label=252;break;}
 case 251: 
 var $775=($830)*((0.75));
 var $776=($775)+($frac_0_i);
 var $frac_1_i=$776;label=255;break;
 case 252: 
 var $778=((($a_3_i)+(3))|0);
 var $779=$778&127;
 var $780=($779|0)==($z_7_1_i|0);
 if($780){label=253;break;}else{label=254;break;}
 case 253: 
 var $782=($830)*((0.5));
 var $783=($782)+($frac_0_i);
 var $frac_1_i=$783;label=255;break;
 case 254: 
 var $785=($830)*((0.75));
 var $786=($785)+($frac_0_i);
 var $frac_1_i=$786;label=255;break;
 case 255: 
 var $frac_1_i;
 var $788=(((53)-($_01232_i))|0);
 var $789=($788|0)>1;
 if($789){label=256;break;}else{var $frac_2_i=$frac_1_i;label=258;break;}
 case 256: 
 var $791=_fmod($frac_1_i,1);
 var $792=$791!=0;
 if($792){var $frac_2_i=$frac_1_i;label=258;break;}else{label=257;break;}
 case 257: 
 var $794=($frac_1_i)+(1);
 var $frac_2_i=$794;label=258;break;
 case 258: 
 var $frac_2_i;
 var $796=($y_1_i24)+($frac_2_i);
 var $797=($796)-($bias_0_i25);
 var $798=$832&2147483647;
 var $799=(((-2)-($sum_i))|0);
 var $800=($798|0)>($799|0);
 if($800){label=259;break;}else{var $y_3_i=$797;var $e2_3_i=$e2_1_i;label=264;break;}
 case 259: 
 var $802=Math_abs($797);
 var $803=$802<9007199254740992;
 if($803){var $y_2_i26=$797;var $denormal_2_i=$denormal_029_i;var $e2_2_i=$e2_1_i;label=261;break;}else{label=260;break;}
 case 260: 
 var $805=($denormal_029_i|0)!=0;
 var $806=($_01232_i|0)==($833|0);
 var $or_cond22_i=$805&$806;
 var $denormal_1_i=($or_cond22_i?0:$denormal_029_i);
 var $807=($797)*((0.5));
 var $808=((($e2_1_i)+(1))|0);
 var $y_2_i26=$807;var $denormal_2_i=$denormal_1_i;var $e2_2_i=$808;label=261;break;
 case 261: 
 var $e2_2_i;
 var $denormal_2_i;
 var $y_2_i26;
 var $810=((($e2_2_i)+(50))|0);
 var $811=($810|0)>($385|0);
 if($811){label=263;break;}else{label=262;break;}
 case 262: 
 var $813=($denormal_2_i|0)!=0;
 var $814=$frac_2_i!=0;
 var $or_cond10_i=$813&$814;
 if($or_cond10_i){label=263;break;}else{var $y_3_i=$y_2_i26;var $e2_3_i=$e2_2_i;label=264;break;}
 case 263: 
 var $816=___errno_location();
 HEAP32[(($816)>>2)]=34;
 var $y_3_i=$y_2_i26;var $e2_3_i=$e2_2_i;label=264;break;
 case 264: 
 var $e2_3_i;
 var $y_3_i;
 var $818=_scalbnl($y_3_i,$e2_3_i);
 var $_0=$818;label=267;break;
 case 265: 
 var $820=((($z_7_i)+(1))|0);
 var $821=$820&127;
 var $822=((($821)-(1))|0);
 var $823=(($x_i+($822<<2))|0);
 HEAP32[(($823)>>2)]=0;
 var $z_7_1_i=$821;label=266;break;
 case 266: 
 var $z_7_1_i;
 var $825=($739)*(1000000000);
 var $826=(($x_i+($741<<2))|0);
 var $827=HEAP32[(($826)>>2)];
 var $828=($827>>>0);
 var $829=($825)+($828);
 var $830=($sign_0|0);
 var $831=($830)*($829);
 var $832=((($e2_1_i)+(53))|0);
 var $833=((($832)-($emin_0_ph))|0);
 var $834=($833|0)<($bits_0_ph|0);
 if($834){label=242;break;}else{var $_012_i=$bits_0_ph;var $denormal_0_i=0;label=243;break;}
 case 267: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function ___shlim($f,$lim){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+104)|0);
 HEAP32[(($1)>>2)]=$lim;
 var $2=(($f+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($f+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$3;
 var $7=$5;
 var $8=((($6)-($7))|0);
 var $9=(($f+108)|0);
 HEAP32[(($9)>>2)]=$8;
 var $10=($lim|0)!=0;
 var $11=($8|0)>($lim|0);
 var $or_cond=$10&$11;
 if($or_cond){label=2;break;}else{label=3;break;}
 case 2: 
 var $13=(($5+$lim)|0);
 var $14=(($f+100)|0);
 HEAP32[(($14)>>2)]=$13;
 label=4;break;
 case 3: 
 var $16=(($f+100)|0);
 HEAP32[(($16)>>2)]=$3;
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function ___shgetc($f){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+104)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=3;break;}else{label=2;break;}
 case 2: 
 var $5=(($f+108)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)<($2|0);
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=___uflow($f);
 var $10=($9|0)<0;
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=(($f+100)|0);
 HEAP32[(($12)>>2)]=0;
 var $_0=-1;label=13;break;
 case 5: 
 var $14=HEAP32[(($1)>>2)];
 var $15=($14|0)==0;
 var $_phi_trans_insert=(($f+8)|0);
 var $_pre=HEAP32[(($_phi_trans_insert)>>2)];
 if($15){label=8;break;}else{label=6;break;}
 case 6: 
 var $17=(($f+4)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$_pre;
 var $20=$18;
 var $21=((($19)-($20))|0);
 var $22=(($f+108)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=((($14)-($23))|0);
 var $25=((($24)-(1))|0);
 var $26=($21|0)>($25|0);
 if($26){label=7;break;}else{label=8;break;}
 case 7: 
 var $28=(($18+$25)|0);
 var $29=(($f+100)|0);
 HEAP32[(($29)>>2)]=$28;
 label=9;break;
 case 8: 
 var $30=(($f+100)|0);
 HEAP32[(($30)>>2)]=$_pre;
 label=9;break;
 case 9: 
 var $32=($_pre|0)==0;
 var $_phi_trans_insert2=(($f+4)|0);
 var $_pre3=HEAP32[(($_phi_trans_insert2)>>2)];
 if($32){label=11;break;}else{label=10;break;}
 case 10: 
 var $34=$_pre;
 var $35=$_pre3;
 var $36=(($f+108)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=((($34)+(1))|0);
 var $39=((($38)-($35))|0);
 var $40=((($39)+($37))|0);
 HEAP32[(($36)>>2)]=$40;
 label=11;break;
 case 11: 
 var $41=((($_pre3)-(1))|0);
 var $42=HEAP8[($41)];
 var $43=($42&255);
 var $44=($43|0)==($9|0);
 if($44){var $_0=$9;label=13;break;}else{label=12;break;}
 case 12: 
 var $46=(($9)&255);
 HEAP8[($41)]=$46;
 var $_0=$9;label=13;break;
 case 13: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _scalbn($x,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)>1023;
 if($1){label=2;break;}else{label=4;break;}
 case 2: 
 var $3=($x)*((8.98846567431158e+307));
 var $4=((($n)-(1023))|0);
 var $5=($4|0)>1023;
 if($5){label=3;break;}else{var $y_0=$3;var $_0=$4;label=7;break;}
 case 3: 
 var $7=($3)*((8.98846567431158e+307));
 var $8=((($n)-(2046))|0);
 var $9=($8|0)>1023;
 var $_=($9?1023:$8);
 var $y_0=$7;var $_0=$_;label=7;break;
 case 4: 
 var $11=($n|0)<-1022;
 if($11){label=5;break;}else{var $y_0=$x;var $_0=$n;label=7;break;}
 case 5: 
 var $13=($x)*((2.2250738585072014e-308));
 var $14=((($n)+(1022))|0);
 var $15=($14|0)<-1022;
 if($15){label=6;break;}else{var $y_0=$13;var $_0=$14;label=7;break;}
 case 6: 
 var $17=($13)*((2.2250738585072014e-308));
 var $18=((($n)+(2044))|0);
 var $19=($18|0)<-1022;
 var $_1=($19?-1022:$18);
 var $y_0=$17;var $_0=$_1;label=7;break;
 case 7: 
 var $_0;
 var $y_0;
 var $21=((($_0)+(1023))|0);
 var $22$0=$21;
 var $22$1=0;
 var $23$0=(0<<20)|(0>>>12);
 var $23$1=($22$0<<20)|(0>>>12);
 var $24=(HEAP32[((tempDoublePtr)>>2)]=$23$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$23$1, HEAPF64[(tempDoublePtr)>>3]);
 var $25=($y_0)*($24);
 return $25;
  default: assert(0, "bad label: " + label);
 }

}


function _scalbnl($x,$n){
 var label=0;


 var $1=_scalbn($x,$n);
 return $1;
}


function ___toread($f){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+74)|0);
 var $2=HEAP8[($1)];
 var $3=((($2)-(1))&255);
 var $4=$3|$2;
 HEAP8[($1)]=$4;
 var $5=(($f+20)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($f+44)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6>>>0)>($8>>>0);
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=(($f+36)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=FUNCTION_TABLE[$12]($f,0,0);
 label=3;break;
 case 3: 
 var $15=(($f+16)|0);
 HEAP32[(($15)>>2)]=0;
 var $16=(($f+28)|0);
 HEAP32[(($16)>>2)]=0;
 HEAP32[(($5)>>2)]=0;
 var $17=(($f)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$18&20;
 var $20=($19|0)==0;
 if($20){label=6;break;}else{label=4;break;}
 case 4: 
 var $22=$18&4;
 var $23=($22|0)==0;
 if($23){var $_0=-1;label=7;break;}else{label=5;break;}
 case 5: 
 var $25=$18|32;
 HEAP32[(($17)>>2)]=$25;
 var $_0=-1;label=7;break;
 case 6: 
 var $27=HEAP32[(($7)>>2)];
 var $28=(($f+8)|0);
 HEAP32[(($28)>>2)]=$27;
 var $29=(($f+4)|0);
 HEAP32[(($29)>>2)]=$27;
 var $_0=0;label=7;break;
 case 7: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function ___uflow($f){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($f+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=___toread($f);
 var $6=($5|0)==0;
 if($6){label=3;break;}else{var $_0=-1;label=5;break;}
 case 3: 
 var $8=(($f+32)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=FUNCTION_TABLE[$9]($f,$c,1);
 var $11=($10|0)==1;
 if($11){label=4;break;}else{var $_0=-1;label=5;break;}
 case 4: 
 var $13=HEAP8[($c)];
 var $14=($13&255);
 var $_0=$14;label=5;break;
 case 5: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _strtold_l($s,$p,$loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $f_i_i=sp;
 var $1=$f_i_i;
 var $$etemp$0$0=112;
 var $$etemp$0$1=0;

 _memset($1, 0, 112)|0;
 var $2=(($f_i_i+4)|0);
 HEAP32[(($2)>>2)]=$s;
 var $3=(($f_i_i+8)|0);
 HEAP32[(($3)>>2)]=-1;
 var $4=(($f_i_i+44)|0);
 HEAP32[(($4)>>2)]=$s;
 var $5=(($f_i_i+76)|0);
 HEAP32[(($5)>>2)]=-1;
 ___shlim($f_i_i,0);
 var $6=___floatscan($f_i_i,2,1);
 var $7=(($f_i_i+108)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP32[(($2)>>2)];
 var $10=HEAP32[(($3)>>2)];
 var $11=$9;
 var $12=$10;
 var $13=((($11)-($12))|0);
 var $14=((($13)+($8))|0);
 var $15=($p|0)==0;
 if($15){label=5;break;}else{label=2;break;}
 case 2: 
 var $17=($14|0)==0;
 if($17){var $21=$s;label=4;break;}else{label=3;break;}
 case 3: 
 var $19=(($s+$14)|0);
 var $21=$19;label=4;break;
 case 4: 
 var $21;
 HEAP32[(($p)>>2)]=$21;
 label=5;break;
 case 5: 
 var $$etemp$1$0=112;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $6;
  default: assert(0, "bad label: " + label);
 }

}


function _try_realloc_chunk($p,$nb){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($p+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&-8;
 var $4=$p;
 var $5=(($4+$3)|0);
 var $6=$5;
 var $7=HEAP32[((9912)>>2)];
 var $8=$2&3;
 var $notlhs=($4>>>0)>=($7>>>0);
 var $notrhs=($8|0)!=1;
 var $or_cond_not=$notrhs&$notlhs;
 var $9=($4>>>0)<($5>>>0);
 var $or_cond36=$or_cond_not&$9;
 if($or_cond36){label=2;break;}else{label=71;break;}
 case 2: 
 var $_sum3334=$3|4;
 var $11=(($4+$_sum3334)|0);
 var $12=$11;
 var $13=HEAP32[(($12)>>2)];
 var $14=$13&1;
 var $phitmp=($14|0)==0;
 if($phitmp){label=71;break;}else{label=3;break;}
 case 3: 
 var $16=($8|0)==0;
 if($16){label=4;break;}else{label=8;break;}
 case 4: 
 var $18=($nb>>>0)<256;
 if($18){var $newp_0=0;label=72;break;}else{label=5;break;}
 case 5: 
 var $20=((($nb)+(4))|0);
 var $21=($3>>>0)<($20>>>0);
 if($21){label=7;break;}else{label=6;break;}
 case 6: 
 var $23=((($3)-($nb))|0);
 var $24=HEAP32[((9848)>>2)];
 var $25=$24<<1;
 var $26=($23>>>0)>($25>>>0);
 if($26){label=7;break;}else{var $newp_0=$p;label=72;break;}
 case 7: 
 var $newp_0=0;label=72;break;
 case 8: 
 var $29=($3>>>0)<($nb>>>0);
 if($29){label=11;break;}else{label=9;break;}
 case 9: 
 var $31=((($3)-($nb))|0);
 var $32=($31>>>0)>15;
 if($32){label=10;break;}else{var $newp_0=$p;label=72;break;}
 case 10: 
 var $34=(($4+$nb)|0);
 var $35=$34;
 var $36=$2&1;
 var $37=$36|$nb;
 var $38=$37|2;
 HEAP32[(($1)>>2)]=$38;
 var $_sum29=((($nb)+(4))|0);
 var $39=(($4+$_sum29)|0);
 var $40=$39;
 var $41=$31|3;
 HEAP32[(($40)>>2)]=$41;
 var $42=HEAP32[(($12)>>2)];
 var $43=$42|1;
 HEAP32[(($12)>>2)]=$43;
 _dispose_chunk($35,$31);
 var $newp_0=$p;label=72;break;
 case 11: 
 var $45=HEAP32[((9920)>>2)];
 var $46=($6|0)==($45|0);
 if($46){label=12;break;}else{label=14;break;}
 case 12: 
 var $48=HEAP32[((9908)>>2)];
 var $49=((($48)+($3))|0);
 var $50=($49>>>0)>($nb>>>0);
 if($50){label=13;break;}else{var $newp_0=0;label=72;break;}
 case 13: 
 var $52=((($49)-($nb))|0);
 var $53=(($4+$nb)|0);
 var $54=$53;
 var $55=$2&1;
 var $56=$55|$nb;
 var $57=$56|2;
 HEAP32[(($1)>>2)]=$57;
 var $_sum28=((($nb)+(4))|0);
 var $58=(($4+$_sum28)|0);
 var $59=$58;
 var $60=$52|1;
 HEAP32[(($59)>>2)]=$60;
 HEAP32[((9920)>>2)]=$54;
 HEAP32[((9908)>>2)]=$52;
 var $newp_0=$p;label=72;break;
 case 14: 
 var $62=HEAP32[((9916)>>2)];
 var $63=($6|0)==($62|0);
 if($63){label=15;break;}else{label=20;break;}
 case 15: 
 var $65=HEAP32[((9904)>>2)];
 var $66=((($65)+($3))|0);
 var $67=($66>>>0)<($nb>>>0);
 if($67){var $newp_0=0;label=72;break;}else{label=16;break;}
 case 16: 
 var $69=((($66)-($nb))|0);
 var $70=($69>>>0)>15;
 if($70){label=17;break;}else{label=18;break;}
 case 17: 
 var $72=(($4+$nb)|0);
 var $73=$72;
 var $74=(($4+$66)|0);
 var $75=$2&1;
 var $76=$75|$nb;
 var $77=$76|2;
 HEAP32[(($1)>>2)]=$77;
 var $_sum25=((($nb)+(4))|0);
 var $78=(($4+$_sum25)|0);
 var $79=$78;
 var $80=$69|1;
 HEAP32[(($79)>>2)]=$80;
 var $81=$74;
 HEAP32[(($81)>>2)]=$69;
 var $_sum26=((($66)+(4))|0);
 var $82=(($4+$_sum26)|0);
 var $83=$82;
 var $84=HEAP32[(($83)>>2)];
 var $85=$84&-2;
 HEAP32[(($83)>>2)]=$85;
 var $storemerge=$73;var $storemerge27=$69;label=19;break;
 case 18: 
 var $87=$2&1;
 var $88=$87|$66;
 var $89=$88|2;
 HEAP32[(($1)>>2)]=$89;
 var $_sum23=((($66)+(4))|0);
 var $90=(($4+$_sum23)|0);
 var $91=$90;
 var $92=HEAP32[(($91)>>2)];
 var $93=$92|1;
 HEAP32[(($91)>>2)]=$93;
 var $storemerge=0;var $storemerge27=0;label=19;break;
 case 19: 
 var $storemerge27;
 var $storemerge;
 HEAP32[((9904)>>2)]=$storemerge27;
 HEAP32[((9916)>>2)]=$storemerge;
 var $newp_0=$p;label=72;break;
 case 20: 
 var $96=$13&2;
 var $97=($96|0)==0;
 if($97){label=21;break;}else{var $newp_0=0;label=72;break;}
 case 21: 
 var $99=$13&-8;
 var $100=((($99)+($3))|0);
 var $101=($100>>>0)<($nb>>>0);
 if($101){var $newp_0=0;label=72;break;}else{label=22;break;}
 case 22: 
 var $103=((($100)-($nb))|0);
 var $104=$13>>>3;
 var $105=($13>>>0)<256;
 if($105){label=23;break;}else{label=35;break;}
 case 23: 
 var $_sum17=((($3)+(8))|0);
 var $107=(($4+$_sum17)|0);
 var $108=$107;
 var $109=HEAP32[(($108)>>2)];
 var $_sum18=((($3)+(12))|0);
 var $110=(($4+$_sum18)|0);
 var $111=$110;
 var $112=HEAP32[(($111)>>2)];
 var $113=$104<<1;
 var $114=((9936+($113<<2))|0);
 var $115=$114;
 var $116=($109|0)==($115|0);
 if($116){label=26;break;}else{label=24;break;}
 case 24: 
 var $118=$109;
 var $119=($118>>>0)<($7>>>0);
 if($119){label=34;break;}else{label=25;break;}
 case 25: 
 var $121=(($109+12)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=($122|0)==($6|0);
 if($123){label=26;break;}else{label=34;break;}
 case 26: 
 var $124=($112|0)==($109|0);
 if($124){label=27;break;}else{label=28;break;}
 case 27: 
 var $126=1<<$104;
 var $127=$126^-1;
 var $128=HEAP32[((9896)>>2)];
 var $129=$128&$127;
 HEAP32[((9896)>>2)]=$129;
 label=68;break;
 case 28: 
 var $131=($112|0)==($115|0);
 if($131){label=29;break;}else{label=30;break;}
 case 29: 
 var $_pre=(($112+8)|0);
 var $_pre_phi=$_pre;label=32;break;
 case 30: 
 var $133=$112;
 var $134=($133>>>0)<($7>>>0);
 if($134){label=33;break;}else{label=31;break;}
 case 31: 
 var $136=(($112+8)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=($137|0)==($6|0);
 if($138){var $_pre_phi=$136;label=32;break;}else{label=33;break;}
 case 32: 
 var $_pre_phi;
 var $139=(($109+12)|0);
 HEAP32[(($139)>>2)]=$112;
 HEAP32[(($_pre_phi)>>2)]=$109;
 label=68;break;
 case 33: 
 _abort();
 throw "Reached an unreachable!";
 case 34: 
 _abort();
 throw "Reached an unreachable!";
 case 35: 
 var $141=$5;
 var $_sum=((($3)+(24))|0);
 var $142=(($4+$_sum)|0);
 var $143=$142;
 var $144=HEAP32[(($143)>>2)];
 var $_sum2=((($3)+(12))|0);
 var $145=(($4+$_sum2)|0);
 var $146=$145;
 var $147=HEAP32[(($146)>>2)];
 var $148=($147|0)==($141|0);
 if($148){label=41;break;}else{label=36;break;}
 case 36: 
 var $_sum14=((($3)+(8))|0);
 var $150=(($4+$_sum14)|0);
 var $151=$150;
 var $152=HEAP32[(($151)>>2)];
 var $153=$152;
 var $154=($153>>>0)<($7>>>0);
 if($154){label=40;break;}else{label=37;break;}
 case 37: 
 var $156=(($152+12)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=($157|0)==($141|0);
 if($158){label=38;break;}else{label=40;break;}
 case 38: 
 var $160=(($147+8)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=($161|0)==($141|0);
 if($162){label=39;break;}else{label=40;break;}
 case 39: 
 HEAP32[(($156)>>2)]=$147;
 HEAP32[(($160)>>2)]=$152;
 var $R_1=$147;label=48;break;
 case 40: 
 _abort();
 throw "Reached an unreachable!";
 case 41: 
 var $_sum4=((($3)+(20))|0);
 var $165=(($4+$_sum4)|0);
 var $166=$165;
 var $167=HEAP32[(($166)>>2)];
 var $168=($167|0)==0;
 if($168){label=42;break;}else{var $R_0=$167;var $RP_0=$166;label=43;break;}
 case 42: 
 var $_sum3=((($3)+(16))|0);
 var $170=(($4+$_sum3)|0);
 var $171=$170;
 var $172=HEAP32[(($171)>>2)];
 var $173=($172|0)==0;
 if($173){var $R_1=0;label=48;break;}else{var $R_0=$172;var $RP_0=$171;label=43;break;}
 case 43: 
 var $RP_0;
 var $R_0;
 var $174=(($R_0+20)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($175|0)==0;
 if($176){label=44;break;}else{var $R_0=$175;var $RP_0=$174;label=43;break;}
 case 44: 
 var $178=(($R_0+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($179|0)==0;
 if($180){label=45;break;}else{var $R_0=$179;var $RP_0=$178;label=43;break;}
 case 45: 
 var $182=$RP_0;
 var $183=($182>>>0)<($7>>>0);
 if($183){label=47;break;}else{label=46;break;}
 case 46: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=48;break;
 case 47: 
 _abort();
 throw "Reached an unreachable!";
 case 48: 
 var $R_1;
 var $187=($144|0)==0;
 if($187){label=68;break;}else{label=49;break;}
 case 49: 
 var $_sum11=((($3)+(28))|0);
 var $189=(($4+$_sum11)|0);
 var $190=$189;
 var $191=HEAP32[(($190)>>2)];
 var $192=((10200+($191<<2))|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=($141|0)==($193|0);
 if($194){label=50;break;}else{label=52;break;}
 case 50: 
 HEAP32[(($192)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=51;break;}else{label=58;break;}
 case 51: 
 var $196=1<<$191;
 var $197=$196^-1;
 var $198=HEAP32[((9900)>>2)];
 var $199=$198&$197;
 HEAP32[((9900)>>2)]=$199;
 label=68;break;
 case 52: 
 var $201=$144;
 var $202=HEAP32[((9912)>>2)];
 var $203=($201>>>0)<($202>>>0);
 if($203){label=56;break;}else{label=53;break;}
 case 53: 
 var $205=(($144+16)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=($206|0)==($141|0);
 if($207){label=54;break;}else{label=55;break;}
 case 54: 
 HEAP32[(($205)>>2)]=$R_1;
 label=57;break;
 case 55: 
 var $210=(($144+20)|0);
 HEAP32[(($210)>>2)]=$R_1;
 label=57;break;
 case 56: 
 _abort();
 throw "Reached an unreachable!";
 case 57: 
 var $213=($R_1|0)==0;
 if($213){label=68;break;}else{label=58;break;}
 case 58: 
 var $215=$R_1;
 var $216=HEAP32[((9912)>>2)];
 var $217=($215>>>0)<($216>>>0);
 if($217){label=67;break;}else{label=59;break;}
 case 59: 
 var $219=(($R_1+24)|0);
 HEAP32[(($219)>>2)]=$144;
 var $_sum12=((($3)+(16))|0);
 var $220=(($4+$_sum12)|0);
 var $221=$220;
 var $222=HEAP32[(($221)>>2)];
 var $223=($222|0)==0;
 if($223){label=63;break;}else{label=60;break;}
 case 60: 
 var $225=$222;
 var $226=($225>>>0)<($216>>>0);
 if($226){label=62;break;}else{label=61;break;}
 case 61: 
 var $228=(($R_1+16)|0);
 HEAP32[(($228)>>2)]=$222;
 var $229=(($222+24)|0);
 HEAP32[(($229)>>2)]=$R_1;
 label=63;break;
 case 62: 
 _abort();
 throw "Reached an unreachable!";
 case 63: 
 var $_sum13=((($3)+(20))|0);
 var $232=(($4+$_sum13)|0);
 var $233=$232;
 var $234=HEAP32[(($233)>>2)];
 var $235=($234|0)==0;
 if($235){label=68;break;}else{label=64;break;}
 case 64: 
 var $237=$234;
 var $238=HEAP32[((9912)>>2)];
 var $239=($237>>>0)<($238>>>0);
 if($239){label=66;break;}else{label=65;break;}
 case 65: 
 var $241=(($R_1+20)|0);
 HEAP32[(($241)>>2)]=$234;
 var $242=(($234+24)|0);
 HEAP32[(($242)>>2)]=$R_1;
 label=68;break;
 case 66: 
 _abort();
 throw "Reached an unreachable!";
 case 67: 
 _abort();
 throw "Reached an unreachable!";
 case 68: 
 var $246=($103>>>0)<16;
 if($246){label=69;break;}else{label=70;break;}
 case 69: 
 var $248=$2&1;
 var $249=$100|$248;
 var $250=$249|2;
 HEAP32[(($1)>>2)]=$250;
 var $_sum910=$100|4;
 var $251=(($4+$_sum910)|0);
 var $252=$251;
 var $253=HEAP32[(($252)>>2)];
 var $254=$253|1;
 HEAP32[(($252)>>2)]=$254;
 var $newp_0=$p;label=72;break;
 case 70: 
 var $256=(($4+$nb)|0);
 var $257=$256;
 var $258=$2&1;
 var $259=$258|$nb;
 var $260=$259|2;
 HEAP32[(($1)>>2)]=$260;
 var $_sum5=((($nb)+(4))|0);
 var $261=(($4+$_sum5)|0);
 var $262=$261;
 var $263=$103|3;
 HEAP32[(($262)>>2)]=$263;
 var $_sum78=$100|4;
 var $264=(($4+$_sum78)|0);
 var $265=$264;
 var $266=HEAP32[(($265)>>2)];
 var $267=$266|1;
 HEAP32[(($265)>>2)]=$267;
 _dispose_chunk($257,$103);
 var $newp_0=$p;label=72;break;
 case 71: 
 _abort();
 throw "Reached an unreachable!";
 case 72: 
 var $newp_0;
 return $newp_0;
  default: assert(0, "bad label: " + label);
 }

}


function _dispose_chunk($p,$psize){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$p;
 var $2=(($1+$psize)|0);
 var $3=$2;
 var $4=(($p+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&1;
 var $7=($6|0)==0;
 if($7){label=2;break;}else{var $_0=$p;var $_02=$psize;label=54;break;}
 case 2: 
 var $9=(($p)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$5&3;
 var $12=($11|0)==0;
 if($12){label=134;break;}else{label=3;break;}
 case 3: 
 var $14=(((-$10))|0);
 var $15=(($1+$14)|0);
 var $16=$15;
 var $17=((($10)+($psize))|0);
 var $18=HEAP32[((9912)>>2)];
 var $19=($15>>>0)<($18>>>0);
 if($19){label=53;break;}else{label=4;break;}
 case 4: 
 var $21=HEAP32[((9916)>>2)];
 var $22=($16|0)==($21|0);
 if($22){label=51;break;}else{label=5;break;}
 case 5: 
 var $24=$10>>>3;
 var $25=($10>>>0)<256;
 if($25){label=6;break;}else{label=18;break;}
 case 6: 
 var $_sum35=(((8)-($10))|0);
 var $27=(($1+$_sum35)|0);
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $_sum36=(((12)-($10))|0);
 var $30=(($1+$_sum36)|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$24<<1;
 var $34=((9936+($33<<2))|0);
 var $35=$34;
 var $36=($29|0)==($35|0);
 if($36){label=9;break;}else{label=7;break;}
 case 7: 
 var $38=$29;
 var $39=($38>>>0)<($18>>>0);
 if($39){label=17;break;}else{label=8;break;}
 case 8: 
 var $41=(($29+12)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($42|0)==($16|0);
 if($43){label=9;break;}else{label=17;break;}
 case 9: 
 var $44=($32|0)==($29|0);
 if($44){label=10;break;}else{label=11;break;}
 case 10: 
 var $46=1<<$24;
 var $47=$46^-1;
 var $48=HEAP32[((9896)>>2)];
 var $49=$48&$47;
 HEAP32[((9896)>>2)]=$49;
 var $_0=$16;var $_02=$17;label=54;break;
 case 11: 
 var $51=($32|0)==($35|0);
 if($51){label=12;break;}else{label=13;break;}
 case 12: 
 var $_pre65=(($32+8)|0);
 var $_pre_phi66=$_pre65;label=15;break;
 case 13: 
 var $53=$32;
 var $54=($53>>>0)<($18>>>0);
 if($54){label=16;break;}else{label=14;break;}
 case 14: 
 var $56=(($32+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($57|0)==($16|0);
 if($58){var $_pre_phi66=$56;label=15;break;}else{label=16;break;}
 case 15: 
 var $_pre_phi66;
 var $59=(($29+12)|0);
 HEAP32[(($59)>>2)]=$32;
 HEAP32[(($_pre_phi66)>>2)]=$29;
 var $_0=$16;var $_02=$17;label=54;break;
 case 16: 
 _abort();
 throw "Reached an unreachable!";
 case 17: 
 _abort();
 throw "Reached an unreachable!";
 case 18: 
 var $61=$15;
 var $_sum26=(((24)-($10))|0);
 var $62=(($1+$_sum26)|0);
 var $63=$62;
 var $64=HEAP32[(($63)>>2)];
 var $_sum27=(((12)-($10))|0);
 var $65=(($1+$_sum27)|0);
 var $66=$65;
 var $67=HEAP32[(($66)>>2)];
 var $68=($67|0)==($61|0);
 if($68){label=24;break;}else{label=19;break;}
 case 19: 
 var $_sum33=(((8)-($10))|0);
 var $70=(($1+$_sum33)|0);
 var $71=$70;
 var $72=HEAP32[(($71)>>2)];
 var $73=$72;
 var $74=($73>>>0)<($18>>>0);
 if($74){label=23;break;}else{label=20;break;}
 case 20: 
 var $76=(($72+12)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=($77|0)==($61|0);
 if($78){label=21;break;}else{label=23;break;}
 case 21: 
 var $80=(($67+8)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=($81|0)==($61|0);
 if($82){label=22;break;}else{label=23;break;}
 case 22: 
 HEAP32[(($76)>>2)]=$67;
 HEAP32[(($80)>>2)]=$72;
 var $R_1=$67;label=31;break;
 case 23: 
 _abort();
 throw "Reached an unreachable!";
 case 24: 
 var $_sum28=(((16)-($10))|0);
 var $_sum29=((($_sum28)+(4))|0);
 var $85=(($1+$_sum29)|0);
 var $86=$85;
 var $87=HEAP32[(($86)>>2)];
 var $88=($87|0)==0;
 if($88){label=25;break;}else{var $R_0=$87;var $RP_0=$86;label=26;break;}
 case 25: 
 var $90=(($1+$_sum28)|0);
 var $91=$90;
 var $92=HEAP32[(($91)>>2)];
 var $93=($92|0)==0;
 if($93){var $R_1=0;label=31;break;}else{var $R_0=$92;var $RP_0=$91;label=26;break;}
 case 26: 
 var $RP_0;
 var $R_0;
 var $94=(($R_0+20)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==0;
 if($96){label=27;break;}else{var $R_0=$95;var $RP_0=$94;label=26;break;}
 case 27: 
 var $98=(($R_0+16)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($99|0)==0;
 if($100){label=28;break;}else{var $R_0=$99;var $RP_0=$98;label=26;break;}
 case 28: 
 var $102=$RP_0;
 var $103=($102>>>0)<($18>>>0);
 if($103){label=30;break;}else{label=29;break;}
 case 29: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=31;break;
 case 30: 
 _abort();
 throw "Reached an unreachable!";
 case 31: 
 var $R_1;
 var $107=($64|0)==0;
 if($107){var $_0=$16;var $_02=$17;label=54;break;}else{label=32;break;}
 case 32: 
 var $_sum30=(((28)-($10))|0);
 var $109=(($1+$_sum30)|0);
 var $110=$109;
 var $111=HEAP32[(($110)>>2)];
 var $112=((10200+($111<<2))|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($61|0)==($113|0);
 if($114){label=33;break;}else{label=35;break;}
 case 33: 
 HEAP32[(($112)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=34;break;}else{label=41;break;}
 case 34: 
 var $116=1<<$111;
 var $117=$116^-1;
 var $118=HEAP32[((9900)>>2)];
 var $119=$118&$117;
 HEAP32[((9900)>>2)]=$119;
 var $_0=$16;var $_02=$17;label=54;break;
 case 35: 
 var $121=$64;
 var $122=HEAP32[((9912)>>2)];
 var $123=($121>>>0)<($122>>>0);
 if($123){label=39;break;}else{label=36;break;}
 case 36: 
 var $125=(($64+16)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=($126|0)==($61|0);
 if($127){label=37;break;}else{label=38;break;}
 case 37: 
 HEAP32[(($125)>>2)]=$R_1;
 label=40;break;
 case 38: 
 var $130=(($64+20)|0);
 HEAP32[(($130)>>2)]=$R_1;
 label=40;break;
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $133=($R_1|0)==0;
 if($133){var $_0=$16;var $_02=$17;label=54;break;}else{label=41;break;}
 case 41: 
 var $135=$R_1;
 var $136=HEAP32[((9912)>>2)];
 var $137=($135>>>0)<($136>>>0);
 if($137){label=50;break;}else{label=42;break;}
 case 42: 
 var $139=(($R_1+24)|0);
 HEAP32[(($139)>>2)]=$64;
 var $_sum31=(((16)-($10))|0);
 var $140=(($1+$_sum31)|0);
 var $141=$140;
 var $142=HEAP32[(($141)>>2)];
 var $143=($142|0)==0;
 if($143){label=46;break;}else{label=43;break;}
 case 43: 
 var $145=$142;
 var $146=($145>>>0)<($136>>>0);
 if($146){label=45;break;}else{label=44;break;}
 case 44: 
 var $148=(($R_1+16)|0);
 HEAP32[(($148)>>2)]=$142;
 var $149=(($142+24)|0);
 HEAP32[(($149)>>2)]=$R_1;
 label=46;break;
 case 45: 
 _abort();
 throw "Reached an unreachable!";
 case 46: 
 var $_sum32=((($_sum31)+(4))|0);
 var $152=(($1+$_sum32)|0);
 var $153=$152;
 var $154=HEAP32[(($153)>>2)];
 var $155=($154|0)==0;
 if($155){var $_0=$16;var $_02=$17;label=54;break;}else{label=47;break;}
 case 47: 
 var $157=$154;
 var $158=HEAP32[((9912)>>2)];
 var $159=($157>>>0)<($158>>>0);
 if($159){label=49;break;}else{label=48;break;}
 case 48: 
 var $161=(($R_1+20)|0);
 HEAP32[(($161)>>2)]=$154;
 var $162=(($154+24)|0);
 HEAP32[(($162)>>2)]=$R_1;
 var $_0=$16;var $_02=$17;label=54;break;
 case 49: 
 _abort();
 throw "Reached an unreachable!";
 case 50: 
 _abort();
 throw "Reached an unreachable!";
 case 51: 
 var $_sum=((($psize)+(4))|0);
 var $166=(($1+$_sum)|0);
 var $167=$166;
 var $168=HEAP32[(($167)>>2)];
 var $169=$168&3;
 var $170=($169|0)==3;
 if($170){label=52;break;}else{var $_0=$16;var $_02=$17;label=54;break;}
 case 52: 
 HEAP32[((9904)>>2)]=$17;
 var $172=$168&-2;
 HEAP32[(($167)>>2)]=$172;
 var $173=$17|1;
 var $_sum24=(((4)-($10))|0);
 var $174=(($1+$_sum24)|0);
 var $175=$174;
 HEAP32[(($175)>>2)]=$173;
 var $176=$2;
 HEAP32[(($176)>>2)]=$17;
 label=134;break;
 case 53: 
 _abort();
 throw "Reached an unreachable!";
 case 54: 
 var $_02;
 var $_0;
 var $179=HEAP32[((9912)>>2)];
 var $180=($2>>>0)<($179>>>0);
 if($180){label=133;break;}else{label=55;break;}
 case 55: 
 var $_sum1=((($psize)+(4))|0);
 var $182=(($1+$_sum1)|0);
 var $183=$182;
 var $184=HEAP32[(($183)>>2)];
 var $185=$184&2;
 var $186=($185|0)==0;
 if($186){label=56;break;}else{label=109;break;}
 case 56: 
 var $188=HEAP32[((9920)>>2)];
 var $189=($3|0)==($188|0);
 if($189){label=57;break;}else{label=59;break;}
 case 57: 
 var $191=HEAP32[((9908)>>2)];
 var $192=((($191)+($_02))|0);
 HEAP32[((9908)>>2)]=$192;
 HEAP32[((9920)>>2)]=$_0;
 var $193=$192|1;
 var $194=(($_0+4)|0);
 HEAP32[(($194)>>2)]=$193;
 var $195=HEAP32[((9916)>>2)];
 var $196=($_0|0)==($195|0);
 if($196){label=58;break;}else{label=134;break;}
 case 58: 
 HEAP32[((9916)>>2)]=0;
 HEAP32[((9904)>>2)]=0;
 label=134;break;
 case 59: 
 var $199=HEAP32[((9916)>>2)];
 var $200=($3|0)==($199|0);
 if($200){label=60;break;}else{label=61;break;}
 case 60: 
 var $202=HEAP32[((9904)>>2)];
 var $203=((($202)+($_02))|0);
 HEAP32[((9904)>>2)]=$203;
 HEAP32[((9916)>>2)]=$_0;
 var $204=$203|1;
 var $205=(($_0+4)|0);
 HEAP32[(($205)>>2)]=$204;
 var $206=$_0;
 var $207=(($206+$203)|0);
 var $208=$207;
 HEAP32[(($208)>>2)]=$203;
 label=134;break;
 case 61: 
 var $210=$184&-8;
 var $211=((($210)+($_02))|0);
 var $212=$184>>>3;
 var $213=($184>>>0)<256;
 if($213){label=62;break;}else{label=74;break;}
 case 62: 
 var $_sum20=((($psize)+(8))|0);
 var $215=(($1+$_sum20)|0);
 var $216=$215;
 var $217=HEAP32[(($216)>>2)];
 var $_sum21=((($psize)+(12))|0);
 var $218=(($1+$_sum21)|0);
 var $219=$218;
 var $220=HEAP32[(($219)>>2)];
 var $221=$212<<1;
 var $222=((9936+($221<<2))|0);
 var $223=$222;
 var $224=($217|0)==($223|0);
 if($224){label=65;break;}else{label=63;break;}
 case 63: 
 var $226=$217;
 var $227=($226>>>0)<($179>>>0);
 if($227){label=73;break;}else{label=64;break;}
 case 64: 
 var $229=(($217+12)|0);
 var $230=HEAP32[(($229)>>2)];
 var $231=($230|0)==($3|0);
 if($231){label=65;break;}else{label=73;break;}
 case 65: 
 var $232=($220|0)==($217|0);
 if($232){label=66;break;}else{label=67;break;}
 case 66: 
 var $234=1<<$212;
 var $235=$234^-1;
 var $236=HEAP32[((9896)>>2)];
 var $237=$236&$235;
 HEAP32[((9896)>>2)]=$237;
 label=107;break;
 case 67: 
 var $239=($220|0)==($223|0);
 if($239){label=68;break;}else{label=69;break;}
 case 68: 
 var $_pre63=(($220+8)|0);
 var $_pre_phi64=$_pre63;label=71;break;
 case 69: 
 var $241=$220;
 var $242=($241>>>0)<($179>>>0);
 if($242){label=72;break;}else{label=70;break;}
 case 70: 
 var $244=(($220+8)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=($245|0)==($3|0);
 if($246){var $_pre_phi64=$244;label=71;break;}else{label=72;break;}
 case 71: 
 var $_pre_phi64;
 var $247=(($217+12)|0);
 HEAP32[(($247)>>2)]=$220;
 HEAP32[(($_pre_phi64)>>2)]=$217;
 label=107;break;
 case 72: 
 _abort();
 throw "Reached an unreachable!";
 case 73: 
 _abort();
 throw "Reached an unreachable!";
 case 74: 
 var $249=$2;
 var $_sum2=((($psize)+(24))|0);
 var $250=(($1+$_sum2)|0);
 var $251=$250;
 var $252=HEAP32[(($251)>>2)];
 var $_sum3=((($psize)+(12))|0);
 var $253=(($1+$_sum3)|0);
 var $254=$253;
 var $255=HEAP32[(($254)>>2)];
 var $256=($255|0)==($249|0);
 if($256){label=80;break;}else{label=75;break;}
 case 75: 
 var $_sum18=((($psize)+(8))|0);
 var $258=(($1+$_sum18)|0);
 var $259=$258;
 var $260=HEAP32[(($259)>>2)];
 var $261=$260;
 var $262=($261>>>0)<($179>>>0);
 if($262){label=79;break;}else{label=76;break;}
 case 76: 
 var $264=(($260+12)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=($265|0)==($249|0);
 if($266){label=77;break;}else{label=79;break;}
 case 77: 
 var $268=(($255+8)|0);
 var $269=HEAP32[(($268)>>2)];
 var $270=($269|0)==($249|0);
 if($270){label=78;break;}else{label=79;break;}
 case 78: 
 HEAP32[(($264)>>2)]=$255;
 HEAP32[(($268)>>2)]=$260;
 var $R7_1=$255;label=87;break;
 case 79: 
 _abort();
 throw "Reached an unreachable!";
 case 80: 
 var $_sum5=((($psize)+(20))|0);
 var $273=(($1+$_sum5)|0);
 var $274=$273;
 var $275=HEAP32[(($274)>>2)];
 var $276=($275|0)==0;
 if($276){label=81;break;}else{var $R7_0=$275;var $RP9_0=$274;label=82;break;}
 case 81: 
 var $_sum4=((($psize)+(16))|0);
 var $278=(($1+$_sum4)|0);
 var $279=$278;
 var $280=HEAP32[(($279)>>2)];
 var $281=($280|0)==0;
 if($281){var $R7_1=0;label=87;break;}else{var $R7_0=$280;var $RP9_0=$279;label=82;break;}
 case 82: 
 var $RP9_0;
 var $R7_0;
 var $282=(($R7_0+20)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=($283|0)==0;
 if($284){label=83;break;}else{var $R7_0=$283;var $RP9_0=$282;label=82;break;}
 case 83: 
 var $286=(($R7_0+16)|0);
 var $287=HEAP32[(($286)>>2)];
 var $288=($287|0)==0;
 if($288){label=84;break;}else{var $R7_0=$287;var $RP9_0=$286;label=82;break;}
 case 84: 
 var $290=$RP9_0;
 var $291=($290>>>0)<($179>>>0);
 if($291){label=86;break;}else{label=85;break;}
 case 85: 
 HEAP32[(($RP9_0)>>2)]=0;
 var $R7_1=$R7_0;label=87;break;
 case 86: 
 _abort();
 throw "Reached an unreachable!";
 case 87: 
 var $R7_1;
 var $295=($252|0)==0;
 if($295){label=107;break;}else{label=88;break;}
 case 88: 
 var $_sum15=((($psize)+(28))|0);
 var $297=(($1+$_sum15)|0);
 var $298=$297;
 var $299=HEAP32[(($298)>>2)];
 var $300=((10200+($299<<2))|0);
 var $301=HEAP32[(($300)>>2)];
 var $302=($249|0)==($301|0);
 if($302){label=89;break;}else{label=91;break;}
 case 89: 
 HEAP32[(($300)>>2)]=$R7_1;
 var $cond53=($R7_1|0)==0;
 if($cond53){label=90;break;}else{label=97;break;}
 case 90: 
 var $304=1<<$299;
 var $305=$304^-1;
 var $306=HEAP32[((9900)>>2)];
 var $307=$306&$305;
 HEAP32[((9900)>>2)]=$307;
 label=107;break;
 case 91: 
 var $309=$252;
 var $310=HEAP32[((9912)>>2)];
 var $311=($309>>>0)<($310>>>0);
 if($311){label=95;break;}else{label=92;break;}
 case 92: 
 var $313=(($252+16)|0);
 var $314=HEAP32[(($313)>>2)];
 var $315=($314|0)==($249|0);
 if($315){label=93;break;}else{label=94;break;}
 case 93: 
 HEAP32[(($313)>>2)]=$R7_1;
 label=96;break;
 case 94: 
 var $318=(($252+20)|0);
 HEAP32[(($318)>>2)]=$R7_1;
 label=96;break;
 case 95: 
 _abort();
 throw "Reached an unreachable!";
 case 96: 
 var $321=($R7_1|0)==0;
 if($321){label=107;break;}else{label=97;break;}
 case 97: 
 var $323=$R7_1;
 var $324=HEAP32[((9912)>>2)];
 var $325=($323>>>0)<($324>>>0);
 if($325){label=106;break;}else{label=98;break;}
 case 98: 
 var $327=(($R7_1+24)|0);
 HEAP32[(($327)>>2)]=$252;
 var $_sum16=((($psize)+(16))|0);
 var $328=(($1+$_sum16)|0);
 var $329=$328;
 var $330=HEAP32[(($329)>>2)];
 var $331=($330|0)==0;
 if($331){label=102;break;}else{label=99;break;}
 case 99: 
 var $333=$330;
 var $334=($333>>>0)<($324>>>0);
 if($334){label=101;break;}else{label=100;break;}
 case 100: 
 var $336=(($R7_1+16)|0);
 HEAP32[(($336)>>2)]=$330;
 var $337=(($330+24)|0);
 HEAP32[(($337)>>2)]=$R7_1;
 label=102;break;
 case 101: 
 _abort();
 throw "Reached an unreachable!";
 case 102: 
 var $_sum17=((($psize)+(20))|0);
 var $340=(($1+$_sum17)|0);
 var $341=$340;
 var $342=HEAP32[(($341)>>2)];
 var $343=($342|0)==0;
 if($343){label=107;break;}else{label=103;break;}
 case 103: 
 var $345=$342;
 var $346=HEAP32[((9912)>>2)];
 var $347=($345>>>0)<($346>>>0);
 if($347){label=105;break;}else{label=104;break;}
 case 104: 
 var $349=(($R7_1+20)|0);
 HEAP32[(($349)>>2)]=$342;
 var $350=(($342+24)|0);
 HEAP32[(($350)>>2)]=$R7_1;
 label=107;break;
 case 105: 
 _abort();
 throw "Reached an unreachable!";
 case 106: 
 _abort();
 throw "Reached an unreachable!";
 case 107: 
 var $354=$211|1;
 var $355=(($_0+4)|0);
 HEAP32[(($355)>>2)]=$354;
 var $356=$_0;
 var $357=(($356+$211)|0);
 var $358=$357;
 HEAP32[(($358)>>2)]=$211;
 var $359=HEAP32[((9916)>>2)];
 var $360=($_0|0)==($359|0);
 if($360){label=108;break;}else{var $_1=$211;label=110;break;}
 case 108: 
 HEAP32[((9904)>>2)]=$211;
 label=134;break;
 case 109: 
 var $363=$184&-2;
 HEAP32[(($183)>>2)]=$363;
 var $364=$_02|1;
 var $365=(($_0+4)|0);
 HEAP32[(($365)>>2)]=$364;
 var $366=$_0;
 var $367=(($366+$_02)|0);
 var $368=$367;
 HEAP32[(($368)>>2)]=$_02;
 var $_1=$_02;label=110;break;
 case 110: 
 var $_1;
 var $370=$_1>>>3;
 var $371=($_1>>>0)<256;
 if($371){label=111;break;}else{label=116;break;}
 case 111: 
 var $373=$370<<1;
 var $374=((9936+($373<<2))|0);
 var $375=$374;
 var $376=HEAP32[((9896)>>2)];
 var $377=1<<$370;
 var $378=$376&$377;
 var $379=($378|0)==0;
 if($379){label=112;break;}else{label=113;break;}
 case 112: 
 var $381=$376|$377;
 HEAP32[((9896)>>2)]=$381;
 var $_sum13_pre=((($373)+(2))|0);
 var $_pre=((9936+($_sum13_pre<<2))|0);
 var $F16_0=$375;var $_pre_phi=$_pre;label=115;break;
 case 113: 
 var $_sum14=((($373)+(2))|0);
 var $383=((9936+($_sum14<<2))|0);
 var $384=HEAP32[(($383)>>2)];
 var $385=$384;
 var $386=HEAP32[((9912)>>2)];
 var $387=($385>>>0)<($386>>>0);
 if($387){label=114;break;}else{var $F16_0=$384;var $_pre_phi=$383;label=115;break;}
 case 114: 
 _abort();
 throw "Reached an unreachable!";
 case 115: 
 var $_pre_phi;
 var $F16_0;
 HEAP32[(($_pre_phi)>>2)]=$_0;
 var $390=(($F16_0+12)|0);
 HEAP32[(($390)>>2)]=$_0;
 var $391=(($_0+8)|0);
 HEAP32[(($391)>>2)]=$F16_0;
 var $392=(($_0+12)|0);
 HEAP32[(($392)>>2)]=$375;
 label=134;break;
 case 116: 
 var $394=$_0;
 var $395=$_1>>>8;
 var $396=($395|0)==0;
 if($396){var $I19_0=0;label=119;break;}else{label=117;break;}
 case 117: 
 var $398=($_1>>>0)>16777215;
 if($398){var $I19_0=31;label=119;break;}else{label=118;break;}
 case 118: 
 var $400=((($395)+(1048320))|0);
 var $401=$400>>>16;
 var $402=$401&8;
 var $403=$395<<$402;
 var $404=((($403)+(520192))|0);
 var $405=$404>>>16;
 var $406=$405&4;
 var $407=$406|$402;
 var $408=$403<<$406;
 var $409=((($408)+(245760))|0);
 var $410=$409>>>16;
 var $411=$410&2;
 var $412=$407|$411;
 var $413=(((14)-($412))|0);
 var $414=$408<<$411;
 var $415=$414>>>15;
 var $416=((($413)+($415))|0);
 var $417=$416<<1;
 var $418=((($416)+(7))|0);
 var $419=$_1>>>($418>>>0);
 var $420=$419&1;
 var $421=$420|$417;
 var $I19_0=$421;label=119;break;
 case 119: 
 var $I19_0;
 var $423=((10200+($I19_0<<2))|0);
 var $424=(($_0+28)|0);
 var $I19_0_c=$I19_0;
 HEAP32[(($424)>>2)]=$I19_0_c;
 var $425=(($_0+20)|0);
 HEAP32[(($425)>>2)]=0;
 var $426=(($_0+16)|0);
 HEAP32[(($426)>>2)]=0;
 var $427=HEAP32[((9900)>>2)];
 var $428=1<<$I19_0;
 var $429=$427&$428;
 var $430=($429|0)==0;
 if($430){label=120;break;}else{label=121;break;}
 case 120: 
 var $432=$427|$428;
 HEAP32[((9900)>>2)]=$432;
 HEAP32[(($423)>>2)]=$394;
 var $433=(($_0+24)|0);
 var $_c=$423;
 HEAP32[(($433)>>2)]=$_c;
 var $434=(($_0+12)|0);
 HEAP32[(($434)>>2)]=$_0;
 var $435=(($_0+8)|0);
 HEAP32[(($435)>>2)]=$_0;
 label=134;break;
 case 121: 
 var $437=HEAP32[(($423)>>2)];
 var $438=($I19_0|0)==31;
 if($438){var $443=0;label=123;break;}else{label=122;break;}
 case 122: 
 var $440=$I19_0>>>1;
 var $441=(((25)-($440))|0);
 var $443=$441;label=123;break;
 case 123: 
 var $443;
 var $444=(($437+4)|0);
 var $445=HEAP32[(($444)>>2)];
 var $446=$445&-8;
 var $447=($446|0)==($_1|0);
 if($447){var $T_0_lcssa=$437;label=130;break;}else{label=124;break;}
 case 124: 
 var $448=$_1<<$443;
 var $T_056=$437;var $K20_057=$448;label=126;break;
 case 125: 
 var $450=$K20_057<<1;
 var $451=(($458+4)|0);
 var $452=HEAP32[(($451)>>2)];
 var $453=$452&-8;
 var $454=($453|0)==($_1|0);
 if($454){var $T_0_lcssa=$458;label=130;break;}else{var $T_056=$458;var $K20_057=$450;label=126;break;}
 case 126: 
 var $K20_057;
 var $T_056;
 var $456=$K20_057>>>31;
 var $457=(($T_056+16+($456<<2))|0);
 var $458=HEAP32[(($457)>>2)];
 var $459=($458|0)==0;
 if($459){label=127;break;}else{label=125;break;}
 case 127: 
 var $461=$457;
 var $462=HEAP32[((9912)>>2)];
 var $463=($461>>>0)<($462>>>0);
 if($463){label=129;break;}else{label=128;break;}
 case 128: 
 HEAP32[(($457)>>2)]=$394;
 var $465=(($_0+24)|0);
 var $T_0_c10=$T_056;
 HEAP32[(($465)>>2)]=$T_0_c10;
 var $466=(($_0+12)|0);
 HEAP32[(($466)>>2)]=$_0;
 var $467=(($_0+8)|0);
 HEAP32[(($467)>>2)]=$_0;
 label=134;break;
 case 129: 
 _abort();
 throw "Reached an unreachable!";
 case 130: 
 var $T_0_lcssa;
 var $469=(($T_0_lcssa+8)|0);
 var $470=HEAP32[(($469)>>2)];
 var $471=$T_0_lcssa;
 var $472=HEAP32[((9912)>>2)];
 var $473=($471>>>0)>=($472>>>0);
 var $474=$470;
 var $475=($474>>>0)>=($472>>>0);
 var $or_cond=$473&$475;
 if($or_cond){label=131;break;}else{label=132;break;}
 case 131: 
 var $477=(($470+12)|0);
 HEAP32[(($477)>>2)]=$394;
 HEAP32[(($469)>>2)]=$394;
 var $478=(($_0+8)|0);
 var $_c9=$470;
 HEAP32[(($478)>>2)]=$_c9;
 var $479=(($_0+12)|0);
 var $T_0_c=$T_0_lcssa;
 HEAP32[(($479)>>2)]=$T_0_c;
 var $480=(($_0+24)|0);
 HEAP32[(($480)>>2)]=0;
 label=134;break;
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 _abort();
 throw "Reached an unreachable!";
 case 134: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function _scanexp($f,$pok){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($f+100)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2>>>0)<($4>>>0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=(($2+1)|0);
 HEAP32[(($1)>>2)]=$7;
 var $8=HEAP8[($2)];
 var $9=($8&255);
 var $13=$9;label=4;break;
 case 3: 
 var $11=___shgetc($f);
 var $13=$11;label=4;break;
 case 4: 
 var $13;
 var $14=($13|0)==45;
 if(($13|0)==45|($13|0)==43){ label=5;break;}else{var $neg_0=0;var $c_0=$13;label=11;break;}
 case 5: 
 var $15=HEAP32[(($1)>>2)];
 var $16=($14&1);
 var $17=HEAP32[(($3)>>2)];
 var $18=($15>>>0)<($17>>>0);
 if($18){label=6;break;}else{label=7;break;}
 case 6: 
 var $20=(($15+1)|0);
 HEAP32[(($1)>>2)]=$20;
 var $21=HEAP8[($15)];
 var $22=($21&255);
 var $26=$22;label=8;break;
 case 7: 
 var $24=___shgetc($f);
 var $26=$24;label=8;break;
 case 8: 
 var $26;
 var $27=((($26)-(48))|0);
 var $28=($27>>>0)>9;
 var $29=($pok|0)!=0;
 var $or_cond3=$28&$29;
 if($or_cond3){label=9;break;}else{var $neg_0=$16;var $c_0=$26;label=11;break;}
 case 9: 
 var $31=HEAP32[(($3)>>2)];
 var $32=($31|0)==0;
 if($32){var $neg_0=$16;var $c_0=$26;label=11;break;}else{label=10;break;}
 case 10: 
 var $34=HEAP32[(($1)>>2)];
 var $35=((($34)-(1))|0);
 HEAP32[(($1)>>2)]=$35;
 var $neg_0=$16;var $c_0=$26;label=11;break;
 case 11: 
 var $c_0;
 var $neg_0;
 var $37=((($c_0)-(48))|0);
 var $38=($37>>>0)>9;
 if($38){label=12;break;}else{var $c_116=$c_0;var $x_017=0;label=14;break;}
 case 12: 
 var $40=HEAP32[(($3)>>2)];
 var $41=($40|0)==0;
 if($41){var $_0$1=-2147483648;var $_0$0=0;label=31;break;}else{label=13;break;}
 case 13: 
 var $43=HEAP32[(($1)>>2)];
 var $44=((($43)-(1))|0);
 HEAP32[(($1)>>2)]=$44;
 var $_0$1=-2147483648;var $_0$0=0;label=31;break;
 case 14: 
 var $x_017;
 var $c_116;
 var $45=((($x_017)*(10))&-1);
 var $46=((($c_116)-(48))|0);
 var $47=((($46)+($45))|0);
 var $48=HEAP32[(($1)>>2)];
 var $49=HEAP32[(($3)>>2)];
 var $50=($48>>>0)<($49>>>0);
 if($50){label=15;break;}else{label=16;break;}
 case 15: 
 var $52=(($48+1)|0);
 HEAP32[(($1)>>2)]=$52;
 var $53=HEAP8[($48)];
 var $54=($53&255);
 var $c_1_be=$54;label=17;break;
 case 16: 
 var $56=___shgetc($f);
 var $c_1_be=$56;label=17;break;
 case 17: 
 var $c_1_be;
 var $57=((($c_1_be)-(48))|0);
 var $58=($57>>>0)<10;
 var $59=($47|0)<214748364;
 var $or_cond5=$58&$59;
 if($or_cond5){var $c_116=$c_1_be;var $x_017=$47;label=14;break;}else{label=18;break;}
 case 18: 
 var $phitmp$0=$47;
 var $phitmp$1=((((($47|0)<0))|0)?-1:0);
 var $61=((($c_1_be)-(48))|0);
 var $62=($61>>>0)<10;
 if($62){var $c_29=$c_1_be;var $y_010$1=$phitmp$1;var $y_010$0=$phitmp$0;label=20;break;}else{var $c_2_lcssa=$c_1_be;var $y_0_lcssa$1=$phitmp$1;var $y_0_lcssa$0=$phitmp$0;label=19;break;}
 case 19: 
 var $y_0_lcssa$0;
 var $y_0_lcssa$1;
 var $c_2_lcssa;
 var $63=((($c_2_lcssa)-(48))|0);
 var $64=($63>>>0)<10;
 if($64){label=24;break;}else{label=28;break;}
 case 20: 
 var $y_010$0;
 var $y_010$1;
 var $c_29;
 var $$etemp$0$0=10;
 var $$etemp$0$1=0;
 var $65$0=___muldi3($y_010$0,$y_010$1,$$etemp$0$0,$$etemp$0$1);var $65$1=tempRet0;
 var $66$0=$c_29;
 var $66$1=((((($c_29|0)<0))|0)?-1:0);
 var $$etemp$1$0=-48;
 var $$etemp$1$1=-1;
 var $67$0=_i64Add($66$0,$66$1,$$etemp$1$0,$$etemp$1$1);var $67$1=tempRet0;
 var $68$0=_i64Add($67$0,$67$1,$65$0,$65$1);var $68$1=tempRet0;
 var $69=HEAP32[(($1)>>2)];
 var $70=HEAP32[(($3)>>2)];
 var $71=($69>>>0)<($70>>>0);
 if($71){label=21;break;}else{label=22;break;}
 case 21: 
 var $73=(($69+1)|0);
 HEAP32[(($1)>>2)]=$73;
 var $74=HEAP8[($69)];
 var $75=($74&255);
 var $c_2_be=$75;label=23;break;
 case 22: 
 var $77=___shgetc($f);
 var $c_2_be=$77;label=23;break;
 case 23: 
 var $c_2_be;
 var $78=((($c_2_be)-(48))|0);
 var $79=($78>>>0)<10;
 var $$etemp$2$0=2061584302;
 var $$etemp$2$1=21474836;
 var $80=(($68$1|0) < ($$etemp$2$1|0)) | (((($68$1|0) == ($$etemp$2$1|0) & ($68$0>>>0) <  ($$etemp$2$0>>>0))));
 var $or_cond7=$79&$80;
 if($or_cond7){var $c_29=$c_2_be;var $y_010$1=$68$1;var $y_010$0=$68$0;label=20;break;}else{var $c_2_lcssa=$c_2_be;var $y_0_lcssa$1=$68$1;var $y_0_lcssa$0=$68$0;label=19;break;}
 case 24: 
 var $81=HEAP32[(($1)>>2)];
 var $82=HEAP32[(($3)>>2)];
 var $83=($81>>>0)<($82>>>0);
 if($83){label=25;break;}else{label=26;break;}
 case 25: 
 var $85=(($81+1)|0);
 HEAP32[(($1)>>2)]=$85;
 var $86=HEAP8[($81)];
 var $87=($86&255);
 var $c_3_be=$87;label=27;break;
 case 26: 
 var $89=___shgetc($f);
 var $c_3_be=$89;label=27;break;
 case 27: 
 var $c_3_be;
 var $90=((($c_3_be)-(48))|0);
 var $91=($90>>>0)<10;
 if($91){label=24;break;}else{label=28;break;}
 case 28: 
 var $92=HEAP32[(($3)>>2)];
 var $93=($92|0)==0;
 if($93){label=30;break;}else{label=29;break;}
 case 29: 
 var $95=HEAP32[(($1)>>2)];
 var $96=((($95)-(1))|0);
 HEAP32[(($1)>>2)]=$96;
 label=30;break;
 case 30: 
 var $98=($neg_0|0)!=0;
 var $$etemp$3$0=0;
 var $$etemp$3$1=0;
 var $99$0=_i64Subtract($$etemp$3$0,$$etemp$3$1,$y_0_lcssa$0,$y_0_lcssa$1);var $99$1=tempRet0;
 var $100$0=($98?$99$0:$y_0_lcssa$0);
 var $100$1=($98?$99$1:$y_0_lcssa$1);
 var $_0$1=$100$1;var $_0$0=$100$0;label=31;break;
 case 31: 
 var $_0$0;
 var $_0$1;
 return (tempRet0=$_0$1,$_0$0);
  default: assert(0, "bad label: " + label);
 }

}



// EMSCRIPTEN_END_FUNCS
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return tempRet0 = h,l|0;
  }
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return tempRet0 = h,l|0;
  }
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
  }
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
  }
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((ctlz_i8)+(x >>> 24))|0)];
    if ((ret|0) < 8) return ret|0;
    ret = HEAP8[(((ctlz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = HEAP8[(((ctlz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((ctlz_i8)+(x&0xff))|0)] + 24)|0;
  }
/* PRE_ASM */ var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((cttz_i8)+(x & 0xff))|0)];
    if ((ret|0) < 8) return ret|0;
    ret = HEAP8[(((cttz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = HEAP8[(((cttz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((cttz_i8)+(x >>> 24))|0)] + 24)|0;
  }
/* PRE_ASM */ var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================


// EMSCRIPTEN_END_FUNCS

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
    Module.printErr('preload time: ' + (Date.now() - preloadStartTime) + ' ms');
  }

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  throw 'abort() at ' + stackTrace();
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



//@ sourceMappingURL=index.html.map